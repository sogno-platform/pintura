(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('handlebars/runtime.js'), require('handlebars/runtime')) :
  typeof define === 'function' && define.amd ? define(['exports', 'handlebars/runtime.js', 'handlebars/runtime'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.libcimmenu = global.libcimmenu || {}, global.libcimmenu.umd = {}), global.Handlebars, global.Handlebars));
})(this, (function (exports, Handlebars, runtime) { 'use strict';

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
        result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }

  // Sourced from lodash
  // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
  /* eslint-disable func-style */
  var isFunction = function isFunction(value) {
    return typeof value === "function";
  };

  // Custom each based on Handlebars each
  // https://github.com/wycats/handlebars.js/blob/master/lib/handlebars/helpers/each.js
  var customEachFunction = function customEachFunction(context, options, customize) {
    if (!options) {
      throw new runtime.Exception("Must pass iterator to #each");
    }
    var fn = options.fn,
      inverse = options.inverse,
      i = 0,
      ret = "",
      data;
    if (isFunction(context)) {
      context = context.call(this);
    }
    if (options.data) {
      data = runtime.createFrame(options.data);
    }
    function execIteration(field, index, last) {
      if (data) {
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;
      }
      ret = ret + fn(context[field], {
        data: data,
        blockParams: [context[field], field]
      });
    }
    if (context && _typeof(context) === "object") {
      if (Array.isArray(context)) {
        for (var j = context.length; i < j; i++) {
          if (i in context) {
            execIteration(i, i, i === context.length - 1);
          }
        }
      } else {
        var priorKey;
        var customizedContext = customize(context);
        for (var key in customizedContext) {
          var hasOwnProp = Object.prototype.hasOwnProperty.call(customizedContext, key);
          if (hasOwnProp) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array.
            if (priorKey !== undefined) {
              execIteration(priorKey, i - 1);
            }
            priorKey = key;
            i++;
          }
        }
        if (priorKey !== undefined) {
          execIteration(priorKey, i - 1, true);
        }
      }
    }
    if (i === 0) {
      ret = inverse(this);
    }
    return ret;
  };

  /*
   *  Copyright Â© 2016-2017, RWTH Aachen University
   *  Authors: Richard Marston
   *  SPDX-License-Identifier: MPL-2.0
   */
  var common = /*#__PURE__*/function () {
    function common() {
      _classCallCheck(this, common);
    }
    _createClass(common, null, [{
      key: "generateUUID",
      value:
      /*
       * Start of Public Domain/MIT section.
       * Taken from https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
       */
      function generateUUID() {
        var d = new Date().getTime();
        if (typeof performance !== "undefined" && typeof performance.now === "function") {
          d += performance.now(); //use high-precision timer if available
        }

        return "idxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
          var r = (d + Math.random() * 16) % 16 | 0;
          d = Math.floor(d / 16);
          return (c === "x" ? r : r & 0x3 | 0x8).toString(16);
        });
      }
      /*
       * End of Public Domain/MIT function
       */
    }, {
      key: "emptylog",
      value: function emptylog() {}
    }, {
      key: "removeClass",
      value: function removeClass(str) {
        var colonTokens = str.split(":");
        if (colonTokens.length == 2) {
          var dotTokens = colonTokens[1].split(".");
          if (dotTokens.length == 2) {
            var nameOnly = dotTokens[1];
            if (nameOnly.length > 14) {
              nameOnly = nameOnly.substring(0, 12) + "..";
            }
            return nameOnly;
          }
        }
        return str;
      }
    }, {
      key: "removeColon",
      value: function removeColon(str) {
        return str.replace(":", "");
      }
    }, {
      key: "addClassToNode",
      value: function addClassToNode(node, selector, newClass) {
        var list = node.querySelectorAll(selector);
        list.forEach(function (item) {
          item.classList.add(newClass);
        });
      }
    }, {
      key: "removeClassFromNode",
      value: function removeClassFromNode(node, selector, removeClass) {
        var list = node.querySelectorAll(selector);
        list.forEach(function (item) {
          item.classList.remove(removeClass);
        });
      }
    }, {
      key: "safeExtract",
      value: function safeExtract(graph) {
        var object = graph;
        var args = Array.prototype.slice.call(arguments, 1);
        for (var arg in args) {
          var argument = args[arg];
          if (object !== undefined) {
            object = object[argument];
          } else {
            return undefined;
          }
        }
        return object;
      }
    }, {
      key: "safeDelete",
      value: function safeDelete(graph) {
        var object = graph;
        var owner = undefined;
        var key = undefined;
        var args = Array.prototype.slice.call(arguments, 1);
        for (var arg in args) {
          var argument = args[arg];
          if (object !== undefined) {
            owner = object;
            key = argument;
            object = object[argument];
          } else {
            return undefined;
          }
        }
        delete owner[key];
      }
    }, {
      key: "getObjectTypeFromId",
      value: function getObjectTypeFromId(graph, id) {
        for (var type in graph) {
          for (var _id in graph[type]) {
            if (_id === id) {
              return type;
            }
          }
        }
        return undefined;
      }
    }, {
      key: "pinturaDiagramObjectPoints",
      value: function pinturaDiagramObjectPoints() {
        return "pintura:diagramObjectPoints";
      }
    }, {
      key: "pinturaDiagramObject",
      value: function pinturaDiagramObject() {
        return "pintura:diagramObject";
      }
    }, {
      key: "pinturaRdfid",
      value: function pinturaRdfid() {
        return "pintura:rdfid";
      }
    }, {
      key: "pinturaTerminals",
      value: function pinturaTerminals() {
        return "pintura:terminals";
      }
    }, {
      key: "identifiedObjectName",
      value: function identifiedObjectName() {
        return "cim:IdentifiedObject.name";
      }
    }, {
      key: "getRidOfHash",
      value: function getRidOfHash(name) {
        if (name !== undefined) {
          var tokens = name.split('#');
          if (tokens !== undefined) {
            if (tokens.length == 1) {
              return tokens[0];
            }
            if (tokens.length > 1) {
              return tokens[1];
            }
          }
        }
        return name;
      }
    }]);
    return common;
  }();

  function templates$1 (Handlebars) {
    Handlebars.registerHelper('removeClass', function (str) {
      return new runtime.SafeString(common.removeClass(str));
    });
    Handlebars.registerHelper('neq', function (v1, v2, options) {
      if (v1 !== v2) {
        return options.fn(this);
      }
      return options.inverse(this);
    });
    Handlebars.registerHelper('eq', function (v1, v2, options) {
      if (v1 == v2) {
        return options.fn(this);
      }
      return options.inverse(this);
    });
    Handlebars.registerHelper('sortEachByPinturaLabel', function (context, options) {
      return customEachFunction(context, options, function (context) {
        var contextSortedById = {};
        Object.keys(context).sort(function (a, b) {
          return context[a]['pintura:label'].text > context[b]['pintura:label'].text;
        }).forEach(function (key) {
          contextSortedById[key] = context[key];
        });
        return contextSortedById;
      });
    });
    Handlebars.registerHelper('sortEachByIdentifiedObjectName', function (context, options) {
      return customEachFunction(context, options, function (context) {
        var contextSortedById = {};
        Object.keys(context).sort(function (a, b) {
          var a_name = common.safeExtract(context, a, 'cim:IdentifiedObject.name');
          var b_name = common.safeExtract(context, b, 'cim:IdentifiedObject.name');
          if (a_name && b_name) {
            return a_name > b_name;
          } else if (context[a]['pintura:rdfid'] && context[b]['pintura:rdfid']) {
            return context[a]['pintura:rdfid'].text > context[b]['pintura:rdfid'].text;
          } else return -1;
        }).forEach(function (key) {
          contextSortedById[key] = context[key];
        });
        return contextSortedById;
      });
    });
    Handlebars.registerHelper('sortEach', function (context, options) {
      return customEachFunction(context, options, function (context) {
        var sortedContext = {};
        Object.keys(context).sort().forEach(function (key) {
          sortedContext[key] = context[key];
        });
        return sortedContext;
      });
    });
    Handlebars.registerHelper('removeColon', function (str) {
      return new runtime.SafeString(common.removeColon(str));
    });
  }

  function init() {
    templates$1.__initialized || (templates$1(Handlebars), templates$1.__initialized = true);
  }

  init();
  var Template$8 = /*#__PURE__*/Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
      var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "    <li class=\"wide-row floating-panel-item list-entry\">\n        <div class=\"row-left floating-panel-name tooltip\">"
      + ((stack1 = (lookupProperty(helpers,"removeClass")||(depth0 && lookupProperty(depth0,"removeClass"))||alias2).call(alias1,(data && lookupProperty(data,"key")),{"name":"removeClass","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":4,"column":58},"end":{"line":4,"column":95}}})) != null ? stack1 : "")
      + "\n            <span class=\"tooltiptext\">"
      + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"key") || (data && lookupProperty(data,"key"))) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"key","hash":{},"data":data,"loc":{"start":{"line":5,"column":38},"end":{"line":5,"column":46}}}) : helper)))
      + "</span>\n        </div>\n        "
      + ((stack1 = container.lambda(depth0, depth0)) != null ? stack1 : "")
      + "\n    </li>\n";
  },"2":function(container,depth0,helpers,partials,data) {
      return "";
  },"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
      var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "<ul class=\"floating-panel-list\">\n"
      + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":0},"end":{"line":9,"column":9}}})) != null ? stack1 : "")
      + "</ul>\n";
  },"useData":true});
  function handlebars_cim_class_render(data, options, asString) {
    var html = Template$8(data, options);
    return (asString || true) ? html : $(html);
  }

  init();
  var Template$7 = /*#__PURE__*/Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
      var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "<?xml version=\"1.0\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\"\n\"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">\n<svg id=\"svg\"\n     xmlns=\"http://www.w3.org/2000/svg\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n     viewBox=\""
      + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"viewBox") || (depth0 != null ? lookupProperty(depth0,"viewBox") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"viewBox","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":7,"column":14},"end":{"line":7,"column":25}}}) : helper)))
      + "\">\n<style>\n"
      + ((stack1 = ((helper = (helper = lookupProperty(helpers,"style") || (depth0 != null ? lookupProperty(depth0,"style") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"style","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":9,"column":0},"end":{"line":9,"column":11}}}) : helper))) != null ? stack1 : "")
      + "\n</style>\n"
      + ((stack1 = ((helper = (helper = lookupProperty(helpers,"diagrams") || (depth0 != null ? lookupProperty(depth0,"diagrams") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"diagrams","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":11,"column":0},"end":{"line":11,"column":14}}}) : helper))) != null ? stack1 : "")
      + "\n</svg>\n";
  },"useData":true});
  function handlebars_cim_create_svg(data, options, asString) {
    var html = Template$7(data, options);
    return (asString || true) ? html : $(html);
  }

  init();
  var Template$6 = /*#__PURE__*/Handlebars.template({"1":function(container,depth0,helpers,partials,data,blockParams,depths) {
      var stack1, helper, alias1=container.escapeExpression, alias2=depth0 != null ? depth0 : (container.nullContext || {}), alias3=container.hooks.helperMissing, alias4="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "            <option type=\""
      + alias1(container.lambda((depths[1] != null ? lookupProperty(depths[1],"requestedType") : depths[1]), depth0))
      + "\" value=\""
      + alias1(((helper = (helper = lookupProperty(helpers,"value") || (depth0 != null ? lookupProperty(depth0,"value") : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias2,{"name":"value","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":4,"column":55},"end":{"line":4,"column":64}}}) : helper)))
      + "\" "
      + ((stack1 = lookupProperty(helpers,"if").call(alias2,(depth0 != null ? lookupProperty(depth0,"disabled") : depth0),{"name":"if","hash":{},"fn":container.program(2, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":4,"column":66},"end":{"line":4,"column":110}}})) != null ? stack1 : "")
      + " "
      + ((stack1 = lookupProperty(helpers,"if").call(alias2,(depth0 != null ? lookupProperty(depth0,"selected") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":4,"column":111},"end":{"line":4,"column":144}}})) != null ? stack1 : "")
      + " >"
      + alias1(((helper = (helper = lookupProperty(helpers,"label") || (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias2,{"name":"label","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":4,"column":146},"end":{"line":4,"column":155}}}) : helper)))
      + "</option>\n";
  },"2":function(container,depth0,helpers,partials,data) {
      return " disabled=\"disabled\" ";
  },"4":function(container,depth0,helpers,partials,data) {
      return " selected ";
  },"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
      var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "<span class=\"row-right wide-row  floating-panel-value\">\n    <select id='"
      + alias4(((helper = (helper = lookupProperty(helpers,"dropdownId") || (depth0 != null ? lookupProperty(depth0,"dropdownId") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"dropdownId","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":16},"end":{"line":2,"column":30}}}) : helper)))
      + "' onchange=\"currentCimsvg().updateComponentRDF('"
      + alias4(((helper = (helper = lookupProperty(helpers,"classType") || (depth0 != null ? lookupProperty(depth0,"classType") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"classType","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":78},"end":{"line":2,"column":91}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"parentRdfid") || (depth0 != null ? lookupProperty(depth0,"parentRdfid") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"parentRdfid","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":95},"end":{"line":2,"column":110}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"attribute") || (depth0 != null ? lookupProperty(depth0,"attribute") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"attribute","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":114},"end":{"line":2,"column":127}}}) : helper)))
      + "', this.value)\" class=\"update-instance-type\">\n"
      + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"aggregates") : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":3,"column":8},"end":{"line":5,"column":17}}})) != null ? stack1 : "")
      + "    </select>\n    <button class=\"hiddenbutton\"> + </button>\n    <button class=\"hiddenbutton\"> -> </button>\n</span>\n";
  },"useData":true,"useDepths":true});
  function handlebars_cim_instance_type(data, options, asString) {
    var html = Template$6(data, options);
    return (asString || true) ? html : $(html);
  }

  init();
  var Template$5 = /*#__PURE__*/Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
      return "            <option selected=\"selected\" value=\"true\">True</label>\n";
  },"3":function(container,depth0,helpers,partials,data) {
      return "            <option value=\"true\">True</label>\n";
  },"5":function(container,depth0,helpers,partials,data) {
      return "            <option selected=\"selected\" value=\"false\">False</label>\n";
  },"7":function(container,depth0,helpers,partials,data) {
      return "            <option value=\"false\">False</label>\n";
  },"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
      var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "<span class=\"row-right wide-row  floating-panel-value\">\n    <select value=\""
      + alias4(((helper = (helper = lookupProperty(helpers,"value") || (depth0 != null ? lookupProperty(depth0,"value") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"value","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":19},"end":{"line":2,"column":28}}}) : helper)))
      + "\" id=\""
      + alias4(((helper = (helper = lookupProperty(helpers,"dropdownId") || (depth0 != null ? lookupProperty(depth0,"dropdownId") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"dropdownId","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":34},"end":{"line":2,"column":48}}}) : helper)))
      + "\" type=\"select\" onchange=\"currentCimsvg().updateComponent('"
      + alias4(((helper = (helper = lookupProperty(helpers,"classType") || (depth0 != null ? lookupProperty(depth0,"classType") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"classType","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":107},"end":{"line":2,"column":120}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"parentRdfid") || (depth0 != null ? lookupProperty(depth0,"parentRdfid") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"parentRdfid","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":124},"end":{"line":2,"column":139}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"attribute") || (depth0 != null ? lookupProperty(depth0,"attribute") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"attribute","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":143},"end":{"line":2,"column":156}}}) : helper)))
      + "', this.value)\">\n        <option>Select</label>\n"
      + ((stack1 = (lookupProperty(helpers,"eq")||(depth0 && lookupProperty(depth0,"eq"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"value") : depth0),"true",{"name":"eq","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":4,"column":8},"end":{"line":8,"column":15}}})) != null ? stack1 : "")
      + ((stack1 = (lookupProperty(helpers,"eq")||(depth0 && lookupProperty(depth0,"eq"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"value") : depth0),"false",{"name":"eq","hash":{},"fn":container.program(5, data, 0),"inverse":container.program(7, data, 0),"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":9,"column":8},"end":{"line":13,"column":15}}})) != null ? stack1 : "")
      + "    </select>\n    <button class=\"hiddenbutton\"> + </button>\n    <button class=\"hiddenbutton\"> -> </button>\n</span>\n";
  },"useData":true});
  function handlebars_cim_render_boolean(data, options, asString) {
    var html = Template$5(data, options);
    return (asString || true) ? html : $(html);
  }

  init();
  var Template$4 = /*#__PURE__*/Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
      var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "<span class=\"row-right wide-row  floating-panel-value\">\n    <input value='"
      + alias4(((helper = (helper = lookupProperty(helpers,"value") || (depth0 != null ? lookupProperty(depth0,"value") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"value","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":18},"end":{"line":2,"column":27}}}) : helper)))
      + "' id='"
      + alias4(((helper = (helper = lookupProperty(helpers,"dropdownId") || (depth0 != null ? lookupProperty(depth0,"dropdownId") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"dropdownId","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":33},"end":{"line":2,"column":47}}}) : helper)))
      + "' type=\"number\" step=\"any\" onchange=\"currentCimsvg().updateComponent('"
      + alias4(((helper = (helper = lookupProperty(helpers,"classType") || (depth0 != null ? lookupProperty(depth0,"classType") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"classType","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":117},"end":{"line":2,"column":130}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"parentRdfid") || (depth0 != null ? lookupProperty(depth0,"parentRdfid") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"parentRdfid","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":134},"end":{"line":2,"column":149}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"attribute") || (depth0 != null ? lookupProperty(depth0,"attribute") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"attribute","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":153},"end":{"line":2,"column":166}}}) : helper)))
      + "', this.value)\" class=\"update-float\"/>\n    <button class=\"hiddenbutton\"> + </button>\n    <button class=\"hiddenbutton\"> -> </button>\n</span>\n";
  },"useData":true});
  function handlebars_cim_render_float(data, options, asString) {
    var html = Template$4(data, options);
    return (asString || true) ? html : $(html);
  }

  init();
  var Template$3 = /*#__PURE__*/Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
      var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "<span class=\"row-right wide-row  floating-panel-value\">\n    <input value='"
      + alias4(((helper = (helper = lookupProperty(helpers,"value") || (depth0 != null ? lookupProperty(depth0,"value") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"value","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":18},"end":{"line":2,"column":27}}}) : helper)))
      + "' id='"
      + alias4(((helper = (helper = lookupProperty(helpers,"dropdownId") || (depth0 != null ? lookupProperty(depth0,"dropdownId") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"dropdownId","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":33},"end":{"line":2,"column":47}}}) : helper)))
      + "' type=\"string\" step=\"any\" onchange=\"currentCimsvg().updateComponent('"
      + alias4(((helper = (helper = lookupProperty(helpers,"classType") || (depth0 != null ? lookupProperty(depth0,"classType") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"classType","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":117},"end":{"line":2,"column":130}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"parentRdfid") || (depth0 != null ? lookupProperty(depth0,"parentRdfid") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"parentRdfid","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":134},"end":{"line":2,"column":149}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"attribute") || (depth0 != null ? lookupProperty(depth0,"attribute") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"attribute","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":153},"end":{"line":2,"column":166}}}) : helper)))
      + "', this.value)\"/>\n    <button class=\"hiddenbutton\"> + </button>\n    <button class=\"hiddenbutton\"> -> </button>\n</span>\n";
  },"useData":true});
  function handlebars_cim_render_string(data, options, asString) {
    var html = Template$3(data, options);
    return (asString || true) ? html : $(html);
  }

  init();
  var Template$2 = /*#__PURE__*/Handlebars.template({"1":function(container,depth0,helpers,partials,data,blockParams,depths) {
      var stack1, helper, alias1=container.escapeExpression, alias2=depth0 != null ? depth0 : (container.nullContext || {}), alias3=container.hooks.helperMissing, alias4="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "            <option type=\""
      + alias1(container.lambda((depths[1] != null ? lookupProperty(depths[1],"requestedType") : depths[1]), depth0))
      + "\" value=\""
      + alias1(((helper = (helper = lookupProperty(helpers,"rdfid") || (depth0 != null ? lookupProperty(depth0,"rdfid") : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias2,{"name":"rdfid","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":4,"column":55},"end":{"line":4,"column":64}}}) : helper)))
      + "\" "
      + ((stack1 = lookupProperty(helpers,"if").call(alias2,(depth0 != null ? lookupProperty(depth0,"disabled") : depth0),{"name":"if","hash":{},"fn":container.program(2, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":4,"column":66},"end":{"line":4,"column":110}}})) != null ? stack1 : "")
      + " "
      + ((stack1 = lookupProperty(helpers,"if").call(alias2,(depth0 != null ? lookupProperty(depth0,"selected") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":4,"column":111},"end":{"line":4,"column":155}}})) != null ? stack1 : "")
      + " >"
      + alias1(((helper = (helper = lookupProperty(helpers,"name") || (depth0 != null ? lookupProperty(depth0,"name") : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias2,{"name":"name","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":4,"column":157},"end":{"line":4,"column":165}}}) : helper)))
      + "</option>\n";
  },"2":function(container,depth0,helpers,partials,data) {
      return " disabled=\"disabled\" ";
  },"4":function(container,depth0,helpers,partials,data) {
      return " selected=\"selected\" ";
  },"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
      var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "<span class=\"row-right wide-row  floating-panel-value\">\n    <select id='"
      + alias4(((helper = (helper = lookupProperty(helpers,"dropdownId") || (depth0 != null ? lookupProperty(depth0,"dropdownId") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"dropdownId","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":16},"end":{"line":2,"column":30}}}) : helper)))
      + "' onchange=\"currentCimsvg().updateComponentRDF('"
      + alias4(((helper = (helper = lookupProperty(helpers,"classType") || (depth0 != null ? lookupProperty(depth0,"classType") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"classType","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":78},"end":{"line":2,"column":91}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"parentRdfid") || (depth0 != null ? lookupProperty(depth0,"parentRdfid") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"parentRdfid","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":95},"end":{"line":2,"column":110}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"attribute") || (depth0 != null ? lookupProperty(depth0,"attribute") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"attribute","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":114},"end":{"line":2,"column":127}}}) : helper)))
      + "', this.value)\" class=\"update-complex-type\">\n"
      + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"aggregates") : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":3,"column":8},"end":{"line":5,"column":17}}})) != null ? stack1 : "")
      + "    </select>\n    <button class=\"smallbutton\" onclick=\"currentCimsvg().addComponent('"
      + alias4(((helper = (helper = lookupProperty(helpers,"requestedType") || (depth0 != null ? lookupProperty(depth0,"requestedType") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"requestedType","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":7,"column":71},"end":{"line":7,"column":88}}}) : helper)))
      + "');currentCimsvg().populateAttributes('"
      + alias4(((helper = (helper = lookupProperty(helpers,"classType") || (depth0 != null ? lookupProperty(depth0,"classType") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"classType","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":7,"column":127},"end":{"line":7,"column":140}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"parentRdfid") || (depth0 != null ? lookupProperty(depth0,"parentRdfid") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"parentRdfid","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":7,"column":144},"end":{"line":7,"column":159}}}) : helper)))
      + "')\"> + </button>\n    <button class=\"smallbutton\" onclick=\"currentCimsvg().populateAttributes('"
      + alias4(((helper = (helper = lookupProperty(helpers,"requestedType") || (depth0 != null ? lookupProperty(depth0,"requestedType") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"requestedType","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":8,"column":77},"end":{"line":8,"column":94}}}) : helper)))
      + "', currentCimmenu().getSelectFromDropdown('attributesPanel', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"dropdownId") || (depth0 != null ? lookupProperty(depth0,"dropdownId") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"dropdownId","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":8,"column":156},"end":{"line":8,"column":170}}}) : helper)))
      + "').value)\"> -> </button>\n</span>\n";
  },"useData":true,"useDepths":true});
  function handlebars_cim_update_complex_type(data, options, asString) {
    var html = Template$2(data, options);
    return (asString || true) ? html : $(html);
  }

  init();
  var Template$1 = /*#__PURE__*/Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
      var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "<span class=\"row-right wide-row floating-panel-value\">\n    <input type=\"text\" value='"
      + alias4(((helper = (helper = lookupProperty(helpers,"value") || (depth0 != null ? lookupProperty(depth0,"value") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"value","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":30},"end":{"line":2,"column":39}}}) : helper)))
      + "' onchange=\"currentCimsvg().updateComponent('"
      + alias4(((helper = (helper = lookupProperty(helpers,"type") || (depth0 != null ? lookupProperty(depth0,"type") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"type","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":84},"end":{"line":2,"column":92}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"rdfid") || (depth0 != null ? lookupProperty(depth0,"rdfid") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"rdfid","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":96},"end":{"line":2,"column":105}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"attribute") || (depth0 != null ? lookupProperty(depth0,"attribute") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"attribute","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":109},"end":{"line":2,"column":122}}}) : helper)))
      + "', this.value)\"></input>\n<!--\n    <button style=\"visibility:hidden\"> + </button>\n    <button style=\"visibility:hidden\"> -> </button>\n-->\n</span>\n";
  },"useData":true});
  function handlebars_cim_update_primitive_type(data, options, asString) {
    var html = Template$1(data, options);
    return (asString || true) ? html : $(html);
  }

  init();
  var Template = /*#__PURE__*/Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
      var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "        <select onchange=\"currentCimsvg().updateComponent('"
      + alias4(((helper = (helper = lookupProperty(helpers,"type") || (depth0 != null ? lookupProperty(depth0,"type") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"type","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":3,"column":59},"end":{"line":3,"column":67}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"rdfid") || (depth0 != null ? lookupProperty(depth0,"rdfid") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"rdfid","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":3,"column":71},"end":{"line":3,"column":80}}}) : helper)))
      + "', '"
      + alias4(((helper = (helper = lookupProperty(helpers,"attribute") || (depth0 != null ? lookupProperty(depth0,"attribute") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"attribute","hash":{},"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":3,"column":84},"end":{"line":3,"column":97}}}) : helper)))
      + "', this.value)\" class=\"update-simple-type\">\n"
      + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"values") : depth0),{"name":"each","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":4,"column":8},"end":{"line":6,"column":17}}})) != null ? stack1 : "")
      + "        </select>\n";
  },"2":function(container,depth0,helpers,partials,data) {
      var stack1, alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "            <option value=\""
      + alias2(alias1((depth0 != null ? lookupProperty(depth0,"value") : depth0), depth0))
      + "\" "
      + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"selected") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":5,"column":43},"end":{"line":5,"column":92}}})) != null ? stack1 : "")
      + " >"
      + alias2(alias1((depth0 != null ? lookupProperty(depth0,"value") : depth0), depth0))
      + "</option>\n";
  },"3":function(container,depth0,helpers,partials,data) {
      return " selected=\"selected\" ";
  },"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
      var stack1, alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return parent[propertyName];
          }
          return undefined
      };

    return "<span class=\"row-right wide-row floating-panel-value\">\n"
      + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"simpletype") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"source":"cim_class_render.handlebars","start":{"line":2,"column":4},"end":{"line":8,"column":11}}})) != null ? stack1 : "")
      + "<!--\n    <button class=\"smallbutton\" style=\""
      + alias2(alias1((depth0 != null ? lookupProperty(depth0,"buttonVisibility") : depth0), depth0))
      + "\"> + </button>\n    <button class=\"smallbutton\" style=\""
      + alias2(alias1((depth0 != null ? lookupProperty(depth0,"buttonVisibility") : depth0), depth0))
      + "\"> -> </button>\n-->\n</span>\n";
  },"useData":true});
  function handlebars_cim_update_simple_type(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  var templates = {
    handlebars_cim_class_render: handlebars_cim_class_render,
    handlebars_cim_create_svg: handlebars_cim_create_svg,
    handlebars_cim_instance_type: handlebars_cim_instance_type,
    handlebars_cim_render_boolean: handlebars_cim_render_boolean,
    handlebars_cim_render_float: handlebars_cim_render_float,
    handlebars_cim_render_string: handlebars_cim_render_string,
    handlebars_cim_update_complex_type: handlebars_cim_update_complex_type,
    handlebars_cim_update_primitive_type: handlebars_cim_update_primitive_type,
    handlebars_cim_update_simple_type: handlebars_cim_update_simple_type
  };

  /*
   *  Copyright Â© 2016-2017, RWTH Aachen University
   *  Authors: Richard Marston
   *  SPDX-License-Identifier: MPL-2.0
   */
  var contextmenu = /*#__PURE__*/function () {
    function contextmenu(menu, label) {
      _classCallCheck(this, contextmenu);
      if (menu === undefined || menu === null) {
        console.error("Menu constructed with invalid node");
      }
      this.menuList = _defineProperty({}, label, menu);
      this.menuState = {};
      this.id;
      this.type;
      this.cimsvg = null;
    }
    _createClass(contextmenu, [{
      key: "setCimsvg",
      value: function setCimsvg(cimsvg) {
        this.cimsvg = cimsvg;
      }

      /*
       * Toggles menu on.
       */
    }, {
      key: "toggleMenuOn",
      value: function toggleMenuOn(menuName) {
        if (this.menuState[menuName] !== 1) {
          this.menuState[menuName] = 1;
          this.menuList[menuName].classList.add(contextmenu.contextMenuActive);
        }
      }

      /*
       * Toggles menu off.
       */
    }, {
      key: "toggleMenuOff",
      value: function toggleMenuOff() {
        for (var menu in this.menuList) {
          if (this.menuState[menu] !== 0) {
            this.menuState[menu] = 0;
            this.menuList[menu].classList.remove(contextmenu.contextMenuActive);
          }
        }
      }

      /*
       * Positions the menu.
       */
    }, {
      key: "positionMenu",
      value: function positionMenu(pos, menuName) {
        this.menuList[menuName].style.left = pos.x + "px";
        this.menuList[menuName].style.top = pos.y + "px";
      }
    }, {
      key: "setComponent",
      value: function setComponent(_type, _id) {
        this.type = _type;
        this.id = _id;
      }
    }, {
      key: "removeComponent",
      value: function removeComponent() {
        if (this.cimsvg) {
          this.cimsvg.removeComponent(this.type, this.id);
        }
      }
    }]);
    return contextmenu;
  }();
  contextmenu.contextMenuActive = "context-menu-active";

  var links = [
  	{
  		input: {
  			id: "fileopen",
  			type: "file"
  		},
  		a: {
  			onclick: "fileopen.click();",
  			text: "  Open file",
  			icon: "fa fa-file-o"
  		}
  	},
  	{
  		a: {
  			onclick: "currentCimsvg().loadUri();",
  			text: "  Open link",
  			icon: "fa fa-link"
  		}
  	},
  	{
  		input: {
  			id: "filesave"
  		},
  		a: {
  			onclick: "currentCimsvg().saveGridXml('pinturaGrid.xml');",
  			text: "  Save to file",
  			icon: "fa fa-file"
  		}
  	},
  	{
  		a: {
  			onclick: "currentCimsvg().saveToMultipartZip();",
  			text: "  Save to multipart zip",
  			icon: "fa fa-file-archive-o"
  		}
  	},
  	{
  		a: {
  			onclick: "currentCimsvg().saveTemplateJson();",
  			text: "  Save JSON",
  			icon: "fa fa-file-text-o"
  		}
  	},
  	{
  		a: {
  			onclick: "currentCimsvg().saveToUri();",
  			text: "  Save to link",
  			icon: "fa fa-link"
  		}
  	},
  	{
  		a: {
  			onclick: "currentCimsvg().saveToSVG();",
  			text: "  Export to SVG",
  			icon: "fa fa-file-image-o"
  		}
  	}
  ];
  var theMenuStructure = {
  	links: links
  };

  ReactBootstrap.Nav;
  var FileMenuEntry = /*#__PURE__*/function (_React$Component) {
    _inherits(FileMenuEntry, _React$Component);
    var _super = _createSuper(FileMenuEntry);
    function FileMenuEntry(props) {
      _classCallCheck(this, FileMenuEntry);
      return _super.call(this, props);
    }
    _createClass(FileMenuEntry, [{
      key: "render",
      value: function render() {
        var input, a;
        if (this.props.input) {
          if (this.props.input.type) {
            input = /*#__PURE__*/React.createElement("input", {
              id: this.props.input.id,
              type: this.props.input.type,
              style: {
                "display": "none"
              },
              multiple: true
            });
          } else {
            input = /*#__PURE__*/React.createElement("input", {
              id: this.props.input.id,
              style: {
                "display": "none"
              },
              multiple: true
            });
          }
        }
        if ("a" in this.props && this.props.a !== undefined) {
          if ("onclick" in this.props.a && this.props.a.onclick !== undefined) {
            a = /*#__PURE__*/React.createElement("a", {
              href: "#",
              className: "button wide-button indent",
              onClick: Function(this.props.a.onclick)
            }, /*#__PURE__*/React.createElement("span", {
              className: this.props.a.icon
            }), this.props.a.text);
          }
        }
        var element = /*#__PURE__*/React.createElement("li", {
          className: "FileMenuEntry wide-row list-subtitle"
        }, input, a);
        return element;
      }
    }]);
    return FileMenuEntry;
  }(React.Component);
  var HideableMenu = /*#__PURE__*/function (_React$Component2) {
    _inherits(HideableMenu, _React$Component2);
    var _super2 = _createSuper(HideableMenu);
    function HideableMenu(props) {
      var _this;
      _classCallCheck(this, HideableMenu);
      _this = _super2.call(this, props);
      var title = null,
        main = null;
      if (props.children) {
        if ('title' in props.children) {
          title = props.children.title;
        }
        if ('main' in props.children) {
          main = props.children.main;
        }
      }
      _this.state = {
        title: title,
        main: main,
        id: props.id,
        isHidden: props.isHidden
      };
      _this.showBody = _this.showBody.bind(_assertThisInitialized(_this));
      _this.toggleBody = _this.toggleBody.bind(_assertThisInitialized(_this));
      return _this;
    }
    _createClass(HideableMenu, [{
      key: "update",
      value: function update(content) {
        this.setState(content);
      }
    }, {
      key: "showBody",
      value: function showBody() {
        var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.setState({
          isHidden: !show
        });
      }
    }, {
      key: "toggleBody",
      value: function toggleBody(e) {
        this.setState({
          isHidden: !this.state.isHidden
        });
        e.preventDefault();
        e.stopPropagation();
      }
    }, {
      key: "render",
      value: function render() {
        var hiddenMenuBodyClass = this.state.isHidden ? " hiddenmenu" : "";
        var element = /*#__PURE__*/React.createElement("div", {
          className: this.props.className,
          id: this.props.id
        }, /*#__PURE__*/React.createElement("div", {
          className: this.props.className + "Title",
          onClick: this.toggleBody
        }, this.state.title), /*#__PURE__*/React.createElement("div", {
          className: this.props.className + "Body" + hiddenMenuBodyClass
        }, this.state.main));
        return element;
      }
    }]);
    return HideableMenu;
  }(React.Component);
  var ComponentTitle = /*#__PURE__*/function (_React$Component3) {
    _inherits(ComponentTitle, _React$Component3);
    var _super3 = _createSuper(ComponentTitle);
    function ComponentTitle(props) {
      _classCallCheck(this, ComponentTitle);
      return _super3.call(this, props);
    }
    _createClass(ComponentTitle, [{
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement("li", {
          className: "ComponentTitle wide-row list-subtitle removeColon typeName-li"
        }, /*#__PURE__*/React.createElement("div", {
          className: "button indent row-left"
        }, /*#__PURE__*/React.createElement("span", {
          className: "fa fa-list"
        }), "  ", this.props.title));
      }
    }]);
    return ComponentTitle;
  }(React.Component);
  var DiagramTitle = /*#__PURE__*/function (_React$Component4) {
    _inherits(DiagramTitle, _React$Component4);
    var _super4 = _createSuper(DiagramTitle);
    function DiagramTitle(props) {
      var _this2;
      _classCallCheck(this, DiagramTitle);
      _this2 = _super4.call(this, props);
      _this2.visibleIconChar = "fa-star";
      _this2.invisibleIconChar = "fa-star-o";
      _this2.state = {
        name: props.name,
        iconChar: _this2.visibleIconChar
      };
      _this2.toggleDiagramVisibility = _this2.toggleDiagramVisibility.bind(_assertThisInitialized(_this2));
      return _this2;
    }
    _createClass(DiagramTitle, [{
      key: "toggleDiagramVisibility",
      value: function toggleDiagramVisibility(e) {
        if (this.props.getCimsvg()) {
          if (this.props.getCimsvg().toggleDiagramVisible(this.props.diagramId)) {
            this.setState({
              iconChar: this.invisibleIconChar
            });
          } else {
            this.setState({
              iconChar: this.visibleIconChar
            });
          }
        }
        e.preventDefault();
        e.stopPropagation();
      }
    }, {
      key: "render",
      value: function render() {
        var iconClass = "button panel-button row-right fa " + this.state.iconChar;
        return /*#__PURE__*/React.createElement("div", {
          className: "DiagramTitle wide-row list-title"
        }, /*#__PURE__*/React.createElement("div", {
          className: "button row-left"
        }, /*#__PURE__*/React.createElement("span", {
          className: "fa fa-sitemap"
        }), "  Diagram: ", this.state.name), /*#__PURE__*/React.createElement("div", {
          className: iconClass,
          onClick: this.toggleDiagramVisibility
        }));
      }
    }]);
    return DiagramTitle;
  }(React.Component);
  var DiagramComponentList = /*#__PURE__*/function (_React$Component5) {
    _inherits(DiagramComponentList, _React$Component5);
    var _super5 = _createSuper(DiagramComponentList);
    function DiagramComponentList(props) {
      var _this3;
      _classCallCheck(this, DiagramComponentList);
      _this3 = _super5.call(this, props);
      _this3.updatableList = new UpdatableComponentList(_assertThisInitialized(_this3));
      var diagramComponentList = _this3.updatableList.updateAll(props.components);
      _this3.state = {
        body: diagramComponentList,
        bodyId: props.diagramId,
        title: props.title
      };
      _this3.hideableMenu = React.createRef();
      return _this3;
    }
    _createClass(DiagramComponentList, [{
      key: "createEntry",
      value: function createEntry(object, meta) {
        return /*#__PURE__*/React.createElement(ComponentOfTypeList, {
          ref: meta.ref,
          key: meta.index,
          title: meta.id,
          instances: object
        });
      }
    }, {
      key: "update",
      value: function update(componentList) {
        var componentInstances = this.updatableList.updateAll(componentList["components"]);
        this.hideableMenu.current.update({
          title: this.state.title,
          main: componentInstances
        });
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(HideableMenu, {
          className: "DiagramComponentList",
          ref: this.hideableMenu,
          bodyId: this.state.bodyId,
          isHidden: true
        }, {
          title: this.state.title,
          main: this.state.body
        });
      }
    }]);
    return DiagramComponentList;
  }(React.Component);
  var ComponentListEntry = /*#__PURE__*/function (_React$Component6) {
    _inherits(ComponentListEntry, _React$Component6);
    var _super6 = _createSuper(ComponentListEntry);
    function ComponentListEntry(props) {
      var _this4;
      _classCallCheck(this, ComponentListEntry);
      _this4 = _super6.call(this, props);
      _this4.state = {
        label: props.label,
        dropdownId: props.dropdownId,
        componentId: props.componentId,
        componentType: props.componentType
      };
      _this4.selectEntry = _this4.selectEntry.bind(_assertThisInitialized(_this4));
      return _this4;
    }
    _createClass(ComponentListEntry, [{
      key: "update",
      value: function update(object) {
        this.setState({
          label: object["pintura:label"]["text"]
        });
      }
    }, {
      key: "selectEntry",
      value: function selectEntry() {
        currentCimmenu().componentInstanceSelected(null, this.props.componentType, this.props.componentId);
      }
    }, {
      key: "render",
      value: function render() {
        var buttonId = this.props.componentId + "-components-panel-button";
        return /*#__PURE__*/React.createElement("li", {
          className: "ComponentListEntry list-entry"
        }, /*#__PURE__*/React.createElement("button", {
          id: buttonId,
          className: "row button wide-button {{this.selected}}",
          onClick: this.selectEntry
        }, /*#__PURE__*/React.createElement("span", {
          className: "fa fa-cube"
        }), this.state.label));
      }
    }]);
    return ComponentListEntry;
  }(React.Component);
  var ComponentOfTypeList = /*#__PURE__*/function (_React$Component7) {
    _inherits(ComponentOfTypeList, _React$Component7);
    var _super7 = _createSuper(ComponentOfTypeList);
    function ComponentOfTypeList(props) {
      var _this5;
      _classCallCheck(this, ComponentOfTypeList);
      _this5 = _super7.call(this, props);
      _this5.updatableList = new UpdatableComponentList(_assertThisInitialized(_this5));
      var startInstances = /*#__PURE__*/React.createElement("ul", null, " ", _this5.updatableList.updateAll(props.instances), " ");
      _this5.state = {
        title: props.title,
        instances: startInstances
      };
      _this5.hideableMenu = React.createRef();
      return _this5;
    }
    _createClass(ComponentOfTypeList, [{
      key: "createEntry",
      value: function createEntry(object, meta) {
        return /*#__PURE__*/React.createElement(ComponentListEntry, {
          ref: meta.ref,
          key: meta.index,
          label: object["pintura:label"]["text"],
          componentId: meta.id,
          componentType: this.props.title
        });
      }
    }, {
      key: "update",
      value: function update(componentList) {
        var componentInstances = /*#__PURE__*/React.createElement("ul", null, " ", this.updatableList.updateAll(componentList), " ");
        this.setState({
          instances: componentInstances
        });
        this.hideableMenu.current.update({
          main: componentInstances
        });
      }
    }, {
      key: "render",
      value: function render() {
        var componentTitle = /*#__PURE__*/React.createElement(ComponentTitle, {
          title: this.state.title
        });
        return /*#__PURE__*/React.createElement(HideableMenu, {
          className: "ComponentOfTypeList",
          ref: this.hideableMenu,
          isHidden: true,
          title: componentTitle
        }, {
          title: componentTitle,
          main: this.state.instances
        });
      }
    }]);
    return ComponentOfTypeList;
  }(React.Component);
  var UpdatableComponentList = /*#__PURE__*/function () {
    function UpdatableComponentList(creator) {
      _classCallCheck(this, UpdatableComponentList);
      this.creator = creator;
      this.state = {
        instances: {},
        refs: {}
      };
    }
    _createClass(UpdatableComponentList, [{
      key: "updateAll",
      value: function updateAll(updateObject) {
        var _this6 = this;
        if (updateObject) {
          Object.keys(updateObject).map(function (key, index) {
            var object = updateObject[key];
            if (key in _this6.state.refs) {
              if ('current' in _this6.state.refs[key] && _this6.state.refs[key].current) {
                _this6.state.refs[key].current.update(object);
              }
            } else {
              _this6.state.refs[key] = React.createRef();
              var meta = {
                id: key,
                index: index,
                ref: _this6.state.refs[key]
              };
              _this6.state.instances[key] = _this6.creator.createEntry(object, meta);
            }
          });
          Object.keys(this.state.refs).forEach(function (key) {
            if (!key in updateObject || updateObject[key] === undefined) {
              delete _this6.state.refs[key];
              delete _this6.state.instances[key];
            }
          });
        }
        return Object.values(this.state.instances);
      }
    }]);
    return UpdatableComponentList;
  }();
  var TabMenu = /*#__PURE__*/function (_React$Component8) {
    _inherits(TabMenu, _React$Component8);
    var _super8 = _createSuper(TabMenu);
    function TabMenu(props) {
      var _this7;
      _classCallCheck(this, TabMenu);
      _this7 = _super8.call(this, props);
      _this7.setViewability = _this7.setViewability.bind(_assertThisInitialized(_this7));
      _this7.state = {
        body: props.body || props.children,
        className: props.className,
        id: props.id,
        isOutOfView: props.outOfView
      };
      return _this7;
    }
    _createClass(TabMenu, [{
      key: "setViewability",
      value: function setViewability(inView) {
        this.setState({
          isOutOfView: !inView
        });
      }
    }, {
      key: "update",
      value: function update(content) {
        this.setState(content);
      }
    }, {
      key: "render",
      value: function render() {
        var tabClass = "";
        if (this.state.isOutOfView) {
          tabClass = this.state.className + " hiddentab";
        } else {
          tabClass = this.state.className;
        }
        return /*#__PURE__*/React.createElement("div", {
          id: this.state.id,
          className: tabClass
        }, this.state.body);
      }
    }]);
    return TabMenu;
  }(React.Component);
  var FileMenu = /*#__PURE__*/function (_React$Component9) {
    _inherits(FileMenu, _React$Component9);
    var _super9 = _createSuper(FileMenu);
    function FileMenu(props) {
      var _this8;
      _classCallCheck(this, FileMenu);
      _this8 = _super9.call(this, props);
      _this8.tabMenu = React.createRef();
      var fileMenuLinks = null;
      if ("links" in theMenuStructure && theMenuStructure.links !== undefined) {
        fileMenuLinks = theMenuStructure.links.map(function (item, index) {
          return /*#__PURE__*/React.createElement(FileMenuEntry, {
            key: index,
            icon: item.icon,
            a: item.a,
            input: item.input
          });
        });
      }
      _this8.state = {
        fileMenuLinks: fileMenuLinks
      };
      return _this8;
    }
    _createClass(FileMenu, [{
      key: "showBody",
      value: function showBody() {
        var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.tabMenu.current.setViewability(show);
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(TabMenu, {
          className: this.props.className,
          body: this.state.fileMenuLinks,
          id: this.props.id,
          ref: this.tabMenu,
          outOfView: this.props.isHidden
        });
      }
    }]);
    return FileMenu;
  }(React.Component);
  var DiagramList = /*#__PURE__*/function (_React$Component10) {
    _inherits(DiagramList, _React$Component10);
    var _super10 = _createSuper(DiagramList);
    function DiagramList(props) {
      var _this9;
      _classCallCheck(this, DiagramList);
      _this9 = _super10.call(this, props);
      _this9.tabMenu = React.createRef();
      _this9.updatableList = new UpdatableComponentList(_assertThisInitialized(_this9));
      _this9.getCimsvg = _this9.getCimsvg.bind(_assertThisInitialized(_this9));
      return _this9;
    }
    _createClass(DiagramList, [{
      key: "getCimsvg",
      value: function getCimsvg() {
        return this.state.cimsvg;
      }
    }, {
      key: "createEntry",
      value: function createEntry(object, meta) {
        var diagramTitle = /*#__PURE__*/React.createElement(DiagramTitle, {
          name: object['pintura:name'],
          getCimsvg: this.getCimsvg,
          diagramId: meta.id
        });
        var diagramComponentList = /*#__PURE__*/React.createElement(DiagramComponentList, {
          key: meta.index,
          ref: meta.ref,
          title: diagramTitle,
          components: object["components"]
        });
        return diagramComponentList;
      }
    }, {
      key: "showBody",
      value: function showBody() {
        var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.tabMenu.current.setViewability(show);
      }
    }, {
      key: "setCimsvg",
      value: function setCimsvg(cimsvg) {
        this.setState(cimsvg);
      }
    }, {
      key: "updateLinks",
      value: function updateLinks(diagramsObject) {
        var _this10 = this;
        var diagramList = this.updatableList.updateAll(diagramsObject);
        var buttonAndList = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("button", {
          className: "component-type-name button wide-button",
          onClick: function onClick() {
            _this10.state.cimsvg.addDiagram();
          }
        }, "New Diagram"), diagramList);
        if (this.tabMenu.current) {
          this.tabMenu.current.update({
            body: buttonAndList
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this11 = this;
        return /*#__PURE__*/React.createElement(TabMenu, {
          className: this.props.className,
          id: this.props.id,
          ref: this.tabMenu,
          outOfView: this.props.isHidden
        }, /*#__PURE__*/React.createElement("button", {
          className: "component-type-name button wide-button",
          onClick: function onClick() {
            _this11.state.cimsvg.addDiagram();
          }
        }, "New Diagram"));
      }
    }]);
    return DiagramList;
  }(React.Component);
  var CreateNewComponentList = /*#__PURE__*/function (_React$Component11) {
    _inherits(CreateNewComponentList, _React$Component11);
    var _super11 = _createSuper(CreateNewComponentList);
    function CreateNewComponentList(props) {
      _classCallCheck(this, CreateNewComponentList);
      return _super11.call(this, props);
    }
    _createClass(CreateNewComponentList, [{
      key: "render",
      value: function render() {
        var _this12 = this;
        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("button", {
          className: "component-type-name button wide-button",
          onClick: function onClick() {
            _this12.props.getCimsvg().addComponent('cim:ACLineSegment');
          }
        }, "ACLineSegment"), /*#__PURE__*/React.createElement("button", {
          className: "component-type-name button wide-button",
          onClick: function onClick() {
            _this12.props.getCimsvg().addComponent('cim:EnergyConsumer');
          }
        }, "EnergyConsumer"), /*#__PURE__*/React.createElement("button", {
          className: "component-type-name button wide-button",
          onClick: function onClick() {
            _this12.props.getCimsvg().addComponent('cim:PowerTransformer');
          }
        }, "PowerTransformer"), /*#__PURE__*/React.createElement("button", {
          className: "component-type-name button wide-button",
          onClick: function onClick() {
            _this12.props.getCimsvg().addComponent('cim:SynchronousMachine');
          }
        }, "SynchronousMachine"), /*#__PURE__*/React.createElement("button", {
          className: "component-type-name button wide-button",
          onClick: function onClick() {
            _this12.props.getCimsvg().addComponent('cim:TopologicalNode');
          }
        }, "TopologicalNode"), /*#__PURE__*/React.createElement("button", {
          className: "component-type-name button wide-button",
          onClick: function onClick() {
            _this12.props.getCimsvg().addComponent('cim:Terminal');
          }
        }, "Terminal"));
      }
    }]);
    return CreateNewComponentList;
  }(React.Component);
  var DiagramPicker = /*#__PURE__*/function (_React$Component12) {
    _inherits(DiagramPicker, _React$Component12);
    var _super12 = _createSuper(DiagramPicker);
    function DiagramPicker(props) {
      var _this13;
      _classCallCheck(this, DiagramPicker);
      _this13 = _super12.call(this, props);
      _this13.state = {
        cimsvg: _this13.props.cimsvg
      };
      return _this13;
    }
    _createClass(DiagramPicker, [{
      key: "setCimsvg",
      value: function setCimsvg(cimsvg) {
        this.setState(cimsvg);
      }
    }, {
      key: "updateDiagramList",
      value: function updateDiagramList(diagrams) {
        var diagramList = [];
        Object.keys(diagrams).map(function (diagram, index) {
          diagramList.push( /*#__PURE__*/React.createElement("option", {
            key: index,
            value: diagram
          }, diagrams[diagram]['pintura:name']));
        });
        this.setState({
          options: diagramList
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this14 = this;
        return /*#__PURE__*/React.createElement("select", {
          className: "center-button",
          id: "diagram-picker",
          onChange: function onChange(e) {
            _this14.state.cimsvg.setCurrentDiagramId(e.target.value);
          }
        }, /*#__PURE__*/React.createElement("option", null, "Select Diagram To Edit"), this.state.options);
      }
    }]);
    return DiagramPicker;
  }(React.Component);
  var NewComponentMenu = /*#__PURE__*/function (_React$Component13) {
    _inherits(NewComponentMenu, _React$Component13);
    var _super13 = _createSuper(NewComponentMenu);
    function NewComponentMenu(props) {
      var _this15;
      _classCallCheck(this, NewComponentMenu);
      _this15 = _super13.call(this, props);
      _this15.getCimsvg = _this15.getCimsvg.bind(_assertThisInitialized(_this15));
      _this15.tabMenu = React.createRef();
      _this15.diagramPicker = React.createRef();
      _this15.state = {
        cimsvg: _this15.props.cimsvg
      };
      return _this15;
    }
    _createClass(NewComponentMenu, [{
      key: "showBody",
      value: function showBody() {
        var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.tabMenu.current.setViewability(show);
      }
    }, {
      key: "getCimsvg",
      value: function getCimsvg() {
        return this.state.cimsvg;
      }
    }, {
      key: "setCimsvg",
      value: function setCimsvg(cimsvg) {
        this.setState(cimsvg);
        if (this.diagramPicker.current) {
          this.diagramPicker.current.setState(cimsvg);
        }
      }
    }, {
      key: "updateDiagramList",
      value: function updateDiagramList(diagrams) {
        if (this.diagramPicker.current) {
          this.diagramPicker.current.updateDiagramList(diagrams);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(TabMenu, {
          className: this.props.className,
          id: this.props.id,
          ref: this.tabMenu,
          outOfView: this.props.isHidden
        }, /*#__PURE__*/React.createElement(DiagramPicker, {
          ref: this.diagramPicker,
          cimsvg: this.state.cimsvg
        }), /*#__PURE__*/React.createElement(CreateNewComponentList, {
          getCimsvg: this.getCimsvg
        }));
      }
    }]);
    return NewComponentMenu;
  }(React.Component);
  var Menu = /*#__PURE__*/function (_React$Component14) {
    _inherits(Menu, _React$Component14);
    var _super14 = _createSuper(Menu);
    function Menu(props) {
      var _this16;
      _classCallCheck(this, Menu);
      _this16 = _super14.call(this, props);
      _this16.state = {
        selectedSwitch: "file-menu-switch",
        diagramMenuLinks: null,
        cimsvg: null
      };
      _this16.tabs = {
        "file-menu-switch": React.createRef(),
        "diagram-menu-switch": React.createRef(),
        "new-component-menu-switch": React.createRef()
      };
      _this16.updateSelectedTab = _this16.updateSelectedTab.bind(_assertThisInitialized(_this16));
      return _this16;
    }
    _createClass(Menu, [{
      key: "setCimsvg",
      value: function setCimsvg(cimsvg) {
        this.setState({
          cimsvg: cimsvg
        });
        if (this.tabs["new-component-menu-switch"].current) {
          this.tabs["new-component-menu-switch"].current.setCimsvg({
            cimsvg: cimsvg
          });
        }
        if (this.tabs["diagram-menu-switch"].current) {
          this.tabs["diagram-menu-switch"].current.setCimsvg({
            cimsvg: cimsvg
          });
        }
      }
    }, {
      key: "updateSelectedTab",
      value: function updateSelectedTab(e) {
        Object.values(this.tabs).forEach(function (tab) {
          tab.current.showBody(false);
        });
        if (e.currentTarget.id in this.tabs) {
          this.tabs[e.currentTarget.id].current.showBody(true);
          this.setState({
            "selectedSwitch": e.currentTarget.id
          });
        } else {
          console.error("No matching tab for id: ", e.currentTarget.id, "currentTarget: ", e.currentTarget);
        }
        e.preventDefault();
        e.stopPropagation();
      }
    }, {
      key: "updateDiagramMenuLinks",
      value: function updateDiagramMenuLinks(links) {
        if (this.tabs["diagram-menu-switch"].current) {
          this.tabs["diagram-menu-switch"].current.updateLinks(links);
        }
        if (this.tabs["new-component-menu-switch"].current) {
          this.tabs["new-component-menu-switch"].current.updateDiagramList(links);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this17 = this;
        var baseSwitchClasses = "switch button tab";
        var fileSwitchClass = this.state.selectedSwitch == "file-menu-switch" ? " selected" : "";
        var diagramSwitchClass = this.state.selectedSwitch == "diagram-menu-switch" ? " selected" : "";
        var componentSwitchClass = this.state.selectedSwitch == "new-component-menu-switch" ? " selected" : "";
        var element = /*#__PURE__*/React.createElement("div", {
          style: {
            "height": "100%"
          }
        }, /*#__PURE__*/React.createElement("li", {
          id: "icons",
          className: "row tabs"
        }, /*#__PURE__*/React.createElement("ul", {
          id: "file-menu-switch",
          className: baseSwitchClasses + fileSwitchClass,
          onClick: function onClick(e) {
            _this17.updateSelectedTab(e);
          }
        }, /*#__PURE__*/React.createElement("span", {
          className: "fa fa-file-archive-o"
        })), /*#__PURE__*/React.createElement("ul", {
          id: "diagram-menu-switch",
          className: baseSwitchClasses + diagramSwitchClass,
          onClick: function onClick(e) {
            _this17.updateSelectedTab(e);
          }
        }, /*#__PURE__*/React.createElement("span", {
          className: "fa fa-sitemap"
        })), /*#__PURE__*/React.createElement("ul", {
          id: "new-component-menu-switch",
          className: baseSwitchClasses + componentSwitchClass,
          onClick: function onClick(e) {
            _this17.updateSelectedTab(e);
          }
        }, /*#__PURE__*/React.createElement("span", {
          className: "fa fa-plus-square"
        }))), /*#__PURE__*/React.createElement("div", {
          id: "multi-menu-panel"
        }, /*#__PURE__*/React.createElement(FileMenu, {
          id: "file-menu-panel",
          className: "FileMenu",
          isHidden: false,
          ref: this.tabs["file-menu-switch"],
          iconClass: "fa fa-file-archive-o"
        }, " "), /*#__PURE__*/React.createElement(DiagramList, {
          id: "diagram-menu-panel",
          className: "DiagramList",
          cimsvg: this.state.cimsvg,
          isHidden: true,
          ref: this.tabs["diagram-menu-switch"],
          iconClass: "fa fa-sitemap"
        }), /*#__PURE__*/React.createElement(NewComponentMenu, {
          id: "new-component-menu",
          className: "NewComponentMenu",
          cimsvg: this.state.cimsvg,
          isHidden: true,
          ref: this.tabs["new-component-menu-switch"]
        })), /*#__PURE__*/React.createElement("nav", {
          id: "context-menu",
          className: "context-menu",
          onMouseUp: function onMouseUp() {
            currentCimmenu().getContextMenu().toggleMenuOff();
          },
          style: {
            left: "451px",
            top: "285px",
            pointerEvents: "auto"
          }
        }, /*#__PURE__*/React.createElement("ul", {
          className: "context-menu-items"
        }, /*#__PURE__*/React.createElement("li", {
          className: "context-menu-item"
        }, /*#__PURE__*/React.createElement("a", {
          onMouseUp: function onMouseUp() {
            currentCimmenu().getContextMenu().removeComponent();
          }
        }, "Delete Component")))));
        return element;
      }
    }]);
    return Menu;
  }(React.Component);
  Menu.menuStructure = theMenuStructure;

  var BaseClass = /*#__PURE__*/function () {
    function BaseClass() {
      _classCallCheck(this, BaseClass);
    }
    _createClass(BaseClass, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        return {
          'filledEntries': {},
          'emptyEntries': {}
        };
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        return false;
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        return "";
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        return "";
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        return [];
      }
    }]);
    return BaseClass;
  }();

  var CGMESProfile = /*#__PURE__*/_createClass(function CGMESProfile() {
    _classCallCheck(this, CGMESProfile);
  });
  _defineProperty(CGMESProfile, "profileUrls", {
    "DL": ["http://iec.ch/TC57/2013/61970-453/DiagramLayout/3"],
    "EQ": ["http://iec.ch/TC57/2013/61970-452/EquipmentCore/4", "http://iec.ch/TC57/2013/61970-452/EquipmentOperation/4", "http://iec.ch/TC57/2013/61970-452/EquipmentShortCircuit/4"],
    "SSH": ["http://iec.ch/TC57/2013/61970-456/SteadyStateHypothesis/1"],
    "SV": ["http://iec.ch/TC57/2013/61970-456/StateVariables/4"],
    "GL": ["http://entsoe.eu/Secretariat/2013/Geographical/2"],
    "DY": ["http://iec.ch/TC57/2013/61970-457/Dynamics/3"],
    "TP": ["http://iec.ch/TC57/2013/61970-456/Topology/4"],
    "TP_BD": ["http://iec.ch/TC57/2013/61970-456/TopologyBoundary/3"],
    "EQ_BD": ["http://iec.ch/TC57/2013/61970-452/EquipmentBoundary/3"]
  });
  _defineProperty(CGMESProfile, "shortNames", {
    "DL": 0,
    "EQ": 1,
    "SSH": 2,
    "SV": 3,
    "GL": 4,
    "DY": 5,
    "TP": 6,
    "TP_BD": 7,
    "EQ_BD": 8
  });

  var IdentifiedObject = /*#__PURE__*/function (_BaseClass) {
    _inherits(IdentifiedObject, _BaseClass);
    var _super = _createSuper(IdentifiedObject);
    function IdentifiedObject() {
      _classCallCheck(this, IdentifiedObject);
      return _super.apply(this, arguments);
    }
    _createClass(IdentifiedObject, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "IdentifiedObject";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:IdentifiedObject.mRID' in object) {
          attributeEntries['filledEntries']['cim:IdentifiedObject.mRID'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['IdentifiedObject.mRID'], 'cim:String', 'cim:IdentifiedObject.mRID');
        } else {
          attributeEntries['emptyEntries']['cim:IdentifiedObject.mRID'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['IdentifiedObject.mRID'], 'cim:String', 'cim:IdentifiedObject.mRID');
        }
        if ('cim:IdentifiedObject.name' in object) {
          attributeEntries['filledEntries']['cim:IdentifiedObject.name'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['IdentifiedObject.name'], 'cim:String', 'cim:IdentifiedObject.name');
        } else {
          attributeEntries['emptyEntries']['cim:IdentifiedObject.name'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['IdentifiedObject.name'], 'cim:String', 'cim:IdentifiedObject.name');
        }
        if ('cim:IdentifiedObject.description' in object) {
          attributeEntries['filledEntries']['cim:IdentifiedObject.description'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['IdentifiedObject.description'], 'cim:String', 'cim:IdentifiedObject.description');
        } else {
          attributeEntries['emptyEntries']['cim:IdentifiedObject.description'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['IdentifiedObject.description'], 'cim:String', 'cim:IdentifiedObject.description');
        }
        if ('cim:IdentifiedObject.energyIdentCodeEic' in object) {
          attributeEntries['filledEntries']['cim:IdentifiedObject.energyIdentCodeEic'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['IdentifiedObject.energyIdentCodeEic'], 'cim:String', 'cim:IdentifiedObject.energyIdentCodeEic');
        } else {
          attributeEntries['emptyEntries']['cim:IdentifiedObject.energyIdentCodeEic'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['IdentifiedObject.energyIdentCodeEic'], 'cim:String', 'cim:IdentifiedObject.energyIdentCodeEic');
        }
        if ('cim:IdentifiedObject.shortName' in object) {
          attributeEntries['filledEntries']['cim:IdentifiedObject.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['IdentifiedObject.shortName'], 'cim:String', 'cim:IdentifiedObject.shortName');
        } else {
          attributeEntries['emptyEntries']['cim:IdentifiedObject.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['IdentifiedObject.shortName'], 'cim:String', 'cim:IdentifiedObject.shortName');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:IdentifiedObject.mRID", "cim:IdentifiedObject.name", "cim:IdentifiedObject.description", "cim:IdentifiedObject.energyIdentCodeEic", "cim:IdentifiedObject.shortName"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!IdentifiedObject.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class IdentifiedObject: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = IdentifiedObject.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["DiagramStyle", "Diagram", "DiagramObject", "TextDiagramObject", "DiagramObjectStyle", "VisibilityLayer", "DCNode", "BusNameMarker", "EnergySchedulingType", "FossilFuel", "ACDCTerminal", "DCBaseTerminal", "ACDCConverterDCTerminal", "DCTerminal", "Terminal", "BaseVoltage", "BasicIntervalSchedule", "RegularIntervalSchedule", "SeasonDayTypeSchedule", "ConformLoadSchedule", "NonConformLoadSchedule", "RegulationSchedule", "SwitchSchedule", "TapSchedule", "Curve", "VsCapabilityCurve", "ReactiveCapabilityCurve", "GrossToNetActivePowerCurve", "GeographicalRegion", "PowerSystemResource", "HydroPowerPlant", "ConnectivityNodeContainer", "EquipmentContainer", "DCEquipmentContainer", "DCConverterUnit", "DCLine", "Substation", "VoltageLevel", "Line", "Bay", "EquivalentNetwork", "Equipment", "DCConductingEquipment", "DCBusbar", "DCChopper", "DCGround", "DCLineSegment", "DCSeriesDevice", "DCShunt", "DCSwitch", "DCBreaker", "DCDisconnector", "GeneratingUnit", "HydroGeneratingUnit", "NuclearGeneratingUnit", "SolarGeneratingUnit", "ThermalGeneratingUnit", "WindGeneratingUnit", "HydroPump", "ConductingEquipment", "ACDCConverter", "CsConverter", "VsConverter", "EnergySource", "Conductor", "ACLineSegment", "Connector", "BusbarSection", "Junction", "EnergyConsumer", "ConformLoad", "NonConformLoad", "StationSupply", "PowerTransformer", "RegulatingCondEq", "ExternalNetworkInjection", "RotatingMachine", "AsynchronousMachine", "SynchronousMachine", "ShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "StaticVarCompensator", "SeriesCompensator", "Switch", "Disconnector", "ProtectedSwitch", "Breaker", "LoadBreakSwitch", "GroundDisconnector", "EquivalentEquipment", "EquivalentBranch", "EquivalentInjection", "EquivalentShunt", "EarthFaultCompensator", "GroundingImpedance", "PetersenCoil", "Ground", "RegulatingControl", "TapChangerControl", "TapChanger", "PhaseTapChanger", "PhaseTapChangerLinear", "PhaseTapChangerNonLinear", "PhaseTapChangerAsymmetrical", "PhaseTapChangerSymmetrical", "PhaseTapChangerTabular", "RatioTapChanger", "ControlArea", "ReportingGroup", "SubGeographicalRegion", "OperationalLimit", "CurrentLimit", "VoltageLimit", "ActivePowerLimit", "ApparentPowerLimit", "OperationalLimitSet", "OperationalLimitType", "PhaseTapChangerTable", "RatioTapChangerTable", "TransformerEnd", "PowerTransformerEnd", "LoadGroup", "ConformLoadGroup", "NonConformLoadGroup", "LoadResponseCharacteristic", "ControlAreaGeneratingUnit", "Control", "AccumulatorReset", "AnalogControl", "RaiseLowerCommand", "SetPoint", "Command", "Limit", "AccumulatorLimit", "AnalogLimit", "LimitSet", "AccumulatorLimitSet", "AnalogLimitSet", "Measurement", "Accumulator", "Analog", "Discrete", "StringMeasurement", "MeasurementValue", "AccumulatorValue", "AnalogValue", "DiscreteValue", "StringMeasurementValue", "MeasurementValueSource", "ValueAliasSet", "ValueToAlias", "ConnectivityNode", "MutualCoupling", "DayType", "EnergyArea", "LoadArea", "SubLoadArea", "Season", "DCTopologicalIsland", "DCTopologicalNode", "TopologicalNode", "TopologicalIsland", "CoordinateSystem", "Location", "RemoteInputSignal", "DynamicsFunctionBlock", "RotatingMachineDynamics", "SynchronousMachineDynamics", "SynchronousMachineUserDefined", "SynchronousMachineSimplified", "SynchronousMachineDetailed", "SynchronousMachineTimeConstantReactance", "SynchronousMachineEquivalentCircuit", "AsynchronousMachineDynamics", "AsynchronousMachineUserDefined", "AsynchronousMachineTimeConstantReactance", "AsynchronousMachineEquivalentCircuit", "TurbineGovernorDynamics", "TurbineGovernorUserDefined", "GovHydroIEEE0", "GovHydroIEEE2", "GovSteamIEEE1", "GovCT1", "GovCT2", "GovGAST", "GovGAST1", "GovGAST2", "GovGAST3", "GovGAST4", "GovGASTWD", "GovHydro1", "GovHydro2", "GovHydro3", "GovHydro4", "GovHydroDD", "GovHydroFrancis", "GovHydroPelton", "GovHydroPID", "GovHydroPID2", "GovHydroR", "GovHydroWEH", "GovHydroWPID", "GovSteam0", "GovSteam1", "GovSteam2", "GovSteamCC", "GovSteamEU", "GovSteamFV2", "GovSteamFV3", "GovSteamFV4", "GovSteamSGO", "TurbineLoadControllerDynamics", "TurbineLoadControllerUserDefined", "TurbLCFB1", "MechanicalLoadDynamics", "MechanicalLoadUserDefined", "MechLoad1", "ExcitationSystemDynamics", "ExcitationSystemUserDefined", "ExcIEEEAC1A", "ExcIEEEAC2A", "ExcIEEEAC3A", "ExcIEEEAC4A", "ExcIEEEAC5A", "ExcIEEEAC6A", "ExcIEEEAC7B", "ExcIEEEAC8B", "ExcIEEEDC1A", "ExcIEEEDC2A", "ExcIEEEDC3A", "ExcIEEEDC4B", "ExcIEEEST1A", "ExcIEEEST2A", "ExcIEEEST3A", "ExcIEEEST4B", "ExcIEEEST5B", "ExcIEEEST6B", "ExcIEEEST7B", "ExcAC1A", "ExcAC2A", "ExcAC3A", "ExcAC4A", "ExcAC5A", "ExcAC6A", "ExcAC8B", "ExcANS", "ExcAVR1", "ExcAVR2", "ExcAVR3", "ExcAVR4", "ExcAVR5", "ExcAVR7", "ExcBBC", "ExcCZ", "ExcDC1A", "ExcDC2A", "ExcDC3A", "ExcDC3A1", "ExcELIN1", "ExcELIN2", "ExcHU", "ExcOEX3T", "ExcPIC", "ExcREXS", "ExcSCRX", "ExcSEXS", "ExcSK", "ExcST1A", "ExcST2A", "ExcST3A", "ExcST4B", "ExcST6B", "ExcST7B", "OverexcitationLimiterDynamics", "OverexcitationLimiterUserDefined", "OverexcLimIEEE", "OverexcLim2", "OverexcLimX1", "OverexcLimX2", "UnderexcitationLimiterDynamics", "UnderexcitationLimiterUserDefined", "UnderexcLimIEEE1", "UnderexcLimIEEE2", "UnderexcLim2Simplified", "UnderexcLimX1", "UnderexcLimX2", "PowerSystemStabilizerDynamics", "PowerSystemStabilizerUserDefined", "PssIEEE1A", "PssIEEE2B", "PssIEEE3B", "PssIEEE4B", "Pss1", "Pss1A", "Pss2B", "Pss2ST", "Pss5", "PssELIN2", "PssPTIST1", "PssPTIST3", "PssSB4", "PssSH", "PssSK", "PssWECC", "DiscontinuousExcitationControlDynamics", "DiscontinuousExcitationControlUserDefined", "DiscExcContIEEEDEC1A", "DiscExcContIEEEDEC2A", "DiscExcContIEEEDEC3A", "PFVArControllerType1Dynamics", "PFVArControllerType1UserDefined", "PFVArType1IEEEPFController", "PFVArType1IEEEVArController", "VoltageAdjusterDynamics", "VoltageAdjusterUserDefined", "VAdjIEEE", "PFVArControllerType2Dynamics", "PFVArControllerType2UserDefined", "PFVArType2IEEEPFController", "PFVArType2IEEEVArController", "PFVArType2Common1", "VoltageCompensatorDynamics", "VoltageCompensatorUserDefined", "VCompIEEEType1", "VCompIEEEType2", "WindPlantDynamics", "WindPlantUserDefined", "WindPlantIEC", "WindTurbineType1or2Dynamics", "WindType1or2UserDefined", "WindTurbineType1or2IEC", "WindGenTurbineType1IEC", "WindGenTurbineType2IEC", "WindTurbineType3or4Dynamics", "WindType3or4UserDefined", "WindTurbineType3or4IEC", "WindGenTurbineType3IEC", "WindGenTurbineType3aIEC", "WindGenTurbineType3bIEC", "WindGenType4IEC", "WindTurbineType4aIEC", "WindTurbineType4bIEC", "GenICompensationForGenJ", "WindAeroConstIEC", "WindAeroLinearIEC", "WindContCurrLimIEC", "WindContPitchAngleIEC", "WindContPType3IEC", "WindContPType4aIEC", "WindContPType4bIEC", "WindContQIEC", "WindContRotorRIEC", "WindDynamicsLookupTable", "WindMechIEC", "WindPitchContEmulIEC", "WindPlantFreqPcontrolIEC", "WindPlantReactiveControlIEC", "WindProtectionIEC", "LoadDynamics", "LoadUserDefined", "LoadComposite", "LoadGenericNonLinear", "LoadAggregate", "LoadStatic", "LoadMotor"];
        return subClasses;
      }
    }]);
    return IdentifiedObject;
  }(BaseClass);
  _defineProperty(IdentifiedObject, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.GL, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD, CGMESProfile.shortNames.EQ_BD],
    'mRID': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.GL, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD, CGMESProfile.shortNames.EQ_BD],
    'name': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.GL, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD, CGMESProfile.shortNames.EQ_BD],
    'description': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD, CGMESProfile.shortNames.EQ_BD],
    'energyIdentCodeEic': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD, CGMESProfile.shortNames.EQ_BD],
    'shortName': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD, CGMESProfile.shortNames.EQ_BD]
  });

  var PowerSystemResource = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(PowerSystemResource, _IdentifiedObject);
    var _super = _createSuper(PowerSystemResource);
    function PowerSystemResource() {
      _classCallCheck(this, PowerSystemResource);
      return _super.apply(this, arguments);
    }
    _createClass(PowerSystemResource, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PowerSystemResource";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:PowerSystemResource.Measurements' in object) {
          attributeEntries['filledEntries']['cim:PowerSystemResource.Measurements'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerSystemResource.Measurements'], 'cim:Measurement', 'cim:PowerSystemResource.Measurements');
        } else {
          attributeEntries['emptyEntries']['cim:PowerSystemResource.Measurements'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerSystemResource.Measurements'], 'cim:Measurement', 'cim:PowerSystemResource.Measurements');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PowerSystemResource.Measurements"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PowerSystemResource.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PowerSystemResource: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PowerSystemResource.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["HydroPowerPlant", "ConnectivityNodeContainer", "EquipmentContainer", "DCEquipmentContainer", "DCConverterUnit", "DCLine", "DCConverterUnit", "DCLine", "Substation", "VoltageLevel", "Line", "Bay", "DCEquipmentContainer", "DCConverterUnit", "DCLine", "DCConverterUnit", "DCLine", "Substation", "VoltageLevel", "Line", "Bay", "EquivalentNetwork", "Equipment", "DCConductingEquipment", "DCBusbar", "DCChopper", "DCGround", "DCLineSegment", "DCSeriesDevice", "DCShunt", "DCSwitch", "DCBreaker", "DCDisconnector", "DCBreaker", "DCDisconnector", "DCBusbar", "DCChopper", "DCGround", "DCLineSegment", "DCSeriesDevice", "DCShunt", "DCSwitch", "DCBreaker", "DCDisconnector", "DCBreaker", "DCDisconnector", "DCBreaker", "DCDisconnector", "GeneratingUnit", "HydroGeneratingUnit", "NuclearGeneratingUnit", "SolarGeneratingUnit", "ThermalGeneratingUnit", "WindGeneratingUnit", "HydroGeneratingUnit", "NuclearGeneratingUnit", "SolarGeneratingUnit", "ThermalGeneratingUnit", "WindGeneratingUnit", "HydroPump", "ConductingEquipment", "ACDCConverter", "CsConverter", "VsConverter", "CsConverter", "VsConverter", "EnergySource", "Conductor", "ACLineSegment", "ACLineSegment", "Connector", "BusbarSection", "Junction", "BusbarSection", "Junction", "EnergyConsumer", "ConformLoad", "NonConformLoad", "StationSupply", "ConformLoad", "NonConformLoad", "StationSupply", "PowerTransformer", "RegulatingCondEq", "ExternalNetworkInjection", "RotatingMachine", "AsynchronousMachine", "SynchronousMachine", "ShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "StaticVarCompensator", "ExternalNetworkInjection", "RotatingMachine", "AsynchronousMachine", "SynchronousMachine", "AsynchronousMachine", "SynchronousMachine", "ShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "StaticVarCompensator", "SeriesCompensator", "Switch", "Disconnector", "ProtectedSwitch", "Breaker", "LoadBreakSwitch", "GroundDisconnector", "Disconnector", "ProtectedSwitch", "Breaker", "LoadBreakSwitch", "Breaker", "LoadBreakSwitch", "GroundDisconnector", "EquivalentEquipment", "EquivalentBranch", "EquivalentInjection", "EquivalentShunt", "EquivalentBranch", "EquivalentInjection", "EquivalentShunt", "EarthFaultCompensator", "GroundingImpedance", "PetersenCoil", "GroundingImpedance", "PetersenCoil", "Ground", "ACDCConverter", "CsConverter", "VsConverter", "CsConverter", "VsConverter", "CsConverter", "VsConverter", "EnergySource", "Conductor", "ACLineSegment", "ACLineSegment", "ACLineSegment", "Connector", "BusbarSection", "Junction", "BusbarSection", "Junction", "BusbarSection", "Junction", "EnergyConsumer", "ConformLoad", "NonConformLoad", "StationSupply", "ConformLoad", "NonConformLoad", "StationSupply", "ConformLoad", "NonConformLoad", "StationSupply", "PowerTransformer", "RegulatingCondEq", "ExternalNetworkInjection", "RotatingMachine", "AsynchronousMachine", "SynchronousMachine", "ShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "StaticVarCompensator", "ExternalNetworkInjection", "RotatingMachine", "AsynchronousMachine", "SynchronousMachine", "AsynchronousMachine", "SynchronousMachine", "ShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "StaticVarCompensator", "ExternalNetworkInjection", "RotatingMachine", "AsynchronousMachine", "SynchronousMachine", "AsynchronousMachine", "SynchronousMachine", "AsynchronousMachine", "SynchronousMachine", "ShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "StaticVarCompensator", "SeriesCompensator", "Switch", "Disconnector", "ProtectedSwitch", "Breaker", "LoadBreakSwitch", "GroundDisconnector", "Disconnector", "ProtectedSwitch", "Breaker", "LoadBreakSwitch", "Breaker", "LoadBreakSwitch", "GroundDisconnector", "Disconnector", "ProtectedSwitch", "Breaker", "LoadBreakSwitch", "Breaker", "LoadBreakSwitch", "Breaker", "LoadBreakSwitch", "GroundDisconnector", "EquivalentEquipment", "EquivalentBranch", "EquivalentInjection", "EquivalentShunt", "EquivalentBranch", "EquivalentInjection", "EquivalentShunt", "EquivalentBranch", "EquivalentInjection", "EquivalentShunt", "EarthFaultCompensator", "GroundingImpedance", "PetersenCoil", "GroundingImpedance", "PetersenCoil", "GroundingImpedance", "PetersenCoil", "Ground", "RegulatingControl", "TapChangerControl", "TapChanger", "PhaseTapChanger", "PhaseTapChangerLinear", "PhaseTapChangerNonLinear", "PhaseTapChangerAsymmetrical", "PhaseTapChangerSymmetrical", "PhaseTapChangerTabular", "RatioTapChanger", "ControlArea"];
        return subClasses;
      }
    }]);
    return PowerSystemResource;
  }(IdentifiedObject);
  _defineProperty(PowerSystemResource, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.GL, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.EQ_BD],
    'Measurements': [CGMESProfile.shortNames.EQ]
  });

  var Equipment = /*#__PURE__*/function (_PowerSystemResource) {
    _inherits(Equipment, _PowerSystemResource);
    var _super = _createSuper(Equipment);
    function Equipment() {
      _classCallCheck(this, Equipment);
      return _super.apply(this, arguments);
    }
    _createClass(Equipment, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Equipment";
        var attributeEntries = PowerSystemResource.attributeHTML(object, cimmenu, classType);
        if ('cim:Equipment.aggregate' in object) {
          attributeEntries['filledEntries']['cim:Equipment.aggregate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Equipment.aggregate'], 'cim:Boolean', 'cim:Equipment.aggregate');
        } else {
          attributeEntries['emptyEntries']['cim:Equipment.aggregate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Equipment.aggregate'], 'cim:Boolean', 'cim:Equipment.aggregate');
        }
        if ('cim:Equipment.EquipmentContainer' in object) {
          attributeEntries['filledEntries']['cim:Equipment.EquipmentContainer'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Equipment.EquipmentContainer'], 'cim:EquipmentContainer', 'cim:Equipment.EquipmentContainer');
        } else {
          attributeEntries['emptyEntries']['cim:Equipment.EquipmentContainer'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Equipment.EquipmentContainer'], 'cim:EquipmentContainer', 'cim:Equipment.EquipmentContainer');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Equipment.aggregate", "cim:Equipment.EquipmentContainer"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemResource.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Equipment.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Equipment: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Equipment.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["DCConductingEquipment", "DCBusbar", "DCChopper", "DCGround", "DCLineSegment", "DCSeriesDevice", "DCShunt", "DCSwitch", "DCBreaker", "DCDisconnector", "DCBreaker", "DCDisconnector", "GeneratingUnit", "HydroGeneratingUnit", "NuclearGeneratingUnit", "SolarGeneratingUnit", "ThermalGeneratingUnit", "WindGeneratingUnit", "HydroPump", "ConductingEquipment", "ACDCConverter", "CsConverter", "VsConverter", "CsConverter", "VsConverter", "EnergySource", "Conductor", "ACLineSegment", "ACLineSegment", "Connector", "BusbarSection", "Junction", "BusbarSection", "Junction", "EnergyConsumer", "ConformLoad", "NonConformLoad", "StationSupply", "ConformLoad", "NonConformLoad", "StationSupply", "PowerTransformer", "RegulatingCondEq", "ExternalNetworkInjection", "RotatingMachine", "AsynchronousMachine", "SynchronousMachine", "ShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "StaticVarCompensator", "ExternalNetworkInjection", "RotatingMachine", "AsynchronousMachine", "SynchronousMachine", "AsynchronousMachine", "SynchronousMachine", "ShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "StaticVarCompensator", "SeriesCompensator", "Switch", "Disconnector", "ProtectedSwitch", "Breaker", "LoadBreakSwitch", "GroundDisconnector", "Disconnector", "ProtectedSwitch", "Breaker", "LoadBreakSwitch", "Breaker", "LoadBreakSwitch", "GroundDisconnector", "EquivalentEquipment", "EquivalentBranch", "EquivalentInjection", "EquivalentShunt", "EquivalentBranch", "EquivalentInjection", "EquivalentShunt", "EarthFaultCompensator", "GroundingImpedance", "PetersenCoil", "GroundingImpedance", "PetersenCoil", "Ground"];
        return subClasses;
      }
    }]);
    return Equipment;
  }(PowerSystemResource);
  _defineProperty(Equipment, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.EQ_BD],
    'aggregate': [CGMESProfile.shortNames.EQ],
    'EquipmentContainer': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD]
  });

  var ConductingEquipment = /*#__PURE__*/function (_Equipment) {
    _inherits(ConductingEquipment, _Equipment);
    var _super = _createSuper(ConductingEquipment);
    function ConductingEquipment() {
      _classCallCheck(this, ConductingEquipment);
      return _super.apply(this, arguments);
    }
    _createClass(ConductingEquipment, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ConductingEquipment";
        var attributeEntries = Equipment.attributeHTML(object, cimmenu, classType);
        if ('cim:ConductingEquipment.BaseVoltage' in object) {
          attributeEntries['filledEntries']['cim:ConductingEquipment.BaseVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConductingEquipment.BaseVoltage'], 'cim:BaseVoltage', 'cim:ConductingEquipment.BaseVoltage');
        } else {
          attributeEntries['emptyEntries']['cim:ConductingEquipment.BaseVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConductingEquipment.BaseVoltage'], 'cim:BaseVoltage', 'cim:ConductingEquipment.BaseVoltage');
        }
        if ('cim:ConductingEquipment.SvStatus' in object) {
          attributeEntries['filledEntries']['cim:ConductingEquipment.SvStatus'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConductingEquipment.SvStatus'], 'cim:SvStatus', 'cim:ConductingEquipment.SvStatus');
        } else {
          attributeEntries['emptyEntries']['cim:ConductingEquipment.SvStatus'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConductingEquipment.SvStatus'], 'cim:SvStatus', 'cim:ConductingEquipment.SvStatus');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ConductingEquipment.BaseVoltage", "cim:ConductingEquipment.SvStatus"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Equipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ConductingEquipment.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ConductingEquipment: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ConductingEquipment.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["ACDCConverter", "CsConverter", "VsConverter", "EnergySource", "Conductor", "ACLineSegment", "Connector", "BusbarSection", "Junction", "EnergyConsumer", "ConformLoad", "NonConformLoad", "StationSupply", "PowerTransformer", "RegulatingCondEq", "ExternalNetworkInjection", "RotatingMachine", "AsynchronousMachine", "SynchronousMachine", "ShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "StaticVarCompensator", "SeriesCompensator", "Switch", "Disconnector", "ProtectedSwitch", "Breaker", "LoadBreakSwitch", "GroundDisconnector", "EquivalentEquipment", "EquivalentBranch", "EquivalentInjection", "EquivalentShunt", "EarthFaultCompensator", "GroundingImpedance", "PetersenCoil", "Ground"];
        return subClasses;
      }
    }]);
    return ConductingEquipment;
  }(Equipment);
  _defineProperty(ConductingEquipment, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.EQ_BD],
    'BaseVoltage': [CGMESProfile.shortNames.EQ],
    'SvStatus': [CGMESProfile.shortNames.SV]
  });

  var ACDCConverter = /*#__PURE__*/function (_ConductingEquipment) {
    _inherits(ACDCConverter, _ConductingEquipment);
    var _super = _createSuper(ACDCConverter);
    function ACDCConverter() {
      _classCallCheck(this, ACDCConverter);
      return _super.apply(this, arguments);
    }
    _createClass(ACDCConverter, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ACDCConverter";
        var attributeEntries = ConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:ACDCConverter.baseS' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.baseS'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.baseS'], 'cim:ApparentPower', 'cim:ACDCConverter.baseS');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.baseS'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.baseS'], 'cim:ApparentPower', 'cim:ACDCConverter.baseS');
        }
        if ('cim:ACDCConverter.idleLoss' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.idleLoss'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.idleLoss'], 'cim:ActivePower', 'cim:ACDCConverter.idleLoss');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.idleLoss'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.idleLoss'], 'cim:ActivePower', 'cim:ACDCConverter.idleLoss');
        }
        if ('cim:ACDCConverter.maxUdc' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.maxUdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.maxUdc'], 'cim:Voltage', 'cim:ACDCConverter.maxUdc');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.maxUdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.maxUdc'], 'cim:Voltage', 'cim:ACDCConverter.maxUdc');
        }
        if ('cim:ACDCConverter.minUdc' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.minUdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.minUdc'], 'cim:Voltage', 'cim:ACDCConverter.minUdc');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.minUdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.minUdc'], 'cim:Voltage', 'cim:ACDCConverter.minUdc');
        }
        if ('cim:ACDCConverter.numberOfValves' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.numberOfValves'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.numberOfValves'], 'cim:Integer', 'cim:ACDCConverter.numberOfValves');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.numberOfValves'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.numberOfValves'], 'cim:Integer', 'cim:ACDCConverter.numberOfValves');
        }
        if ('cim:ACDCConverter.ratedUdc' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.ratedUdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.ratedUdc'], 'cim:Voltage', 'cim:ACDCConverter.ratedUdc');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.ratedUdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.ratedUdc'], 'cim:Voltage', 'cim:ACDCConverter.ratedUdc');
        }
        if ('cim:ACDCConverter.resistiveLoss' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.resistiveLoss'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.resistiveLoss'], 'cim:Resistance', 'cim:ACDCConverter.resistiveLoss');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.resistiveLoss'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.resistiveLoss'], 'cim:Resistance', 'cim:ACDCConverter.resistiveLoss');
        }
        if ('cim:ACDCConverter.switchingLoss' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.switchingLoss'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.switchingLoss'], 'cim:ActivePowerPerCurrentFlow', 'cim:ACDCConverter.switchingLoss');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.switchingLoss'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.switchingLoss'], 'cim:ActivePowerPerCurrentFlow', 'cim:ACDCConverter.switchingLoss');
        }
        if ('cim:ACDCConverter.valveU0' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.valveU0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.valveU0'], 'cim:Voltage', 'cim:ACDCConverter.valveU0');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.valveU0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.valveU0'], 'cim:Voltage', 'cim:ACDCConverter.valveU0');
        }
        if ('cim:ACDCConverter.PccTerminal' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.PccTerminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.PccTerminal'], 'cim:Terminal', 'cim:ACDCConverter.PccTerminal');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.PccTerminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.PccTerminal'], 'cim:Terminal', 'cim:ACDCConverter.PccTerminal');
        }
        if ('cim:ACDCConverter.p' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.p'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.p'], 'cim:ActivePower', 'cim:ACDCConverter.p');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.p'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.p'], 'cim:ActivePower', 'cim:ACDCConverter.p');
        }
        if ('cim:ACDCConverter.q' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.q'], 'cim:ReactivePower', 'cim:ACDCConverter.q');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.q'], 'cim:ReactivePower', 'cim:ACDCConverter.q');
        }
        if ('cim:ACDCConverter.targetPpcc' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.targetPpcc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.targetPpcc'], 'cim:ActivePower', 'cim:ACDCConverter.targetPpcc');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.targetPpcc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.targetPpcc'], 'cim:ActivePower', 'cim:ACDCConverter.targetPpcc');
        }
        if ('cim:ACDCConverter.targetUdc' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.targetUdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.targetUdc'], 'cim:Voltage', 'cim:ACDCConverter.targetUdc');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.targetUdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.targetUdc'], 'cim:Voltage', 'cim:ACDCConverter.targetUdc');
        }
        if ('cim:ACDCConverter.idc' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.idc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.idc'], 'cim:CurrentFlow', 'cim:ACDCConverter.idc');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.idc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.idc'], 'cim:CurrentFlow', 'cim:ACDCConverter.idc');
        }
        if ('cim:ACDCConverter.poleLossP' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.poleLossP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.poleLossP'], 'cim:ActivePower', 'cim:ACDCConverter.poleLossP');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.poleLossP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.poleLossP'], 'cim:ActivePower', 'cim:ACDCConverter.poleLossP');
        }
        if ('cim:ACDCConverter.uc' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.uc'], 'cim:Voltage', 'cim:ACDCConverter.uc');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.uc'], 'cim:Voltage', 'cim:ACDCConverter.uc');
        }
        if ('cim:ACDCConverter.udc' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverter.udc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.udc'], 'cim:Voltage', 'cim:ACDCConverter.udc');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverter.udc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverter.udc'], 'cim:Voltage', 'cim:ACDCConverter.udc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ACDCConverter.baseS", "cim:ACDCConverter.idleLoss", "cim:ACDCConverter.maxUdc", "cim:ACDCConverter.minUdc", "cim:ACDCConverter.numberOfValves", "cim:ACDCConverter.ratedUdc", "cim:ACDCConverter.resistiveLoss", "cim:ACDCConverter.switchingLoss", "cim:ACDCConverter.valveU0", "cim:ACDCConverter.PccTerminal", "cim:ACDCConverter.p", "cim:ACDCConverter.q", "cim:ACDCConverter.targetPpcc", "cim:ACDCConverter.targetUdc", "cim:ACDCConverter.idc", "cim:ACDCConverter.poleLossP", "cim:ACDCConverter.uc", "cim:ACDCConverter.udc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ACDCConverter.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ACDCConverter: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ACDCConverter.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["CsConverter", "VsConverter"];
        return subClasses;
      }
    }]);
    return ACDCConverter;
  }(ConductingEquipment);
  _defineProperty(ACDCConverter, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV],
    'baseS': [CGMESProfile.shortNames.EQ],
    'idleLoss': [CGMESProfile.shortNames.EQ],
    'maxUdc': [CGMESProfile.shortNames.EQ],
    'minUdc': [CGMESProfile.shortNames.EQ],
    'numberOfValves': [CGMESProfile.shortNames.EQ],
    'ratedUdc': [CGMESProfile.shortNames.EQ],
    'resistiveLoss': [CGMESProfile.shortNames.EQ],
    'switchingLoss': [CGMESProfile.shortNames.EQ],
    'valveU0': [CGMESProfile.shortNames.EQ],
    'PccTerminal': [CGMESProfile.shortNames.EQ],
    'p': [CGMESProfile.shortNames.SSH],
    'q': [CGMESProfile.shortNames.SSH],
    'targetPpcc': [CGMESProfile.shortNames.SSH],
    'targetUdc': [CGMESProfile.shortNames.SSH],
    'idc': [CGMESProfile.shortNames.SV],
    'poleLossP': [CGMESProfile.shortNames.SV],
    'uc': [CGMESProfile.shortNames.SV],
    'udc': [CGMESProfile.shortNames.SV]
  });

  var ACDCTerminal = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(ACDCTerminal, _IdentifiedObject);
    var _super = _createSuper(ACDCTerminal);
    function ACDCTerminal() {
      _classCallCheck(this, ACDCTerminal);
      return _super.apply(this, arguments);
    }
    _createClass(ACDCTerminal, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ACDCTerminal";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:ACDCTerminal.BusNameMarker' in object) {
          attributeEntries['filledEntries']['cim:ACDCTerminal.BusNameMarker'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCTerminal.BusNameMarker'], 'cim:BusNameMarker', 'cim:ACDCTerminal.BusNameMarker');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCTerminal.BusNameMarker'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCTerminal.BusNameMarker'], 'cim:BusNameMarker', 'cim:ACDCTerminal.BusNameMarker');
        }
        if ('cim:ACDCTerminal.sequenceNumber' in object) {
          attributeEntries['filledEntries']['cim:ACDCTerminal.sequenceNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCTerminal.sequenceNumber'], 'cim:Integer', 'cim:ACDCTerminal.sequenceNumber');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCTerminal.sequenceNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCTerminal.sequenceNumber'], 'cim:Integer', 'cim:ACDCTerminal.sequenceNumber');
        }
        if ('cim:ACDCTerminal.Measurements' in object) {
          attributeEntries['filledEntries']['cim:ACDCTerminal.Measurements'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCTerminal.Measurements'], 'cim:Measurement', 'cim:ACDCTerminal.Measurements');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCTerminal.Measurements'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCTerminal.Measurements'], 'cim:Measurement', 'cim:ACDCTerminal.Measurements');
        }
        if ('cim:ACDCTerminal.connected' in object) {
          attributeEntries['filledEntries']['cim:ACDCTerminal.connected'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCTerminal.connected'], 'cim:Boolean', 'cim:ACDCTerminal.connected');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCTerminal.connected'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCTerminal.connected'], 'cim:Boolean', 'cim:ACDCTerminal.connected');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ACDCTerminal.BusNameMarker", "cim:ACDCTerminal.sequenceNumber", "cim:ACDCTerminal.Measurements", "cim:ACDCTerminal.connected"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ACDCTerminal.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ACDCTerminal: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ACDCTerminal.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["DCBaseTerminal", "ACDCConverterDCTerminal", "DCTerminal", "Terminal"];
        return subClasses;
      }
    }]);
    return ACDCTerminal;
  }(IdentifiedObject);
  _defineProperty(ACDCTerminal, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.TP],
    'BusNameMarker': [CGMESProfile.shortNames.EQ],
    'sequenceNumber': [CGMESProfile.shortNames.EQ],
    'Measurements': [CGMESProfile.shortNames.EQ],
    'connected': [CGMESProfile.shortNames.SSH]
  });

  var DCBaseTerminal = /*#__PURE__*/function (_ACDCTerminal) {
    _inherits(DCBaseTerminal, _ACDCTerminal);
    var _super = _createSuper(DCBaseTerminal);
    function DCBaseTerminal() {
      _classCallCheck(this, DCBaseTerminal);
      return _super.apply(this, arguments);
    }
    _createClass(DCBaseTerminal, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCBaseTerminal";
        var attributeEntries = ACDCTerminal.attributeHTML(object, cimmenu, classType);
        if ('cim:DCBaseTerminal.DCNode' in object) {
          attributeEntries['filledEntries']['cim:DCBaseTerminal.DCNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCBaseTerminal.DCNode'], 'cim:DCNode', 'cim:DCBaseTerminal.DCNode');
        } else {
          attributeEntries['emptyEntries']['cim:DCBaseTerminal.DCNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCBaseTerminal.DCNode'], 'cim:DCNode', 'cim:DCBaseTerminal.DCNode');
        }
        if ('cim:DCBaseTerminal.DCTopologicalNode' in object) {
          attributeEntries['filledEntries']['cim:DCBaseTerminal.DCTopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCBaseTerminal.DCTopologicalNode'], 'cim:DCTopologicalNode', 'cim:DCBaseTerminal.DCTopologicalNode');
        } else {
          attributeEntries['emptyEntries']['cim:DCBaseTerminal.DCTopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCBaseTerminal.DCTopologicalNode'], 'cim:DCTopologicalNode', 'cim:DCBaseTerminal.DCTopologicalNode');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DCBaseTerminal.DCNode", "cim:DCBaseTerminal.DCTopologicalNode"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ACDCTerminal.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCBaseTerminal.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCBaseTerminal: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCBaseTerminal.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["ACDCConverterDCTerminal", "DCTerminal"];
        return subClasses;
      }
    }]);
    return DCBaseTerminal;
  }(ACDCTerminal);
  _defineProperty(DCBaseTerminal, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.TP],
    'DCNode': [CGMESProfile.shortNames.EQ],
    'DCTopologicalNode': [CGMESProfile.shortNames.TP]
  });

  var ACDCConverterDCTerminal = /*#__PURE__*/function (_DCBaseTerminal) {
    _inherits(ACDCConverterDCTerminal, _DCBaseTerminal);
    var _super = _createSuper(ACDCConverterDCTerminal);
    function ACDCConverterDCTerminal() {
      _classCallCheck(this, ACDCConverterDCTerminal);
      return _super.apply(this, arguments);
    }
    _createClass(ACDCConverterDCTerminal, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ACDCConverterDCTerminal";
        var attributeEntries = DCBaseTerminal.attributeHTML(object, cimmenu, classType);
        if ('cim:ACDCConverterDCTerminal.DCConductingEquipment' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverterDCTerminal.DCConductingEquipment'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverterDCTerminal.DCConductingEquipment'], 'cim:ACDCConverter', 'cim:ACDCConverterDCTerminal.DCConductingEquipment');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverterDCTerminal.DCConductingEquipment'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverterDCTerminal.DCConductingEquipment'], 'cim:ACDCConverter', 'cim:ACDCConverterDCTerminal.DCConductingEquipment');
        }
        if ('cim:ACDCConverterDCTerminal.polarity' in object) {
          attributeEntries['filledEntries']['cim:ACDCConverterDCTerminal.polarity'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverterDCTerminal.polarity'], 'cim:DCPolarityKind', 'cim:ACDCConverterDCTerminal.polarity');
        } else {
          attributeEntries['emptyEntries']['cim:ACDCConverterDCTerminal.polarity'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACDCConverterDCTerminal.polarity'], 'cim:DCPolarityKind', 'cim:ACDCConverterDCTerminal.polarity');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ACDCConverterDCTerminal.DCConductingEquipment", "cim:ACDCConverterDCTerminal.polarity"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCBaseTerminal.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ACDCConverterDCTerminal.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ACDCConverterDCTerminal: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ACDCConverterDCTerminal.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ACDCConverterDCTerminal;
  }(DCBaseTerminal);
  _defineProperty(ACDCConverterDCTerminal, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.TP],
    'DCConductingEquipment': [CGMESProfile.shortNames.EQ],
    'polarity': [CGMESProfile.shortNames.EQ]
  });

  var Conductor = /*#__PURE__*/function (_ConductingEquipment) {
    _inherits(Conductor, _ConductingEquipment);
    var _super = _createSuper(Conductor);
    function Conductor() {
      _classCallCheck(this, Conductor);
      return _super.apply(this, arguments);
    }
    _createClass(Conductor, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Conductor";
        var attributeEntries = ConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:Conductor.length' in object) {
          attributeEntries['filledEntries']['cim:Conductor.length'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Conductor.length'], 'cim:Length', 'cim:Conductor.length');
        } else {
          attributeEntries['emptyEntries']['cim:Conductor.length'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Conductor.length'], 'cim:Length', 'cim:Conductor.length');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Conductor.length"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Conductor.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Conductor: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Conductor.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["ACLineSegment"];
        return subClasses;
      }
    }]);
    return Conductor;
  }(ConductingEquipment);
  _defineProperty(Conductor, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'length': [CGMESProfile.shortNames.EQ]
  });

  var ACLineSegment = /*#__PURE__*/function (_Conductor) {
    _inherits(ACLineSegment, _Conductor);
    var _super = _createSuper(ACLineSegment);
    function ACLineSegment() {
      _classCallCheck(this, ACLineSegment);
      return _super.apply(this, arguments);
    }
    _createClass(ACLineSegment, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ACLineSegment";
        var attributeEntries = Conductor.attributeHTML(object, cimmenu, classType);
        if ('cim:ACLineSegment.bch' in object) {
          attributeEntries['filledEntries']['cim:ACLineSegment.bch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.bch'], 'cim:Susceptance', 'cim:ACLineSegment.bch');
        } else {
          attributeEntries['emptyEntries']['cim:ACLineSegment.bch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.bch'], 'cim:Susceptance', 'cim:ACLineSegment.bch');
        }
        if ('cim:ACLineSegment.gch' in object) {
          attributeEntries['filledEntries']['cim:ACLineSegment.gch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.gch'], 'cim:Conductance', 'cim:ACLineSegment.gch');
        } else {
          attributeEntries['emptyEntries']['cim:ACLineSegment.gch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.gch'], 'cim:Conductance', 'cim:ACLineSegment.gch');
        }
        if ('cim:ACLineSegment.r' in object) {
          attributeEntries['filledEntries']['cim:ACLineSegment.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.r'], 'cim:Resistance', 'cim:ACLineSegment.r');
        } else {
          attributeEntries['emptyEntries']['cim:ACLineSegment.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.r'], 'cim:Resistance', 'cim:ACLineSegment.r');
        }
        if ('cim:ACLineSegment.x' in object) {
          attributeEntries['filledEntries']['cim:ACLineSegment.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.x'], 'cim:Reactance', 'cim:ACLineSegment.x');
        } else {
          attributeEntries['emptyEntries']['cim:ACLineSegment.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.x'], 'cim:Reactance', 'cim:ACLineSegment.x');
        }
        if ('cim:ACLineSegment.b0ch' in object) {
          attributeEntries['filledEntries']['cim:ACLineSegment.b0ch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.b0ch'], 'cim:Susceptance', 'cim:ACLineSegment.b0ch');
        } else {
          attributeEntries['emptyEntries']['cim:ACLineSegment.b0ch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.b0ch'], 'cim:Susceptance', 'cim:ACLineSegment.b0ch');
        }
        if ('cim:ACLineSegment.g0ch' in object) {
          attributeEntries['filledEntries']['cim:ACLineSegment.g0ch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.g0ch'], 'cim:Conductance', 'cim:ACLineSegment.g0ch');
        } else {
          attributeEntries['emptyEntries']['cim:ACLineSegment.g0ch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.g0ch'], 'cim:Conductance', 'cim:ACLineSegment.g0ch');
        }
        if ('cim:ACLineSegment.r0' in object) {
          attributeEntries['filledEntries']['cim:ACLineSegment.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.r0'], 'cim:Resistance', 'cim:ACLineSegment.r0');
        } else {
          attributeEntries['emptyEntries']['cim:ACLineSegment.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.r0'], 'cim:Resistance', 'cim:ACLineSegment.r0');
        }
        if ('cim:ACLineSegment.shortCircuitEndTemperature' in object) {
          attributeEntries['filledEntries']['cim:ACLineSegment.shortCircuitEndTemperature'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.shortCircuitEndTemperature'], 'cim:Temperature', 'cim:ACLineSegment.shortCircuitEndTemperature');
        } else {
          attributeEntries['emptyEntries']['cim:ACLineSegment.shortCircuitEndTemperature'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.shortCircuitEndTemperature'], 'cim:Temperature', 'cim:ACLineSegment.shortCircuitEndTemperature');
        }
        if ('cim:ACLineSegment.x0' in object) {
          attributeEntries['filledEntries']['cim:ACLineSegment.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.x0'], 'cim:Reactance', 'cim:ACLineSegment.x0');
        } else {
          attributeEntries['emptyEntries']['cim:ACLineSegment.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ACLineSegment.x0'], 'cim:Reactance', 'cim:ACLineSegment.x0');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ACLineSegment.bch", "cim:ACLineSegment.gch", "cim:ACLineSegment.r", "cim:ACLineSegment.x", "cim:ACLineSegment.b0ch", "cim:ACLineSegment.g0ch", "cim:ACLineSegment.r0", "cim:ACLineSegment.shortCircuitEndTemperature", "cim:ACLineSegment.x0"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Conductor.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ACLineSegment.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ACLineSegment: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ACLineSegment.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ACLineSegment;
  }(Conductor);
  _defineProperty(ACLineSegment, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'bch': [CGMESProfile.shortNames.EQ],
    'gch': [CGMESProfile.shortNames.EQ],
    'r': [CGMESProfile.shortNames.EQ],
    'x': [CGMESProfile.shortNames.EQ],
    'b0ch': [CGMESProfile.shortNames.EQ],
    'g0ch': [CGMESProfile.shortNames.EQ],
    'r0': [CGMESProfile.shortNames.EQ],
    'shortCircuitEndTemperature': [CGMESProfile.shortNames.EQ],
    'x0': [CGMESProfile.shortNames.EQ]
  });

  var Measurement = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(Measurement, _IdentifiedObject);
    var _super = _createSuper(Measurement);
    function Measurement() {
      _classCallCheck(this, Measurement);
      return _super.apply(this, arguments);
    }
    _createClass(Measurement, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Measurement";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:Measurement.measurementType' in object) {
          attributeEntries['filledEntries']['cim:Measurement.measurementType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Measurement.measurementType'], 'cim:String', 'cim:Measurement.measurementType');
        } else {
          attributeEntries['emptyEntries']['cim:Measurement.measurementType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Measurement.measurementType'], 'cim:String', 'cim:Measurement.measurementType');
        }
        if ('cim:Measurement.phases' in object) {
          attributeEntries['filledEntries']['cim:Measurement.phases'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Measurement.phases'], 'cim:PhaseCode', 'cim:Measurement.phases');
        } else {
          attributeEntries['emptyEntries']['cim:Measurement.phases'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Measurement.phases'], 'cim:PhaseCode', 'cim:Measurement.phases');
        }
        if ('cim:Measurement.unitSymbol' in object) {
          attributeEntries['filledEntries']['cim:Measurement.unitSymbol'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Measurement.unitSymbol'], 'cim:UnitSymbol', 'cim:Measurement.unitSymbol');
        } else {
          attributeEntries['emptyEntries']['cim:Measurement.unitSymbol'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Measurement.unitSymbol'], 'cim:UnitSymbol', 'cim:Measurement.unitSymbol');
        }
        if ('cim:Measurement.unitMultiplier' in object) {
          attributeEntries['filledEntries']['cim:Measurement.unitMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Measurement.unitMultiplier'], 'cim:UnitMultiplier', 'cim:Measurement.unitMultiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Measurement.unitMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Measurement.unitMultiplier'], 'cim:UnitMultiplier', 'cim:Measurement.unitMultiplier');
        }
        if ('cim:Measurement.Terminal' in object) {
          attributeEntries['filledEntries']['cim:Measurement.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Measurement.Terminal'], 'cim:ACDCTerminal', 'cim:Measurement.Terminal');
        } else {
          attributeEntries['emptyEntries']['cim:Measurement.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Measurement.Terminal'], 'cim:ACDCTerminal', 'cim:Measurement.Terminal');
        }
        if ('cim:Measurement.PowerSystemResource' in object) {
          attributeEntries['filledEntries']['cim:Measurement.PowerSystemResource'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Measurement.PowerSystemResource'], 'cim:PowerSystemResource', 'cim:Measurement.PowerSystemResource');
        } else {
          attributeEntries['emptyEntries']['cim:Measurement.PowerSystemResource'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Measurement.PowerSystemResource'], 'cim:PowerSystemResource', 'cim:Measurement.PowerSystemResource');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Measurement.measurementType", "cim:Measurement.phases", "cim:Measurement.unitSymbol", "cim:Measurement.unitMultiplier", "cim:Measurement.Terminal", "cim:Measurement.PowerSystemResource"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Measurement.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Measurement: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Measurement.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["Accumulator", "Analog", "Discrete", "StringMeasurement"];
        return subClasses;
      }
    }]);
    return Measurement;
  }(IdentifiedObject);
  _defineProperty(Measurement, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'measurementType': [CGMESProfile.shortNames.EQ],
    'phases': [CGMESProfile.shortNames.EQ],
    'unitSymbol': [CGMESProfile.shortNames.EQ],
    'unitMultiplier': [CGMESProfile.shortNames.EQ],
    'Terminal': [CGMESProfile.shortNames.EQ],
    'PowerSystemResource': [CGMESProfile.shortNames.EQ]
  });

  var Accumulator = /*#__PURE__*/function (_Measurement) {
    _inherits(Accumulator, _Measurement);
    var _super = _createSuper(Accumulator);
    function Accumulator() {
      _classCallCheck(this, Accumulator);
      return _super.apply(this, arguments);
    }
    _createClass(Accumulator, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Accumulator";
        var attributeEntries = Measurement.attributeHTML(object, cimmenu, classType);
        if ('cim:Accumulator.AccumulatorValues' in object) {
          attributeEntries['filledEntries']['cim:Accumulator.AccumulatorValues'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Accumulator.AccumulatorValues'], 'cim:AccumulatorValue', 'cim:Accumulator.AccumulatorValues');
        } else {
          attributeEntries['emptyEntries']['cim:Accumulator.AccumulatorValues'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Accumulator.AccumulatorValues'], 'cim:AccumulatorValue', 'cim:Accumulator.AccumulatorValues');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Accumulator.AccumulatorValues"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Measurement.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Accumulator.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Accumulator: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Accumulator.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Accumulator;
  }(Measurement);
  _defineProperty(Accumulator, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'AccumulatorValues': [CGMESProfile.shortNames.EQ]
  });

  var Limit = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(Limit, _IdentifiedObject);
    var _super = _createSuper(Limit);
    function Limit() {
      _classCallCheck(this, Limit);
      return _super.apply(this, arguments);
    }
    _createClass(Limit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Limit";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Limit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Limit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Limit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["AccumulatorLimit", "AnalogLimit"];
        return subClasses;
      }
    }]);
    return Limit;
  }(IdentifiedObject);
  _defineProperty(Limit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var AccumulatorLimit = /*#__PURE__*/function (_Limit) {
    _inherits(AccumulatorLimit, _Limit);
    var _super = _createSuper(AccumulatorLimit);
    function AccumulatorLimit() {
      _classCallCheck(this, AccumulatorLimit);
      return _super.apply(this, arguments);
    }
    _createClass(AccumulatorLimit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AccumulatorLimit";
        var attributeEntries = Limit.attributeHTML(object, cimmenu, classType);
        if ('cim:AccumulatorLimit.value' in object) {
          attributeEntries['filledEntries']['cim:AccumulatorLimit.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AccumulatorLimit.value'], 'cim:Integer', 'cim:AccumulatorLimit.value');
        } else {
          attributeEntries['emptyEntries']['cim:AccumulatorLimit.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AccumulatorLimit.value'], 'cim:Integer', 'cim:AccumulatorLimit.value');
        }
        if ('cim:AccumulatorLimit.LimitSet' in object) {
          attributeEntries['filledEntries']['cim:AccumulatorLimit.LimitSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AccumulatorLimit.LimitSet'], 'cim:AccumulatorLimitSet', 'cim:AccumulatorLimit.LimitSet');
        } else {
          attributeEntries['emptyEntries']['cim:AccumulatorLimit.LimitSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AccumulatorLimit.LimitSet'], 'cim:AccumulatorLimitSet', 'cim:AccumulatorLimit.LimitSet');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AccumulatorLimit.value", "cim:AccumulatorLimit.LimitSet"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Limit.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AccumulatorLimit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AccumulatorLimit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AccumulatorLimit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AccumulatorLimit;
  }(Limit);
  _defineProperty(AccumulatorLimit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'LimitSet': [CGMESProfile.shortNames.EQ]
  });

  var LimitSet = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(LimitSet, _IdentifiedObject);
    var _super = _createSuper(LimitSet);
    function LimitSet() {
      _classCallCheck(this, LimitSet);
      return _super.apply(this, arguments);
    }
    _createClass(LimitSet, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LimitSet";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:LimitSet.isPercentageLimits' in object) {
          attributeEntries['filledEntries']['cim:LimitSet.isPercentageLimits'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LimitSet.isPercentageLimits'], 'cim:Boolean', 'cim:LimitSet.isPercentageLimits');
        } else {
          attributeEntries['emptyEntries']['cim:LimitSet.isPercentageLimits'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LimitSet.isPercentageLimits'], 'cim:Boolean', 'cim:LimitSet.isPercentageLimits');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:LimitSet.isPercentageLimits"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LimitSet.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LimitSet: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LimitSet.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["AccumulatorLimitSet", "AnalogLimitSet"];
        return subClasses;
      }
    }]);
    return LimitSet;
  }(IdentifiedObject);
  _defineProperty(LimitSet, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'isPercentageLimits': [CGMESProfile.shortNames.EQ]
  });

  var AccumulatorLimitSet = /*#__PURE__*/function (_LimitSet) {
    _inherits(AccumulatorLimitSet, _LimitSet);
    var _super = _createSuper(AccumulatorLimitSet);
    function AccumulatorLimitSet() {
      _classCallCheck(this, AccumulatorLimitSet);
      return _super.apply(this, arguments);
    }
    _createClass(AccumulatorLimitSet, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AccumulatorLimitSet";
        var attributeEntries = LimitSet.attributeHTML(object, cimmenu, classType);
        if ('cim:AccumulatorLimitSet.Measurements' in object) {
          attributeEntries['filledEntries']['cim:AccumulatorLimitSet.Measurements'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AccumulatorLimitSet.Measurements'], 'cim:Accumulator', 'cim:AccumulatorLimitSet.Measurements');
        } else {
          attributeEntries['emptyEntries']['cim:AccumulatorLimitSet.Measurements'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AccumulatorLimitSet.Measurements'], 'cim:Accumulator', 'cim:AccumulatorLimitSet.Measurements');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AccumulatorLimitSet.Measurements"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (LimitSet.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AccumulatorLimitSet.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AccumulatorLimitSet: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AccumulatorLimitSet.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AccumulatorLimitSet;
  }(LimitSet);
  _defineProperty(AccumulatorLimitSet, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'Measurements': [CGMESProfile.shortNames.EQ]
  });

  var Control = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(Control, _IdentifiedObject);
    var _super = _createSuper(Control);
    function Control() {
      _classCallCheck(this, Control);
      return _super.apply(this, arguments);
    }
    _createClass(Control, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Control";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:Control.controlType' in object) {
          attributeEntries['filledEntries']['cim:Control.controlType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Control.controlType'], 'cim:String', 'cim:Control.controlType');
        } else {
          attributeEntries['emptyEntries']['cim:Control.controlType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Control.controlType'], 'cim:String', 'cim:Control.controlType');
        }
        if ('cim:Control.operationInProgress' in object) {
          attributeEntries['filledEntries']['cim:Control.operationInProgress'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Control.operationInProgress'], 'cim:Boolean', 'cim:Control.operationInProgress');
        } else {
          attributeEntries['emptyEntries']['cim:Control.operationInProgress'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Control.operationInProgress'], 'cim:Boolean', 'cim:Control.operationInProgress');
        }
        if ('cim:Control.timeStamp' in object) {
          attributeEntries['filledEntries']['cim:Control.timeStamp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Control.timeStamp'], 'cim:DateTime', 'cim:Control.timeStamp');
        } else {
          attributeEntries['emptyEntries']['cim:Control.timeStamp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Control.timeStamp'], 'cim:DateTime', 'cim:Control.timeStamp');
        }
        if ('cim:Control.unitMultiplier' in object) {
          attributeEntries['filledEntries']['cim:Control.unitMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Control.unitMultiplier'], 'cim:UnitMultiplier', 'cim:Control.unitMultiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Control.unitMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Control.unitMultiplier'], 'cim:UnitMultiplier', 'cim:Control.unitMultiplier');
        }
        if ('cim:Control.unitSymbol' in object) {
          attributeEntries['filledEntries']['cim:Control.unitSymbol'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Control.unitSymbol'], 'cim:UnitSymbol', 'cim:Control.unitSymbol');
        } else {
          attributeEntries['emptyEntries']['cim:Control.unitSymbol'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Control.unitSymbol'], 'cim:UnitSymbol', 'cim:Control.unitSymbol');
        }
        if ('cim:Control.PowerSystemResource' in object) {
          attributeEntries['filledEntries']['cim:Control.PowerSystemResource'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Control.PowerSystemResource'], 'cim:PowerSystemResource', 'cim:Control.PowerSystemResource');
        } else {
          attributeEntries['emptyEntries']['cim:Control.PowerSystemResource'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Control.PowerSystemResource'], 'cim:PowerSystemResource', 'cim:Control.PowerSystemResource');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Control.controlType", "cim:Control.operationInProgress", "cim:Control.timeStamp", "cim:Control.unitMultiplier", "cim:Control.unitSymbol", "cim:Control.PowerSystemResource"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Control.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Control: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Control.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["AccumulatorReset", "AnalogControl", "RaiseLowerCommand", "SetPoint", "Command"];
        return subClasses;
      }
    }]);
    return Control;
  }(IdentifiedObject);
  _defineProperty(Control, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'controlType': [CGMESProfile.shortNames.EQ],
    'operationInProgress': [CGMESProfile.shortNames.EQ],
    'timeStamp': [CGMESProfile.shortNames.EQ],
    'unitMultiplier': [CGMESProfile.shortNames.EQ],
    'unitSymbol': [CGMESProfile.shortNames.EQ],
    'PowerSystemResource': [CGMESProfile.shortNames.EQ]
  });

  var AccumulatorReset = /*#__PURE__*/function (_Control) {
    _inherits(AccumulatorReset, _Control);
    var _super = _createSuper(AccumulatorReset);
    function AccumulatorReset() {
      _classCallCheck(this, AccumulatorReset);
      return _super.apply(this, arguments);
    }
    _createClass(AccumulatorReset, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AccumulatorReset";
        var attributeEntries = Control.attributeHTML(object, cimmenu, classType);
        if ('cim:AccumulatorReset.AccumulatorValue' in object) {
          attributeEntries['filledEntries']['cim:AccumulatorReset.AccumulatorValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AccumulatorReset.AccumulatorValue'], 'cim:AccumulatorValue', 'cim:AccumulatorReset.AccumulatorValue');
        } else {
          attributeEntries['emptyEntries']['cim:AccumulatorReset.AccumulatorValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AccumulatorReset.AccumulatorValue'], 'cim:AccumulatorValue', 'cim:AccumulatorReset.AccumulatorValue');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AccumulatorReset.AccumulatorValue"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Control.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AccumulatorReset.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AccumulatorReset: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AccumulatorReset.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AccumulatorReset;
  }(Control);
  _defineProperty(AccumulatorReset, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'AccumulatorValue': [CGMESProfile.shortNames.EQ]
  });

  var MeasurementValue = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(MeasurementValue, _IdentifiedObject);
    var _super = _createSuper(MeasurementValue);
    function MeasurementValue() {
      _classCallCheck(this, MeasurementValue);
      return _super.apply(this, arguments);
    }
    _createClass(MeasurementValue, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "MeasurementValue";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:MeasurementValue.timeStamp' in object) {
          attributeEntries['filledEntries']['cim:MeasurementValue.timeStamp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MeasurementValue.timeStamp'], 'cim:DateTime', 'cim:MeasurementValue.timeStamp');
        } else {
          attributeEntries['emptyEntries']['cim:MeasurementValue.timeStamp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MeasurementValue.timeStamp'], 'cim:DateTime', 'cim:MeasurementValue.timeStamp');
        }
        if ('cim:MeasurementValue.sensorAccuracy' in object) {
          attributeEntries['filledEntries']['cim:MeasurementValue.sensorAccuracy'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MeasurementValue.sensorAccuracy'], 'cim:PerCent', 'cim:MeasurementValue.sensorAccuracy');
        } else {
          attributeEntries['emptyEntries']['cim:MeasurementValue.sensorAccuracy'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MeasurementValue.sensorAccuracy'], 'cim:PerCent', 'cim:MeasurementValue.sensorAccuracy');
        }
        if ('cim:MeasurementValue.MeasurementValueSource' in object) {
          attributeEntries['filledEntries']['cim:MeasurementValue.MeasurementValueSource'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MeasurementValue.MeasurementValueSource'], 'cim:MeasurementValueSource', 'cim:MeasurementValue.MeasurementValueSource');
        } else {
          attributeEntries['emptyEntries']['cim:MeasurementValue.MeasurementValueSource'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MeasurementValue.MeasurementValueSource'], 'cim:MeasurementValueSource', 'cim:MeasurementValue.MeasurementValueSource');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:MeasurementValue.timeStamp", "cim:MeasurementValue.sensorAccuracy", "cim:MeasurementValue.MeasurementValueSource"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!MeasurementValue.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class MeasurementValue: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = MeasurementValue.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["AccumulatorValue", "AnalogValue", "DiscreteValue", "StringMeasurementValue"];
        return subClasses;
      }
    }]);
    return MeasurementValue;
  }(IdentifiedObject);
  _defineProperty(MeasurementValue, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'timeStamp': [CGMESProfile.shortNames.EQ],
    'sensorAccuracy': [CGMESProfile.shortNames.EQ],
    'MeasurementValueSource': [CGMESProfile.shortNames.EQ]
  });

  var AccumulatorValue = /*#__PURE__*/function (_MeasurementValue) {
    _inherits(AccumulatorValue, _MeasurementValue);
    var _super = _createSuper(AccumulatorValue);
    function AccumulatorValue() {
      _classCallCheck(this, AccumulatorValue);
      return _super.apply(this, arguments);
    }
    _createClass(AccumulatorValue, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AccumulatorValue";
        var attributeEntries = MeasurementValue.attributeHTML(object, cimmenu, classType);
        if ('cim:AccumulatorValue.Accumulator' in object) {
          attributeEntries['filledEntries']['cim:AccumulatorValue.Accumulator'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AccumulatorValue.Accumulator'], 'cim:Accumulator', 'cim:AccumulatorValue.Accumulator');
        } else {
          attributeEntries['emptyEntries']['cim:AccumulatorValue.Accumulator'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AccumulatorValue.Accumulator'], 'cim:Accumulator', 'cim:AccumulatorValue.Accumulator');
        }
        if ('cim:AccumulatorValue.value' in object) {
          attributeEntries['filledEntries']['cim:AccumulatorValue.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AccumulatorValue.value'], 'cim:Integer', 'cim:AccumulatorValue.value');
        } else {
          attributeEntries['emptyEntries']['cim:AccumulatorValue.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AccumulatorValue.value'], 'cim:Integer', 'cim:AccumulatorValue.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AccumulatorValue.Accumulator", "cim:AccumulatorValue.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (MeasurementValue.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AccumulatorValue.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AccumulatorValue: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AccumulatorValue.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AccumulatorValue;
  }(MeasurementValue);
  _defineProperty(AccumulatorValue, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'Accumulator': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var ActivePower = /*#__PURE__*/function (_BaseClass) {
    _inherits(ActivePower, _BaseClass);
    var _super = _createSuper(ActivePower);
    function ActivePower() {
      _classCallCheck(this, ActivePower);
      return _super.apply(this, arguments);
    }
    _createClass(ActivePower, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ActivePower";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:ActivePower.value' in object) {
          attributeEntries['filledEntries']['cim:ActivePower.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePower.value'], 'cim:Float', 'cim:ActivePower.value');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePower.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePower.value'], 'cim:Float', 'cim:ActivePower.value');
        }
        if ('cim:ActivePower.unit' in object) {
          attributeEntries['filledEntries']['cim:ActivePower.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePower.unit'], 'cim:UnitSymbol', 'cim:ActivePower.unit');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePower.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePower.unit'], 'cim:UnitSymbol', 'cim:ActivePower.unit');
        }
        if ('cim:ActivePower.multiplier' in object) {
          attributeEntries['filledEntries']['cim:ActivePower.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePower.multiplier'], 'cim:UnitMultiplier', 'cim:ActivePower.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePower.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePower.multiplier'], 'cim:UnitMultiplier', 'cim:ActivePower.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ActivePower.value", "cim:ActivePower.unit", "cim:ActivePower.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ActivePower.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ActivePower: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ActivePower.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ActivePower;
  }(BaseClass);
  _defineProperty(ActivePower, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY],
    'value': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY],
    'unit': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY],
    'multiplier': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY]
  });

  var OperationalLimit = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(OperationalLimit, _IdentifiedObject);
    var _super = _createSuper(OperationalLimit);
    function OperationalLimit() {
      _classCallCheck(this, OperationalLimit);
      return _super.apply(this, arguments);
    }
    _createClass(OperationalLimit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "OperationalLimit";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:OperationalLimit.OperationalLimitSet' in object) {
          attributeEntries['filledEntries']['cim:OperationalLimit.OperationalLimitSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimit.OperationalLimitSet'], 'cim:OperationalLimitSet', 'cim:OperationalLimit.OperationalLimitSet');
        } else {
          attributeEntries['emptyEntries']['cim:OperationalLimit.OperationalLimitSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimit.OperationalLimitSet'], 'cim:OperationalLimitSet', 'cim:OperationalLimit.OperationalLimitSet');
        }
        if ('cim:OperationalLimit.OperationalLimitType' in object) {
          attributeEntries['filledEntries']['cim:OperationalLimit.OperationalLimitType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimit.OperationalLimitType'], 'cim:OperationalLimitType', 'cim:OperationalLimit.OperationalLimitType');
        } else {
          attributeEntries['emptyEntries']['cim:OperationalLimit.OperationalLimitType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimit.OperationalLimitType'], 'cim:OperationalLimitType', 'cim:OperationalLimit.OperationalLimitType');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:OperationalLimit.OperationalLimitSet", "cim:OperationalLimit.OperationalLimitType"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!OperationalLimit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class OperationalLimit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = OperationalLimit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["CurrentLimit", "VoltageLimit", "ActivePowerLimit", "ApparentPowerLimit"];
        return subClasses;
      }
    }]);
    return OperationalLimit;
  }(IdentifiedObject);
  _defineProperty(OperationalLimit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'OperationalLimitSet': [CGMESProfile.shortNames.EQ],
    'OperationalLimitType': [CGMESProfile.shortNames.EQ]
  });

  var ActivePowerLimit = /*#__PURE__*/function (_OperationalLimit) {
    _inherits(ActivePowerLimit, _OperationalLimit);
    var _super = _createSuper(ActivePowerLimit);
    function ActivePowerLimit() {
      _classCallCheck(this, ActivePowerLimit);
      return _super.apply(this, arguments);
    }
    _createClass(ActivePowerLimit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ActivePowerLimit";
        var attributeEntries = OperationalLimit.attributeHTML(object, cimmenu, classType);
        if ('cim:ActivePowerLimit.value' in object) {
          attributeEntries['filledEntries']['cim:ActivePowerLimit.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerLimit.value'], 'cim:ActivePower', 'cim:ActivePowerLimit.value');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePowerLimit.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerLimit.value'], 'cim:ActivePower', 'cim:ActivePowerLimit.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ActivePowerLimit.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (OperationalLimit.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ActivePowerLimit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ActivePowerLimit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ActivePowerLimit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ActivePowerLimit;
  }(OperationalLimit);
  _defineProperty(ActivePowerLimit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var ActivePowerPerCurrentFlow = /*#__PURE__*/function (_BaseClass) {
    _inherits(ActivePowerPerCurrentFlow, _BaseClass);
    var _super = _createSuper(ActivePowerPerCurrentFlow);
    function ActivePowerPerCurrentFlow() {
      _classCallCheck(this, ActivePowerPerCurrentFlow);
      return _super.apply(this, arguments);
    }
    _createClass(ActivePowerPerCurrentFlow, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ActivePowerPerCurrentFlow";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:ActivePowerPerCurrentFlow.denominatorMultiplier' in object) {
          attributeEntries['filledEntries']['cim:ActivePowerPerCurrentFlow.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerCurrentFlow.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:ActivePowerPerCurrentFlow.denominatorMultiplier');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePowerPerCurrentFlow.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerCurrentFlow.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:ActivePowerPerCurrentFlow.denominatorMultiplier');
        }
        if ('cim:ActivePowerPerCurrentFlow.denominatorUnit' in object) {
          attributeEntries['filledEntries']['cim:ActivePowerPerCurrentFlow.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerCurrentFlow.denominatorUnit'], 'cim:UnitSymbol', 'cim:ActivePowerPerCurrentFlow.denominatorUnit');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePowerPerCurrentFlow.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerCurrentFlow.denominatorUnit'], 'cim:UnitSymbol', 'cim:ActivePowerPerCurrentFlow.denominatorUnit');
        }
        if ('cim:ActivePowerPerCurrentFlow.multiplier' in object) {
          attributeEntries['filledEntries']['cim:ActivePowerPerCurrentFlow.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerCurrentFlow.multiplier'], 'cim:UnitMultiplier', 'cim:ActivePowerPerCurrentFlow.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePowerPerCurrentFlow.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerCurrentFlow.multiplier'], 'cim:UnitMultiplier', 'cim:ActivePowerPerCurrentFlow.multiplier');
        }
        if ('cim:ActivePowerPerCurrentFlow.unit' in object) {
          attributeEntries['filledEntries']['cim:ActivePowerPerCurrentFlow.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerCurrentFlow.unit'], 'cim:UnitSymbol', 'cim:ActivePowerPerCurrentFlow.unit');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePowerPerCurrentFlow.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerCurrentFlow.unit'], 'cim:UnitSymbol', 'cim:ActivePowerPerCurrentFlow.unit');
        }
        if ('cim:ActivePowerPerCurrentFlow.value' in object) {
          attributeEntries['filledEntries']['cim:ActivePowerPerCurrentFlow.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerCurrentFlow.value'], 'cim:Float', 'cim:ActivePowerPerCurrentFlow.value');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePowerPerCurrentFlow.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerCurrentFlow.value'], 'cim:Float', 'cim:ActivePowerPerCurrentFlow.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ActivePowerPerCurrentFlow.denominatorMultiplier", "cim:ActivePowerPerCurrentFlow.denominatorUnit", "cim:ActivePowerPerCurrentFlow.multiplier", "cim:ActivePowerPerCurrentFlow.unit", "cim:ActivePowerPerCurrentFlow.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ActivePowerPerCurrentFlow.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ActivePowerPerCurrentFlow: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ActivePowerPerCurrentFlow.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ActivePowerPerCurrentFlow;
  }(BaseClass);
  _defineProperty(ActivePowerPerCurrentFlow, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'denominatorMultiplier': [CGMESProfile.shortNames.EQ],
    'denominatorUnit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var ActivePowerPerFrequency = /*#__PURE__*/function (_BaseClass) {
    _inherits(ActivePowerPerFrequency, _BaseClass);
    var _super = _createSuper(ActivePowerPerFrequency);
    function ActivePowerPerFrequency() {
      _classCallCheck(this, ActivePowerPerFrequency);
      return _super.apply(this, arguments);
    }
    _createClass(ActivePowerPerFrequency, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ActivePowerPerFrequency";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:ActivePowerPerFrequency.denominatorMultiplier' in object) {
          attributeEntries['filledEntries']['cim:ActivePowerPerFrequency.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerFrequency.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:ActivePowerPerFrequency.denominatorMultiplier');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePowerPerFrequency.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerFrequency.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:ActivePowerPerFrequency.denominatorMultiplier');
        }
        if ('cim:ActivePowerPerFrequency.denominatorUnit' in object) {
          attributeEntries['filledEntries']['cim:ActivePowerPerFrequency.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerFrequency.denominatorUnit'], 'cim:UnitSymbol', 'cim:ActivePowerPerFrequency.denominatorUnit');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePowerPerFrequency.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerFrequency.denominatorUnit'], 'cim:UnitSymbol', 'cim:ActivePowerPerFrequency.denominatorUnit');
        }
        if ('cim:ActivePowerPerFrequency.multiplier' in object) {
          attributeEntries['filledEntries']['cim:ActivePowerPerFrequency.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerFrequency.multiplier'], 'cim:UnitMultiplier', 'cim:ActivePowerPerFrequency.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePowerPerFrequency.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerFrequency.multiplier'], 'cim:UnitMultiplier', 'cim:ActivePowerPerFrequency.multiplier');
        }
        if ('cim:ActivePowerPerFrequency.unit' in object) {
          attributeEntries['filledEntries']['cim:ActivePowerPerFrequency.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerFrequency.unit'], 'cim:UnitSymbol', 'cim:ActivePowerPerFrequency.unit');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePowerPerFrequency.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerFrequency.unit'], 'cim:UnitSymbol', 'cim:ActivePowerPerFrequency.unit');
        }
        if ('cim:ActivePowerPerFrequency.value' in object) {
          attributeEntries['filledEntries']['cim:ActivePowerPerFrequency.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerFrequency.value'], 'cim:Float', 'cim:ActivePowerPerFrequency.value');
        } else {
          attributeEntries['emptyEntries']['cim:ActivePowerPerFrequency.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ActivePowerPerFrequency.value'], 'cim:Float', 'cim:ActivePowerPerFrequency.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ActivePowerPerFrequency.denominatorMultiplier", "cim:ActivePowerPerFrequency.denominatorUnit", "cim:ActivePowerPerFrequency.multiplier", "cim:ActivePowerPerFrequency.unit", "cim:ActivePowerPerFrequency.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ActivePowerPerFrequency.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ActivePowerPerFrequency: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ActivePowerPerFrequency.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ActivePowerPerFrequency;
  }(BaseClass);
  _defineProperty(ActivePowerPerFrequency, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'denominatorMultiplier': [CGMESProfile.shortNames.EQ],
    'denominatorUnit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var Analog = /*#__PURE__*/function (_Measurement) {
    _inherits(Analog, _Measurement);
    var _super = _createSuper(Analog);
    function Analog() {
      _classCallCheck(this, Analog);
      return _super.apply(this, arguments);
    }
    _createClass(Analog, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Analog";
        var attributeEntries = Measurement.attributeHTML(object, cimmenu, classType);
        if ('cim:Analog.positiveFlowIn' in object) {
          attributeEntries['filledEntries']['cim:Analog.positiveFlowIn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Analog.positiveFlowIn'], 'cim:Boolean', 'cim:Analog.positiveFlowIn');
        } else {
          attributeEntries['emptyEntries']['cim:Analog.positiveFlowIn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Analog.positiveFlowIn'], 'cim:Boolean', 'cim:Analog.positiveFlowIn');
        }
        if ('cim:Analog.LimitSets' in object) {
          attributeEntries['filledEntries']['cim:Analog.LimitSets'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Analog.LimitSets'], 'cim:AnalogLimitSet', 'cim:Analog.LimitSets');
        } else {
          attributeEntries['emptyEntries']['cim:Analog.LimitSets'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Analog.LimitSets'], 'cim:AnalogLimitSet', 'cim:Analog.LimitSets');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Analog.positiveFlowIn", "cim:Analog.LimitSets"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Measurement.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Analog.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Analog: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Analog.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Analog;
  }(Measurement);
  _defineProperty(Analog, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'positiveFlowIn': [CGMESProfile.shortNames.EQ],
    'LimitSets': [CGMESProfile.shortNames.EQ]
  });

  var AnalogControl = /*#__PURE__*/function (_Control) {
    _inherits(AnalogControl, _Control);
    var _super = _createSuper(AnalogControl);
    function AnalogControl() {
      _classCallCheck(this, AnalogControl);
      return _super.apply(this, arguments);
    }
    _createClass(AnalogControl, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AnalogControl";
        var attributeEntries = Control.attributeHTML(object, cimmenu, classType);
        if ('cim:AnalogControl.maxValue' in object) {
          attributeEntries['filledEntries']['cim:AnalogControl.maxValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogControl.maxValue'], 'cim:Simple_Float', 'cim:AnalogControl.maxValue');
        } else {
          attributeEntries['emptyEntries']['cim:AnalogControl.maxValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogControl.maxValue'], 'cim:Simple_Float', 'cim:AnalogControl.maxValue');
        }
        if ('cim:AnalogControl.minValue' in object) {
          attributeEntries['filledEntries']['cim:AnalogControl.minValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogControl.minValue'], 'cim:Simple_Float', 'cim:AnalogControl.minValue');
        } else {
          attributeEntries['emptyEntries']['cim:AnalogControl.minValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogControl.minValue'], 'cim:Simple_Float', 'cim:AnalogControl.minValue');
        }
        if ('cim:AnalogControl.AnalogValue' in object) {
          attributeEntries['filledEntries']['cim:AnalogControl.AnalogValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogControl.AnalogValue'], 'cim:AnalogValue', 'cim:AnalogControl.AnalogValue');
        } else {
          attributeEntries['emptyEntries']['cim:AnalogControl.AnalogValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogControl.AnalogValue'], 'cim:AnalogValue', 'cim:AnalogControl.AnalogValue');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AnalogControl.maxValue", "cim:AnalogControl.minValue", "cim:AnalogControl.AnalogValue"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Control.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AnalogControl.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AnalogControl: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AnalogControl.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["RaiseLowerCommand", "SetPoint"];
        return subClasses;
      }
    }]);
    return AnalogControl;
  }(Control);
  _defineProperty(AnalogControl, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'maxValue': [CGMESProfile.shortNames.EQ],
    'minValue': [CGMESProfile.shortNames.EQ],
    'AnalogValue': [CGMESProfile.shortNames.EQ]
  });

  var AnalogLimit = /*#__PURE__*/function (_Limit) {
    _inherits(AnalogLimit, _Limit);
    var _super = _createSuper(AnalogLimit);
    function AnalogLimit() {
      _classCallCheck(this, AnalogLimit);
      return _super.apply(this, arguments);
    }
    _createClass(AnalogLimit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AnalogLimit";
        var attributeEntries = Limit.attributeHTML(object, cimmenu, classType);
        if ('cim:AnalogLimit.value' in object) {
          attributeEntries['filledEntries']['cim:AnalogLimit.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogLimit.value'], 'cim:Simple_Float', 'cim:AnalogLimit.value');
        } else {
          attributeEntries['emptyEntries']['cim:AnalogLimit.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogLimit.value'], 'cim:Simple_Float', 'cim:AnalogLimit.value');
        }
        if ('cim:AnalogLimit.LimitSet' in object) {
          attributeEntries['filledEntries']['cim:AnalogLimit.LimitSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogLimit.LimitSet'], 'cim:AnalogLimitSet', 'cim:AnalogLimit.LimitSet');
        } else {
          attributeEntries['emptyEntries']['cim:AnalogLimit.LimitSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogLimit.LimitSet'], 'cim:AnalogLimitSet', 'cim:AnalogLimit.LimitSet');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AnalogLimit.value", "cim:AnalogLimit.LimitSet"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Limit.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AnalogLimit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AnalogLimit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AnalogLimit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AnalogLimit;
  }(Limit);
  _defineProperty(AnalogLimit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'LimitSet': [CGMESProfile.shortNames.EQ]
  });

  var AnalogLimitSet = /*#__PURE__*/function (_LimitSet) {
    _inherits(AnalogLimitSet, _LimitSet);
    var _super = _createSuper(AnalogLimitSet);
    function AnalogLimitSet() {
      _classCallCheck(this, AnalogLimitSet);
      return _super.apply(this, arguments);
    }
    _createClass(AnalogLimitSet, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AnalogLimitSet";
        var attributeEntries = LimitSet.attributeHTML(object, cimmenu, classType);
        if ('cim:AnalogLimitSet.Measurements' in object) {
          attributeEntries['filledEntries']['cim:AnalogLimitSet.Measurements'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogLimitSet.Measurements'], 'cim:Analog', 'cim:AnalogLimitSet.Measurements');
        } else {
          attributeEntries['emptyEntries']['cim:AnalogLimitSet.Measurements'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogLimitSet.Measurements'], 'cim:Analog', 'cim:AnalogLimitSet.Measurements');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AnalogLimitSet.Measurements"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (LimitSet.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AnalogLimitSet.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AnalogLimitSet: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AnalogLimitSet.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AnalogLimitSet;
  }(LimitSet);
  _defineProperty(AnalogLimitSet, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'Measurements': [CGMESProfile.shortNames.EQ]
  });

  var AnalogValue = /*#__PURE__*/function (_MeasurementValue) {
    _inherits(AnalogValue, _MeasurementValue);
    var _super = _createSuper(AnalogValue);
    function AnalogValue() {
      _classCallCheck(this, AnalogValue);
      return _super.apply(this, arguments);
    }
    _createClass(AnalogValue, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AnalogValue";
        var attributeEntries = MeasurementValue.attributeHTML(object, cimmenu, classType);
        if ('cim:AnalogValue.Analog' in object) {
          attributeEntries['filledEntries']['cim:AnalogValue.Analog'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogValue.Analog'], 'cim:Analog', 'cim:AnalogValue.Analog');
        } else {
          attributeEntries['emptyEntries']['cim:AnalogValue.Analog'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogValue.Analog'], 'cim:Analog', 'cim:AnalogValue.Analog');
        }
        if ('cim:AnalogValue.value' in object) {
          attributeEntries['filledEntries']['cim:AnalogValue.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogValue.value'], 'cim:Simple_Float', 'cim:AnalogValue.value');
        } else {
          attributeEntries['emptyEntries']['cim:AnalogValue.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AnalogValue.value'], 'cim:Simple_Float', 'cim:AnalogValue.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AnalogValue.Analog", "cim:AnalogValue.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (MeasurementValue.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AnalogValue.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AnalogValue: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AnalogValue.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AnalogValue;
  }(MeasurementValue);
  _defineProperty(AnalogValue, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'Analog': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var AngleDegrees = /*#__PURE__*/function (_BaseClass) {
    _inherits(AngleDegrees, _BaseClass);
    var _super = _createSuper(AngleDegrees);
    function AngleDegrees() {
      _classCallCheck(this, AngleDegrees);
      return _super.apply(this, arguments);
    }
    _createClass(AngleDegrees, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AngleDegrees";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:AngleDegrees.value' in object) {
          attributeEntries['filledEntries']['cim:AngleDegrees.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AngleDegrees.value'], 'cim:Float', 'cim:AngleDegrees.value');
        } else {
          attributeEntries['emptyEntries']['cim:AngleDegrees.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AngleDegrees.value'], 'cim:Float', 'cim:AngleDegrees.value');
        }
        if ('cim:AngleDegrees.unit' in object) {
          attributeEntries['filledEntries']['cim:AngleDegrees.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AngleDegrees.unit'], 'cim:UnitSymbol', 'cim:AngleDegrees.unit');
        } else {
          attributeEntries['emptyEntries']['cim:AngleDegrees.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AngleDegrees.unit'], 'cim:UnitSymbol', 'cim:AngleDegrees.unit');
        }
        if ('cim:AngleDegrees.multiplier' in object) {
          attributeEntries['filledEntries']['cim:AngleDegrees.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AngleDegrees.multiplier'], 'cim:UnitMultiplier', 'cim:AngleDegrees.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:AngleDegrees.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AngleDegrees.multiplier'], 'cim:UnitMultiplier', 'cim:AngleDegrees.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AngleDegrees.value", "cim:AngleDegrees.unit", "cim:AngleDegrees.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AngleDegrees.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AngleDegrees: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AngleDegrees.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AngleDegrees;
  }(BaseClass);
  _defineProperty(AngleDegrees, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY],
    'value': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY],
    'unit': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY],
    'multiplier': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY]
  });

  var AngleRadians = /*#__PURE__*/function (_BaseClass) {
    _inherits(AngleRadians, _BaseClass);
    var _super = _createSuper(AngleRadians);
    function AngleRadians() {
      _classCallCheck(this, AngleRadians);
      return _super.apply(this, arguments);
    }
    _createClass(AngleRadians, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AngleRadians";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:AngleRadians.value' in object) {
          attributeEntries['filledEntries']['cim:AngleRadians.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AngleRadians.value'], 'cim:Float', 'cim:AngleRadians.value');
        } else {
          attributeEntries['emptyEntries']['cim:AngleRadians.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AngleRadians.value'], 'cim:Float', 'cim:AngleRadians.value');
        }
        if ('cim:AngleRadians.unit' in object) {
          attributeEntries['filledEntries']['cim:AngleRadians.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AngleRadians.unit'], 'cim:UnitSymbol', 'cim:AngleRadians.unit');
        } else {
          attributeEntries['emptyEntries']['cim:AngleRadians.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AngleRadians.unit'], 'cim:UnitSymbol', 'cim:AngleRadians.unit');
        }
        if ('cim:AngleRadians.multiplier' in object) {
          attributeEntries['filledEntries']['cim:AngleRadians.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AngleRadians.multiplier'], 'cim:UnitMultiplier', 'cim:AngleRadians.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:AngleRadians.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AngleRadians.multiplier'], 'cim:UnitMultiplier', 'cim:AngleRadians.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AngleRadians.value", "cim:AngleRadians.unit", "cim:AngleRadians.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AngleRadians.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AngleRadians: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AngleRadians.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AngleRadians;
  }(BaseClass);
  _defineProperty(AngleRadians, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ]
  });

  var ApparentPower = /*#__PURE__*/function (_BaseClass) {
    _inherits(ApparentPower, _BaseClass);
    var _super = _createSuper(ApparentPower);
    function ApparentPower() {
      _classCallCheck(this, ApparentPower);
      return _super.apply(this, arguments);
    }
    _createClass(ApparentPower, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ApparentPower";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:ApparentPower.value' in object) {
          attributeEntries['filledEntries']['cim:ApparentPower.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ApparentPower.value'], 'cim:Float', 'cim:ApparentPower.value');
        } else {
          attributeEntries['emptyEntries']['cim:ApparentPower.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ApparentPower.value'], 'cim:Float', 'cim:ApparentPower.value');
        }
        if ('cim:ApparentPower.unit' in object) {
          attributeEntries['filledEntries']['cim:ApparentPower.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ApparentPower.unit'], 'cim:UnitSymbol', 'cim:ApparentPower.unit');
        } else {
          attributeEntries['emptyEntries']['cim:ApparentPower.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ApparentPower.unit'], 'cim:UnitSymbol', 'cim:ApparentPower.unit');
        }
        if ('cim:ApparentPower.multiplier' in object) {
          attributeEntries['filledEntries']['cim:ApparentPower.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ApparentPower.multiplier'], 'cim:UnitMultiplier', 'cim:ApparentPower.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:ApparentPower.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ApparentPower.multiplier'], 'cim:UnitMultiplier', 'cim:ApparentPower.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ApparentPower.value", "cim:ApparentPower.unit", "cim:ApparentPower.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ApparentPower.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ApparentPower: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ApparentPower.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ApparentPower;
  }(BaseClass);
  _defineProperty(ApparentPower, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'value': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'unit': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'multiplier': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY]
  });

  var ApparentPowerLimit = /*#__PURE__*/function (_OperationalLimit) {
    _inherits(ApparentPowerLimit, _OperationalLimit);
    var _super = _createSuper(ApparentPowerLimit);
    function ApparentPowerLimit() {
      _classCallCheck(this, ApparentPowerLimit);
      return _super.apply(this, arguments);
    }
    _createClass(ApparentPowerLimit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ApparentPowerLimit";
        var attributeEntries = OperationalLimit.attributeHTML(object, cimmenu, classType);
        if ('cim:ApparentPowerLimit.value' in object) {
          attributeEntries['filledEntries']['cim:ApparentPowerLimit.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ApparentPowerLimit.value'], 'cim:ApparentPower', 'cim:ApparentPowerLimit.value');
        } else {
          attributeEntries['emptyEntries']['cim:ApparentPowerLimit.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ApparentPowerLimit.value'], 'cim:ApparentPower', 'cim:ApparentPowerLimit.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ApparentPowerLimit.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (OperationalLimit.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ApparentPowerLimit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ApparentPowerLimit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ApparentPowerLimit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ApparentPowerLimit;
  }(OperationalLimit);
  _defineProperty(ApparentPowerLimit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var Area = /*#__PURE__*/function (_BaseClass) {
    _inherits(Area, _BaseClass);
    var _super = _createSuper(Area);
    function Area() {
      _classCallCheck(this, Area);
      return _super.apply(this, arguments);
    }
    _createClass(Area, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Area";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Area.value' in object) {
          attributeEntries['filledEntries']['cim:Area.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Area.value'], 'cim:Float', 'cim:Area.value');
        } else {
          attributeEntries['emptyEntries']['cim:Area.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Area.value'], 'cim:Float', 'cim:Area.value');
        }
        if ('cim:Area.unit' in object) {
          attributeEntries['filledEntries']['cim:Area.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Area.unit'], 'cim:UnitSymbol', 'cim:Area.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Area.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Area.unit'], 'cim:UnitSymbol', 'cim:Area.unit');
        }
        if ('cim:Area.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Area.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Area.multiplier'], 'cim:UnitMultiplier', 'cim:Area.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Area.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Area.multiplier'], 'cim:UnitMultiplier', 'cim:Area.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Area.value", "cim:Area.unit", "cim:Area.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Area.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Area: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Area.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Area;
  }(BaseClass);
  _defineProperty(Area, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'value': [CGMESProfile.shortNames.DY],
    'unit': [CGMESProfile.shortNames.DY],
    'multiplier': [CGMESProfile.shortNames.DY]
  });

  var RegulatingCondEq = /*#__PURE__*/function (_ConductingEquipment) {
    _inherits(RegulatingCondEq, _ConductingEquipment);
    var _super = _createSuper(RegulatingCondEq);
    function RegulatingCondEq() {
      _classCallCheck(this, RegulatingCondEq);
      return _super.apply(this, arguments);
    }
    _createClass(RegulatingCondEq, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RegulatingCondEq";
        var attributeEntries = ConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:RegulatingCondEq.RegulatingControl' in object) {
          attributeEntries['filledEntries']['cim:RegulatingCondEq.RegulatingControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingCondEq.RegulatingControl'], 'cim:RegulatingControl', 'cim:RegulatingCondEq.RegulatingControl');
        } else {
          attributeEntries['emptyEntries']['cim:RegulatingCondEq.RegulatingControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingCondEq.RegulatingControl'], 'cim:RegulatingControl', 'cim:RegulatingCondEq.RegulatingControl');
        }
        if ('cim:RegulatingCondEq.controlEnabled' in object) {
          attributeEntries['filledEntries']['cim:RegulatingCondEq.controlEnabled'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingCondEq.controlEnabled'], 'cim:Boolean', 'cim:RegulatingCondEq.controlEnabled');
        } else {
          attributeEntries['emptyEntries']['cim:RegulatingCondEq.controlEnabled'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingCondEq.controlEnabled'], 'cim:Boolean', 'cim:RegulatingCondEq.controlEnabled');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RegulatingCondEq.RegulatingControl", "cim:RegulatingCondEq.controlEnabled"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RegulatingCondEq.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RegulatingCondEq: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RegulatingCondEq.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["ExternalNetworkInjection", "RotatingMachine", "AsynchronousMachine", "SynchronousMachine", "ShuntCompensator", "LinearShuntCompensator", "NonlinearShuntCompensator", "StaticVarCompensator"];
        return subClasses;
      }
    }]);
    return RegulatingCondEq;
  }(ConductingEquipment);
  _defineProperty(RegulatingCondEq, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.DY],
    'RegulatingControl': [CGMESProfile.shortNames.EQ],
    'controlEnabled': [CGMESProfile.shortNames.SSH]
  });

  var RotatingMachine = /*#__PURE__*/function (_RegulatingCondEq) {
    _inherits(RotatingMachine, _RegulatingCondEq);
    var _super = _createSuper(RotatingMachine);
    function RotatingMachine() {
      _classCallCheck(this, RotatingMachine);
      return _super.apply(this, arguments);
    }
    _createClass(RotatingMachine, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RotatingMachine";
        var attributeEntries = RegulatingCondEq.attributeHTML(object, cimmenu, classType);
        if ('cim:RotatingMachine.GeneratingUnit' in object) {
          attributeEntries['filledEntries']['cim:RotatingMachine.GeneratingUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachine.GeneratingUnit'], 'cim:GeneratingUnit', 'cim:RotatingMachine.GeneratingUnit');
        } else {
          attributeEntries['emptyEntries']['cim:RotatingMachine.GeneratingUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachine.GeneratingUnit'], 'cim:GeneratingUnit', 'cim:RotatingMachine.GeneratingUnit');
        }
        if ('cim:RotatingMachine.ratedPowerFactor' in object) {
          attributeEntries['filledEntries']['cim:RotatingMachine.ratedPowerFactor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachine.ratedPowerFactor'], 'cim:Simple_Float', 'cim:RotatingMachine.ratedPowerFactor');
        } else {
          attributeEntries['emptyEntries']['cim:RotatingMachine.ratedPowerFactor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachine.ratedPowerFactor'], 'cim:Simple_Float', 'cim:RotatingMachine.ratedPowerFactor');
        }
        if ('cim:RotatingMachine.ratedS' in object) {
          attributeEntries['filledEntries']['cim:RotatingMachine.ratedS'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachine.ratedS'], 'cim:ApparentPower', 'cim:RotatingMachine.ratedS');
        } else {
          attributeEntries['emptyEntries']['cim:RotatingMachine.ratedS'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachine.ratedS'], 'cim:ApparentPower', 'cim:RotatingMachine.ratedS');
        }
        if ('cim:RotatingMachine.ratedU' in object) {
          attributeEntries['filledEntries']['cim:RotatingMachine.ratedU'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachine.ratedU'], 'cim:Voltage', 'cim:RotatingMachine.ratedU');
        } else {
          attributeEntries['emptyEntries']['cim:RotatingMachine.ratedU'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachine.ratedU'], 'cim:Voltage', 'cim:RotatingMachine.ratedU');
        }
        if ('cim:RotatingMachine.p' in object) {
          attributeEntries['filledEntries']['cim:RotatingMachine.p'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachine.p'], 'cim:ActivePower', 'cim:RotatingMachine.p');
        } else {
          attributeEntries['emptyEntries']['cim:RotatingMachine.p'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachine.p'], 'cim:ActivePower', 'cim:RotatingMachine.p');
        }
        if ('cim:RotatingMachine.q' in object) {
          attributeEntries['filledEntries']['cim:RotatingMachine.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachine.q'], 'cim:ReactivePower', 'cim:RotatingMachine.q');
        } else {
          attributeEntries['emptyEntries']['cim:RotatingMachine.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachine.q'], 'cim:ReactivePower', 'cim:RotatingMachine.q');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RotatingMachine.GeneratingUnit", "cim:RotatingMachine.ratedPowerFactor", "cim:RotatingMachine.ratedS", "cim:RotatingMachine.ratedU", "cim:RotatingMachine.p", "cim:RotatingMachine.q"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (RegulatingCondEq.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RotatingMachine.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RotatingMachine: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RotatingMachine.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["AsynchronousMachine", "SynchronousMachine"];
        return subClasses;
      }
    }]);
    return RotatingMachine;
  }(RegulatingCondEq);
  _defineProperty(RotatingMachine, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.DY],
    'GeneratingUnit': [CGMESProfile.shortNames.EQ],
    'ratedPowerFactor': [CGMESProfile.shortNames.EQ],
    'ratedS': [CGMESProfile.shortNames.EQ],
    'ratedU': [CGMESProfile.shortNames.EQ],
    'p': [CGMESProfile.shortNames.SSH],
    'q': [CGMESProfile.shortNames.SSH]
  });

  var AsynchronousMachine = /*#__PURE__*/function (_RotatingMachine) {
    _inherits(AsynchronousMachine, _RotatingMachine);
    var _super = _createSuper(AsynchronousMachine);
    function AsynchronousMachine() {
      _classCallCheck(this, AsynchronousMachine);
      return _super.apply(this, arguments);
    }
    _createClass(AsynchronousMachine, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AsynchronousMachine";
        var attributeEntries = RotatingMachine.attributeHTML(object, cimmenu, classType);
        if ('cim:AsynchronousMachine.nominalFrequency' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachine.nominalFrequency'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.nominalFrequency'], 'cim:Frequency', 'cim:AsynchronousMachine.nominalFrequency');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachine.nominalFrequency'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.nominalFrequency'], 'cim:Frequency', 'cim:AsynchronousMachine.nominalFrequency');
        }
        if ('cim:AsynchronousMachine.nominalSpeed' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachine.nominalSpeed'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.nominalSpeed'], 'cim:RotationSpeed', 'cim:AsynchronousMachine.nominalSpeed');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachine.nominalSpeed'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.nominalSpeed'], 'cim:RotationSpeed', 'cim:AsynchronousMachine.nominalSpeed');
        }
        if ('cim:AsynchronousMachine.converterFedDrive' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachine.converterFedDrive'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.converterFedDrive'], 'cim:Boolean', 'cim:AsynchronousMachine.converterFedDrive');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachine.converterFedDrive'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.converterFedDrive'], 'cim:Boolean', 'cim:AsynchronousMachine.converterFedDrive');
        }
        if ('cim:AsynchronousMachine.efficiency' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachine.efficiency'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.efficiency'], 'cim:PerCent', 'cim:AsynchronousMachine.efficiency');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachine.efficiency'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.efficiency'], 'cim:PerCent', 'cim:AsynchronousMachine.efficiency');
        }
        if ('cim:AsynchronousMachine.iaIrRatio' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachine.iaIrRatio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.iaIrRatio'], 'cim:Simple_Float', 'cim:AsynchronousMachine.iaIrRatio');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachine.iaIrRatio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.iaIrRatio'], 'cim:Simple_Float', 'cim:AsynchronousMachine.iaIrRatio');
        }
        if ('cim:AsynchronousMachine.polePairNumber' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachine.polePairNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.polePairNumber'], 'cim:Integer', 'cim:AsynchronousMachine.polePairNumber');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachine.polePairNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.polePairNumber'], 'cim:Integer', 'cim:AsynchronousMachine.polePairNumber');
        }
        if ('cim:AsynchronousMachine.ratedMechanicalPower' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachine.ratedMechanicalPower'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.ratedMechanicalPower'], 'cim:ActivePower', 'cim:AsynchronousMachine.ratedMechanicalPower');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachine.ratedMechanicalPower'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.ratedMechanicalPower'], 'cim:ActivePower', 'cim:AsynchronousMachine.ratedMechanicalPower');
        }
        if ('cim:AsynchronousMachine.reversible' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachine.reversible'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.reversible'], 'cim:Boolean', 'cim:AsynchronousMachine.reversible');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachine.reversible'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.reversible'], 'cim:Boolean', 'cim:AsynchronousMachine.reversible');
        }
        if ('cim:AsynchronousMachine.rxLockedRotorRatio' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachine.rxLockedRotorRatio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.rxLockedRotorRatio'], 'cim:Simple_Float', 'cim:AsynchronousMachine.rxLockedRotorRatio');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachine.rxLockedRotorRatio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.rxLockedRotorRatio'], 'cim:Simple_Float', 'cim:AsynchronousMachine.rxLockedRotorRatio');
        }
        if ('cim:AsynchronousMachine.asynchronousMachineType' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachine.asynchronousMachineType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.asynchronousMachineType'], 'cim:AsynchronousMachineKind', 'cim:AsynchronousMachine.asynchronousMachineType');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachine.asynchronousMachineType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachine.asynchronousMachineType'], 'cim:AsynchronousMachineKind', 'cim:AsynchronousMachine.asynchronousMachineType');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AsynchronousMachine.nominalFrequency", "cim:AsynchronousMachine.nominalSpeed", "cim:AsynchronousMachine.converterFedDrive", "cim:AsynchronousMachine.efficiency", "cim:AsynchronousMachine.iaIrRatio", "cim:AsynchronousMachine.polePairNumber", "cim:AsynchronousMachine.ratedMechanicalPower", "cim:AsynchronousMachine.reversible", "cim:AsynchronousMachine.rxLockedRotorRatio", "cim:AsynchronousMachine.asynchronousMachineType"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (RotatingMachine.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AsynchronousMachine.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AsynchronousMachine: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AsynchronousMachine.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AsynchronousMachine;
  }(RotatingMachine);
  _defineProperty(AsynchronousMachine, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.DY],
    'nominalFrequency': [CGMESProfile.shortNames.EQ],
    'nominalSpeed': [CGMESProfile.shortNames.EQ],
    'converterFedDrive': [CGMESProfile.shortNames.EQ],
    'efficiency': [CGMESProfile.shortNames.EQ],
    'iaIrRatio': [CGMESProfile.shortNames.EQ],
    'polePairNumber': [CGMESProfile.shortNames.EQ],
    'ratedMechanicalPower': [CGMESProfile.shortNames.EQ],
    'reversible': [CGMESProfile.shortNames.EQ],
    'rxLockedRotorRatio': [CGMESProfile.shortNames.EQ],
    'asynchronousMachineType': [CGMESProfile.shortNames.SSH]
  });

  var DynamicsFunctionBlock = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(DynamicsFunctionBlock, _IdentifiedObject);
    var _super = _createSuper(DynamicsFunctionBlock);
    function DynamicsFunctionBlock() {
      _classCallCheck(this, DynamicsFunctionBlock);
      return _super.apply(this, arguments);
    }
    _createClass(DynamicsFunctionBlock, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DynamicsFunctionBlock";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:DynamicsFunctionBlock.enabled' in object) {
          attributeEntries['filledEntries']['cim:DynamicsFunctionBlock.enabled'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsFunctionBlock.enabled'], 'cim:Boolean', 'cim:DynamicsFunctionBlock.enabled');
        } else {
          attributeEntries['emptyEntries']['cim:DynamicsFunctionBlock.enabled'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsFunctionBlock.enabled'], 'cim:Boolean', 'cim:DynamicsFunctionBlock.enabled');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DynamicsFunctionBlock.enabled"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DynamicsFunctionBlock.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DynamicsFunctionBlock: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["RotatingMachineDynamics", "SynchronousMachineDynamics", "SynchronousMachineUserDefined", "SynchronousMachineSimplified", "SynchronousMachineDetailed", "SynchronousMachineTimeConstantReactance", "SynchronousMachineEquivalentCircuit", "AsynchronousMachineDynamics", "AsynchronousMachineUserDefined", "AsynchronousMachineTimeConstantReactance", "AsynchronousMachineEquivalentCircuit", "TurbineGovernorDynamics", "TurbineGovernorUserDefined", "GovHydroIEEE0", "GovHydroIEEE2", "GovSteamIEEE1", "GovCT1", "GovCT2", "GovGAST", "GovGAST1", "GovGAST2", "GovGAST3", "GovGAST4", "GovGASTWD", "GovHydro1", "GovHydro2", "GovHydro3", "GovHydro4", "GovHydroDD", "GovHydroFrancis", "GovHydroPelton", "GovHydroPID", "GovHydroPID2", "GovHydroR", "GovHydroWEH", "GovHydroWPID", "GovSteam0", "GovSteam1", "GovSteam2", "GovSteamCC", "GovSteamEU", "GovSteamFV2", "GovSteamFV3", "GovSteamFV4", "GovSteamSGO", "TurbineLoadControllerDynamics", "TurbineLoadControllerUserDefined", "TurbLCFB1", "MechanicalLoadDynamics", "MechanicalLoadUserDefined", "MechLoad1", "ExcitationSystemDynamics", "ExcitationSystemUserDefined", "ExcIEEEAC1A", "ExcIEEEAC2A", "ExcIEEEAC3A", "ExcIEEEAC4A", "ExcIEEEAC5A", "ExcIEEEAC6A", "ExcIEEEAC7B", "ExcIEEEAC8B", "ExcIEEEDC1A", "ExcIEEEDC2A", "ExcIEEEDC3A", "ExcIEEEDC4B", "ExcIEEEST1A", "ExcIEEEST2A", "ExcIEEEST3A", "ExcIEEEST4B", "ExcIEEEST5B", "ExcIEEEST6B", "ExcIEEEST7B", "ExcAC1A", "ExcAC2A", "ExcAC3A", "ExcAC4A", "ExcAC5A", "ExcAC6A", "ExcAC8B", "ExcANS", "ExcAVR1", "ExcAVR2", "ExcAVR3", "ExcAVR4", "ExcAVR5", "ExcAVR7", "ExcBBC", "ExcCZ", "ExcDC1A", "ExcDC2A", "ExcDC3A", "ExcDC3A1", "ExcELIN1", "ExcELIN2", "ExcHU", "ExcOEX3T", "ExcPIC", "ExcREXS", "ExcSCRX", "ExcSEXS", "ExcSK", "ExcST1A", "ExcST2A", "ExcST3A", "ExcST4B", "ExcST6B", "ExcST7B", "OverexcitationLimiterDynamics", "OverexcitationLimiterUserDefined", "OverexcLimIEEE", "OverexcLim2", "OverexcLimX1", "OverexcLimX2", "UnderexcitationLimiterDynamics", "UnderexcitationLimiterUserDefined", "UnderexcLimIEEE1", "UnderexcLimIEEE2", "UnderexcLim2Simplified", "UnderexcLimX1", "UnderexcLimX2", "PowerSystemStabilizerDynamics", "PowerSystemStabilizerUserDefined", "PssIEEE1A", "PssIEEE2B", "PssIEEE3B", "PssIEEE4B", "Pss1", "Pss1A", "Pss2B", "Pss2ST", "Pss5", "PssELIN2", "PssPTIST1", "PssPTIST3", "PssSB4", "PssSH", "PssSK", "PssWECC", "DiscontinuousExcitationControlDynamics", "DiscontinuousExcitationControlUserDefined", "DiscExcContIEEEDEC1A", "DiscExcContIEEEDEC2A", "DiscExcContIEEEDEC3A", "PFVArControllerType1Dynamics", "PFVArControllerType1UserDefined", "PFVArType1IEEEPFController", "PFVArType1IEEEVArController", "VoltageAdjusterDynamics", "VoltageAdjusterUserDefined", "VAdjIEEE", "PFVArControllerType2Dynamics", "PFVArControllerType2UserDefined", "PFVArType2IEEEPFController", "PFVArType2IEEEVArController", "PFVArType2Common1", "VoltageCompensatorDynamics", "VoltageCompensatorUserDefined", "VCompIEEEType1", "VCompIEEEType2", "WindPlantDynamics", "WindPlantUserDefined", "WindPlantIEC", "WindTurbineType1or2Dynamics", "WindType1or2UserDefined", "WindTurbineType1or2IEC", "WindGenTurbineType1IEC", "WindGenTurbineType2IEC", "WindTurbineType3or4Dynamics", "WindType3or4UserDefined", "WindTurbineType3or4IEC", "WindGenTurbineType3IEC", "WindGenTurbineType3aIEC", "WindGenTurbineType3bIEC", "WindGenType4IEC", "WindTurbineType4aIEC", "WindTurbineType4bIEC"];
        return subClasses;
      }
    }]);
    return DynamicsFunctionBlock;
  }(IdentifiedObject);
  _defineProperty(DynamicsFunctionBlock, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'enabled': [CGMESProfile.shortNames.DY]
  });

  var RotatingMachineDynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(RotatingMachineDynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(RotatingMachineDynamics);
    function RotatingMachineDynamics() {
      _classCallCheck(this, RotatingMachineDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(RotatingMachineDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RotatingMachineDynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:RotatingMachineDynamics.damping' in object) {
          attributeEntries['filledEntries']['cim:RotatingMachineDynamics.damping'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachineDynamics.damping'], 'cim:Simple_Float', 'cim:RotatingMachineDynamics.damping');
        } else {
          attributeEntries['emptyEntries']['cim:RotatingMachineDynamics.damping'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachineDynamics.damping'], 'cim:Simple_Float', 'cim:RotatingMachineDynamics.damping');
        }
        if ('cim:RotatingMachineDynamics.inertia' in object) {
          attributeEntries['filledEntries']['cim:RotatingMachineDynamics.inertia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachineDynamics.inertia'], 'cim:Seconds', 'cim:RotatingMachineDynamics.inertia');
        } else {
          attributeEntries['emptyEntries']['cim:RotatingMachineDynamics.inertia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachineDynamics.inertia'], 'cim:Seconds', 'cim:RotatingMachineDynamics.inertia');
        }
        if ('cim:RotatingMachineDynamics.saturationFactor' in object) {
          attributeEntries['filledEntries']['cim:RotatingMachineDynamics.saturationFactor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachineDynamics.saturationFactor'], 'cim:Simple_Float', 'cim:RotatingMachineDynamics.saturationFactor');
        } else {
          attributeEntries['emptyEntries']['cim:RotatingMachineDynamics.saturationFactor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachineDynamics.saturationFactor'], 'cim:Simple_Float', 'cim:RotatingMachineDynamics.saturationFactor');
        }
        if ('cim:RotatingMachineDynamics.saturationFactor120' in object) {
          attributeEntries['filledEntries']['cim:RotatingMachineDynamics.saturationFactor120'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachineDynamics.saturationFactor120'], 'cim:Simple_Float', 'cim:RotatingMachineDynamics.saturationFactor120');
        } else {
          attributeEntries['emptyEntries']['cim:RotatingMachineDynamics.saturationFactor120'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachineDynamics.saturationFactor120'], 'cim:Simple_Float', 'cim:RotatingMachineDynamics.saturationFactor120');
        }
        if ('cim:RotatingMachineDynamics.statorLeakageReactance' in object) {
          attributeEntries['filledEntries']['cim:RotatingMachineDynamics.statorLeakageReactance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachineDynamics.statorLeakageReactance'], 'cim:PU', 'cim:RotatingMachineDynamics.statorLeakageReactance');
        } else {
          attributeEntries['emptyEntries']['cim:RotatingMachineDynamics.statorLeakageReactance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachineDynamics.statorLeakageReactance'], 'cim:PU', 'cim:RotatingMachineDynamics.statorLeakageReactance');
        }
        if ('cim:RotatingMachineDynamics.statorResistance' in object) {
          attributeEntries['filledEntries']['cim:RotatingMachineDynamics.statorResistance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachineDynamics.statorResistance'], 'cim:PU', 'cim:RotatingMachineDynamics.statorResistance');
        } else {
          attributeEntries['emptyEntries']['cim:RotatingMachineDynamics.statorResistance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotatingMachineDynamics.statorResistance'], 'cim:PU', 'cim:RotatingMachineDynamics.statorResistance');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RotatingMachineDynamics.damping", "cim:RotatingMachineDynamics.inertia", "cim:RotatingMachineDynamics.saturationFactor", "cim:RotatingMachineDynamics.saturationFactor120", "cim:RotatingMachineDynamics.statorLeakageReactance", "cim:RotatingMachineDynamics.statorResistance"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RotatingMachineDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RotatingMachineDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RotatingMachineDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["SynchronousMachineDynamics", "SynchronousMachineUserDefined", "SynchronousMachineSimplified", "SynchronousMachineDetailed", "SynchronousMachineTimeConstantReactance", "SynchronousMachineEquivalentCircuit", "AsynchronousMachineDynamics", "AsynchronousMachineUserDefined", "AsynchronousMachineTimeConstantReactance", "AsynchronousMachineEquivalentCircuit"];
        return subClasses;
      }
    }]);
    return RotatingMachineDynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(RotatingMachineDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'damping': [CGMESProfile.shortNames.DY],
    'inertia': [CGMESProfile.shortNames.DY],
    'saturationFactor': [CGMESProfile.shortNames.DY],
    'saturationFactor120': [CGMESProfile.shortNames.DY],
    'statorLeakageReactance': [CGMESProfile.shortNames.DY],
    'statorResistance': [CGMESProfile.shortNames.DY]
  });

  var AsynchronousMachineDynamics = /*#__PURE__*/function (_RotatingMachineDynam) {
    _inherits(AsynchronousMachineDynamics, _RotatingMachineDynam);
    var _super = _createSuper(AsynchronousMachineDynamics);
    function AsynchronousMachineDynamics() {
      _classCallCheck(this, AsynchronousMachineDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(AsynchronousMachineDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AsynchronousMachineDynamics";
        var attributeEntries = RotatingMachineDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:AsynchronousMachineDynamics.AsynchronousMachine' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineDynamics.AsynchronousMachine'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineDynamics.AsynchronousMachine'], 'cim:AsynchronousMachine', 'cim:AsynchronousMachineDynamics.AsynchronousMachine');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineDynamics.AsynchronousMachine'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineDynamics.AsynchronousMachine'], 'cim:AsynchronousMachine', 'cim:AsynchronousMachineDynamics.AsynchronousMachine');
        }
        if ('cim:AsynchronousMachineDynamics.WindTurbineType1or2Dynamics' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineDynamics.WindTurbineType1or2Dynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineDynamics.WindTurbineType1or2Dynamics'], 'cim:WindTurbineType1or2Dynamics', 'cim:AsynchronousMachineDynamics.WindTurbineType1or2Dynamics');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineDynamics.WindTurbineType1or2Dynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineDynamics.WindTurbineType1or2Dynamics'], 'cim:WindTurbineType1or2Dynamics', 'cim:AsynchronousMachineDynamics.WindTurbineType1or2Dynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AsynchronousMachineDynamics.AsynchronousMachine", "cim:AsynchronousMachineDynamics.WindTurbineType1or2Dynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (RotatingMachineDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AsynchronousMachineDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AsynchronousMachineDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AsynchronousMachineDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["AsynchronousMachineUserDefined", "AsynchronousMachineTimeConstantReactance", "AsynchronousMachineEquivalentCircuit"];
        return subClasses;
      }
    }]);
    return AsynchronousMachineDynamics;
  }(RotatingMachineDynamics);
  _defineProperty(AsynchronousMachineDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'AsynchronousMachine': [CGMESProfile.shortNames.DY],
    'WindTurbineType1or2Dynamics': [CGMESProfile.shortNames.DY]
  });

  var AsynchronousMachineEquivalentCircuit = /*#__PURE__*/function (_AsynchronousMachineD) {
    _inherits(AsynchronousMachineEquivalentCircuit, _AsynchronousMachineD);
    var _super = _createSuper(AsynchronousMachineEquivalentCircuit);
    function AsynchronousMachineEquivalentCircuit() {
      _classCallCheck(this, AsynchronousMachineEquivalentCircuit);
      return _super.apply(this, arguments);
    }
    _createClass(AsynchronousMachineEquivalentCircuit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AsynchronousMachineEquivalentCircuit";
        var attributeEntries = AsynchronousMachineDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:AsynchronousMachineEquivalentCircuit.xm' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineEquivalentCircuit.xm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineEquivalentCircuit.xm'], 'cim:PU', 'cim:AsynchronousMachineEquivalentCircuit.xm');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineEquivalentCircuit.xm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineEquivalentCircuit.xm'], 'cim:PU', 'cim:AsynchronousMachineEquivalentCircuit.xm');
        }
        if ('cim:AsynchronousMachineEquivalentCircuit.rr1' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineEquivalentCircuit.rr1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineEquivalentCircuit.rr1'], 'cim:PU', 'cim:AsynchronousMachineEquivalentCircuit.rr1');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineEquivalentCircuit.rr1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineEquivalentCircuit.rr1'], 'cim:PU', 'cim:AsynchronousMachineEquivalentCircuit.rr1');
        }
        if ('cim:AsynchronousMachineEquivalentCircuit.xlr1' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineEquivalentCircuit.xlr1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineEquivalentCircuit.xlr1'], 'cim:PU', 'cim:AsynchronousMachineEquivalentCircuit.xlr1');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineEquivalentCircuit.xlr1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineEquivalentCircuit.xlr1'], 'cim:PU', 'cim:AsynchronousMachineEquivalentCircuit.xlr1');
        }
        if ('cim:AsynchronousMachineEquivalentCircuit.rr2' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineEquivalentCircuit.rr2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineEquivalentCircuit.rr2'], 'cim:PU', 'cim:AsynchronousMachineEquivalentCircuit.rr2');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineEquivalentCircuit.rr2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineEquivalentCircuit.rr2'], 'cim:PU', 'cim:AsynchronousMachineEquivalentCircuit.rr2');
        }
        if ('cim:AsynchronousMachineEquivalentCircuit.xlr2' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineEquivalentCircuit.xlr2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineEquivalentCircuit.xlr2'], 'cim:PU', 'cim:AsynchronousMachineEquivalentCircuit.xlr2');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineEquivalentCircuit.xlr2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineEquivalentCircuit.xlr2'], 'cim:PU', 'cim:AsynchronousMachineEquivalentCircuit.xlr2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AsynchronousMachineEquivalentCircuit.xm", "cim:AsynchronousMachineEquivalentCircuit.rr1", "cim:AsynchronousMachineEquivalentCircuit.xlr1", "cim:AsynchronousMachineEquivalentCircuit.rr2", "cim:AsynchronousMachineEquivalentCircuit.xlr2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (AsynchronousMachineDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AsynchronousMachineEquivalentCircuit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AsynchronousMachineEquivalentCircuit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AsynchronousMachineEquivalentCircuit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AsynchronousMachineEquivalentCircuit;
  }(AsynchronousMachineDynamics);
  _defineProperty(AsynchronousMachineEquivalentCircuit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'xm': [CGMESProfile.shortNames.DY],
    'rr1': [CGMESProfile.shortNames.DY],
    'xlr1': [CGMESProfile.shortNames.DY],
    'rr2': [CGMESProfile.shortNames.DY],
    'xlr2': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$L = [{
    "value": "--"
  }, {
    "value": "AsynchronousMachineKind.generator",
    "label": "generator"
  }, {
    "value": "AsynchronousMachineKind.motor",
    "label": "motor"
  }];
  var AsynchronousMachineKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(AsynchronousMachineKind, _BaseClass);
    var _super = _createSuper(AsynchronousMachineKind);
    function AsynchronousMachineKind() {
      _classCallCheck(this, AsynchronousMachineKind);
      return _super.apply(this, arguments);
    }
    _createClass(AsynchronousMachineKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AsynchronousMachineKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AsynchronousMachineKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AsynchronousMachineKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AsynchronousMachineKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$L;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AsynchronousMachineKind;
  }(BaseClass);
  _defineProperty(AsynchronousMachineKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SSH]
  });

  var AsynchronousMachineTimeConstantReactance = /*#__PURE__*/function (_AsynchronousMachineD) {
    _inherits(AsynchronousMachineTimeConstantReactance, _AsynchronousMachineD);
    var _super = _createSuper(AsynchronousMachineTimeConstantReactance);
    function AsynchronousMachineTimeConstantReactance() {
      _classCallCheck(this, AsynchronousMachineTimeConstantReactance);
      return _super.apply(this, arguments);
    }
    _createClass(AsynchronousMachineTimeConstantReactance, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AsynchronousMachineTimeConstantReactance";
        var attributeEntries = AsynchronousMachineDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:AsynchronousMachineTimeConstantReactance.xs' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineTimeConstantReactance.xs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineTimeConstantReactance.xs'], 'cim:PU', 'cim:AsynchronousMachineTimeConstantReactance.xs');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineTimeConstantReactance.xs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineTimeConstantReactance.xs'], 'cim:PU', 'cim:AsynchronousMachineTimeConstantReactance.xs');
        }
        if ('cim:AsynchronousMachineTimeConstantReactance.xp' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineTimeConstantReactance.xp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineTimeConstantReactance.xp'], 'cim:PU', 'cim:AsynchronousMachineTimeConstantReactance.xp');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineTimeConstantReactance.xp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineTimeConstantReactance.xp'], 'cim:PU', 'cim:AsynchronousMachineTimeConstantReactance.xp');
        }
        if ('cim:AsynchronousMachineTimeConstantReactance.xpp' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineTimeConstantReactance.xpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineTimeConstantReactance.xpp'], 'cim:PU', 'cim:AsynchronousMachineTimeConstantReactance.xpp');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineTimeConstantReactance.xpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineTimeConstantReactance.xpp'], 'cim:PU', 'cim:AsynchronousMachineTimeConstantReactance.xpp');
        }
        if ('cim:AsynchronousMachineTimeConstantReactance.tpo' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineTimeConstantReactance.tpo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineTimeConstantReactance.tpo'], 'cim:Seconds', 'cim:AsynchronousMachineTimeConstantReactance.tpo');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineTimeConstantReactance.tpo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineTimeConstantReactance.tpo'], 'cim:Seconds', 'cim:AsynchronousMachineTimeConstantReactance.tpo');
        }
        if ('cim:AsynchronousMachineTimeConstantReactance.tppo' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineTimeConstantReactance.tppo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineTimeConstantReactance.tppo'], 'cim:Seconds', 'cim:AsynchronousMachineTimeConstantReactance.tppo');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineTimeConstantReactance.tppo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineTimeConstantReactance.tppo'], 'cim:Seconds', 'cim:AsynchronousMachineTimeConstantReactance.tppo');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AsynchronousMachineTimeConstantReactance.xs", "cim:AsynchronousMachineTimeConstantReactance.xp", "cim:AsynchronousMachineTimeConstantReactance.xpp", "cim:AsynchronousMachineTimeConstantReactance.tpo", "cim:AsynchronousMachineTimeConstantReactance.tppo"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (AsynchronousMachineDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AsynchronousMachineTimeConstantReactance.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AsynchronousMachineTimeConstantReactance: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AsynchronousMachineTimeConstantReactance.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AsynchronousMachineTimeConstantReactance;
  }(AsynchronousMachineDynamics);
  _defineProperty(AsynchronousMachineTimeConstantReactance, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'xs': [CGMESProfile.shortNames.DY],
    'xp': [CGMESProfile.shortNames.DY],
    'xpp': [CGMESProfile.shortNames.DY],
    'tpo': [CGMESProfile.shortNames.DY],
    'tppo': [CGMESProfile.shortNames.DY]
  });

  var AsynchronousMachineUserDefined = /*#__PURE__*/function (_AsynchronousMachineD) {
    _inherits(AsynchronousMachineUserDefined, _AsynchronousMachineD);
    var _super = _createSuper(AsynchronousMachineUserDefined);
    function AsynchronousMachineUserDefined() {
      _classCallCheck(this, AsynchronousMachineUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(AsynchronousMachineUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "AsynchronousMachineUserDefined";
        var attributeEntries = AsynchronousMachineDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:AsynchronousMachineUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:AsynchronousMachineUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineUserDefined.proprietary'], 'cim:Boolean', 'cim:AsynchronousMachineUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:AsynchronousMachineUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['AsynchronousMachineUserDefined.proprietary'], 'cim:Boolean', 'cim:AsynchronousMachineUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:AsynchronousMachineUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (AsynchronousMachineDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!AsynchronousMachineUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class AsynchronousMachineUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = AsynchronousMachineUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return AsynchronousMachineUserDefined;
  }(AsynchronousMachineDynamics);
  _defineProperty(AsynchronousMachineUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var BaseVoltage = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(BaseVoltage, _IdentifiedObject);
    var _super = _createSuper(BaseVoltage);
    function BaseVoltage() {
      _classCallCheck(this, BaseVoltage);
      return _super.apply(this, arguments);
    }
    _createClass(BaseVoltage, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "BaseVoltage";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:BaseVoltage.nominalVoltage' in object) {
          attributeEntries['filledEntries']['cim:BaseVoltage.nominalVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BaseVoltage.nominalVoltage'], 'cim:Voltage', 'cim:BaseVoltage.nominalVoltage');
        } else {
          attributeEntries['emptyEntries']['cim:BaseVoltage.nominalVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BaseVoltage.nominalVoltage'], 'cim:Voltage', 'cim:BaseVoltage.nominalVoltage');
        }
        if ('cim:BaseVoltage.VoltageLevel' in object) {
          attributeEntries['filledEntries']['cim:BaseVoltage.VoltageLevel'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BaseVoltage.VoltageLevel'], 'cim:VoltageLevel', 'cim:BaseVoltage.VoltageLevel');
        } else {
          attributeEntries['emptyEntries']['cim:BaseVoltage.VoltageLevel'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BaseVoltage.VoltageLevel'], 'cim:VoltageLevel', 'cim:BaseVoltage.VoltageLevel');
        }
        if ('cim:BaseVoltage.TopologicalNode' in object) {
          attributeEntries['filledEntries']['cim:BaseVoltage.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BaseVoltage.TopologicalNode'], 'cim:TopologicalNode', 'cim:BaseVoltage.TopologicalNode');
        } else {
          attributeEntries['emptyEntries']['cim:BaseVoltage.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BaseVoltage.TopologicalNode'], 'cim:TopologicalNode', 'cim:BaseVoltage.TopologicalNode');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:BaseVoltage.nominalVoltage", "cim:BaseVoltage.VoltageLevel", "cim:BaseVoltage.TopologicalNode"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!BaseVoltage.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class BaseVoltage: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = BaseVoltage.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return BaseVoltage;
  }(IdentifiedObject);
  _defineProperty(BaseVoltage, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD, CGMESProfile.shortNames.EQ_BD],
    'nominalVoltage': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD],
    'VoltageLevel': [CGMESProfile.shortNames.EQ],
    'TopologicalNode': [CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD]
  });

  var BasicIntervalSchedule = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(BasicIntervalSchedule, _IdentifiedObject);
    var _super = _createSuper(BasicIntervalSchedule);
    function BasicIntervalSchedule() {
      _classCallCheck(this, BasicIntervalSchedule);
      return _super.apply(this, arguments);
    }
    _createClass(BasicIntervalSchedule, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "BasicIntervalSchedule";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:BasicIntervalSchedule.startTime' in object) {
          attributeEntries['filledEntries']['cim:BasicIntervalSchedule.startTime'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BasicIntervalSchedule.startTime'], 'cim:DateTime', 'cim:BasicIntervalSchedule.startTime');
        } else {
          attributeEntries['emptyEntries']['cim:BasicIntervalSchedule.startTime'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BasicIntervalSchedule.startTime'], 'cim:DateTime', 'cim:BasicIntervalSchedule.startTime');
        }
        if ('cim:BasicIntervalSchedule.value1Unit' in object) {
          attributeEntries['filledEntries']['cim:BasicIntervalSchedule.value1Unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BasicIntervalSchedule.value1Unit'], 'cim:UnitSymbol', 'cim:BasicIntervalSchedule.value1Unit');
        } else {
          attributeEntries['emptyEntries']['cim:BasicIntervalSchedule.value1Unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BasicIntervalSchedule.value1Unit'], 'cim:UnitSymbol', 'cim:BasicIntervalSchedule.value1Unit');
        }
        if ('cim:BasicIntervalSchedule.value2Unit' in object) {
          attributeEntries['filledEntries']['cim:BasicIntervalSchedule.value2Unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BasicIntervalSchedule.value2Unit'], 'cim:UnitSymbol', 'cim:BasicIntervalSchedule.value2Unit');
        } else {
          attributeEntries['emptyEntries']['cim:BasicIntervalSchedule.value2Unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BasicIntervalSchedule.value2Unit'], 'cim:UnitSymbol', 'cim:BasicIntervalSchedule.value2Unit');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:BasicIntervalSchedule.startTime", "cim:BasicIntervalSchedule.value1Unit", "cim:BasicIntervalSchedule.value2Unit"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!BasicIntervalSchedule.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class BasicIntervalSchedule: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = BasicIntervalSchedule.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["RegularIntervalSchedule", "SeasonDayTypeSchedule", "ConformLoadSchedule", "NonConformLoadSchedule", "RegulationSchedule", "SwitchSchedule", "TapSchedule"];
        return subClasses;
      }
    }]);
    return BasicIntervalSchedule;
  }(IdentifiedObject);
  _defineProperty(BasicIntervalSchedule, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'startTime': [CGMESProfile.shortNames.EQ],
    'value1Unit': [CGMESProfile.shortNames.EQ],
    'value2Unit': [CGMESProfile.shortNames.EQ]
  });

  var ConnectivityNodeContainer = /*#__PURE__*/function (_PowerSystemResource) {
    _inherits(ConnectivityNodeContainer, _PowerSystemResource);
    var _super = _createSuper(ConnectivityNodeContainer);
    function ConnectivityNodeContainer() {
      _classCallCheck(this, ConnectivityNodeContainer);
      return _super.apply(this, arguments);
    }
    _createClass(ConnectivityNodeContainer, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ConnectivityNodeContainer";
        var attributeEntries = PowerSystemResource.attributeHTML(object, cimmenu, classType);
        if ('cim:ConnectivityNodeContainer.TopologicalNode' in object) {
          attributeEntries['filledEntries']['cim:ConnectivityNodeContainer.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNodeContainer.TopologicalNode'], 'cim:TopologicalNode', 'cim:ConnectivityNodeContainer.TopologicalNode');
        } else {
          attributeEntries['emptyEntries']['cim:ConnectivityNodeContainer.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNodeContainer.TopologicalNode'], 'cim:TopologicalNode', 'cim:ConnectivityNodeContainer.TopologicalNode');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ConnectivityNodeContainer.TopologicalNode"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemResource.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ConnectivityNodeContainer.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ConnectivityNodeContainer: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ConnectivityNodeContainer.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["EquipmentContainer", "DCEquipmentContainer", "DCConverterUnit", "DCLine", "Substation", "VoltageLevel", "Line", "Bay", "EquivalentNetwork"];
        return subClasses;
      }
    }]);
    return ConnectivityNodeContainer;
  }(PowerSystemResource);
  _defineProperty(ConnectivityNodeContainer, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD, CGMESProfile.shortNames.EQ_BD],
    'TopologicalNode': [CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD]
  });

  var EquipmentContainer = /*#__PURE__*/function (_ConnectivityNodeCont) {
    _inherits(EquipmentContainer, _ConnectivityNodeCont);
    var _super = _createSuper(EquipmentContainer);
    function EquipmentContainer() {
      _classCallCheck(this, EquipmentContainer);
      return _super.apply(this, arguments);
    }
    _createClass(EquipmentContainer, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EquipmentContainer";
        var attributeEntries = ConnectivityNodeContainer.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConnectivityNodeContainer.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EquipmentContainer.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EquipmentContainer: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EquipmentContainer.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["DCEquipmentContainer", "DCConverterUnit", "DCLine", "Substation", "VoltageLevel", "Line", "Bay"];
        return subClasses;
      }
    }]);
    return EquipmentContainer;
  }(ConnectivityNodeContainer);
  _defineProperty(EquipmentContainer, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD]
  });

  var Bay = /*#__PURE__*/function (_EquipmentContainer) {
    _inherits(Bay, _EquipmentContainer);
    var _super = _createSuper(Bay);
    function Bay() {
      _classCallCheck(this, Bay);
      return _super.apply(this, arguments);
    }
    _createClass(Bay, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Bay";
        var attributeEntries = EquipmentContainer.attributeHTML(object, cimmenu, classType);
        if ('cim:Bay.VoltageLevel' in object) {
          attributeEntries['filledEntries']['cim:Bay.VoltageLevel'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Bay.VoltageLevel'], 'cim:VoltageLevel', 'cim:Bay.VoltageLevel');
        } else {
          attributeEntries['emptyEntries']['cim:Bay.VoltageLevel'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Bay.VoltageLevel'], 'cim:VoltageLevel', 'cim:Bay.VoltageLevel');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Bay.VoltageLevel"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EquipmentContainer.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Bay.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Bay: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Bay.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Bay;
  }(EquipmentContainer);
  _defineProperty(Bay, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'VoltageLevel': [CGMESProfile.shortNames.EQ]
  });

  var Boolean$1 = /*#__PURE__*/function (_BaseClass) {
    _inherits(Boolean, _BaseClass);
    var _super = _createSuper(Boolean);
    function Boolean() {
      _classCallCheck(this, Boolean);
      return _super.apply(this, arguments);
    }
    _createClass(Boolean, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Boolean";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Boolean.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Boolean: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Boolean.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_boolean(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Boolean;
  }(BaseClass);
  _defineProperty(Boolean$1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.TP_BD, CGMESProfile.shortNames.EQ_BD]
  });

  var Switch = /*#__PURE__*/function (_ConductingEquipment) {
    _inherits(Switch, _ConductingEquipment);
    var _super = _createSuper(Switch);
    function Switch() {
      _classCallCheck(this, Switch);
      return _super.apply(this, arguments);
    }
    _createClass(Switch, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Switch";
        var attributeEntries = ConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:Switch.normalOpen' in object) {
          attributeEntries['filledEntries']['cim:Switch.normalOpen'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Switch.normalOpen'], 'cim:Boolean', 'cim:Switch.normalOpen');
        } else {
          attributeEntries['emptyEntries']['cim:Switch.normalOpen'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Switch.normalOpen'], 'cim:Boolean', 'cim:Switch.normalOpen');
        }
        if ('cim:Switch.ratedCurrent' in object) {
          attributeEntries['filledEntries']['cim:Switch.ratedCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Switch.ratedCurrent'], 'cim:CurrentFlow', 'cim:Switch.ratedCurrent');
        } else {
          attributeEntries['emptyEntries']['cim:Switch.ratedCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Switch.ratedCurrent'], 'cim:CurrentFlow', 'cim:Switch.ratedCurrent');
        }
        if ('cim:Switch.retained' in object) {
          attributeEntries['filledEntries']['cim:Switch.retained'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Switch.retained'], 'cim:Boolean', 'cim:Switch.retained');
        } else {
          attributeEntries['emptyEntries']['cim:Switch.retained'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Switch.retained'], 'cim:Boolean', 'cim:Switch.retained');
        }
        if ('cim:Switch.open' in object) {
          attributeEntries['filledEntries']['cim:Switch.open'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Switch.open'], 'cim:Boolean', 'cim:Switch.open');
        } else {
          attributeEntries['emptyEntries']['cim:Switch.open'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Switch.open'], 'cim:Boolean', 'cim:Switch.open');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Switch.normalOpen", "cim:Switch.ratedCurrent", "cim:Switch.retained", "cim:Switch.open"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Switch.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Switch: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Switch.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["Disconnector", "ProtectedSwitch", "Breaker", "LoadBreakSwitch", "GroundDisconnector"];
        return subClasses;
      }
    }]);
    return Switch;
  }(ConductingEquipment);
  _defineProperty(Switch, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'normalOpen': [CGMESProfile.shortNames.EQ],
    'ratedCurrent': [CGMESProfile.shortNames.EQ],
    'retained': [CGMESProfile.shortNames.EQ],
    'open': [CGMESProfile.shortNames.SSH]
  });

  var ProtectedSwitch = /*#__PURE__*/function (_Switch) {
    _inherits(ProtectedSwitch, _Switch);
    var _super = _createSuper(ProtectedSwitch);
    function ProtectedSwitch() {
      _classCallCheck(this, ProtectedSwitch);
      return _super.apply(this, arguments);
    }
    _createClass(ProtectedSwitch, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ProtectedSwitch";
        var attributeEntries = Switch.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Switch.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ProtectedSwitch.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ProtectedSwitch: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ProtectedSwitch.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["Breaker", "LoadBreakSwitch"];
        return subClasses;
      }
    }]);
    return ProtectedSwitch;
  }(Switch);
  _defineProperty(ProtectedSwitch, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var Breaker = /*#__PURE__*/function (_ProtectedSwitch) {
    _inherits(Breaker, _ProtectedSwitch);
    var _super = _createSuper(Breaker);
    function Breaker() {
      _classCallCheck(this, Breaker);
      return _super.apply(this, arguments);
    }
    _createClass(Breaker, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Breaker";
        var attributeEntries = ProtectedSwitch.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ProtectedSwitch.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Breaker.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Breaker: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Breaker.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Breaker;
  }(ProtectedSwitch);
  _defineProperty(Breaker, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var BusNameMarker = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(BusNameMarker, _IdentifiedObject);
    var _super = _createSuper(BusNameMarker);
    function BusNameMarker() {
      _classCallCheck(this, BusNameMarker);
      return _super.apply(this, arguments);
    }
    _createClass(BusNameMarker, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "BusNameMarker";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:BusNameMarker.priority' in object) {
          attributeEntries['filledEntries']['cim:BusNameMarker.priority'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BusNameMarker.priority'], 'cim:Integer', 'cim:BusNameMarker.priority');
        } else {
          attributeEntries['emptyEntries']['cim:BusNameMarker.priority'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BusNameMarker.priority'], 'cim:Integer', 'cim:BusNameMarker.priority');
        }
        if ('cim:BusNameMarker.ReportingGroup' in object) {
          attributeEntries['filledEntries']['cim:BusNameMarker.ReportingGroup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BusNameMarker.ReportingGroup'], 'cim:ReportingGroup', 'cim:BusNameMarker.ReportingGroup');
        } else {
          attributeEntries['emptyEntries']['cim:BusNameMarker.ReportingGroup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BusNameMarker.ReportingGroup'], 'cim:ReportingGroup', 'cim:BusNameMarker.ReportingGroup');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:BusNameMarker.priority", "cim:BusNameMarker.ReportingGroup"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!BusNameMarker.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class BusNameMarker: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = BusNameMarker.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return BusNameMarker;
  }(IdentifiedObject);
  _defineProperty(BusNameMarker, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'priority': [CGMESProfile.shortNames.EQ],
    'ReportingGroup': [CGMESProfile.shortNames.EQ]
  });

  var Connector = /*#__PURE__*/function (_ConductingEquipment) {
    _inherits(Connector, _ConductingEquipment);
    var _super = _createSuper(Connector);
    function Connector() {
      _classCallCheck(this, Connector);
      return _super.apply(this, arguments);
    }
    _createClass(Connector, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Connector";
        var attributeEntries = ConductingEquipment.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Connector.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Connector: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Connector.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["BusbarSection", "Junction"];
        return subClasses;
      }
    }]);
    return Connector;
  }(ConductingEquipment);
  _defineProperty(Connector, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD]
  });

  var BusbarSection = /*#__PURE__*/function (_Connector) {
    _inherits(BusbarSection, _Connector);
    var _super = _createSuper(BusbarSection);
    function BusbarSection() {
      _classCallCheck(this, BusbarSection);
      return _super.apply(this, arguments);
    }
    _createClass(BusbarSection, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "BusbarSection";
        var attributeEntries = Connector.attributeHTML(object, cimmenu, classType);
        if ('cim:BusbarSection.ipMax' in object) {
          attributeEntries['filledEntries']['cim:BusbarSection.ipMax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BusbarSection.ipMax'], 'cim:CurrentFlow', 'cim:BusbarSection.ipMax');
        } else {
          attributeEntries['emptyEntries']['cim:BusbarSection.ipMax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['BusbarSection.ipMax'], 'cim:CurrentFlow', 'cim:BusbarSection.ipMax');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:BusbarSection.ipMax"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Connector.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!BusbarSection.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class BusbarSection: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = BusbarSection.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return BusbarSection;
  }(Connector);
  _defineProperty(BusbarSection, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'ipMax': [CGMESProfile.shortNames.EQ]
  });

  var Capacitance = /*#__PURE__*/function (_BaseClass) {
    _inherits(Capacitance, _BaseClass);
    var _super = _createSuper(Capacitance);
    function Capacitance() {
      _classCallCheck(this, Capacitance);
      return _super.apply(this, arguments);
    }
    _createClass(Capacitance, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Capacitance";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Capacitance.value' in object) {
          attributeEntries['filledEntries']['cim:Capacitance.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Capacitance.value'], 'cim:Float', 'cim:Capacitance.value');
        } else {
          attributeEntries['emptyEntries']['cim:Capacitance.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Capacitance.value'], 'cim:Float', 'cim:Capacitance.value');
        }
        if ('cim:Capacitance.unit' in object) {
          attributeEntries['filledEntries']['cim:Capacitance.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Capacitance.unit'], 'cim:UnitSymbol', 'cim:Capacitance.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Capacitance.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Capacitance.unit'], 'cim:UnitSymbol', 'cim:Capacitance.unit');
        }
        if ('cim:Capacitance.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Capacitance.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Capacitance.multiplier'], 'cim:UnitMultiplier', 'cim:Capacitance.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Capacitance.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Capacitance.multiplier'], 'cim:UnitMultiplier', 'cim:Capacitance.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Capacitance.value", "cim:Capacitance.unit", "cim:Capacitance.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Capacitance.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Capacitance: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Capacitance.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Capacitance;
  }(BaseClass);
  _defineProperty(Capacitance, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ]
  });

  var CapacitancePerLength = /*#__PURE__*/function (_BaseClass) {
    _inherits(CapacitancePerLength, _BaseClass);
    var _super = _createSuper(CapacitancePerLength);
    function CapacitancePerLength() {
      _classCallCheck(this, CapacitancePerLength);
      return _super.apply(this, arguments);
    }
    _createClass(CapacitancePerLength, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "CapacitancePerLength";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:CapacitancePerLength.value' in object) {
          attributeEntries['filledEntries']['cim:CapacitancePerLength.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CapacitancePerLength.value'], 'cim:Float', 'cim:CapacitancePerLength.value');
        } else {
          attributeEntries['emptyEntries']['cim:CapacitancePerLength.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CapacitancePerLength.value'], 'cim:Float', 'cim:CapacitancePerLength.value');
        }
        if ('cim:CapacitancePerLength.unit' in object) {
          attributeEntries['filledEntries']['cim:CapacitancePerLength.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CapacitancePerLength.unit'], 'cim:UnitSymbol', 'cim:CapacitancePerLength.unit');
        } else {
          attributeEntries['emptyEntries']['cim:CapacitancePerLength.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CapacitancePerLength.unit'], 'cim:UnitSymbol', 'cim:CapacitancePerLength.unit');
        }
        if ('cim:CapacitancePerLength.multiplier' in object) {
          attributeEntries['filledEntries']['cim:CapacitancePerLength.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CapacitancePerLength.multiplier'], 'cim:UnitMultiplier', 'cim:CapacitancePerLength.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:CapacitancePerLength.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CapacitancePerLength.multiplier'], 'cim:UnitMultiplier', 'cim:CapacitancePerLength.multiplier');
        }
        if ('cim:CapacitancePerLength.denominatorUnit' in object) {
          attributeEntries['filledEntries']['cim:CapacitancePerLength.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CapacitancePerLength.denominatorUnit'], 'cim:UnitSymbol', 'cim:CapacitancePerLength.denominatorUnit');
        } else {
          attributeEntries['emptyEntries']['cim:CapacitancePerLength.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CapacitancePerLength.denominatorUnit'], 'cim:UnitSymbol', 'cim:CapacitancePerLength.denominatorUnit');
        }
        if ('cim:CapacitancePerLength.denominatorMultiplier' in object) {
          attributeEntries['filledEntries']['cim:CapacitancePerLength.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CapacitancePerLength.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:CapacitancePerLength.denominatorMultiplier');
        } else {
          attributeEntries['emptyEntries']['cim:CapacitancePerLength.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CapacitancePerLength.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:CapacitancePerLength.denominatorMultiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:CapacitancePerLength.value", "cim:CapacitancePerLength.unit", "cim:CapacitancePerLength.multiplier", "cim:CapacitancePerLength.denominatorUnit", "cim:CapacitancePerLength.denominatorMultiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!CapacitancePerLength.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class CapacitancePerLength: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = CapacitancePerLength.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return CapacitancePerLength;
  }(BaseClass);
  _defineProperty(CapacitancePerLength, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ],
    'denominatorUnit': [CGMESProfile.shortNames.EQ],
    'denominatorMultiplier': [CGMESProfile.shortNames.EQ]
  });

  var Command = /*#__PURE__*/function (_Control) {
    _inherits(Command, _Control);
    var _super = _createSuper(Command);
    function Command() {
      _classCallCheck(this, Command);
      return _super.apply(this, arguments);
    }
    _createClass(Command, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Command";
        var attributeEntries = Control.attributeHTML(object, cimmenu, classType);
        if ('cim:Command.normalValue' in object) {
          attributeEntries['filledEntries']['cim:Command.normalValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Command.normalValue'], 'cim:Integer', 'cim:Command.normalValue');
        } else {
          attributeEntries['emptyEntries']['cim:Command.normalValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Command.normalValue'], 'cim:Integer', 'cim:Command.normalValue');
        }
        if ('cim:Command.value' in object) {
          attributeEntries['filledEntries']['cim:Command.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Command.value'], 'cim:Integer', 'cim:Command.value');
        } else {
          attributeEntries['emptyEntries']['cim:Command.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Command.value'], 'cim:Integer', 'cim:Command.value');
        }
        if ('cim:Command.DiscreteValue' in object) {
          attributeEntries['filledEntries']['cim:Command.DiscreteValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Command.DiscreteValue'], 'cim:DiscreteValue', 'cim:Command.DiscreteValue');
        } else {
          attributeEntries['emptyEntries']['cim:Command.DiscreteValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Command.DiscreteValue'], 'cim:DiscreteValue', 'cim:Command.DiscreteValue');
        }
        if ('cim:Command.ValueAliasSet' in object) {
          attributeEntries['filledEntries']['cim:Command.ValueAliasSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Command.ValueAliasSet'], 'cim:ValueAliasSet', 'cim:Command.ValueAliasSet');
        } else {
          attributeEntries['emptyEntries']['cim:Command.ValueAliasSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Command.ValueAliasSet'], 'cim:ValueAliasSet', 'cim:Command.ValueAliasSet');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Command.normalValue", "cim:Command.value", "cim:Command.DiscreteValue", "cim:Command.ValueAliasSet"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Control.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Command.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Command: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Command.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Command;
  }(Control);
  _defineProperty(Command, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'normalValue': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'DiscreteValue': [CGMESProfile.shortNames.EQ],
    'ValueAliasSet': [CGMESProfile.shortNames.EQ]
  });

  var Conductance = /*#__PURE__*/function (_BaseClass) {
    _inherits(Conductance, _BaseClass);
    var _super = _createSuper(Conductance);
    function Conductance() {
      _classCallCheck(this, Conductance);
      return _super.apply(this, arguments);
    }
    _createClass(Conductance, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Conductance";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Conductance.value' in object) {
          attributeEntries['filledEntries']['cim:Conductance.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Conductance.value'], 'cim:Float', 'cim:Conductance.value');
        } else {
          attributeEntries['emptyEntries']['cim:Conductance.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Conductance.value'], 'cim:Float', 'cim:Conductance.value');
        }
        if ('cim:Conductance.unit' in object) {
          attributeEntries['filledEntries']['cim:Conductance.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Conductance.unit'], 'cim:UnitSymbol', 'cim:Conductance.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Conductance.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Conductance.unit'], 'cim:UnitSymbol', 'cim:Conductance.unit');
        }
        if ('cim:Conductance.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Conductance.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Conductance.multiplier'], 'cim:UnitMultiplier', 'cim:Conductance.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Conductance.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Conductance.multiplier'], 'cim:UnitMultiplier', 'cim:Conductance.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Conductance.value", "cim:Conductance.unit", "cim:Conductance.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Conductance.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Conductance: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Conductance.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Conductance;
  }(BaseClass);
  _defineProperty(Conductance, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ]
  });

  var EnergyConsumer = /*#__PURE__*/function (_ConductingEquipment) {
    _inherits(EnergyConsumer, _ConductingEquipment);
    var _super = _createSuper(EnergyConsumer);
    function EnergyConsumer() {
      _classCallCheck(this, EnergyConsumer);
      return _super.apply(this, arguments);
    }
    _createClass(EnergyConsumer, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EnergyConsumer";
        var attributeEntries = ConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:EnergyConsumer.LoadResponse' in object) {
          attributeEntries['filledEntries']['cim:EnergyConsumer.LoadResponse'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.LoadResponse'], 'cim:LoadResponseCharacteristic', 'cim:EnergyConsumer.LoadResponse');
        } else {
          attributeEntries['emptyEntries']['cim:EnergyConsumer.LoadResponse'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.LoadResponse'], 'cim:LoadResponseCharacteristic', 'cim:EnergyConsumer.LoadResponse');
        }
        if ('cim:EnergyConsumer.pfixed' in object) {
          attributeEntries['filledEntries']['cim:EnergyConsumer.pfixed'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.pfixed'], 'cim:ActivePower', 'cim:EnergyConsumer.pfixed');
        } else {
          attributeEntries['emptyEntries']['cim:EnergyConsumer.pfixed'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.pfixed'], 'cim:ActivePower', 'cim:EnergyConsumer.pfixed');
        }
        if ('cim:EnergyConsumer.pfixedPct' in object) {
          attributeEntries['filledEntries']['cim:EnergyConsumer.pfixedPct'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.pfixedPct'], 'cim:PerCent', 'cim:EnergyConsumer.pfixedPct');
        } else {
          attributeEntries['emptyEntries']['cim:EnergyConsumer.pfixedPct'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.pfixedPct'], 'cim:PerCent', 'cim:EnergyConsumer.pfixedPct');
        }
        if ('cim:EnergyConsumer.qfixed' in object) {
          attributeEntries['filledEntries']['cim:EnergyConsumer.qfixed'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.qfixed'], 'cim:ReactivePower', 'cim:EnergyConsumer.qfixed');
        } else {
          attributeEntries['emptyEntries']['cim:EnergyConsumer.qfixed'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.qfixed'], 'cim:ReactivePower', 'cim:EnergyConsumer.qfixed');
        }
        if ('cim:EnergyConsumer.qfixedPct' in object) {
          attributeEntries['filledEntries']['cim:EnergyConsumer.qfixedPct'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.qfixedPct'], 'cim:PerCent', 'cim:EnergyConsumer.qfixedPct');
        } else {
          attributeEntries['emptyEntries']['cim:EnergyConsumer.qfixedPct'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.qfixedPct'], 'cim:PerCent', 'cim:EnergyConsumer.qfixedPct');
        }
        if ('cim:EnergyConsumer.p' in object) {
          attributeEntries['filledEntries']['cim:EnergyConsumer.p'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.p'], 'cim:ActivePower', 'cim:EnergyConsumer.p');
        } else {
          attributeEntries['emptyEntries']['cim:EnergyConsumer.p'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.p'], 'cim:ActivePower', 'cim:EnergyConsumer.p');
        }
        if ('cim:EnergyConsumer.q' in object) {
          attributeEntries['filledEntries']['cim:EnergyConsumer.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.q'], 'cim:ReactivePower', 'cim:EnergyConsumer.q');
        } else {
          attributeEntries['emptyEntries']['cim:EnergyConsumer.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.q'], 'cim:ReactivePower', 'cim:EnergyConsumer.q');
        }
        if ('cim:EnergyConsumer.LoadDynamics' in object) {
          attributeEntries['filledEntries']['cim:EnergyConsumer.LoadDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.LoadDynamics'], 'cim:LoadDynamics', 'cim:EnergyConsumer.LoadDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:EnergyConsumer.LoadDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergyConsumer.LoadDynamics'], 'cim:LoadDynamics', 'cim:EnergyConsumer.LoadDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:EnergyConsumer.LoadResponse", "cim:EnergyConsumer.pfixed", "cim:EnergyConsumer.pfixedPct", "cim:EnergyConsumer.qfixed", "cim:EnergyConsumer.qfixedPct", "cim:EnergyConsumer.p", "cim:EnergyConsumer.q", "cim:EnergyConsumer.LoadDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EnergyConsumer.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EnergyConsumer: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EnergyConsumer.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["ConformLoad", "NonConformLoad", "StationSupply"];
        return subClasses;
      }
    }]);
    return EnergyConsumer;
  }(ConductingEquipment);
  _defineProperty(EnergyConsumer, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.DY],
    'LoadResponse': [CGMESProfile.shortNames.EQ],
    'pfixed': [CGMESProfile.shortNames.EQ],
    'pfixedPct': [CGMESProfile.shortNames.EQ],
    'qfixed': [CGMESProfile.shortNames.EQ],
    'qfixedPct': [CGMESProfile.shortNames.EQ],
    'p': [CGMESProfile.shortNames.SSH],
    'q': [CGMESProfile.shortNames.SSH],
    'LoadDynamics': [CGMESProfile.shortNames.DY]
  });

  var ConformLoad = /*#__PURE__*/function (_EnergyConsumer) {
    _inherits(ConformLoad, _EnergyConsumer);
    var _super = _createSuper(ConformLoad);
    function ConformLoad() {
      _classCallCheck(this, ConformLoad);
      return _super.apply(this, arguments);
    }
    _createClass(ConformLoad, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ConformLoad";
        var attributeEntries = EnergyConsumer.attributeHTML(object, cimmenu, classType);
        if ('cim:ConformLoad.LoadGroup' in object) {
          attributeEntries['filledEntries']['cim:ConformLoad.LoadGroup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConformLoad.LoadGroup'], 'cim:ConformLoadGroup', 'cim:ConformLoad.LoadGroup');
        } else {
          attributeEntries['emptyEntries']['cim:ConformLoad.LoadGroup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConformLoad.LoadGroup'], 'cim:ConformLoadGroup', 'cim:ConformLoad.LoadGroup');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ConformLoad.LoadGroup"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EnergyConsumer.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ConformLoad.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ConformLoad: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ConformLoad.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ConformLoad;
  }(EnergyConsumer);
  _defineProperty(ConformLoad, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'LoadGroup': [CGMESProfile.shortNames.EQ]
  });

  var LoadGroup = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(LoadGroup, _IdentifiedObject);
    var _super = _createSuper(LoadGroup);
    function LoadGroup() {
      _classCallCheck(this, LoadGroup);
      return _super.apply(this, arguments);
    }
    _createClass(LoadGroup, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LoadGroup";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:LoadGroup.SubLoadArea' in object) {
          attributeEntries['filledEntries']['cim:LoadGroup.SubLoadArea'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGroup.SubLoadArea'], 'cim:SubLoadArea', 'cim:LoadGroup.SubLoadArea');
        } else {
          attributeEntries['emptyEntries']['cim:LoadGroup.SubLoadArea'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGroup.SubLoadArea'], 'cim:SubLoadArea', 'cim:LoadGroup.SubLoadArea');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:LoadGroup.SubLoadArea"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LoadGroup.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LoadGroup: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LoadGroup.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["ConformLoadGroup", "NonConformLoadGroup"];
        return subClasses;
      }
    }]);
    return LoadGroup;
  }(IdentifiedObject);
  _defineProperty(LoadGroup, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'SubLoadArea': [CGMESProfile.shortNames.EQ]
  });

  var ConformLoadGroup = /*#__PURE__*/function (_LoadGroup) {
    _inherits(ConformLoadGroup, _LoadGroup);
    var _super = _createSuper(ConformLoadGroup);
    function ConformLoadGroup() {
      _classCallCheck(this, ConformLoadGroup);
      return _super.apply(this, arguments);
    }
    _createClass(ConformLoadGroup, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ConformLoadGroup";
        var attributeEntries = LoadGroup.attributeHTML(object, cimmenu, classType);
        if ('cim:ConformLoadGroup.ConformLoadSchedules' in object) {
          attributeEntries['filledEntries']['cim:ConformLoadGroup.ConformLoadSchedules'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConformLoadGroup.ConformLoadSchedules'], 'cim:ConformLoadSchedule', 'cim:ConformLoadGroup.ConformLoadSchedules');
        } else {
          attributeEntries['emptyEntries']['cim:ConformLoadGroup.ConformLoadSchedules'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConformLoadGroup.ConformLoadSchedules'], 'cim:ConformLoadSchedule', 'cim:ConformLoadGroup.ConformLoadSchedules');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ConformLoadGroup.ConformLoadSchedules"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (LoadGroup.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ConformLoadGroup.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ConformLoadGroup: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ConformLoadGroup.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ConformLoadGroup;
  }(LoadGroup);
  _defineProperty(ConformLoadGroup, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'ConformLoadSchedules': [CGMESProfile.shortNames.EQ]
  });

  var RegularIntervalSchedule = /*#__PURE__*/function (_BasicIntervalSchedul) {
    _inherits(RegularIntervalSchedule, _BasicIntervalSchedul);
    var _super = _createSuper(RegularIntervalSchedule);
    function RegularIntervalSchedule() {
      _classCallCheck(this, RegularIntervalSchedule);
      return _super.apply(this, arguments);
    }
    _createClass(RegularIntervalSchedule, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RegularIntervalSchedule";
        var attributeEntries = BasicIntervalSchedule.attributeHTML(object, cimmenu, classType);
        if ('cim:RegularIntervalSchedule.timeStep' in object) {
          attributeEntries['filledEntries']['cim:RegularIntervalSchedule.timeStep'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegularIntervalSchedule.timeStep'], 'cim:Seconds', 'cim:RegularIntervalSchedule.timeStep');
        } else {
          attributeEntries['emptyEntries']['cim:RegularIntervalSchedule.timeStep'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegularIntervalSchedule.timeStep'], 'cim:Seconds', 'cim:RegularIntervalSchedule.timeStep');
        }
        if ('cim:RegularIntervalSchedule.endTime' in object) {
          attributeEntries['filledEntries']['cim:RegularIntervalSchedule.endTime'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegularIntervalSchedule.endTime'], 'cim:DateTime', 'cim:RegularIntervalSchedule.endTime');
        } else {
          attributeEntries['emptyEntries']['cim:RegularIntervalSchedule.endTime'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegularIntervalSchedule.endTime'], 'cim:DateTime', 'cim:RegularIntervalSchedule.endTime');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RegularIntervalSchedule.timeStep", "cim:RegularIntervalSchedule.endTime"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BasicIntervalSchedule.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RegularIntervalSchedule.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RegularIntervalSchedule: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RegularIntervalSchedule.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["SeasonDayTypeSchedule", "ConformLoadSchedule", "NonConformLoadSchedule", "RegulationSchedule", "SwitchSchedule", "TapSchedule"];
        return subClasses;
      }
    }]);
    return RegularIntervalSchedule;
  }(BasicIntervalSchedule);
  _defineProperty(RegularIntervalSchedule, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'timeStep': [CGMESProfile.shortNames.EQ],
    'endTime': [CGMESProfile.shortNames.EQ]
  });

  var SeasonDayTypeSchedule = /*#__PURE__*/function (_RegularIntervalSched) {
    _inherits(SeasonDayTypeSchedule, _RegularIntervalSched);
    var _super = _createSuper(SeasonDayTypeSchedule);
    function SeasonDayTypeSchedule() {
      _classCallCheck(this, SeasonDayTypeSchedule);
      return _super.apply(this, arguments);
    }
    _createClass(SeasonDayTypeSchedule, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SeasonDayTypeSchedule";
        var attributeEntries = RegularIntervalSchedule.attributeHTML(object, cimmenu, classType);
        if ('cim:SeasonDayTypeSchedule.DayType' in object) {
          attributeEntries['filledEntries']['cim:SeasonDayTypeSchedule.DayType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeasonDayTypeSchedule.DayType'], 'cim:DayType', 'cim:SeasonDayTypeSchedule.DayType');
        } else {
          attributeEntries['emptyEntries']['cim:SeasonDayTypeSchedule.DayType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeasonDayTypeSchedule.DayType'], 'cim:DayType', 'cim:SeasonDayTypeSchedule.DayType');
        }
        if ('cim:SeasonDayTypeSchedule.Season' in object) {
          attributeEntries['filledEntries']['cim:SeasonDayTypeSchedule.Season'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeasonDayTypeSchedule.Season'], 'cim:Season', 'cim:SeasonDayTypeSchedule.Season');
        } else {
          attributeEntries['emptyEntries']['cim:SeasonDayTypeSchedule.Season'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeasonDayTypeSchedule.Season'], 'cim:Season', 'cim:SeasonDayTypeSchedule.Season');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SeasonDayTypeSchedule.DayType", "cim:SeasonDayTypeSchedule.Season"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (RegularIntervalSchedule.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SeasonDayTypeSchedule.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SeasonDayTypeSchedule: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SeasonDayTypeSchedule.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["ConformLoadSchedule", "NonConformLoadSchedule", "RegulationSchedule", "SwitchSchedule", "TapSchedule"];
        return subClasses;
      }
    }]);
    return SeasonDayTypeSchedule;
  }(RegularIntervalSchedule);
  _defineProperty(SeasonDayTypeSchedule, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'DayType': [CGMESProfile.shortNames.EQ],
    'Season': [CGMESProfile.shortNames.EQ]
  });

  var ConformLoadSchedule = /*#__PURE__*/function (_SeasonDayTypeSchedul) {
    _inherits(ConformLoadSchedule, _SeasonDayTypeSchedul);
    var _super = _createSuper(ConformLoadSchedule);
    function ConformLoadSchedule() {
      _classCallCheck(this, ConformLoadSchedule);
      return _super.apply(this, arguments);
    }
    _createClass(ConformLoadSchedule, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ConformLoadSchedule";
        var attributeEntries = SeasonDayTypeSchedule.attributeHTML(object, cimmenu, classType);
        if ('cim:ConformLoadSchedule.ConformLoadGroup' in object) {
          attributeEntries['filledEntries']['cim:ConformLoadSchedule.ConformLoadGroup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConformLoadSchedule.ConformLoadGroup'], 'cim:ConformLoadGroup', 'cim:ConformLoadSchedule.ConformLoadGroup');
        } else {
          attributeEntries['emptyEntries']['cim:ConformLoadSchedule.ConformLoadGroup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConformLoadSchedule.ConformLoadGroup'], 'cim:ConformLoadGroup', 'cim:ConformLoadSchedule.ConformLoadGroup');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ConformLoadSchedule.ConformLoadGroup"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (SeasonDayTypeSchedule.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ConformLoadSchedule.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ConformLoadSchedule: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ConformLoadSchedule.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ConformLoadSchedule;
  }(SeasonDayTypeSchedule);
  _defineProperty(ConformLoadSchedule, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'ConformLoadGroup': [CGMESProfile.shortNames.EQ]
  });

  var ConnectivityNode = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(ConnectivityNode, _IdentifiedObject);
    var _super = _createSuper(ConnectivityNode);
    function ConnectivityNode() {
      _classCallCheck(this, ConnectivityNode);
      return _super.apply(this, arguments);
    }
    _createClass(ConnectivityNode, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ConnectivityNode";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:ConnectivityNode.ConnectivityNodeContainer' in object) {
          attributeEntries['filledEntries']['cim:ConnectivityNode.ConnectivityNodeContainer'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.ConnectivityNodeContainer'], 'cim:ConnectivityNodeContainer', 'cim:ConnectivityNode.ConnectivityNodeContainer');
        } else {
          attributeEntries['emptyEntries']['cim:ConnectivityNode.ConnectivityNodeContainer'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.ConnectivityNodeContainer'], 'cim:ConnectivityNodeContainer', 'cim:ConnectivityNode.ConnectivityNodeContainer');
        }
        if ('cim:ConnectivityNode.TopologicalNode' in object) {
          attributeEntries['filledEntries']['cim:ConnectivityNode.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.TopologicalNode'], 'cim:TopologicalNode', 'cim:ConnectivityNode.TopologicalNode');
        } else {
          attributeEntries['emptyEntries']['cim:ConnectivityNode.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.TopologicalNode'], 'cim:TopologicalNode', 'cim:ConnectivityNode.TopologicalNode');
        }
        if ('cim:ConnectivityNode.boundaryPoint' in object) {
          attributeEntries['filledEntries']['cim:ConnectivityNode.boundaryPoint'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.boundaryPoint'], 'cim:Boolean', 'cim:ConnectivityNode.boundaryPoint');
        } else {
          attributeEntries['emptyEntries']['cim:ConnectivityNode.boundaryPoint'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.boundaryPoint'], 'cim:Boolean', 'cim:ConnectivityNode.boundaryPoint');
        }
        if ('cim:ConnectivityNode.fromEndIsoCode' in object) {
          attributeEntries['filledEntries']['cim:ConnectivityNode.fromEndIsoCode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.fromEndIsoCode'], 'cim:String', 'cim:ConnectivityNode.fromEndIsoCode');
        } else {
          attributeEntries['emptyEntries']['cim:ConnectivityNode.fromEndIsoCode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.fromEndIsoCode'], 'cim:String', 'cim:ConnectivityNode.fromEndIsoCode');
        }
        if ('cim:ConnectivityNode.fromEndName' in object) {
          attributeEntries['filledEntries']['cim:ConnectivityNode.fromEndName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.fromEndName'], 'cim:String', 'cim:ConnectivityNode.fromEndName');
        } else {
          attributeEntries['emptyEntries']['cim:ConnectivityNode.fromEndName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.fromEndName'], 'cim:String', 'cim:ConnectivityNode.fromEndName');
        }
        if ('cim:ConnectivityNode.fromEndNameTso' in object) {
          attributeEntries['filledEntries']['cim:ConnectivityNode.fromEndNameTso'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.fromEndNameTso'], 'cim:String', 'cim:ConnectivityNode.fromEndNameTso');
        } else {
          attributeEntries['emptyEntries']['cim:ConnectivityNode.fromEndNameTso'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.fromEndNameTso'], 'cim:String', 'cim:ConnectivityNode.fromEndNameTso');
        }
        if ('cim:ConnectivityNode.toEndIsoCode' in object) {
          attributeEntries['filledEntries']['cim:ConnectivityNode.toEndIsoCode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.toEndIsoCode'], 'cim:String', 'cim:ConnectivityNode.toEndIsoCode');
        } else {
          attributeEntries['emptyEntries']['cim:ConnectivityNode.toEndIsoCode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.toEndIsoCode'], 'cim:String', 'cim:ConnectivityNode.toEndIsoCode');
        }
        if ('cim:ConnectivityNode.toEndName' in object) {
          attributeEntries['filledEntries']['cim:ConnectivityNode.toEndName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.toEndName'], 'cim:String', 'cim:ConnectivityNode.toEndName');
        } else {
          attributeEntries['emptyEntries']['cim:ConnectivityNode.toEndName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.toEndName'], 'cim:String', 'cim:ConnectivityNode.toEndName');
        }
        if ('cim:ConnectivityNode.toEndNameTso' in object) {
          attributeEntries['filledEntries']['cim:ConnectivityNode.toEndNameTso'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.toEndNameTso'], 'cim:String', 'cim:ConnectivityNode.toEndNameTso');
        } else {
          attributeEntries['emptyEntries']['cim:ConnectivityNode.toEndNameTso'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ConnectivityNode.toEndNameTso'], 'cim:String', 'cim:ConnectivityNode.toEndNameTso');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ConnectivityNode.ConnectivityNodeContainer", "cim:ConnectivityNode.TopologicalNode", "cim:ConnectivityNode.boundaryPoint", "cim:ConnectivityNode.fromEndIsoCode", "cim:ConnectivityNode.fromEndName", "cim:ConnectivityNode.fromEndNameTso", "cim:ConnectivityNode.toEndIsoCode", "cim:ConnectivityNode.toEndName", "cim:ConnectivityNode.toEndNameTso"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ConnectivityNode.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ConnectivityNode: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ConnectivityNode.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ConnectivityNode;
  }(IdentifiedObject);
  _defineProperty(ConnectivityNode, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD, CGMESProfile.shortNames.EQ_BD],
    'ConnectivityNodeContainer': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD],
    'TopologicalNode': [CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD],
    'boundaryPoint': [CGMESProfile.shortNames.EQ_BD],
    'fromEndIsoCode': [CGMESProfile.shortNames.EQ_BD],
    'fromEndName': [CGMESProfile.shortNames.EQ_BD],
    'fromEndNameTso': [CGMESProfile.shortNames.EQ_BD],
    'toEndIsoCode': [CGMESProfile.shortNames.EQ_BD],
    'toEndName': [CGMESProfile.shortNames.EQ_BD],
    'toEndNameTso': [CGMESProfile.shortNames.EQ_BD]
  });

  var ControlArea = /*#__PURE__*/function (_PowerSystemResource) {
    _inherits(ControlArea, _PowerSystemResource);
    var _super = _createSuper(ControlArea);
    function ControlArea() {
      _classCallCheck(this, ControlArea);
      return _super.apply(this, arguments);
    }
    _createClass(ControlArea, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ControlArea";
        var attributeEntries = PowerSystemResource.attributeHTML(object, cimmenu, classType);
        if ('cim:ControlArea.type' in object) {
          attributeEntries['filledEntries']['cim:ControlArea.type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlArea.type'], 'cim:ControlAreaTypeKind', 'cim:ControlArea.type');
        } else {
          attributeEntries['emptyEntries']['cim:ControlArea.type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlArea.type'], 'cim:ControlAreaTypeKind', 'cim:ControlArea.type');
        }
        if ('cim:ControlArea.ControlAreaGeneratingUnit' in object) {
          attributeEntries['filledEntries']['cim:ControlArea.ControlAreaGeneratingUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlArea.ControlAreaGeneratingUnit'], 'cim:ControlAreaGeneratingUnit', 'cim:ControlArea.ControlAreaGeneratingUnit');
        } else {
          attributeEntries['emptyEntries']['cim:ControlArea.ControlAreaGeneratingUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlArea.ControlAreaGeneratingUnit'], 'cim:ControlAreaGeneratingUnit', 'cim:ControlArea.ControlAreaGeneratingUnit');
        }
        if ('cim:ControlArea.EnergyArea' in object) {
          attributeEntries['filledEntries']['cim:ControlArea.EnergyArea'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlArea.EnergyArea'], 'cim:EnergyArea', 'cim:ControlArea.EnergyArea');
        } else {
          attributeEntries['emptyEntries']['cim:ControlArea.EnergyArea'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlArea.EnergyArea'], 'cim:EnergyArea', 'cim:ControlArea.EnergyArea');
        }
        if ('cim:ControlArea.netInterchange' in object) {
          attributeEntries['filledEntries']['cim:ControlArea.netInterchange'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlArea.netInterchange'], 'cim:ActivePower', 'cim:ControlArea.netInterchange');
        } else {
          attributeEntries['emptyEntries']['cim:ControlArea.netInterchange'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlArea.netInterchange'], 'cim:ActivePower', 'cim:ControlArea.netInterchange');
        }
        if ('cim:ControlArea.pTolerance' in object) {
          attributeEntries['filledEntries']['cim:ControlArea.pTolerance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlArea.pTolerance'], 'cim:ActivePower', 'cim:ControlArea.pTolerance');
        } else {
          attributeEntries['emptyEntries']['cim:ControlArea.pTolerance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlArea.pTolerance'], 'cim:ActivePower', 'cim:ControlArea.pTolerance');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ControlArea.type", "cim:ControlArea.ControlAreaGeneratingUnit", "cim:ControlArea.EnergyArea", "cim:ControlArea.netInterchange", "cim:ControlArea.pTolerance"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemResource.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ControlArea.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ControlArea: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ControlArea.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ControlArea;
  }(PowerSystemResource);
  _defineProperty(ControlArea, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'type': [CGMESProfile.shortNames.EQ],
    'ControlAreaGeneratingUnit': [CGMESProfile.shortNames.EQ],
    'EnergyArea': [CGMESProfile.shortNames.EQ],
    'netInterchange': [CGMESProfile.shortNames.SSH],
    'pTolerance': [CGMESProfile.shortNames.SSH]
  });

  var ControlAreaGeneratingUnit = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(ControlAreaGeneratingUnit, _IdentifiedObject);
    var _super = _createSuper(ControlAreaGeneratingUnit);
    function ControlAreaGeneratingUnit() {
      _classCallCheck(this, ControlAreaGeneratingUnit);
      return _super.apply(this, arguments);
    }
    _createClass(ControlAreaGeneratingUnit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ControlAreaGeneratingUnit";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:ControlAreaGeneratingUnit.GeneratingUnit' in object) {
          attributeEntries['filledEntries']['cim:ControlAreaGeneratingUnit.GeneratingUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlAreaGeneratingUnit.GeneratingUnit'], 'cim:GeneratingUnit', 'cim:ControlAreaGeneratingUnit.GeneratingUnit');
        } else {
          attributeEntries['emptyEntries']['cim:ControlAreaGeneratingUnit.GeneratingUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlAreaGeneratingUnit.GeneratingUnit'], 'cim:GeneratingUnit', 'cim:ControlAreaGeneratingUnit.GeneratingUnit');
        }
        if ('cim:ControlAreaGeneratingUnit.ControlArea' in object) {
          attributeEntries['filledEntries']['cim:ControlAreaGeneratingUnit.ControlArea'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlAreaGeneratingUnit.ControlArea'], 'cim:ControlArea', 'cim:ControlAreaGeneratingUnit.ControlArea');
        } else {
          attributeEntries['emptyEntries']['cim:ControlAreaGeneratingUnit.ControlArea'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ControlAreaGeneratingUnit.ControlArea'], 'cim:ControlArea', 'cim:ControlAreaGeneratingUnit.ControlArea');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ControlAreaGeneratingUnit.GeneratingUnit", "cim:ControlAreaGeneratingUnit.ControlArea"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ControlAreaGeneratingUnit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ControlAreaGeneratingUnit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ControlAreaGeneratingUnit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ControlAreaGeneratingUnit;
  }(IdentifiedObject);
  _defineProperty(ControlAreaGeneratingUnit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'GeneratingUnit': [CGMESProfile.shortNames.EQ],
    'ControlArea': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$K = [{
    "value": "--"
  }, {
    "value": "ControlAreaTypeKind.AGC",
    "label": "AGC"
  }, {
    "value": "ControlAreaTypeKind.Forecast",
    "label": "Forecast"
  }, {
    "value": "ControlAreaTypeKind.Interchange",
    "label": "Interchange"
  }];
  var ControlAreaTypeKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(ControlAreaTypeKind, _BaseClass);
    var _super = _createSuper(ControlAreaTypeKind);
    function ControlAreaTypeKind() {
      _classCallCheck(this, ControlAreaTypeKind);
      return _super.apply(this, arguments);
    }
    _createClass(ControlAreaTypeKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ControlAreaTypeKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ControlAreaTypeKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ControlAreaTypeKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ControlAreaTypeKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$K;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ControlAreaTypeKind;
  }(BaseClass);
  _defineProperty(ControlAreaTypeKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var CoordinateSystem = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(CoordinateSystem, _IdentifiedObject);
    var _super = _createSuper(CoordinateSystem);
    function CoordinateSystem() {
      _classCallCheck(this, CoordinateSystem);
      return _super.apply(this, arguments);
    }
    _createClass(CoordinateSystem, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "CoordinateSystem";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:CoordinateSystem.crsUrn' in object) {
          attributeEntries['filledEntries']['cim:CoordinateSystem.crsUrn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CoordinateSystem.crsUrn'], 'cim:String', 'cim:CoordinateSystem.crsUrn');
        } else {
          attributeEntries['emptyEntries']['cim:CoordinateSystem.crsUrn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CoordinateSystem.crsUrn'], 'cim:String', 'cim:CoordinateSystem.crsUrn');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:CoordinateSystem.crsUrn"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!CoordinateSystem.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class CoordinateSystem: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = CoordinateSystem.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return CoordinateSystem;
  }(IdentifiedObject);
  _defineProperty(CoordinateSystem, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.GL],
    'crsUrn': [CGMESProfile.shortNames.GL]
  });

  var CsConverter = /*#__PURE__*/function (_ACDCConverter) {
    _inherits(CsConverter, _ACDCConverter);
    var _super = _createSuper(CsConverter);
    function CsConverter() {
      _classCallCheck(this, CsConverter);
      return _super.apply(this, arguments);
    }
    _createClass(CsConverter, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "CsConverter";
        var attributeEntries = ACDCConverter.attributeHTML(object, cimmenu, classType);
        if ('cim:CsConverter.maxAlpha' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.maxAlpha'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.maxAlpha'], 'cim:AngleDegrees', 'cim:CsConverter.maxAlpha');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.maxAlpha'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.maxAlpha'], 'cim:AngleDegrees', 'cim:CsConverter.maxAlpha');
        }
        if ('cim:CsConverter.maxGamma' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.maxGamma'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.maxGamma'], 'cim:AngleDegrees', 'cim:CsConverter.maxGamma');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.maxGamma'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.maxGamma'], 'cim:AngleDegrees', 'cim:CsConverter.maxGamma');
        }
        if ('cim:CsConverter.maxIdc' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.maxIdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.maxIdc'], 'cim:CurrentFlow', 'cim:CsConverter.maxIdc');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.maxIdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.maxIdc'], 'cim:CurrentFlow', 'cim:CsConverter.maxIdc');
        }
        if ('cim:CsConverter.minAlpha' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.minAlpha'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.minAlpha'], 'cim:AngleDegrees', 'cim:CsConverter.minAlpha');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.minAlpha'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.minAlpha'], 'cim:AngleDegrees', 'cim:CsConverter.minAlpha');
        }
        if ('cim:CsConverter.minGamma' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.minGamma'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.minGamma'], 'cim:AngleDegrees', 'cim:CsConverter.minGamma');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.minGamma'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.minGamma'], 'cim:AngleDegrees', 'cim:CsConverter.minGamma');
        }
        if ('cim:CsConverter.minIdc' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.minIdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.minIdc'], 'cim:CurrentFlow', 'cim:CsConverter.minIdc');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.minIdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.minIdc'], 'cim:CurrentFlow', 'cim:CsConverter.minIdc');
        }
        if ('cim:CsConverter.ratedIdc' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.ratedIdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.ratedIdc'], 'cim:CurrentFlow', 'cim:CsConverter.ratedIdc');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.ratedIdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.ratedIdc'], 'cim:CurrentFlow', 'cim:CsConverter.ratedIdc');
        }
        if ('cim:CsConverter.operatingMode' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.operatingMode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.operatingMode'], 'cim:CsOperatingModeKind', 'cim:CsConverter.operatingMode');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.operatingMode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.operatingMode'], 'cim:CsOperatingModeKind', 'cim:CsConverter.operatingMode');
        }
        if ('cim:CsConverter.pPccControl' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.pPccControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.pPccControl'], 'cim:CsPpccControlKind', 'cim:CsConverter.pPccControl');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.pPccControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.pPccControl'], 'cim:CsPpccControlKind', 'cim:CsConverter.pPccControl');
        }
        if ('cim:CsConverter.targetAlpha' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.targetAlpha'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.targetAlpha'], 'cim:AngleDegrees', 'cim:CsConverter.targetAlpha');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.targetAlpha'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.targetAlpha'], 'cim:AngleDegrees', 'cim:CsConverter.targetAlpha');
        }
        if ('cim:CsConverter.targetGamma' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.targetGamma'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.targetGamma'], 'cim:AngleDegrees', 'cim:CsConverter.targetGamma');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.targetGamma'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.targetGamma'], 'cim:AngleDegrees', 'cim:CsConverter.targetGamma');
        }
        if ('cim:CsConverter.targetIdc' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.targetIdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.targetIdc'], 'cim:CurrentFlow', 'cim:CsConverter.targetIdc');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.targetIdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.targetIdc'], 'cim:CurrentFlow', 'cim:CsConverter.targetIdc');
        }
        if ('cim:CsConverter.alpha' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.alpha'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.alpha'], 'cim:AngleDegrees', 'cim:CsConverter.alpha');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.alpha'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.alpha'], 'cim:AngleDegrees', 'cim:CsConverter.alpha');
        }
        if ('cim:CsConverter.gamma' in object) {
          attributeEntries['filledEntries']['cim:CsConverter.gamma'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.gamma'], 'cim:AngleDegrees', 'cim:CsConverter.gamma');
        } else {
          attributeEntries['emptyEntries']['cim:CsConverter.gamma'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CsConverter.gamma'], 'cim:AngleDegrees', 'cim:CsConverter.gamma');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:CsConverter.maxAlpha", "cim:CsConverter.maxGamma", "cim:CsConverter.maxIdc", "cim:CsConverter.minAlpha", "cim:CsConverter.minGamma", "cim:CsConverter.minIdc", "cim:CsConverter.ratedIdc", "cim:CsConverter.operatingMode", "cim:CsConverter.pPccControl", "cim:CsConverter.targetAlpha", "cim:CsConverter.targetGamma", "cim:CsConverter.targetIdc", "cim:CsConverter.alpha", "cim:CsConverter.gamma"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ACDCConverter.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!CsConverter.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class CsConverter: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = CsConverter.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return CsConverter;
  }(ACDCConverter);
  _defineProperty(CsConverter, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV],
    'maxAlpha': [CGMESProfile.shortNames.EQ],
    'maxGamma': [CGMESProfile.shortNames.EQ],
    'maxIdc': [CGMESProfile.shortNames.EQ],
    'minAlpha': [CGMESProfile.shortNames.EQ],
    'minGamma': [CGMESProfile.shortNames.EQ],
    'minIdc': [CGMESProfile.shortNames.EQ],
    'ratedIdc': [CGMESProfile.shortNames.EQ],
    'operatingMode': [CGMESProfile.shortNames.SSH],
    'pPccControl': [CGMESProfile.shortNames.SSH],
    'targetAlpha': [CGMESProfile.shortNames.SSH],
    'targetGamma': [CGMESProfile.shortNames.SSH],
    'targetIdc': [CGMESProfile.shortNames.SSH],
    'alpha': [CGMESProfile.shortNames.SV],
    'gamma': [CGMESProfile.shortNames.SV]
  });

  var possibleValues$J = [{
    "value": "--"
  }, {
    "value": "CsOperatingModeKind.inverter",
    "label": "inverter"
  }, {
    "value": "CsOperatingModeKind.rectifier",
    "label": "rectifier"
  }];
  var CsOperatingModeKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(CsOperatingModeKind, _BaseClass);
    var _super = _createSuper(CsOperatingModeKind);
    function CsOperatingModeKind() {
      _classCallCheck(this, CsOperatingModeKind);
      return _super.apply(this, arguments);
    }
    _createClass(CsOperatingModeKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "CsOperatingModeKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!CsOperatingModeKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class CsOperatingModeKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = CsOperatingModeKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$J;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return CsOperatingModeKind;
  }(BaseClass);
  _defineProperty(CsOperatingModeKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SSH]
  });

  var possibleValues$I = [{
    "value": "--"
  }, {
    "value": "CsPpccControlKind.activePower",
    "label": "activePower"
  }, {
    "value": "CsPpccControlKind.dcVoltage",
    "label": "dcVoltage"
  }, {
    "value": "CsPpccControlKind.dcCurrent",
    "label": "dcCurrent"
  }];
  var CsPpccControlKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(CsPpccControlKind, _BaseClass);
    var _super = _createSuper(CsPpccControlKind);
    function CsPpccControlKind() {
      _classCallCheck(this, CsPpccControlKind);
      return _super.apply(this, arguments);
    }
    _createClass(CsPpccControlKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "CsPpccControlKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!CsPpccControlKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class CsPpccControlKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = CsPpccControlKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$I;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return CsPpccControlKind;
  }(BaseClass);
  _defineProperty(CsPpccControlKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SSH]
  });

  var possibleValues$H = [{
    "value": "--"
  }, {
    "value": "Currency.USD",
    "label": "USD"
  }, {
    "value": "Currency.EUR",
    "label": "EUR"
  }, {
    "value": "Currency.AUD",
    "label": "AUD"
  }, {
    "value": "Currency.CAD",
    "label": "CAD"
  }, {
    "value": "Currency.CHF",
    "label": "CHF"
  }, {
    "value": "Currency.CNY",
    "label": "CNY"
  }, {
    "value": "Currency.DKK",
    "label": "DKK"
  }, {
    "value": "Currency.GBP",
    "label": "GBP"
  }, {
    "value": "Currency.JPY",
    "label": "JPY"
  }, {
    "value": "Currency.NOK",
    "label": "NOK"
  }, {
    "value": "Currency.RUR",
    "label": "RUR"
  }, {
    "value": "Currency.SEK",
    "label": "SEK"
  }, {
    "value": "Currency.INR",
    "label": "INR"
  }, {
    "value": "Currency.other",
    "label": "other"
  }];
  var Currency = /*#__PURE__*/function (_BaseClass) {
    _inherits(Currency, _BaseClass);
    var _super = _createSuper(Currency);
    function Currency() {
      _classCallCheck(this, Currency);
      return _super.apply(this, arguments);
    }
    _createClass(Currency, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Currency";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Currency.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Currency: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Currency.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$H;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Currency;
  }(BaseClass);
  _defineProperty(Currency, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var CurrentFlow = /*#__PURE__*/function (_BaseClass) {
    _inherits(CurrentFlow, _BaseClass);
    var _super = _createSuper(CurrentFlow);
    function CurrentFlow() {
      _classCallCheck(this, CurrentFlow);
      return _super.apply(this, arguments);
    }
    _createClass(CurrentFlow, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "CurrentFlow";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:CurrentFlow.value' in object) {
          attributeEntries['filledEntries']['cim:CurrentFlow.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurrentFlow.value'], 'cim:Float', 'cim:CurrentFlow.value');
        } else {
          attributeEntries['emptyEntries']['cim:CurrentFlow.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurrentFlow.value'], 'cim:Float', 'cim:CurrentFlow.value');
        }
        if ('cim:CurrentFlow.unit' in object) {
          attributeEntries['filledEntries']['cim:CurrentFlow.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurrentFlow.unit'], 'cim:UnitSymbol', 'cim:CurrentFlow.unit');
        } else {
          attributeEntries['emptyEntries']['cim:CurrentFlow.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurrentFlow.unit'], 'cim:UnitSymbol', 'cim:CurrentFlow.unit');
        }
        if ('cim:CurrentFlow.multiplier' in object) {
          attributeEntries['filledEntries']['cim:CurrentFlow.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurrentFlow.multiplier'], 'cim:UnitMultiplier', 'cim:CurrentFlow.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:CurrentFlow.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurrentFlow.multiplier'], 'cim:UnitMultiplier', 'cim:CurrentFlow.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:CurrentFlow.value", "cim:CurrentFlow.unit", "cim:CurrentFlow.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!CurrentFlow.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class CurrentFlow: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = CurrentFlow.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return CurrentFlow;
  }(BaseClass);
  _defineProperty(CurrentFlow, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY],
    'value': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY],
    'unit': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY],
    'multiplier': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY]
  });

  var CurrentLimit = /*#__PURE__*/function (_OperationalLimit) {
    _inherits(CurrentLimit, _OperationalLimit);
    var _super = _createSuper(CurrentLimit);
    function CurrentLimit() {
      _classCallCheck(this, CurrentLimit);
      return _super.apply(this, arguments);
    }
    _createClass(CurrentLimit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "CurrentLimit";
        var attributeEntries = OperationalLimit.attributeHTML(object, cimmenu, classType);
        if ('cim:CurrentLimit.value' in object) {
          attributeEntries['filledEntries']['cim:CurrentLimit.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurrentLimit.value'], 'cim:CurrentFlow', 'cim:CurrentLimit.value');
        } else {
          attributeEntries['emptyEntries']['cim:CurrentLimit.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurrentLimit.value'], 'cim:CurrentFlow', 'cim:CurrentLimit.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:CurrentLimit.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (OperationalLimit.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!CurrentLimit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class CurrentLimit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = CurrentLimit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return CurrentLimit;
  }(OperationalLimit);
  _defineProperty(CurrentLimit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var Curve = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(Curve, _IdentifiedObject);
    var _super = _createSuper(Curve);
    function Curve() {
      _classCallCheck(this, Curve);
      return _super.apply(this, arguments);
    }
    _createClass(Curve, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Curve";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:Curve.curveStyle' in object) {
          attributeEntries['filledEntries']['cim:Curve.curveStyle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Curve.curveStyle'], 'cim:CurveStyle', 'cim:Curve.curveStyle');
        } else {
          attributeEntries['emptyEntries']['cim:Curve.curveStyle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Curve.curveStyle'], 'cim:CurveStyle', 'cim:Curve.curveStyle');
        }
        if ('cim:Curve.xUnit' in object) {
          attributeEntries['filledEntries']['cim:Curve.xUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Curve.xUnit'], 'cim:UnitSymbol', 'cim:Curve.xUnit');
        } else {
          attributeEntries['emptyEntries']['cim:Curve.xUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Curve.xUnit'], 'cim:UnitSymbol', 'cim:Curve.xUnit');
        }
        if ('cim:Curve.y1Unit' in object) {
          attributeEntries['filledEntries']['cim:Curve.y1Unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Curve.y1Unit'], 'cim:UnitSymbol', 'cim:Curve.y1Unit');
        } else {
          attributeEntries['emptyEntries']['cim:Curve.y1Unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Curve.y1Unit'], 'cim:UnitSymbol', 'cim:Curve.y1Unit');
        }
        if ('cim:Curve.y2Unit' in object) {
          attributeEntries['filledEntries']['cim:Curve.y2Unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Curve.y2Unit'], 'cim:UnitSymbol', 'cim:Curve.y2Unit');
        } else {
          attributeEntries['emptyEntries']['cim:Curve.y2Unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Curve.y2Unit'], 'cim:UnitSymbol', 'cim:Curve.y2Unit');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Curve.curveStyle", "cim:Curve.xUnit", "cim:Curve.y1Unit", "cim:Curve.y2Unit"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Curve.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Curve: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Curve.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["VsCapabilityCurve", "ReactiveCapabilityCurve", "GrossToNetActivePowerCurve"];
        return subClasses;
      }
    }]);
    return Curve;
  }(IdentifiedObject);
  _defineProperty(Curve, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'curveStyle': [CGMESProfile.shortNames.EQ],
    'xUnit': [CGMESProfile.shortNames.EQ],
    'y1Unit': [CGMESProfile.shortNames.EQ],
    'y2Unit': [CGMESProfile.shortNames.EQ]
  });

  var CurveData = /*#__PURE__*/function (_BaseClass) {
    _inherits(CurveData, _BaseClass);
    var _super = _createSuper(CurveData);
    function CurveData() {
      _classCallCheck(this, CurveData);
      return _super.apply(this, arguments);
    }
    _createClass(CurveData, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "CurveData";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:CurveData.Curve' in object) {
          attributeEntries['filledEntries']['cim:CurveData.Curve'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurveData.Curve'], 'cim:Curve', 'cim:CurveData.Curve');
        } else {
          attributeEntries['emptyEntries']['cim:CurveData.Curve'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurveData.Curve'], 'cim:Curve', 'cim:CurveData.Curve');
        }
        if ('cim:CurveData.xvalue' in object) {
          attributeEntries['filledEntries']['cim:CurveData.xvalue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurveData.xvalue'], 'cim:Simple_Float', 'cim:CurveData.xvalue');
        } else {
          attributeEntries['emptyEntries']['cim:CurveData.xvalue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurveData.xvalue'], 'cim:Simple_Float', 'cim:CurveData.xvalue');
        }
        if ('cim:CurveData.y1value' in object) {
          attributeEntries['filledEntries']['cim:CurveData.y1value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurveData.y1value'], 'cim:Simple_Float', 'cim:CurveData.y1value');
        } else {
          attributeEntries['emptyEntries']['cim:CurveData.y1value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurveData.y1value'], 'cim:Simple_Float', 'cim:CurveData.y1value');
        }
        if ('cim:CurveData.y2value' in object) {
          attributeEntries['filledEntries']['cim:CurveData.y2value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurveData.y2value'], 'cim:Simple_Float', 'cim:CurveData.y2value');
        } else {
          attributeEntries['emptyEntries']['cim:CurveData.y2value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['CurveData.y2value'], 'cim:Simple_Float', 'cim:CurveData.y2value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:CurveData.Curve", "cim:CurveData.xvalue", "cim:CurveData.y1value", "cim:CurveData.y2value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!CurveData.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class CurveData: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = CurveData.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return CurveData;
  }(BaseClass);
  _defineProperty(CurveData, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'Curve': [CGMESProfile.shortNames.EQ],
    'xvalue': [CGMESProfile.shortNames.EQ],
    'y1value': [CGMESProfile.shortNames.EQ],
    'y2value': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$G = [{
    "value": "--"
  }, {
    "value": "CurveStyle.constantYValue",
    "label": "constantYValue"
  }, {
    "value": "CurveStyle.straightLineYValues",
    "label": "straightLineYValues"
  }];
  var CurveStyle = /*#__PURE__*/function (_BaseClass) {
    _inherits(CurveStyle, _BaseClass);
    var _super = _createSuper(CurveStyle);
    function CurveStyle() {
      _classCallCheck(this, CurveStyle);
      return _super.apply(this, arguments);
    }
    _createClass(CurveStyle, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "CurveStyle";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!CurveStyle.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class CurveStyle: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = CurveStyle.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$G;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return CurveStyle;
  }(BaseClass);
  _defineProperty(CurveStyle, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var DCConductingEquipment = /*#__PURE__*/function (_Equipment) {
    _inherits(DCConductingEquipment, _Equipment);
    var _super = _createSuper(DCConductingEquipment);
    function DCConductingEquipment() {
      _classCallCheck(this, DCConductingEquipment);
      return _super.apply(this, arguments);
    }
    _createClass(DCConductingEquipment, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCConductingEquipment";
        var attributeEntries = Equipment.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Equipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCConductingEquipment.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCConductingEquipment: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCConductingEquipment.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["DCBusbar", "DCChopper", "DCGround", "DCLineSegment", "DCSeriesDevice", "DCShunt", "DCSwitch", "DCBreaker", "DCDisconnector"];
        return subClasses;
      }
    }]);
    return DCConductingEquipment;
  }(Equipment);
  _defineProperty(DCConductingEquipment, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var DCSwitch = /*#__PURE__*/function (_DCConductingEquipmen) {
    _inherits(DCSwitch, _DCConductingEquipmen);
    var _super = _createSuper(DCSwitch);
    function DCSwitch() {
      _classCallCheck(this, DCSwitch);
      return _super.apply(this, arguments);
    }
    _createClass(DCSwitch, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCSwitch";
        var attributeEntries = DCConductingEquipment.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCSwitch.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCSwitch: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCSwitch.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["DCBreaker", "DCDisconnector"];
        return subClasses;
      }
    }]);
    return DCSwitch;
  }(DCConductingEquipment);
  _defineProperty(DCSwitch, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var DCBreaker = /*#__PURE__*/function (_DCSwitch) {
    _inherits(DCBreaker, _DCSwitch);
    var _super = _createSuper(DCBreaker);
    function DCBreaker() {
      _classCallCheck(this, DCBreaker);
      return _super.apply(this, arguments);
    }
    _createClass(DCBreaker, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCBreaker";
        var attributeEntries = DCSwitch.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCSwitch.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCBreaker.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCBreaker: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCBreaker.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCBreaker;
  }(DCSwitch);
  _defineProperty(DCBreaker, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var DCBusbar = /*#__PURE__*/function (_DCConductingEquipmen) {
    _inherits(DCBusbar, _DCConductingEquipmen);
    var _super = _createSuper(DCBusbar);
    function DCBusbar() {
      _classCallCheck(this, DCBusbar);
      return _super.apply(this, arguments);
    }
    _createClass(DCBusbar, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCBusbar";
        var attributeEntries = DCConductingEquipment.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCBusbar.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCBusbar: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCBusbar.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCBusbar;
  }(DCConductingEquipment);
  _defineProperty(DCBusbar, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var DCChopper = /*#__PURE__*/function (_DCConductingEquipmen) {
    _inherits(DCChopper, _DCConductingEquipmen);
    var _super = _createSuper(DCChopper);
    function DCChopper() {
      _classCallCheck(this, DCChopper);
      return _super.apply(this, arguments);
    }
    _createClass(DCChopper, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCChopper";
        var attributeEntries = DCConductingEquipment.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCChopper.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCChopper: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCChopper.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCChopper;
  }(DCConductingEquipment);
  _defineProperty(DCChopper, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$F = [{
    "value": "--"
  }, {
    "value": "DCConverterOperatingModeKind.bipolar",
    "label": "bipolar"
  }, {
    "value": "DCConverterOperatingModeKind.monopolarMetallicReturn",
    "label": "monopolarMetallicReturn"
  }, {
    "value": "DCConverterOperatingModeKind.monopolarGroundReturn",
    "label": "monopolarGroundReturn"
  }];
  var DCConverterOperatingModeKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(DCConverterOperatingModeKind, _BaseClass);
    var _super = _createSuper(DCConverterOperatingModeKind);
    function DCConverterOperatingModeKind() {
      _classCallCheck(this, DCConverterOperatingModeKind);
      return _super.apply(this, arguments);
    }
    _createClass(DCConverterOperatingModeKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCConverterOperatingModeKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCConverterOperatingModeKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCConverterOperatingModeKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCConverterOperatingModeKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$F;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCConverterOperatingModeKind;
  }(BaseClass);
  _defineProperty(DCConverterOperatingModeKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var DCEquipmentContainer = /*#__PURE__*/function (_EquipmentContainer) {
    _inherits(DCEquipmentContainer, _EquipmentContainer);
    var _super = _createSuper(DCEquipmentContainer);
    function DCEquipmentContainer() {
      _classCallCheck(this, DCEquipmentContainer);
      return _super.apply(this, arguments);
    }
    _createClass(DCEquipmentContainer, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCEquipmentContainer";
        var attributeEntries = EquipmentContainer.attributeHTML(object, cimmenu, classType);
        if ('cim:DCEquipmentContainer.DCTopologicalNode' in object) {
          attributeEntries['filledEntries']['cim:DCEquipmentContainer.DCTopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCEquipmentContainer.DCTopologicalNode'], 'cim:DCTopologicalNode', 'cim:DCEquipmentContainer.DCTopologicalNode');
        } else {
          attributeEntries['emptyEntries']['cim:DCEquipmentContainer.DCTopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCEquipmentContainer.DCTopologicalNode'], 'cim:DCTopologicalNode', 'cim:DCEquipmentContainer.DCTopologicalNode');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DCEquipmentContainer.DCTopologicalNode"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EquipmentContainer.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCEquipmentContainer.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCEquipmentContainer: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCEquipmentContainer.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["DCConverterUnit", "DCLine"];
        return subClasses;
      }
    }]);
    return DCEquipmentContainer;
  }(EquipmentContainer);
  _defineProperty(DCEquipmentContainer, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.TP],
    'DCTopologicalNode': [CGMESProfile.shortNames.TP]
  });

  var DCConverterUnit = /*#__PURE__*/function (_DCEquipmentContainer) {
    _inherits(DCConverterUnit, _DCEquipmentContainer);
    var _super = _createSuper(DCConverterUnit);
    function DCConverterUnit() {
      _classCallCheck(this, DCConverterUnit);
      return _super.apply(this, arguments);
    }
    _createClass(DCConverterUnit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCConverterUnit";
        var attributeEntries = DCEquipmentContainer.attributeHTML(object, cimmenu, classType);
        if ('cim:DCConverterUnit.operationMode' in object) {
          attributeEntries['filledEntries']['cim:DCConverterUnit.operationMode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCConverterUnit.operationMode'], 'cim:DCConverterOperatingModeKind', 'cim:DCConverterUnit.operationMode');
        } else {
          attributeEntries['emptyEntries']['cim:DCConverterUnit.operationMode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCConverterUnit.operationMode'], 'cim:DCConverterOperatingModeKind', 'cim:DCConverterUnit.operationMode');
        }
        if ('cim:DCConverterUnit.Substation' in object) {
          attributeEntries['filledEntries']['cim:DCConverterUnit.Substation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCConverterUnit.Substation'], 'cim:Substation', 'cim:DCConverterUnit.Substation');
        } else {
          attributeEntries['emptyEntries']['cim:DCConverterUnit.Substation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCConverterUnit.Substation'], 'cim:Substation', 'cim:DCConverterUnit.Substation');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DCConverterUnit.operationMode", "cim:DCConverterUnit.Substation"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCEquipmentContainer.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCConverterUnit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCConverterUnit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCConverterUnit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCConverterUnit;
  }(DCEquipmentContainer);
  _defineProperty(DCConverterUnit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'operationMode': [CGMESProfile.shortNames.EQ],
    'Substation': [CGMESProfile.shortNames.EQ]
  });

  var DCDisconnector = /*#__PURE__*/function (_DCSwitch) {
    _inherits(DCDisconnector, _DCSwitch);
    var _super = _createSuper(DCDisconnector);
    function DCDisconnector() {
      _classCallCheck(this, DCDisconnector);
      return _super.apply(this, arguments);
    }
    _createClass(DCDisconnector, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCDisconnector";
        var attributeEntries = DCSwitch.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCSwitch.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCDisconnector.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCDisconnector: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCDisconnector.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCDisconnector;
  }(DCSwitch);
  _defineProperty(DCDisconnector, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var DCGround = /*#__PURE__*/function (_DCConductingEquipmen) {
    _inherits(DCGround, _DCConductingEquipmen);
    var _super = _createSuper(DCGround);
    function DCGround() {
      _classCallCheck(this, DCGround);
      return _super.apply(this, arguments);
    }
    _createClass(DCGround, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCGround";
        var attributeEntries = DCConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:DCGround.inductance' in object) {
          attributeEntries['filledEntries']['cim:DCGround.inductance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCGround.inductance'], 'cim:Inductance', 'cim:DCGround.inductance');
        } else {
          attributeEntries['emptyEntries']['cim:DCGround.inductance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCGround.inductance'], 'cim:Inductance', 'cim:DCGround.inductance');
        }
        if ('cim:DCGround.r' in object) {
          attributeEntries['filledEntries']['cim:DCGround.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCGround.r'], 'cim:Resistance', 'cim:DCGround.r');
        } else {
          attributeEntries['emptyEntries']['cim:DCGround.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCGround.r'], 'cim:Resistance', 'cim:DCGround.r');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DCGround.inductance", "cim:DCGround.r"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCGround.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCGround: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCGround.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCGround;
  }(DCConductingEquipment);
  _defineProperty(DCGround, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'inductance': [CGMESProfile.shortNames.EQ],
    'r': [CGMESProfile.shortNames.EQ]
  });

  var DCLine = /*#__PURE__*/function (_DCEquipmentContainer) {
    _inherits(DCLine, _DCEquipmentContainer);
    var _super = _createSuper(DCLine);
    function DCLine() {
      _classCallCheck(this, DCLine);
      return _super.apply(this, arguments);
    }
    _createClass(DCLine, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCLine";
        var attributeEntries = DCEquipmentContainer.attributeHTML(object, cimmenu, classType);
        if ('cim:DCLine.Region' in object) {
          attributeEntries['filledEntries']['cim:DCLine.Region'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCLine.Region'], 'cim:SubGeographicalRegion', 'cim:DCLine.Region');
        } else {
          attributeEntries['emptyEntries']['cim:DCLine.Region'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCLine.Region'], 'cim:SubGeographicalRegion', 'cim:DCLine.Region');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DCLine.Region"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCEquipmentContainer.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCLine.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCLine: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCLine.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCLine;
  }(DCEquipmentContainer);
  _defineProperty(DCLine, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'Region': [CGMESProfile.shortNames.EQ]
  });

  var DCLineSegment = /*#__PURE__*/function (_DCConductingEquipmen) {
    _inherits(DCLineSegment, _DCConductingEquipmen);
    var _super = _createSuper(DCLineSegment);
    function DCLineSegment() {
      _classCallCheck(this, DCLineSegment);
      return _super.apply(this, arguments);
    }
    _createClass(DCLineSegment, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCLineSegment";
        var attributeEntries = DCConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:DCLineSegment.capacitance' in object) {
          attributeEntries['filledEntries']['cim:DCLineSegment.capacitance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCLineSegment.capacitance'], 'cim:Capacitance', 'cim:DCLineSegment.capacitance');
        } else {
          attributeEntries['emptyEntries']['cim:DCLineSegment.capacitance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCLineSegment.capacitance'], 'cim:Capacitance', 'cim:DCLineSegment.capacitance');
        }
        if ('cim:DCLineSegment.inductance' in object) {
          attributeEntries['filledEntries']['cim:DCLineSegment.inductance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCLineSegment.inductance'], 'cim:Inductance', 'cim:DCLineSegment.inductance');
        } else {
          attributeEntries['emptyEntries']['cim:DCLineSegment.inductance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCLineSegment.inductance'], 'cim:Inductance', 'cim:DCLineSegment.inductance');
        }
        if ('cim:DCLineSegment.resistance' in object) {
          attributeEntries['filledEntries']['cim:DCLineSegment.resistance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCLineSegment.resistance'], 'cim:Resistance', 'cim:DCLineSegment.resistance');
        } else {
          attributeEntries['emptyEntries']['cim:DCLineSegment.resistance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCLineSegment.resistance'], 'cim:Resistance', 'cim:DCLineSegment.resistance');
        }
        if ('cim:DCLineSegment.length' in object) {
          attributeEntries['filledEntries']['cim:DCLineSegment.length'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCLineSegment.length'], 'cim:Length', 'cim:DCLineSegment.length');
        } else {
          attributeEntries['emptyEntries']['cim:DCLineSegment.length'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCLineSegment.length'], 'cim:Length', 'cim:DCLineSegment.length');
        }
        if ('cim:DCLineSegment.PerLengthParameter' in object) {
          attributeEntries['filledEntries']['cim:DCLineSegment.PerLengthParameter'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCLineSegment.PerLengthParameter'], 'cim:PerLengthDCLineParameter', 'cim:DCLineSegment.PerLengthParameter');
        } else {
          attributeEntries['emptyEntries']['cim:DCLineSegment.PerLengthParameter'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCLineSegment.PerLengthParameter'], 'cim:PerLengthDCLineParameter', 'cim:DCLineSegment.PerLengthParameter');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DCLineSegment.capacitance", "cim:DCLineSegment.inductance", "cim:DCLineSegment.resistance", "cim:DCLineSegment.length", "cim:DCLineSegment.PerLengthParameter"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCLineSegment.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCLineSegment: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCLineSegment.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCLineSegment;
  }(DCConductingEquipment);
  _defineProperty(DCLineSegment, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'capacitance': [CGMESProfile.shortNames.EQ],
    'inductance': [CGMESProfile.shortNames.EQ],
    'resistance': [CGMESProfile.shortNames.EQ],
    'length': [CGMESProfile.shortNames.EQ],
    'PerLengthParameter': [CGMESProfile.shortNames.EQ]
  });

  var DCNode = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(DCNode, _IdentifiedObject);
    var _super = _createSuper(DCNode);
    function DCNode() {
      _classCallCheck(this, DCNode);
      return _super.apply(this, arguments);
    }
    _createClass(DCNode, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCNode";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:DCNode.DCEquipmentContainer' in object) {
          attributeEntries['filledEntries']['cim:DCNode.DCEquipmentContainer'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCNode.DCEquipmentContainer'], 'cim:DCEquipmentContainer', 'cim:DCNode.DCEquipmentContainer');
        } else {
          attributeEntries['emptyEntries']['cim:DCNode.DCEquipmentContainer'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCNode.DCEquipmentContainer'], 'cim:DCEquipmentContainer', 'cim:DCNode.DCEquipmentContainer');
        }
        if ('cim:DCNode.DCTopologicalNode' in object) {
          attributeEntries['filledEntries']['cim:DCNode.DCTopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCNode.DCTopologicalNode'], 'cim:DCTopologicalNode', 'cim:DCNode.DCTopologicalNode');
        } else {
          attributeEntries['emptyEntries']['cim:DCNode.DCTopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCNode.DCTopologicalNode'], 'cim:DCTopologicalNode', 'cim:DCNode.DCTopologicalNode');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DCNode.DCEquipmentContainer", "cim:DCNode.DCTopologicalNode"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCNode.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCNode: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCNode.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCNode;
  }(IdentifiedObject);
  _defineProperty(DCNode, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.TP],
    'DCEquipmentContainer': [CGMESProfile.shortNames.EQ],
    'DCTopologicalNode': [CGMESProfile.shortNames.TP]
  });

  var possibleValues$E = [{
    "value": "--"
  }, {
    "value": "DCPolarityKind.positive",
    "label": "positive"
  }, {
    "value": "DCPolarityKind.middle",
    "label": "middle"
  }, {
    "value": "DCPolarityKind.negative",
    "label": "negative"
  }];
  var DCPolarityKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(DCPolarityKind, _BaseClass);
    var _super = _createSuper(DCPolarityKind);
    function DCPolarityKind() {
      _classCallCheck(this, DCPolarityKind);
      return _super.apply(this, arguments);
    }
    _createClass(DCPolarityKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCPolarityKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCPolarityKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCPolarityKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCPolarityKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$E;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCPolarityKind;
  }(BaseClass);
  _defineProperty(DCPolarityKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var DCSeriesDevice = /*#__PURE__*/function (_DCConductingEquipmen) {
    _inherits(DCSeriesDevice, _DCConductingEquipmen);
    var _super = _createSuper(DCSeriesDevice);
    function DCSeriesDevice() {
      _classCallCheck(this, DCSeriesDevice);
      return _super.apply(this, arguments);
    }
    _createClass(DCSeriesDevice, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCSeriesDevice";
        var attributeEntries = DCConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:DCSeriesDevice.inductance' in object) {
          attributeEntries['filledEntries']['cim:DCSeriesDevice.inductance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCSeriesDevice.inductance'], 'cim:Inductance', 'cim:DCSeriesDevice.inductance');
        } else {
          attributeEntries['emptyEntries']['cim:DCSeriesDevice.inductance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCSeriesDevice.inductance'], 'cim:Inductance', 'cim:DCSeriesDevice.inductance');
        }
        if ('cim:DCSeriesDevice.resistance' in object) {
          attributeEntries['filledEntries']['cim:DCSeriesDevice.resistance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCSeriesDevice.resistance'], 'cim:Resistance', 'cim:DCSeriesDevice.resistance');
        } else {
          attributeEntries['emptyEntries']['cim:DCSeriesDevice.resistance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCSeriesDevice.resistance'], 'cim:Resistance', 'cim:DCSeriesDevice.resistance');
        }
        if ('cim:DCSeriesDevice.ratedUdc' in object) {
          attributeEntries['filledEntries']['cim:DCSeriesDevice.ratedUdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCSeriesDevice.ratedUdc'], 'cim:Voltage', 'cim:DCSeriesDevice.ratedUdc');
        } else {
          attributeEntries['emptyEntries']['cim:DCSeriesDevice.ratedUdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCSeriesDevice.ratedUdc'], 'cim:Voltage', 'cim:DCSeriesDevice.ratedUdc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DCSeriesDevice.inductance", "cim:DCSeriesDevice.resistance", "cim:DCSeriesDevice.ratedUdc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCSeriesDevice.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCSeriesDevice: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCSeriesDevice.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCSeriesDevice;
  }(DCConductingEquipment);
  _defineProperty(DCSeriesDevice, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'inductance': [CGMESProfile.shortNames.EQ],
    'resistance': [CGMESProfile.shortNames.EQ],
    'ratedUdc': [CGMESProfile.shortNames.EQ]
  });

  var DCShunt = /*#__PURE__*/function (_DCConductingEquipmen) {
    _inherits(DCShunt, _DCConductingEquipmen);
    var _super = _createSuper(DCShunt);
    function DCShunt() {
      _classCallCheck(this, DCShunt);
      return _super.apply(this, arguments);
    }
    _createClass(DCShunt, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCShunt";
        var attributeEntries = DCConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:DCShunt.capacitance' in object) {
          attributeEntries['filledEntries']['cim:DCShunt.capacitance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCShunt.capacitance'], 'cim:Capacitance', 'cim:DCShunt.capacitance');
        } else {
          attributeEntries['emptyEntries']['cim:DCShunt.capacitance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCShunt.capacitance'], 'cim:Capacitance', 'cim:DCShunt.capacitance');
        }
        if ('cim:DCShunt.resistance' in object) {
          attributeEntries['filledEntries']['cim:DCShunt.resistance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCShunt.resistance'], 'cim:Resistance', 'cim:DCShunt.resistance');
        } else {
          attributeEntries['emptyEntries']['cim:DCShunt.resistance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCShunt.resistance'], 'cim:Resistance', 'cim:DCShunt.resistance');
        }
        if ('cim:DCShunt.ratedUdc' in object) {
          attributeEntries['filledEntries']['cim:DCShunt.ratedUdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCShunt.ratedUdc'], 'cim:Voltage', 'cim:DCShunt.ratedUdc');
        } else {
          attributeEntries['emptyEntries']['cim:DCShunt.ratedUdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCShunt.ratedUdc'], 'cim:Voltage', 'cim:DCShunt.ratedUdc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DCShunt.capacitance", "cim:DCShunt.resistance", "cim:DCShunt.ratedUdc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCShunt.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCShunt: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCShunt.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCShunt;
  }(DCConductingEquipment);
  _defineProperty(DCShunt, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'capacitance': [CGMESProfile.shortNames.EQ],
    'resistance': [CGMESProfile.shortNames.EQ],
    'ratedUdc': [CGMESProfile.shortNames.EQ]
  });

  var DCTerminal = /*#__PURE__*/function (_DCBaseTerminal) {
    _inherits(DCTerminal, _DCBaseTerminal);
    var _super = _createSuper(DCTerminal);
    function DCTerminal() {
      _classCallCheck(this, DCTerminal);
      return _super.apply(this, arguments);
    }
    _createClass(DCTerminal, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCTerminal";
        var attributeEntries = DCBaseTerminal.attributeHTML(object, cimmenu, classType);
        if ('cim:DCTerminal.DCConductingEquipment' in object) {
          attributeEntries['filledEntries']['cim:DCTerminal.DCConductingEquipment'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCTerminal.DCConductingEquipment'], 'cim:DCConductingEquipment', 'cim:DCTerminal.DCConductingEquipment');
        } else {
          attributeEntries['emptyEntries']['cim:DCTerminal.DCConductingEquipment'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCTerminal.DCConductingEquipment'], 'cim:DCConductingEquipment', 'cim:DCTerminal.DCConductingEquipment');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DCTerminal.DCConductingEquipment"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DCBaseTerminal.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCTerminal.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCTerminal: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCTerminal.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCTerminal;
  }(DCBaseTerminal);
  _defineProperty(DCTerminal, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.TP],
    'DCConductingEquipment': [CGMESProfile.shortNames.EQ]
  });

  var DCTopologicalIsland = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(DCTopologicalIsland, _IdentifiedObject);
    var _super = _createSuper(DCTopologicalIsland);
    function DCTopologicalIsland() {
      _classCallCheck(this, DCTopologicalIsland);
      return _super.apply(this, arguments);
    }
    _createClass(DCTopologicalIsland, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCTopologicalIsland";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:DCTopologicalIsland.DCTopologicalNodes' in object) {
          attributeEntries['filledEntries']['cim:DCTopologicalIsland.DCTopologicalNodes'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCTopologicalIsland.DCTopologicalNodes'], 'cim:DCTopologicalNode', 'cim:DCTopologicalIsland.DCTopologicalNodes');
        } else {
          attributeEntries['emptyEntries']['cim:DCTopologicalIsland.DCTopologicalNodes'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCTopologicalIsland.DCTopologicalNodes'], 'cim:DCTopologicalNode', 'cim:DCTopologicalIsland.DCTopologicalNodes');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DCTopologicalIsland.DCTopologicalNodes"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCTopologicalIsland.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCTopologicalIsland: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCTopologicalIsland.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCTopologicalIsland;
  }(IdentifiedObject);
  _defineProperty(DCTopologicalIsland, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SV],
    'DCTopologicalNodes': [CGMESProfile.shortNames.SV]
  });

  var DCTopologicalNode = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(DCTopologicalNode, _IdentifiedObject);
    var _super = _createSuper(DCTopologicalNode);
    function DCTopologicalNode() {
      _classCallCheck(this, DCTopologicalNode);
      return _super.apply(this, arguments);
    }
    _createClass(DCTopologicalNode, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DCTopologicalNode";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:DCTopologicalNode.DCTerminals' in object) {
          attributeEntries['filledEntries']['cim:DCTopologicalNode.DCTerminals'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCTopologicalNode.DCTerminals'], 'cim:DCBaseTerminal', 'cim:DCTopologicalNode.DCTerminals');
        } else {
          attributeEntries['emptyEntries']['cim:DCTopologicalNode.DCTerminals'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCTopologicalNode.DCTerminals'], 'cim:DCBaseTerminal', 'cim:DCTopologicalNode.DCTerminals');
        }
        if ('cim:DCTopologicalNode.DCEquipmentContainer' in object) {
          attributeEntries['filledEntries']['cim:DCTopologicalNode.DCEquipmentContainer'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCTopologicalNode.DCEquipmentContainer'], 'cim:DCEquipmentContainer', 'cim:DCTopologicalNode.DCEquipmentContainer');
        } else {
          attributeEntries['emptyEntries']['cim:DCTopologicalNode.DCEquipmentContainer'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DCTopologicalNode.DCEquipmentContainer'], 'cim:DCEquipmentContainer', 'cim:DCTopologicalNode.DCEquipmentContainer');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DCTopologicalNode.DCTerminals", "cim:DCTopologicalNode.DCEquipmentContainer"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DCTopologicalNode.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DCTopologicalNode: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DCTopologicalNode.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DCTopologicalNode;
  }(IdentifiedObject);
  _defineProperty(DCTopologicalNode, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SV, CGMESProfile.shortNames.TP],
    'DCTerminals': [CGMESProfile.shortNames.TP],
    'DCEquipmentContainer': [CGMESProfile.shortNames.TP]
  });

  var Date$1 = /*#__PURE__*/function (_BaseClass) {
    _inherits(Date, _BaseClass);
    var _super = _createSuper(Date);
    function Date() {
      _classCallCheck(this, Date);
      return _super.apply(this, arguments);
    }
    _createClass(Date, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Date";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Date.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Date: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Date.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Date;
  }(BaseClass);
  _defineProperty(Date$1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.GL, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD, CGMESProfile.shortNames.EQ_BD]
  });

  var DateTime = /*#__PURE__*/function (_BaseClass) {
    _inherits(DateTime, _BaseClass);
    var _super = _createSuper(DateTime);
    function DateTime() {
      _classCallCheck(this, DateTime);
      return _super.apply(this, arguments);
    }
    _createClass(DateTime, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DateTime";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DateTime.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DateTime: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DateTime.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DateTime;
  }(BaseClass);
  _defineProperty(DateTime, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var DayType = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(DayType, _IdentifiedObject);
    var _super = _createSuper(DayType);
    function DayType() {
      _classCallCheck(this, DayType);
      return _super.apply(this, arguments);
    }
    _createClass(DayType, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DayType";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DayType.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DayType: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DayType.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DayType;
  }(IdentifiedObject);
  _defineProperty(DayType, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var Decimal = /*#__PURE__*/function (_BaseClass) {
    _inherits(Decimal, _BaseClass);
    var _super = _createSuper(Decimal);
    function Decimal() {
      _classCallCheck(this, Decimal);
      return _super.apply(this, arguments);
    }
    _createClass(Decimal, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Decimal";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Decimal.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Decimal: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Decimal.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Decimal;
  }(BaseClass);
  _defineProperty(Decimal, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var Diagram = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(Diagram, _IdentifiedObject);
    var _super = _createSuper(Diagram);
    function Diagram() {
      _classCallCheck(this, Diagram);
      return _super.apply(this, arguments);
    }
    _createClass(Diagram, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Diagram";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:Diagram.DiagramStyle' in object) {
          attributeEntries['filledEntries']['cim:Diagram.DiagramStyle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Diagram.DiagramStyle'], 'cim:DiagramStyle', 'cim:Diagram.DiagramStyle');
        } else {
          attributeEntries['emptyEntries']['cim:Diagram.DiagramStyle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Diagram.DiagramStyle'], 'cim:DiagramStyle', 'cim:Diagram.DiagramStyle');
        }
        if ('cim:Diagram.orientation' in object) {
          attributeEntries['filledEntries']['cim:Diagram.orientation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Diagram.orientation'], 'cim:OrientationKind', 'cim:Diagram.orientation');
        } else {
          attributeEntries['emptyEntries']['cim:Diagram.orientation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Diagram.orientation'], 'cim:OrientationKind', 'cim:Diagram.orientation');
        }
        if ('cim:Diagram.x1InitialView' in object) {
          attributeEntries['filledEntries']['cim:Diagram.x1InitialView'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Diagram.x1InitialView'], 'cim:Simple_Float', 'cim:Diagram.x1InitialView');
        } else {
          attributeEntries['emptyEntries']['cim:Diagram.x1InitialView'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Diagram.x1InitialView'], 'cim:Simple_Float', 'cim:Diagram.x1InitialView');
        }
        if ('cim:Diagram.x2InitialView' in object) {
          attributeEntries['filledEntries']['cim:Diagram.x2InitialView'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Diagram.x2InitialView'], 'cim:Simple_Float', 'cim:Diagram.x2InitialView');
        } else {
          attributeEntries['emptyEntries']['cim:Diagram.x2InitialView'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Diagram.x2InitialView'], 'cim:Simple_Float', 'cim:Diagram.x2InitialView');
        }
        if ('cim:Diagram.y1InitialView' in object) {
          attributeEntries['filledEntries']['cim:Diagram.y1InitialView'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Diagram.y1InitialView'], 'cim:Simple_Float', 'cim:Diagram.y1InitialView');
        } else {
          attributeEntries['emptyEntries']['cim:Diagram.y1InitialView'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Diagram.y1InitialView'], 'cim:Simple_Float', 'cim:Diagram.y1InitialView');
        }
        if ('cim:Diagram.y2InitialView' in object) {
          attributeEntries['filledEntries']['cim:Diagram.y2InitialView'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Diagram.y2InitialView'], 'cim:Simple_Float', 'cim:Diagram.y2InitialView');
        } else {
          attributeEntries['emptyEntries']['cim:Diagram.y2InitialView'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Diagram.y2InitialView'], 'cim:Simple_Float', 'cim:Diagram.y2InitialView');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Diagram.DiagramStyle", "cim:Diagram.orientation", "cim:Diagram.x1InitialView", "cim:Diagram.x2InitialView", "cim:Diagram.y1InitialView", "cim:Diagram.y2InitialView"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Diagram.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Diagram: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Diagram.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Diagram;
  }(IdentifiedObject);
  _defineProperty(Diagram, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL],
    'DiagramStyle': [CGMESProfile.shortNames.DL],
    'orientation': [CGMESProfile.shortNames.DL],
    'x1InitialView': [CGMESProfile.shortNames.DL],
    'x2InitialView': [CGMESProfile.shortNames.DL],
    'y1InitialView': [CGMESProfile.shortNames.DL],
    'y2InitialView': [CGMESProfile.shortNames.DL]
  });

  var DiagramLayoutVersion = /*#__PURE__*/function (_BaseClass) {
    _inherits(DiagramLayoutVersion, _BaseClass);
    var _super = _createSuper(DiagramLayoutVersion);
    function DiagramLayoutVersion() {
      _classCallCheck(this, DiagramLayoutVersion);
      return _super.apply(this, arguments);
    }
    _createClass(DiagramLayoutVersion, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DiagramLayoutVersion";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:DiagramLayoutVersion.baseUML' in object) {
          attributeEntries['filledEntries']['cim:DiagramLayoutVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.baseUML'], 'cim:String', 'cim:DiagramLayoutVersion.baseUML');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramLayoutVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.baseUML'], 'cim:String', 'cim:DiagramLayoutVersion.baseUML');
        }
        if ('cim:DiagramLayoutVersion.baseURI' in object) {
          attributeEntries['filledEntries']['cim:DiagramLayoutVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.baseURI'], 'cim:String', 'cim:DiagramLayoutVersion.baseURI');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramLayoutVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.baseURI'], 'cim:String', 'cim:DiagramLayoutVersion.baseURI');
        }
        if ('cim:DiagramLayoutVersion.date' in object) {
          attributeEntries['filledEntries']['cim:DiagramLayoutVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.date'], 'cim:Date', 'cim:DiagramLayoutVersion.date');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramLayoutVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.date'], 'cim:Date', 'cim:DiagramLayoutVersion.date');
        }
        if ('cim:DiagramLayoutVersion.differenceModelURI' in object) {
          attributeEntries['filledEntries']['cim:DiagramLayoutVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.differenceModelURI'], 'cim:String', 'cim:DiagramLayoutVersion.differenceModelURI');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramLayoutVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.differenceModelURI'], 'cim:String', 'cim:DiagramLayoutVersion.differenceModelURI');
        }
        if ('cim:DiagramLayoutVersion.entsoeUML' in object) {
          attributeEntries['filledEntries']['cim:DiagramLayoutVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.entsoeUML'], 'cim:String', 'cim:DiagramLayoutVersion.entsoeUML');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramLayoutVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.entsoeUML'], 'cim:String', 'cim:DiagramLayoutVersion.entsoeUML');
        }
        if ('cim:DiagramLayoutVersion.entsoeURI' in object) {
          attributeEntries['filledEntries']['cim:DiagramLayoutVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.entsoeURI'], 'cim:String', 'cim:DiagramLayoutVersion.entsoeURI');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramLayoutVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.entsoeURI'], 'cim:String', 'cim:DiagramLayoutVersion.entsoeURI');
        }
        if ('cim:DiagramLayoutVersion.modelDescriptionURI' in object) {
          attributeEntries['filledEntries']['cim:DiagramLayoutVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.modelDescriptionURI'], 'cim:String', 'cim:DiagramLayoutVersion.modelDescriptionURI');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramLayoutVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.modelDescriptionURI'], 'cim:String', 'cim:DiagramLayoutVersion.modelDescriptionURI');
        }
        if ('cim:DiagramLayoutVersion.namespaceRDF' in object) {
          attributeEntries['filledEntries']['cim:DiagramLayoutVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.namespaceRDF'], 'cim:String', 'cim:DiagramLayoutVersion.namespaceRDF');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramLayoutVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.namespaceRDF'], 'cim:String', 'cim:DiagramLayoutVersion.namespaceRDF');
        }
        if ('cim:DiagramLayoutVersion.namespaceUML' in object) {
          attributeEntries['filledEntries']['cim:DiagramLayoutVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.namespaceUML'], 'cim:String', 'cim:DiagramLayoutVersion.namespaceUML');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramLayoutVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.namespaceUML'], 'cim:String', 'cim:DiagramLayoutVersion.namespaceUML');
        }
        if ('cim:DiagramLayoutVersion.shortName' in object) {
          attributeEntries['filledEntries']['cim:DiagramLayoutVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.shortName'], 'cim:String', 'cim:DiagramLayoutVersion.shortName');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramLayoutVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramLayoutVersion.shortName'], 'cim:String', 'cim:DiagramLayoutVersion.shortName');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DiagramLayoutVersion.baseUML", "cim:DiagramLayoutVersion.baseURI", "cim:DiagramLayoutVersion.date", "cim:DiagramLayoutVersion.differenceModelURI", "cim:DiagramLayoutVersion.entsoeUML", "cim:DiagramLayoutVersion.entsoeURI", "cim:DiagramLayoutVersion.modelDescriptionURI", "cim:DiagramLayoutVersion.namespaceRDF", "cim:DiagramLayoutVersion.namespaceUML", "cim:DiagramLayoutVersion.shortName"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DiagramLayoutVersion.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DiagramLayoutVersion: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DiagramLayoutVersion.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DiagramLayoutVersion;
  }(BaseClass);
  _defineProperty(DiagramLayoutVersion, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL],
    'baseUML': [CGMESProfile.shortNames.DL],
    'baseURI': [CGMESProfile.shortNames.DL],
    'date': [CGMESProfile.shortNames.DL],
    'differenceModelURI': [CGMESProfile.shortNames.DL],
    'entsoeUML': [CGMESProfile.shortNames.DL],
    'entsoeURI': [CGMESProfile.shortNames.DL],
    'modelDescriptionURI': [CGMESProfile.shortNames.DL],
    'namespaceRDF': [CGMESProfile.shortNames.DL],
    'namespaceUML': [CGMESProfile.shortNames.DL],
    'shortName': [CGMESProfile.shortNames.DL]
  });

  var DiagramObject = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(DiagramObject, _IdentifiedObject);
    var _super = _createSuper(DiagramObject);
    function DiagramObject() {
      _classCallCheck(this, DiagramObject);
      return _super.apply(this, arguments);
    }
    _createClass(DiagramObject, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DiagramObject";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:DiagramObject.Diagram' in object) {
          attributeEntries['filledEntries']['cim:DiagramObject.Diagram'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.Diagram'], 'cim:Diagram', 'cim:DiagramObject.Diagram');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObject.Diagram'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.Diagram'], 'cim:Diagram', 'cim:DiagramObject.Diagram');
        }
        if ('cim:DiagramObject.drawingOrder' in object) {
          attributeEntries['filledEntries']['cim:DiagramObject.drawingOrder'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.drawingOrder'], 'cim:Integer', 'cim:DiagramObject.drawingOrder');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObject.drawingOrder'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.drawingOrder'], 'cim:Integer', 'cim:DiagramObject.drawingOrder');
        }
        if ('cim:DiagramObject.isPolygon' in object) {
          attributeEntries['filledEntries']['cim:DiagramObject.isPolygon'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.isPolygon'], 'cim:Boolean', 'cim:DiagramObject.isPolygon');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObject.isPolygon'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.isPolygon'], 'cim:Boolean', 'cim:DiagramObject.isPolygon');
        }
        if ('cim:DiagramObject.offsetX' in object) {
          attributeEntries['filledEntries']['cim:DiagramObject.offsetX'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.offsetX'], 'cim:Simple_Float', 'cim:DiagramObject.offsetX');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObject.offsetX'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.offsetX'], 'cim:Simple_Float', 'cim:DiagramObject.offsetX');
        }
        if ('cim:DiagramObject.offsetY' in object) {
          attributeEntries['filledEntries']['cim:DiagramObject.offsetY'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.offsetY'], 'cim:Simple_Float', 'cim:DiagramObject.offsetY');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObject.offsetY'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.offsetY'], 'cim:Simple_Float', 'cim:DiagramObject.offsetY');
        }
        if ('cim:DiagramObject.rotation' in object) {
          attributeEntries['filledEntries']['cim:DiagramObject.rotation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.rotation'], 'cim:AngleDegrees', 'cim:DiagramObject.rotation');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObject.rotation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.rotation'], 'cim:AngleDegrees', 'cim:DiagramObject.rotation');
        }
        if ('cim:DiagramObject.IdentifiedObject' in object) {
          attributeEntries['filledEntries']['cim:DiagramObject.IdentifiedObject'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.IdentifiedObject'], 'cim:IdentifiedObject', 'cim:DiagramObject.IdentifiedObject');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObject.IdentifiedObject'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.IdentifiedObject'], 'cim:IdentifiedObject', 'cim:DiagramObject.IdentifiedObject');
        }
        if ('cim:DiagramObject.VisibilityLayers' in object) {
          attributeEntries['filledEntries']['cim:DiagramObject.VisibilityLayers'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.VisibilityLayers'], 'cim:VisibilityLayer', 'cim:DiagramObject.VisibilityLayers');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObject.VisibilityLayers'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.VisibilityLayers'], 'cim:VisibilityLayer', 'cim:DiagramObject.VisibilityLayers');
        }
        if ('cim:DiagramObject.DiagramObjectStyle' in object) {
          attributeEntries['filledEntries']['cim:DiagramObject.DiagramObjectStyle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.DiagramObjectStyle'], 'cim:DiagramObjectStyle', 'cim:DiagramObject.DiagramObjectStyle');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObject.DiagramObjectStyle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObject.DiagramObjectStyle'], 'cim:DiagramObjectStyle', 'cim:DiagramObject.DiagramObjectStyle');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DiagramObject.Diagram", "cim:DiagramObject.drawingOrder", "cim:DiagramObject.isPolygon", "cim:DiagramObject.offsetX", "cim:DiagramObject.offsetY", "cim:DiagramObject.rotation", "cim:DiagramObject.IdentifiedObject", "cim:DiagramObject.VisibilityLayers", "cim:DiagramObject.DiagramObjectStyle"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DiagramObject.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DiagramObject: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DiagramObject.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["TextDiagramObject"];
        return subClasses;
      }
    }]);
    return DiagramObject;
  }(IdentifiedObject);
  _defineProperty(DiagramObject, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL],
    'Diagram': [CGMESProfile.shortNames.DL],
    'drawingOrder': [CGMESProfile.shortNames.DL],
    'isPolygon': [CGMESProfile.shortNames.DL],
    'offsetX': [CGMESProfile.shortNames.DL],
    'offsetY': [CGMESProfile.shortNames.DL],
    'rotation': [CGMESProfile.shortNames.DL],
    'IdentifiedObject': [CGMESProfile.shortNames.DL],
    'VisibilityLayers': [CGMESProfile.shortNames.DL],
    'DiagramObjectStyle': [CGMESProfile.shortNames.DL]
  });

  var DiagramObjectGluePoint = /*#__PURE__*/function (_BaseClass) {
    _inherits(DiagramObjectGluePoint, _BaseClass);
    var _super = _createSuper(DiagramObjectGluePoint);
    function DiagramObjectGluePoint() {
      _classCallCheck(this, DiagramObjectGluePoint);
      return _super.apply(this, arguments);
    }
    _createClass(DiagramObjectGluePoint, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DiagramObjectGluePoint";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DiagramObjectGluePoint.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DiagramObjectGluePoint: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DiagramObjectGluePoint.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DiagramObjectGluePoint;
  }(BaseClass);
  _defineProperty(DiagramObjectGluePoint, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL]
  });

  var DiagramObjectPoint = /*#__PURE__*/function (_BaseClass) {
    _inherits(DiagramObjectPoint, _BaseClass);
    var _super = _createSuper(DiagramObjectPoint);
    function DiagramObjectPoint() {
      _classCallCheck(this, DiagramObjectPoint);
      return _super.apply(this, arguments);
    }
    _createClass(DiagramObjectPoint, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DiagramObjectPoint";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:DiagramObjectPoint.DiagramObject' in object) {
          attributeEntries['filledEntries']['cim:DiagramObjectPoint.DiagramObject'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObjectPoint.DiagramObject'], 'cim:DiagramObject', 'cim:DiagramObjectPoint.DiagramObject');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObjectPoint.DiagramObject'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObjectPoint.DiagramObject'], 'cim:DiagramObject', 'cim:DiagramObjectPoint.DiagramObject');
        }
        if ('cim:DiagramObjectPoint.DiagramObjectGluePoint' in object) {
          attributeEntries['filledEntries']['cim:DiagramObjectPoint.DiagramObjectGluePoint'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObjectPoint.DiagramObjectGluePoint'], 'cim:DiagramObjectGluePoint', 'cim:DiagramObjectPoint.DiagramObjectGluePoint');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObjectPoint.DiagramObjectGluePoint'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObjectPoint.DiagramObjectGluePoint'], 'cim:DiagramObjectGluePoint', 'cim:DiagramObjectPoint.DiagramObjectGluePoint');
        }
        if ('cim:DiagramObjectPoint.sequenceNumber' in object) {
          attributeEntries['filledEntries']['cim:DiagramObjectPoint.sequenceNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObjectPoint.sequenceNumber'], 'cim:Integer', 'cim:DiagramObjectPoint.sequenceNumber');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObjectPoint.sequenceNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObjectPoint.sequenceNumber'], 'cim:Integer', 'cim:DiagramObjectPoint.sequenceNumber');
        }
        if ('cim:DiagramObjectPoint.xPosition' in object) {
          attributeEntries['filledEntries']['cim:DiagramObjectPoint.xPosition'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObjectPoint.xPosition'], 'cim:Simple_Float', 'cim:DiagramObjectPoint.xPosition');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObjectPoint.xPosition'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObjectPoint.xPosition'], 'cim:Simple_Float', 'cim:DiagramObjectPoint.xPosition');
        }
        if ('cim:DiagramObjectPoint.yPosition' in object) {
          attributeEntries['filledEntries']['cim:DiagramObjectPoint.yPosition'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObjectPoint.yPosition'], 'cim:Simple_Float', 'cim:DiagramObjectPoint.yPosition');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObjectPoint.yPosition'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObjectPoint.yPosition'], 'cim:Simple_Float', 'cim:DiagramObjectPoint.yPosition');
        }
        if ('cim:DiagramObjectPoint.zPosition' in object) {
          attributeEntries['filledEntries']['cim:DiagramObjectPoint.zPosition'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObjectPoint.zPosition'], 'cim:Simple_Float', 'cim:DiagramObjectPoint.zPosition');
        } else {
          attributeEntries['emptyEntries']['cim:DiagramObjectPoint.zPosition'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiagramObjectPoint.zPosition'], 'cim:Simple_Float', 'cim:DiagramObjectPoint.zPosition');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DiagramObjectPoint.DiagramObject", "cim:DiagramObjectPoint.DiagramObjectGluePoint", "cim:DiagramObjectPoint.sequenceNumber", "cim:DiagramObjectPoint.xPosition", "cim:DiagramObjectPoint.yPosition", "cim:DiagramObjectPoint.zPosition"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DiagramObjectPoint.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DiagramObjectPoint: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DiagramObjectPoint.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DiagramObjectPoint;
  }(BaseClass);
  _defineProperty(DiagramObjectPoint, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL],
    'DiagramObject': [CGMESProfile.shortNames.DL],
    'DiagramObjectGluePoint': [CGMESProfile.shortNames.DL],
    'sequenceNumber': [CGMESProfile.shortNames.DL],
    'xPosition': [CGMESProfile.shortNames.DL],
    'yPosition': [CGMESProfile.shortNames.DL],
    'zPosition': [CGMESProfile.shortNames.DL]
  });

  var DiagramObjectStyle = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(DiagramObjectStyle, _IdentifiedObject);
    var _super = _createSuper(DiagramObjectStyle);
    function DiagramObjectStyle() {
      _classCallCheck(this, DiagramObjectStyle);
      return _super.apply(this, arguments);
    }
    _createClass(DiagramObjectStyle, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DiagramObjectStyle";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DiagramObjectStyle.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DiagramObjectStyle: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DiagramObjectStyle.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DiagramObjectStyle;
  }(IdentifiedObject);
  _defineProperty(DiagramObjectStyle, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL]
  });

  var DiagramStyle = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(DiagramStyle, _IdentifiedObject);
    var _super = _createSuper(DiagramStyle);
    function DiagramStyle() {
      _classCallCheck(this, DiagramStyle);
      return _super.apply(this, arguments);
    }
    _createClass(DiagramStyle, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DiagramStyle";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DiagramStyle.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DiagramStyle: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DiagramStyle.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DiagramStyle;
  }(IdentifiedObject);
  _defineProperty(DiagramStyle, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL]
  });

  var DiscontinuousExcitationControlDynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(DiscontinuousExcitationControlDynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(DiscontinuousExcitationControlDynamics);
    function DiscontinuousExcitationControlDynamics() {
      _classCallCheck(this, DiscontinuousExcitationControlDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(DiscontinuousExcitationControlDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DiscontinuousExcitationControlDynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:DiscontinuousExcitationControlDynamics.ExcitationSystemDynamics' in object) {
          attributeEntries['filledEntries']['cim:DiscontinuousExcitationControlDynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscontinuousExcitationControlDynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:DiscontinuousExcitationControlDynamics.ExcitationSystemDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:DiscontinuousExcitationControlDynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscontinuousExcitationControlDynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:DiscontinuousExcitationControlDynamics.ExcitationSystemDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DiscontinuousExcitationControlDynamics.ExcitationSystemDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DiscontinuousExcitationControlDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DiscontinuousExcitationControlDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DiscontinuousExcitationControlDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["DiscontinuousExcitationControlUserDefined", "DiscExcContIEEEDEC1A", "DiscExcContIEEEDEC2A", "DiscExcContIEEEDEC3A"];
        return subClasses;
      }
    }]);
    return DiscontinuousExcitationControlDynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(DiscontinuousExcitationControlDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ExcitationSystemDynamics': [CGMESProfile.shortNames.DY]
  });

  var DiscExcContIEEEDEC1A = /*#__PURE__*/function (_DiscontinuousExcitat) {
    _inherits(DiscExcContIEEEDEC1A, _DiscontinuousExcitat);
    var _super = _createSuper(DiscExcContIEEEDEC1A);
    function DiscExcContIEEEDEC1A() {
      _classCallCheck(this, DiscExcContIEEEDEC1A);
      return _super.apply(this, arguments);
    }
    _createClass(DiscExcContIEEEDEC1A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DiscExcContIEEEDEC1A";
        var attributeEntries = DiscontinuousExcitationControlDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:DiscExcContIEEEDEC1A.vtlmt' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.vtlmt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vtlmt'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vtlmt');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.vtlmt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vtlmt'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vtlmt');
        }
        if ('cim:DiscExcContIEEEDEC1A.vomax' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.vomax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vomax'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vomax');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.vomax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vomax'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vomax');
        }
        if ('cim:DiscExcContIEEEDEC1A.vomin' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.vomin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vomin'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vomin');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.vomin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vomin'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vomin');
        }
        if ('cim:DiscExcContIEEEDEC1A.ketl' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.ketl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.ketl'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.ketl');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.ketl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.ketl'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.ketl');
        }
        if ('cim:DiscExcContIEEEDEC1A.vtc' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.vtc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vtc'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vtc');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.vtc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vtc'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vtc');
        }
        if ('cim:DiscExcContIEEEDEC1A.val' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.val'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.val'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.val');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.val'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.val'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.val');
        }
        if ('cim:DiscExcContIEEEDEC1A.esc' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.esc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.esc'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.esc');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.esc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.esc'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.esc');
        }
        if ('cim:DiscExcContIEEEDEC1A.kan' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.kan'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.kan'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.kan');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.kan'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.kan'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.kan');
        }
        if ('cim:DiscExcContIEEEDEC1A.tan' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.tan'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.tan'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC1A.tan');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.tan'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.tan'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC1A.tan');
        }
        if ('cim:DiscExcContIEEEDEC1A.tw5' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.tw5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.tw5'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC1A.tw5');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.tw5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.tw5'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC1A.tw5');
        }
        if ('cim:DiscExcContIEEEDEC1A.vsmax' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.vsmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vsmax'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vsmax');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.vsmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vsmax'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vsmax');
        }
        if ('cim:DiscExcContIEEEDEC1A.vsmin' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.vsmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vsmin'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vsmin');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.vsmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vsmin'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vsmin');
        }
        if ('cim:DiscExcContIEEEDEC1A.td' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.td'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC1A.td');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.td'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC1A.td');
        }
        if ('cim:DiscExcContIEEEDEC1A.tl1' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.tl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.tl1'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC1A.tl1');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.tl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.tl1'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC1A.tl1');
        }
        if ('cim:DiscExcContIEEEDEC1A.tl2' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.tl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.tl2'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC1A.tl2');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.tl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.tl2'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC1A.tl2');
        }
        if ('cim:DiscExcContIEEEDEC1A.vtm' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.vtm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vtm'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vtm');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.vtm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vtm'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vtm');
        }
        if ('cim:DiscExcContIEEEDEC1A.vtn' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.vtn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vtn'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vtn');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.vtn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vtn'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vtn');
        }
        if ('cim:DiscExcContIEEEDEC1A.vanmax' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC1A.vanmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vanmax'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vanmax');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC1A.vanmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC1A.vanmax'], 'cim:PU', 'cim:DiscExcContIEEEDEC1A.vanmax');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DiscExcContIEEEDEC1A.vtlmt", "cim:DiscExcContIEEEDEC1A.vomax", "cim:DiscExcContIEEEDEC1A.vomin", "cim:DiscExcContIEEEDEC1A.ketl", "cim:DiscExcContIEEEDEC1A.vtc", "cim:DiscExcContIEEEDEC1A.val", "cim:DiscExcContIEEEDEC1A.esc", "cim:DiscExcContIEEEDEC1A.kan", "cim:DiscExcContIEEEDEC1A.tan", "cim:DiscExcContIEEEDEC1A.tw5", "cim:DiscExcContIEEEDEC1A.vsmax", "cim:DiscExcContIEEEDEC1A.vsmin", "cim:DiscExcContIEEEDEC1A.td", "cim:DiscExcContIEEEDEC1A.tl1", "cim:DiscExcContIEEEDEC1A.tl2", "cim:DiscExcContIEEEDEC1A.vtm", "cim:DiscExcContIEEEDEC1A.vtn", "cim:DiscExcContIEEEDEC1A.vanmax"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DiscontinuousExcitationControlDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DiscExcContIEEEDEC1A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DiscExcContIEEEDEC1A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DiscExcContIEEEDEC1A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DiscExcContIEEEDEC1A;
  }(DiscontinuousExcitationControlDynamics);
  _defineProperty(DiscExcContIEEEDEC1A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'vtlmt': [CGMESProfile.shortNames.DY],
    'vomax': [CGMESProfile.shortNames.DY],
    'vomin': [CGMESProfile.shortNames.DY],
    'ketl': [CGMESProfile.shortNames.DY],
    'vtc': [CGMESProfile.shortNames.DY],
    'val': [CGMESProfile.shortNames.DY],
    'esc': [CGMESProfile.shortNames.DY],
    'kan': [CGMESProfile.shortNames.DY],
    'tan': [CGMESProfile.shortNames.DY],
    'tw5': [CGMESProfile.shortNames.DY],
    'vsmax': [CGMESProfile.shortNames.DY],
    'vsmin': [CGMESProfile.shortNames.DY],
    'td': [CGMESProfile.shortNames.DY],
    'tl1': [CGMESProfile.shortNames.DY],
    'tl2': [CGMESProfile.shortNames.DY],
    'vtm': [CGMESProfile.shortNames.DY],
    'vtn': [CGMESProfile.shortNames.DY],
    'vanmax': [CGMESProfile.shortNames.DY]
  });

  var DiscExcContIEEEDEC2A = /*#__PURE__*/function (_DiscontinuousExcitat) {
    _inherits(DiscExcContIEEEDEC2A, _DiscontinuousExcitat);
    var _super = _createSuper(DiscExcContIEEEDEC2A);
    function DiscExcContIEEEDEC2A() {
      _classCallCheck(this, DiscExcContIEEEDEC2A);
      return _super.apply(this, arguments);
    }
    _createClass(DiscExcContIEEEDEC2A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DiscExcContIEEEDEC2A";
        var attributeEntries = DiscontinuousExcitationControlDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:DiscExcContIEEEDEC2A.vk' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC2A.vk'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC2A.vk'], 'cim:PU', 'cim:DiscExcContIEEEDEC2A.vk');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC2A.vk'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC2A.vk'], 'cim:PU', 'cim:DiscExcContIEEEDEC2A.vk');
        }
        if ('cim:DiscExcContIEEEDEC2A.td1' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC2A.td1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC2A.td1'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC2A.td1');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC2A.td1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC2A.td1'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC2A.td1');
        }
        if ('cim:DiscExcContIEEEDEC2A.td2' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC2A.td2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC2A.td2'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC2A.td2');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC2A.td2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC2A.td2'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC2A.td2');
        }
        if ('cim:DiscExcContIEEEDEC2A.vdmin' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC2A.vdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC2A.vdmin'], 'cim:PU', 'cim:DiscExcContIEEEDEC2A.vdmin');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC2A.vdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC2A.vdmin'], 'cim:PU', 'cim:DiscExcContIEEEDEC2A.vdmin');
        }
        if ('cim:DiscExcContIEEEDEC2A.vdmax' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC2A.vdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC2A.vdmax'], 'cim:PU', 'cim:DiscExcContIEEEDEC2A.vdmax');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC2A.vdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC2A.vdmax'], 'cim:PU', 'cim:DiscExcContIEEEDEC2A.vdmax');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DiscExcContIEEEDEC2A.vk", "cim:DiscExcContIEEEDEC2A.td1", "cim:DiscExcContIEEEDEC2A.td2", "cim:DiscExcContIEEEDEC2A.vdmin", "cim:DiscExcContIEEEDEC2A.vdmax"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DiscontinuousExcitationControlDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DiscExcContIEEEDEC2A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DiscExcContIEEEDEC2A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DiscExcContIEEEDEC2A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DiscExcContIEEEDEC2A;
  }(DiscontinuousExcitationControlDynamics);
  _defineProperty(DiscExcContIEEEDEC2A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'vk': [CGMESProfile.shortNames.DY],
    'td1': [CGMESProfile.shortNames.DY],
    'td2': [CGMESProfile.shortNames.DY],
    'vdmin': [CGMESProfile.shortNames.DY],
    'vdmax': [CGMESProfile.shortNames.DY]
  });

  var DiscExcContIEEEDEC3A = /*#__PURE__*/function (_DiscontinuousExcitat) {
    _inherits(DiscExcContIEEEDEC3A, _DiscontinuousExcitat);
    var _super = _createSuper(DiscExcContIEEEDEC3A);
    function DiscExcContIEEEDEC3A() {
      _classCallCheck(this, DiscExcContIEEEDEC3A);
      return _super.apply(this, arguments);
    }
    _createClass(DiscExcContIEEEDEC3A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DiscExcContIEEEDEC3A";
        var attributeEntries = DiscontinuousExcitationControlDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:DiscExcContIEEEDEC3A.vtmin' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC3A.vtmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC3A.vtmin'], 'cim:PU', 'cim:DiscExcContIEEEDEC3A.vtmin');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC3A.vtmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC3A.vtmin'], 'cim:PU', 'cim:DiscExcContIEEEDEC3A.vtmin');
        }
        if ('cim:DiscExcContIEEEDEC3A.tdr' in object) {
          attributeEntries['filledEntries']['cim:DiscExcContIEEEDEC3A.tdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC3A.tdr'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC3A.tdr');
        } else {
          attributeEntries['emptyEntries']['cim:DiscExcContIEEEDEC3A.tdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscExcContIEEEDEC3A.tdr'], 'cim:Seconds', 'cim:DiscExcContIEEEDEC3A.tdr');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DiscExcContIEEEDEC3A.vtmin", "cim:DiscExcContIEEEDEC3A.tdr"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DiscontinuousExcitationControlDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DiscExcContIEEEDEC3A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DiscExcContIEEEDEC3A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DiscExcContIEEEDEC3A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DiscExcContIEEEDEC3A;
  }(DiscontinuousExcitationControlDynamics);
  _defineProperty(DiscExcContIEEEDEC3A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'vtmin': [CGMESProfile.shortNames.DY],
    'tdr': [CGMESProfile.shortNames.DY]
  });

  var Disconnector = /*#__PURE__*/function (_Switch) {
    _inherits(Disconnector, _Switch);
    var _super = _createSuper(Disconnector);
    function Disconnector() {
      _classCallCheck(this, Disconnector);
      return _super.apply(this, arguments);
    }
    _createClass(Disconnector, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Disconnector";
        var attributeEntries = Switch.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Switch.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Disconnector.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Disconnector: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Disconnector.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Disconnector;
  }(Switch);
  _defineProperty(Disconnector, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var DiscontinuousExcitationControlUserDefined = /*#__PURE__*/function (_DiscontinuousExcitat) {
    _inherits(DiscontinuousExcitationControlUserDefined, _DiscontinuousExcitat);
    var _super = _createSuper(DiscontinuousExcitationControlUserDefined);
    function DiscontinuousExcitationControlUserDefined() {
      _classCallCheck(this, DiscontinuousExcitationControlUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(DiscontinuousExcitationControlUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DiscontinuousExcitationControlUserDefined";
        var attributeEntries = DiscontinuousExcitationControlDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:DiscontinuousExcitationControlUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:DiscontinuousExcitationControlUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscontinuousExcitationControlUserDefined.proprietary'], 'cim:Boolean', 'cim:DiscontinuousExcitationControlUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:DiscontinuousExcitationControlUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscontinuousExcitationControlUserDefined.proprietary'], 'cim:Boolean', 'cim:DiscontinuousExcitationControlUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DiscontinuousExcitationControlUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DiscontinuousExcitationControlDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DiscontinuousExcitationControlUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DiscontinuousExcitationControlUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DiscontinuousExcitationControlUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DiscontinuousExcitationControlUserDefined;
  }(DiscontinuousExcitationControlDynamics);
  _defineProperty(DiscontinuousExcitationControlUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var Discrete = /*#__PURE__*/function (_Measurement) {
    _inherits(Discrete, _Measurement);
    var _super = _createSuper(Discrete);
    function Discrete() {
      _classCallCheck(this, Discrete);
      return _super.apply(this, arguments);
    }
    _createClass(Discrete, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Discrete";
        var attributeEntries = Measurement.attributeHTML(object, cimmenu, classType);
        if ('cim:Discrete.ValueAliasSet' in object) {
          attributeEntries['filledEntries']['cim:Discrete.ValueAliasSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Discrete.ValueAliasSet'], 'cim:ValueAliasSet', 'cim:Discrete.ValueAliasSet');
        } else {
          attributeEntries['emptyEntries']['cim:Discrete.ValueAliasSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Discrete.ValueAliasSet'], 'cim:ValueAliasSet', 'cim:Discrete.ValueAliasSet');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Discrete.ValueAliasSet"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Measurement.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Discrete.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Discrete: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Discrete.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Discrete;
  }(Measurement);
  _defineProperty(Discrete, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'ValueAliasSet': [CGMESProfile.shortNames.EQ]
  });

  var DiscreteValue = /*#__PURE__*/function (_MeasurementValue) {
    _inherits(DiscreteValue, _MeasurementValue);
    var _super = _createSuper(DiscreteValue);
    function DiscreteValue() {
      _classCallCheck(this, DiscreteValue);
      return _super.apply(this, arguments);
    }
    _createClass(DiscreteValue, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DiscreteValue";
        var attributeEntries = MeasurementValue.attributeHTML(object, cimmenu, classType);
        if ('cim:DiscreteValue.Discrete' in object) {
          attributeEntries['filledEntries']['cim:DiscreteValue.Discrete'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscreteValue.Discrete'], 'cim:Discrete', 'cim:DiscreteValue.Discrete');
        } else {
          attributeEntries['emptyEntries']['cim:DiscreteValue.Discrete'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscreteValue.Discrete'], 'cim:Discrete', 'cim:DiscreteValue.Discrete');
        }
        if ('cim:DiscreteValue.value' in object) {
          attributeEntries['filledEntries']['cim:DiscreteValue.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscreteValue.value'], 'cim:Integer', 'cim:DiscreteValue.value');
        } else {
          attributeEntries['emptyEntries']['cim:DiscreteValue.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DiscreteValue.value'], 'cim:Integer', 'cim:DiscreteValue.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DiscreteValue.Discrete", "cim:DiscreteValue.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (MeasurementValue.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DiscreteValue.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DiscreteValue: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DiscreteValue.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DiscreteValue;
  }(MeasurementValue);
  _defineProperty(DiscreteValue, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'Discrete': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$D = [{
    "value": "--"
  }, {
    "value": "DroopSignalFeedbackKind.electricalPower",
    "label": "electricalPower"
  }, {
    "value": "DroopSignalFeedbackKind.none",
    "label": "none"
  }, {
    "value": "DroopSignalFeedbackKind.fuelValveStroke",
    "label": "fuelValveStroke"
  }, {
    "value": "DroopSignalFeedbackKind.governorOutput",
    "label": "governorOutput"
  }];
  var DroopSignalFeedbackKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(DroopSignalFeedbackKind, _BaseClass);
    var _super = _createSuper(DroopSignalFeedbackKind);
    function DroopSignalFeedbackKind() {
      _classCallCheck(this, DroopSignalFeedbackKind);
      return _super.apply(this, arguments);
    }
    _createClass(DroopSignalFeedbackKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DroopSignalFeedbackKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DroopSignalFeedbackKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DroopSignalFeedbackKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DroopSignalFeedbackKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$D;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DroopSignalFeedbackKind;
  }(BaseClass);
  _defineProperty(DroopSignalFeedbackKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var DynamicsVersion = /*#__PURE__*/function (_BaseClass) {
    _inherits(DynamicsVersion, _BaseClass);
    var _super = _createSuper(DynamicsVersion);
    function DynamicsVersion() {
      _classCallCheck(this, DynamicsVersion);
      return _super.apply(this, arguments);
    }
    _createClass(DynamicsVersion, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "DynamicsVersion";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:DynamicsVersion.baseUML' in object) {
          attributeEntries['filledEntries']['cim:DynamicsVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.baseUML'], 'cim:String', 'cim:DynamicsVersion.baseUML');
        } else {
          attributeEntries['emptyEntries']['cim:DynamicsVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.baseUML'], 'cim:String', 'cim:DynamicsVersion.baseUML');
        }
        if ('cim:DynamicsVersion.baseURI' in object) {
          attributeEntries['filledEntries']['cim:DynamicsVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.baseURI'], 'cim:String', 'cim:DynamicsVersion.baseURI');
        } else {
          attributeEntries['emptyEntries']['cim:DynamicsVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.baseURI'], 'cim:String', 'cim:DynamicsVersion.baseURI');
        }
        if ('cim:DynamicsVersion.date' in object) {
          attributeEntries['filledEntries']['cim:DynamicsVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.date'], 'cim:Date', 'cim:DynamicsVersion.date');
        } else {
          attributeEntries['emptyEntries']['cim:DynamicsVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.date'], 'cim:Date', 'cim:DynamicsVersion.date');
        }
        if ('cim:DynamicsVersion.differenceModelURI' in object) {
          attributeEntries['filledEntries']['cim:DynamicsVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.differenceModelURI'], 'cim:String', 'cim:DynamicsVersion.differenceModelURI');
        } else {
          attributeEntries['emptyEntries']['cim:DynamicsVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.differenceModelURI'], 'cim:String', 'cim:DynamicsVersion.differenceModelURI');
        }
        if ('cim:DynamicsVersion.entsoeUML' in object) {
          attributeEntries['filledEntries']['cim:DynamicsVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.entsoeUML'], 'cim:String', 'cim:DynamicsVersion.entsoeUML');
        } else {
          attributeEntries['emptyEntries']['cim:DynamicsVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.entsoeUML'], 'cim:String', 'cim:DynamicsVersion.entsoeUML');
        }
        if ('cim:DynamicsVersion.entsoeURI' in object) {
          attributeEntries['filledEntries']['cim:DynamicsVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.entsoeURI'], 'cim:String', 'cim:DynamicsVersion.entsoeURI');
        } else {
          attributeEntries['emptyEntries']['cim:DynamicsVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.entsoeURI'], 'cim:String', 'cim:DynamicsVersion.entsoeURI');
        }
        if ('cim:DynamicsVersion.modelDescriptionURI' in object) {
          attributeEntries['filledEntries']['cim:DynamicsVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.modelDescriptionURI'], 'cim:String', 'cim:DynamicsVersion.modelDescriptionURI');
        } else {
          attributeEntries['emptyEntries']['cim:DynamicsVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.modelDescriptionURI'], 'cim:String', 'cim:DynamicsVersion.modelDescriptionURI');
        }
        if ('cim:DynamicsVersion.namespaceRDF' in object) {
          attributeEntries['filledEntries']['cim:DynamicsVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.namespaceRDF'], 'cim:String', 'cim:DynamicsVersion.namespaceRDF');
        } else {
          attributeEntries['emptyEntries']['cim:DynamicsVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.namespaceRDF'], 'cim:String', 'cim:DynamicsVersion.namespaceRDF');
        }
        if ('cim:DynamicsVersion.namespaceUML' in object) {
          attributeEntries['filledEntries']['cim:DynamicsVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.namespaceUML'], 'cim:String', 'cim:DynamicsVersion.namespaceUML');
        } else {
          attributeEntries['emptyEntries']['cim:DynamicsVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.namespaceUML'], 'cim:String', 'cim:DynamicsVersion.namespaceUML');
        }
        if ('cim:DynamicsVersion.shortName' in object) {
          attributeEntries['filledEntries']['cim:DynamicsVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.shortName'], 'cim:String', 'cim:DynamicsVersion.shortName');
        } else {
          attributeEntries['emptyEntries']['cim:DynamicsVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['DynamicsVersion.shortName'], 'cim:String', 'cim:DynamicsVersion.shortName');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:DynamicsVersion.baseUML", "cim:DynamicsVersion.baseURI", "cim:DynamicsVersion.date", "cim:DynamicsVersion.differenceModelURI", "cim:DynamicsVersion.entsoeUML", "cim:DynamicsVersion.entsoeURI", "cim:DynamicsVersion.modelDescriptionURI", "cim:DynamicsVersion.namespaceRDF", "cim:DynamicsVersion.namespaceUML", "cim:DynamicsVersion.shortName"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!DynamicsVersion.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class DynamicsVersion: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = DynamicsVersion.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return DynamicsVersion;
  }(BaseClass);
  _defineProperty(DynamicsVersion, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'baseUML': [CGMESProfile.shortNames.DY],
    'baseURI': [CGMESProfile.shortNames.DY],
    'date': [CGMESProfile.shortNames.DY],
    'differenceModelURI': [CGMESProfile.shortNames.DY],
    'entsoeUML': [CGMESProfile.shortNames.DY],
    'entsoeURI': [CGMESProfile.shortNames.DY],
    'modelDescriptionURI': [CGMESProfile.shortNames.DY],
    'namespaceRDF': [CGMESProfile.shortNames.DY],
    'namespaceUML': [CGMESProfile.shortNames.DY],
    'shortName': [CGMESProfile.shortNames.DY]
  });

  var EarthFaultCompensator = /*#__PURE__*/function (_ConductingEquipment) {
    _inherits(EarthFaultCompensator, _ConductingEquipment);
    var _super = _createSuper(EarthFaultCompensator);
    function EarthFaultCompensator() {
      _classCallCheck(this, EarthFaultCompensator);
      return _super.apply(this, arguments);
    }
    _createClass(EarthFaultCompensator, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EarthFaultCompensator";
        var attributeEntries = ConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:EarthFaultCompensator.r' in object) {
          attributeEntries['filledEntries']['cim:EarthFaultCompensator.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EarthFaultCompensator.r'], 'cim:Resistance', 'cim:EarthFaultCompensator.r');
        } else {
          attributeEntries['emptyEntries']['cim:EarthFaultCompensator.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EarthFaultCompensator.r'], 'cim:Resistance', 'cim:EarthFaultCompensator.r');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:EarthFaultCompensator.r"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EarthFaultCompensator.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EarthFaultCompensator: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EarthFaultCompensator.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["GroundingImpedance", "PetersenCoil"];
        return subClasses;
      }
    }]);
    return EarthFaultCompensator;
  }(ConductingEquipment);
  _defineProperty(EarthFaultCompensator, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'r': [CGMESProfile.shortNames.EQ]
  });

  var EnergyArea = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(EnergyArea, _IdentifiedObject);
    var _super = _createSuper(EnergyArea);
    function EnergyArea() {
      _classCallCheck(this, EnergyArea);
      return _super.apply(this, arguments);
    }
    _createClass(EnergyArea, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EnergyArea";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EnergyArea.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EnergyArea: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EnergyArea.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["LoadArea", "SubLoadArea"];
        return subClasses;
      }
    }]);
    return EnergyArea;
  }(IdentifiedObject);
  _defineProperty(EnergyArea, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var EnergySchedulingType = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(EnergySchedulingType, _IdentifiedObject);
    var _super = _createSuper(EnergySchedulingType);
    function EnergySchedulingType() {
      _classCallCheck(this, EnergySchedulingType);
      return _super.apply(this, arguments);
    }
    _createClass(EnergySchedulingType, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EnergySchedulingType";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EnergySchedulingType.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EnergySchedulingType: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EnergySchedulingType.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return EnergySchedulingType;
  }(IdentifiedObject);
  _defineProperty(EnergySchedulingType, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD]
  });

  var EnergySource = /*#__PURE__*/function (_ConductingEquipment) {
    _inherits(EnergySource, _ConductingEquipment);
    var _super = _createSuper(EnergySource);
    function EnergySource() {
      _classCallCheck(this, EnergySource);
      return _super.apply(this, arguments);
    }
    _createClass(EnergySource, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EnergySource";
        var attributeEntries = ConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:EnergySource.EnergySchedulingType' in object) {
          attributeEntries['filledEntries']['cim:EnergySource.EnergySchedulingType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.EnergySchedulingType'], 'cim:EnergySchedulingType', 'cim:EnergySource.EnergySchedulingType');
        } else {
          attributeEntries['emptyEntries']['cim:EnergySource.EnergySchedulingType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.EnergySchedulingType'], 'cim:EnergySchedulingType', 'cim:EnergySource.EnergySchedulingType');
        }
        if ('cim:EnergySource.nominalVoltage' in object) {
          attributeEntries['filledEntries']['cim:EnergySource.nominalVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.nominalVoltage'], 'cim:Voltage', 'cim:EnergySource.nominalVoltage');
        } else {
          attributeEntries['emptyEntries']['cim:EnergySource.nominalVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.nominalVoltage'], 'cim:Voltage', 'cim:EnergySource.nominalVoltage');
        }
        if ('cim:EnergySource.r' in object) {
          attributeEntries['filledEntries']['cim:EnergySource.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.r'], 'cim:Resistance', 'cim:EnergySource.r');
        } else {
          attributeEntries['emptyEntries']['cim:EnergySource.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.r'], 'cim:Resistance', 'cim:EnergySource.r');
        }
        if ('cim:EnergySource.r0' in object) {
          attributeEntries['filledEntries']['cim:EnergySource.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.r0'], 'cim:Resistance', 'cim:EnergySource.r0');
        } else {
          attributeEntries['emptyEntries']['cim:EnergySource.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.r0'], 'cim:Resistance', 'cim:EnergySource.r0');
        }
        if ('cim:EnergySource.rn' in object) {
          attributeEntries['filledEntries']['cim:EnergySource.rn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.rn'], 'cim:Resistance', 'cim:EnergySource.rn');
        } else {
          attributeEntries['emptyEntries']['cim:EnergySource.rn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.rn'], 'cim:Resistance', 'cim:EnergySource.rn');
        }
        if ('cim:EnergySource.voltageAngle' in object) {
          attributeEntries['filledEntries']['cim:EnergySource.voltageAngle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.voltageAngle'], 'cim:AngleRadians', 'cim:EnergySource.voltageAngle');
        } else {
          attributeEntries['emptyEntries']['cim:EnergySource.voltageAngle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.voltageAngle'], 'cim:AngleRadians', 'cim:EnergySource.voltageAngle');
        }
        if ('cim:EnergySource.voltageMagnitude' in object) {
          attributeEntries['filledEntries']['cim:EnergySource.voltageMagnitude'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.voltageMagnitude'], 'cim:Voltage', 'cim:EnergySource.voltageMagnitude');
        } else {
          attributeEntries['emptyEntries']['cim:EnergySource.voltageMagnitude'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.voltageMagnitude'], 'cim:Voltage', 'cim:EnergySource.voltageMagnitude');
        }
        if ('cim:EnergySource.x' in object) {
          attributeEntries['filledEntries']['cim:EnergySource.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.x'], 'cim:Reactance', 'cim:EnergySource.x');
        } else {
          attributeEntries['emptyEntries']['cim:EnergySource.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.x'], 'cim:Reactance', 'cim:EnergySource.x');
        }
        if ('cim:EnergySource.x0' in object) {
          attributeEntries['filledEntries']['cim:EnergySource.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.x0'], 'cim:Reactance', 'cim:EnergySource.x0');
        } else {
          attributeEntries['emptyEntries']['cim:EnergySource.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.x0'], 'cim:Reactance', 'cim:EnergySource.x0');
        }
        if ('cim:EnergySource.xn' in object) {
          attributeEntries['filledEntries']['cim:EnergySource.xn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.xn'], 'cim:Reactance', 'cim:EnergySource.xn');
        } else {
          attributeEntries['emptyEntries']['cim:EnergySource.xn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.xn'], 'cim:Reactance', 'cim:EnergySource.xn');
        }
        if ('cim:EnergySource.activePower' in object) {
          attributeEntries['filledEntries']['cim:EnergySource.activePower'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.activePower'], 'cim:ActivePower', 'cim:EnergySource.activePower');
        } else {
          attributeEntries['emptyEntries']['cim:EnergySource.activePower'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.activePower'], 'cim:ActivePower', 'cim:EnergySource.activePower');
        }
        if ('cim:EnergySource.reactivePower' in object) {
          attributeEntries['filledEntries']['cim:EnergySource.reactivePower'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.reactivePower'], 'cim:ReactivePower', 'cim:EnergySource.reactivePower');
        } else {
          attributeEntries['emptyEntries']['cim:EnergySource.reactivePower'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EnergySource.reactivePower'], 'cim:ReactivePower', 'cim:EnergySource.reactivePower');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:EnergySource.EnergySchedulingType", "cim:EnergySource.nominalVoltage", "cim:EnergySource.r", "cim:EnergySource.r0", "cim:EnergySource.rn", "cim:EnergySource.voltageAngle", "cim:EnergySource.voltageMagnitude", "cim:EnergySource.x", "cim:EnergySource.x0", "cim:EnergySource.xn", "cim:EnergySource.activePower", "cim:EnergySource.reactivePower"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EnergySource.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EnergySource: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EnergySource.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return EnergySource;
  }(ConductingEquipment);
  _defineProperty(EnergySource, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.EQ_BD],
    'EnergySchedulingType': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD],
    'nominalVoltage': [CGMESProfile.shortNames.EQ],
    'r': [CGMESProfile.shortNames.EQ],
    'r0': [CGMESProfile.shortNames.EQ],
    'rn': [CGMESProfile.shortNames.EQ],
    'voltageAngle': [CGMESProfile.shortNames.EQ],
    'voltageMagnitude': [CGMESProfile.shortNames.EQ],
    'x': [CGMESProfile.shortNames.EQ],
    'x0': [CGMESProfile.shortNames.EQ],
    'xn': [CGMESProfile.shortNames.EQ],
    'activePower': [CGMESProfile.shortNames.SSH],
    'reactivePower': [CGMESProfile.shortNames.SSH]
  });

  var EquipmentBoundaryVersion = /*#__PURE__*/function (_BaseClass) {
    _inherits(EquipmentBoundaryVersion, _BaseClass);
    var _super = _createSuper(EquipmentBoundaryVersion);
    function EquipmentBoundaryVersion() {
      _classCallCheck(this, EquipmentBoundaryVersion);
      return _super.apply(this, arguments);
    }
    _createClass(EquipmentBoundaryVersion, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EquipmentBoundaryVersion";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:EquipmentBoundaryVersion.baseUML' in object) {
          attributeEntries['filledEntries']['cim:EquipmentBoundaryVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.baseUML'], 'cim:String', 'cim:EquipmentBoundaryVersion.baseUML');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentBoundaryVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.baseUML'], 'cim:String', 'cim:EquipmentBoundaryVersion.baseUML');
        }
        if ('cim:EquipmentBoundaryVersion.baseURI' in object) {
          attributeEntries['filledEntries']['cim:EquipmentBoundaryVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.baseURI'], 'cim:String', 'cim:EquipmentBoundaryVersion.baseURI');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentBoundaryVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.baseURI'], 'cim:String', 'cim:EquipmentBoundaryVersion.baseURI');
        }
        if ('cim:EquipmentBoundaryVersion.date' in object) {
          attributeEntries['filledEntries']['cim:EquipmentBoundaryVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.date'], 'cim:Date', 'cim:EquipmentBoundaryVersion.date');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentBoundaryVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.date'], 'cim:Date', 'cim:EquipmentBoundaryVersion.date');
        }
        if ('cim:EquipmentBoundaryVersion.differenceModelURI' in object) {
          attributeEntries['filledEntries']['cim:EquipmentBoundaryVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.differenceModelURI'], 'cim:String', 'cim:EquipmentBoundaryVersion.differenceModelURI');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentBoundaryVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.differenceModelURI'], 'cim:String', 'cim:EquipmentBoundaryVersion.differenceModelURI');
        }
        if ('cim:EquipmentBoundaryVersion.entsoeUML' in object) {
          attributeEntries['filledEntries']['cim:EquipmentBoundaryVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.entsoeUML'], 'cim:String', 'cim:EquipmentBoundaryVersion.entsoeUML');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentBoundaryVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.entsoeUML'], 'cim:String', 'cim:EquipmentBoundaryVersion.entsoeUML');
        }
        if ('cim:EquipmentBoundaryVersion.entsoeURIcore' in object) {
          attributeEntries['filledEntries']['cim:EquipmentBoundaryVersion.entsoeURIcore'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.entsoeURIcore'], 'cim:String', 'cim:EquipmentBoundaryVersion.entsoeURIcore');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentBoundaryVersion.entsoeURIcore'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.entsoeURIcore'], 'cim:String', 'cim:EquipmentBoundaryVersion.entsoeURIcore');
        }
        if ('cim:EquipmentBoundaryVersion.entsoeURIoperation' in object) {
          attributeEntries['filledEntries']['cim:EquipmentBoundaryVersion.entsoeURIoperation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.entsoeURIoperation'], 'cim:String', 'cim:EquipmentBoundaryVersion.entsoeURIoperation');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentBoundaryVersion.entsoeURIoperation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.entsoeURIoperation'], 'cim:String', 'cim:EquipmentBoundaryVersion.entsoeURIoperation');
        }
        if ('cim:EquipmentBoundaryVersion.modelDescriptionURI' in object) {
          attributeEntries['filledEntries']['cim:EquipmentBoundaryVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.modelDescriptionURI'], 'cim:String', 'cim:EquipmentBoundaryVersion.modelDescriptionURI');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentBoundaryVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.modelDescriptionURI'], 'cim:String', 'cim:EquipmentBoundaryVersion.modelDescriptionURI');
        }
        if ('cim:EquipmentBoundaryVersion.namespaceRDF' in object) {
          attributeEntries['filledEntries']['cim:EquipmentBoundaryVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.namespaceRDF'], 'cim:String', 'cim:EquipmentBoundaryVersion.namespaceRDF');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentBoundaryVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.namespaceRDF'], 'cim:String', 'cim:EquipmentBoundaryVersion.namespaceRDF');
        }
        if ('cim:EquipmentBoundaryVersion.namespaceUML' in object) {
          attributeEntries['filledEntries']['cim:EquipmentBoundaryVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.namespaceUML'], 'cim:String', 'cim:EquipmentBoundaryVersion.namespaceUML');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentBoundaryVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.namespaceUML'], 'cim:String', 'cim:EquipmentBoundaryVersion.namespaceUML');
        }
        if ('cim:EquipmentBoundaryVersion.shortName' in object) {
          attributeEntries['filledEntries']['cim:EquipmentBoundaryVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.shortName'], 'cim:String', 'cim:EquipmentBoundaryVersion.shortName');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentBoundaryVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentBoundaryVersion.shortName'], 'cim:String', 'cim:EquipmentBoundaryVersion.shortName');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:EquipmentBoundaryVersion.baseUML", "cim:EquipmentBoundaryVersion.baseURI", "cim:EquipmentBoundaryVersion.date", "cim:EquipmentBoundaryVersion.differenceModelURI", "cim:EquipmentBoundaryVersion.entsoeUML", "cim:EquipmentBoundaryVersion.entsoeURIcore", "cim:EquipmentBoundaryVersion.entsoeURIoperation", "cim:EquipmentBoundaryVersion.modelDescriptionURI", "cim:EquipmentBoundaryVersion.namespaceRDF", "cim:EquipmentBoundaryVersion.namespaceUML", "cim:EquipmentBoundaryVersion.shortName"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EquipmentBoundaryVersion.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EquipmentBoundaryVersion: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EquipmentBoundaryVersion.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return EquipmentBoundaryVersion;
  }(BaseClass);
  _defineProperty(EquipmentBoundaryVersion, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ_BD],
    'baseUML': [CGMESProfile.shortNames.EQ_BD],
    'baseURI': [CGMESProfile.shortNames.EQ_BD],
    'date': [CGMESProfile.shortNames.EQ_BD],
    'differenceModelURI': [CGMESProfile.shortNames.EQ_BD],
    'entsoeUML': [CGMESProfile.shortNames.EQ_BD],
    'entsoeURIcore': [CGMESProfile.shortNames.EQ_BD],
    'entsoeURIoperation': [CGMESProfile.shortNames.EQ_BD],
    'modelDescriptionURI': [CGMESProfile.shortNames.EQ_BD],
    'namespaceRDF': [CGMESProfile.shortNames.EQ_BD],
    'namespaceUML': [CGMESProfile.shortNames.EQ_BD],
    'shortName': [CGMESProfile.shortNames.EQ_BD]
  });

  var EquipmentVersion = /*#__PURE__*/function (_BaseClass) {
    _inherits(EquipmentVersion, _BaseClass);
    var _super = _createSuper(EquipmentVersion);
    function EquipmentVersion() {
      _classCallCheck(this, EquipmentVersion);
      return _super.apply(this, arguments);
    }
    _createClass(EquipmentVersion, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EquipmentVersion";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:EquipmentVersion.baseUML' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.baseUML'], 'cim:String', 'cim:EquipmentVersion.baseUML');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.baseUML'], 'cim:String', 'cim:EquipmentVersion.baseUML');
        }
        if ('cim:EquipmentVersion.baseURIcore' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.baseURIcore'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.baseURIcore'], 'cim:String', 'cim:EquipmentVersion.baseURIcore');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.baseURIcore'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.baseURIcore'], 'cim:String', 'cim:EquipmentVersion.baseURIcore');
        }
        if ('cim:EquipmentVersion.baseURIoperation' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.baseURIoperation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.baseURIoperation'], 'cim:String', 'cim:EquipmentVersion.baseURIoperation');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.baseURIoperation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.baseURIoperation'], 'cim:String', 'cim:EquipmentVersion.baseURIoperation');
        }
        if ('cim:EquipmentVersion.baseURIshortCircuit' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.baseURIshortCircuit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.baseURIshortCircuit'], 'cim:String', 'cim:EquipmentVersion.baseURIshortCircuit');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.baseURIshortCircuit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.baseURIshortCircuit'], 'cim:String', 'cim:EquipmentVersion.baseURIshortCircuit');
        }
        if ('cim:EquipmentVersion.date' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.date'], 'cim:Date', 'cim:EquipmentVersion.date');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.date'], 'cim:Date', 'cim:EquipmentVersion.date');
        }
        if ('cim:EquipmentVersion.differenceModelURI' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.differenceModelURI'], 'cim:String', 'cim:EquipmentVersion.differenceModelURI');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.differenceModelURI'], 'cim:String', 'cim:EquipmentVersion.differenceModelURI');
        }
        if ('cim:EquipmentVersion.entsoeUML' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.entsoeUML'], 'cim:String', 'cim:EquipmentVersion.entsoeUML');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.entsoeUML'], 'cim:String', 'cim:EquipmentVersion.entsoeUML');
        }
        if ('cim:EquipmentVersion.entsoeURIcore' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.entsoeURIcore'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.entsoeURIcore'], 'cim:String', 'cim:EquipmentVersion.entsoeURIcore');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.entsoeURIcore'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.entsoeURIcore'], 'cim:String', 'cim:EquipmentVersion.entsoeURIcore');
        }
        if ('cim:EquipmentVersion.entsoeURIoperation' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.entsoeURIoperation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.entsoeURIoperation'], 'cim:String', 'cim:EquipmentVersion.entsoeURIoperation');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.entsoeURIoperation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.entsoeURIoperation'], 'cim:String', 'cim:EquipmentVersion.entsoeURIoperation');
        }
        if ('cim:EquipmentVersion.entsoeURIshortCircuit' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.entsoeURIshortCircuit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.entsoeURIshortCircuit'], 'cim:String', 'cim:EquipmentVersion.entsoeURIshortCircuit');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.entsoeURIshortCircuit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.entsoeURIshortCircuit'], 'cim:String', 'cim:EquipmentVersion.entsoeURIshortCircuit');
        }
        if ('cim:EquipmentVersion.modelDescriptionURI' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.modelDescriptionURI'], 'cim:String', 'cim:EquipmentVersion.modelDescriptionURI');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.modelDescriptionURI'], 'cim:String', 'cim:EquipmentVersion.modelDescriptionURI');
        }
        if ('cim:EquipmentVersion.namespaceRDF' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.namespaceRDF'], 'cim:String', 'cim:EquipmentVersion.namespaceRDF');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.namespaceRDF'], 'cim:String', 'cim:EquipmentVersion.namespaceRDF');
        }
        if ('cim:EquipmentVersion.namespaceUML' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.namespaceUML'], 'cim:String', 'cim:EquipmentVersion.namespaceUML');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.namespaceUML'], 'cim:String', 'cim:EquipmentVersion.namespaceUML');
        }
        if ('cim:EquipmentVersion.shortName' in object) {
          attributeEntries['filledEntries']['cim:EquipmentVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.shortName'], 'cim:String', 'cim:EquipmentVersion.shortName');
        } else {
          attributeEntries['emptyEntries']['cim:EquipmentVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquipmentVersion.shortName'], 'cim:String', 'cim:EquipmentVersion.shortName');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:EquipmentVersion.baseUML", "cim:EquipmentVersion.baseURIcore", "cim:EquipmentVersion.baseURIoperation", "cim:EquipmentVersion.baseURIshortCircuit", "cim:EquipmentVersion.date", "cim:EquipmentVersion.differenceModelURI", "cim:EquipmentVersion.entsoeUML", "cim:EquipmentVersion.entsoeURIcore", "cim:EquipmentVersion.entsoeURIoperation", "cim:EquipmentVersion.entsoeURIshortCircuit", "cim:EquipmentVersion.modelDescriptionURI", "cim:EquipmentVersion.namespaceRDF", "cim:EquipmentVersion.namespaceUML", "cim:EquipmentVersion.shortName"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EquipmentVersion.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EquipmentVersion: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EquipmentVersion.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return EquipmentVersion;
  }(BaseClass);
  _defineProperty(EquipmentVersion, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'baseUML': [CGMESProfile.shortNames.EQ],
    'baseURIcore': [CGMESProfile.shortNames.EQ],
    'baseURIoperation': [CGMESProfile.shortNames.EQ],
    'baseURIshortCircuit': [CGMESProfile.shortNames.EQ],
    'date': [CGMESProfile.shortNames.EQ],
    'differenceModelURI': [CGMESProfile.shortNames.EQ],
    'entsoeUML': [CGMESProfile.shortNames.EQ],
    'entsoeURIcore': [CGMESProfile.shortNames.EQ],
    'entsoeURIoperation': [CGMESProfile.shortNames.EQ],
    'entsoeURIshortCircuit': [CGMESProfile.shortNames.EQ],
    'modelDescriptionURI': [CGMESProfile.shortNames.EQ],
    'namespaceRDF': [CGMESProfile.shortNames.EQ],
    'namespaceUML': [CGMESProfile.shortNames.EQ],
    'shortName': [CGMESProfile.shortNames.EQ]
  });

  var EquivalentEquipment = /*#__PURE__*/function (_ConductingEquipment) {
    _inherits(EquivalentEquipment, _ConductingEquipment);
    var _super = _createSuper(EquivalentEquipment);
    function EquivalentEquipment() {
      _classCallCheck(this, EquivalentEquipment);
      return _super.apply(this, arguments);
    }
    _createClass(EquivalentEquipment, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EquivalentEquipment";
        var attributeEntries = ConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:EquivalentEquipment.EquivalentNetwork' in object) {
          attributeEntries['filledEntries']['cim:EquivalentEquipment.EquivalentNetwork'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentEquipment.EquivalentNetwork'], 'cim:EquivalentNetwork', 'cim:EquivalentEquipment.EquivalentNetwork');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentEquipment.EquivalentNetwork'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentEquipment.EquivalentNetwork'], 'cim:EquivalentNetwork', 'cim:EquivalentEquipment.EquivalentNetwork');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:EquivalentEquipment.EquivalentNetwork"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EquivalentEquipment.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EquivalentEquipment: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EquivalentEquipment.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["EquivalentBranch", "EquivalentInjection", "EquivalentShunt"];
        return subClasses;
      }
    }]);
    return EquivalentEquipment;
  }(ConductingEquipment);
  _defineProperty(EquivalentEquipment, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'EquivalentNetwork': [CGMESProfile.shortNames.EQ]
  });

  var EquivalentBranch = /*#__PURE__*/function (_EquivalentEquipment) {
    _inherits(EquivalentBranch, _EquivalentEquipment);
    var _super = _createSuper(EquivalentBranch);
    function EquivalentBranch() {
      _classCallCheck(this, EquivalentBranch);
      return _super.apply(this, arguments);
    }
    _createClass(EquivalentBranch, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EquivalentBranch";
        var attributeEntries = EquivalentEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:EquivalentBranch.r' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.r'], 'cim:Resistance', 'cim:EquivalentBranch.r');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.r'], 'cim:Resistance', 'cim:EquivalentBranch.r');
        }
        if ('cim:EquivalentBranch.r21' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.r21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.r21'], 'cim:Resistance', 'cim:EquivalentBranch.r21');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.r21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.r21'], 'cim:Resistance', 'cim:EquivalentBranch.r21');
        }
        if ('cim:EquivalentBranch.x' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.x'], 'cim:Reactance', 'cim:EquivalentBranch.x');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.x'], 'cim:Reactance', 'cim:EquivalentBranch.x');
        }
        if ('cim:EquivalentBranch.x21' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.x21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.x21'], 'cim:Reactance', 'cim:EquivalentBranch.x21');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.x21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.x21'], 'cim:Reactance', 'cim:EquivalentBranch.x21');
        }
        if ('cim:EquivalentBranch.negativeR12' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.negativeR12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.negativeR12'], 'cim:Resistance', 'cim:EquivalentBranch.negativeR12');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.negativeR12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.negativeR12'], 'cim:Resistance', 'cim:EquivalentBranch.negativeR12');
        }
        if ('cim:EquivalentBranch.negativeR21' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.negativeR21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.negativeR21'], 'cim:Resistance', 'cim:EquivalentBranch.negativeR21');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.negativeR21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.negativeR21'], 'cim:Resistance', 'cim:EquivalentBranch.negativeR21');
        }
        if ('cim:EquivalentBranch.negativeX12' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.negativeX12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.negativeX12'], 'cim:Reactance', 'cim:EquivalentBranch.negativeX12');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.negativeX12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.negativeX12'], 'cim:Reactance', 'cim:EquivalentBranch.negativeX12');
        }
        if ('cim:EquivalentBranch.negativeX21' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.negativeX21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.negativeX21'], 'cim:Reactance', 'cim:EquivalentBranch.negativeX21');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.negativeX21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.negativeX21'], 'cim:Reactance', 'cim:EquivalentBranch.negativeX21');
        }
        if ('cim:EquivalentBranch.positiveR12' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.positiveR12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.positiveR12'], 'cim:Resistance', 'cim:EquivalentBranch.positiveR12');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.positiveR12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.positiveR12'], 'cim:Resistance', 'cim:EquivalentBranch.positiveR12');
        }
        if ('cim:EquivalentBranch.positiveR21' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.positiveR21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.positiveR21'], 'cim:Resistance', 'cim:EquivalentBranch.positiveR21');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.positiveR21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.positiveR21'], 'cim:Resistance', 'cim:EquivalentBranch.positiveR21');
        }
        if ('cim:EquivalentBranch.positiveX12' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.positiveX12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.positiveX12'], 'cim:Reactance', 'cim:EquivalentBranch.positiveX12');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.positiveX12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.positiveX12'], 'cim:Reactance', 'cim:EquivalentBranch.positiveX12');
        }
        if ('cim:EquivalentBranch.positiveX21' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.positiveX21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.positiveX21'], 'cim:Reactance', 'cim:EquivalentBranch.positiveX21');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.positiveX21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.positiveX21'], 'cim:Reactance', 'cim:EquivalentBranch.positiveX21');
        }
        if ('cim:EquivalentBranch.zeroR12' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.zeroR12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.zeroR12'], 'cim:Resistance', 'cim:EquivalentBranch.zeroR12');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.zeroR12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.zeroR12'], 'cim:Resistance', 'cim:EquivalentBranch.zeroR12');
        }
        if ('cim:EquivalentBranch.zeroR21' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.zeroR21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.zeroR21'], 'cim:Resistance', 'cim:EquivalentBranch.zeroR21');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.zeroR21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.zeroR21'], 'cim:Resistance', 'cim:EquivalentBranch.zeroR21');
        }
        if ('cim:EquivalentBranch.zeroX12' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.zeroX12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.zeroX12'], 'cim:Reactance', 'cim:EquivalentBranch.zeroX12');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.zeroX12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.zeroX12'], 'cim:Reactance', 'cim:EquivalentBranch.zeroX12');
        }
        if ('cim:EquivalentBranch.zeroX21' in object) {
          attributeEntries['filledEntries']['cim:EquivalentBranch.zeroX21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.zeroX21'], 'cim:Reactance', 'cim:EquivalentBranch.zeroX21');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentBranch.zeroX21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentBranch.zeroX21'], 'cim:Reactance', 'cim:EquivalentBranch.zeroX21');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:EquivalentBranch.r", "cim:EquivalentBranch.r21", "cim:EquivalentBranch.x", "cim:EquivalentBranch.x21", "cim:EquivalentBranch.negativeR12", "cim:EquivalentBranch.negativeR21", "cim:EquivalentBranch.negativeX12", "cim:EquivalentBranch.negativeX21", "cim:EquivalentBranch.positiveR12", "cim:EquivalentBranch.positiveR21", "cim:EquivalentBranch.positiveX12", "cim:EquivalentBranch.positiveX21", "cim:EquivalentBranch.zeroR12", "cim:EquivalentBranch.zeroR21", "cim:EquivalentBranch.zeroX12", "cim:EquivalentBranch.zeroX21"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EquivalentEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EquivalentBranch.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EquivalentBranch: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EquivalentBranch.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return EquivalentBranch;
  }(EquivalentEquipment);
  _defineProperty(EquivalentBranch, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'r': [CGMESProfile.shortNames.EQ],
    'r21': [CGMESProfile.shortNames.EQ],
    'x': [CGMESProfile.shortNames.EQ],
    'x21': [CGMESProfile.shortNames.EQ],
    'negativeR12': [CGMESProfile.shortNames.EQ],
    'negativeR21': [CGMESProfile.shortNames.EQ],
    'negativeX12': [CGMESProfile.shortNames.EQ],
    'negativeX21': [CGMESProfile.shortNames.EQ],
    'positiveR12': [CGMESProfile.shortNames.EQ],
    'positiveR21': [CGMESProfile.shortNames.EQ],
    'positiveX12': [CGMESProfile.shortNames.EQ],
    'positiveX21': [CGMESProfile.shortNames.EQ],
    'zeroR12': [CGMESProfile.shortNames.EQ],
    'zeroR21': [CGMESProfile.shortNames.EQ],
    'zeroX12': [CGMESProfile.shortNames.EQ],
    'zeroX21': [CGMESProfile.shortNames.EQ]
  });

  var EquivalentInjection = /*#__PURE__*/function (_EquivalentEquipment) {
    _inherits(EquivalentInjection, _EquivalentEquipment);
    var _super = _createSuper(EquivalentInjection);
    function EquivalentInjection() {
      _classCallCheck(this, EquivalentInjection);
      return _super.apply(this, arguments);
    }
    _createClass(EquivalentInjection, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EquivalentInjection";
        var attributeEntries = EquivalentEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:EquivalentInjection.ReactiveCapabilityCurve' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.ReactiveCapabilityCurve'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.ReactiveCapabilityCurve'], 'cim:ReactiveCapabilityCurve', 'cim:EquivalentInjection.ReactiveCapabilityCurve');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.ReactiveCapabilityCurve'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.ReactiveCapabilityCurve'], 'cim:ReactiveCapabilityCurve', 'cim:EquivalentInjection.ReactiveCapabilityCurve');
        }
        if ('cim:EquivalentInjection.maxP' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.maxP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.maxP'], 'cim:ActivePower', 'cim:EquivalentInjection.maxP');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.maxP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.maxP'], 'cim:ActivePower', 'cim:EquivalentInjection.maxP');
        }
        if ('cim:EquivalentInjection.maxQ' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.maxQ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.maxQ'], 'cim:ReactivePower', 'cim:EquivalentInjection.maxQ');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.maxQ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.maxQ'], 'cim:ReactivePower', 'cim:EquivalentInjection.maxQ');
        }
        if ('cim:EquivalentInjection.minP' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.minP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.minP'], 'cim:ActivePower', 'cim:EquivalentInjection.minP');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.minP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.minP'], 'cim:ActivePower', 'cim:EquivalentInjection.minP');
        }
        if ('cim:EquivalentInjection.minQ' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.minQ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.minQ'], 'cim:ReactivePower', 'cim:EquivalentInjection.minQ');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.minQ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.minQ'], 'cim:ReactivePower', 'cim:EquivalentInjection.minQ');
        }
        if ('cim:EquivalentInjection.regulationCapability' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.regulationCapability'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.regulationCapability'], 'cim:Boolean', 'cim:EquivalentInjection.regulationCapability');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.regulationCapability'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.regulationCapability'], 'cim:Boolean', 'cim:EquivalentInjection.regulationCapability');
        }
        if ('cim:EquivalentInjection.r' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.r'], 'cim:Resistance', 'cim:EquivalentInjection.r');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.r'], 'cim:Resistance', 'cim:EquivalentInjection.r');
        }
        if ('cim:EquivalentInjection.r0' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.r0'], 'cim:Resistance', 'cim:EquivalentInjection.r0');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.r0'], 'cim:Resistance', 'cim:EquivalentInjection.r0');
        }
        if ('cim:EquivalentInjection.r2' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.r2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.r2'], 'cim:Resistance', 'cim:EquivalentInjection.r2');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.r2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.r2'], 'cim:Resistance', 'cim:EquivalentInjection.r2');
        }
        if ('cim:EquivalentInjection.x' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.x'], 'cim:Reactance', 'cim:EquivalentInjection.x');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.x'], 'cim:Reactance', 'cim:EquivalentInjection.x');
        }
        if ('cim:EquivalentInjection.x0' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.x0'], 'cim:Reactance', 'cim:EquivalentInjection.x0');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.x0'], 'cim:Reactance', 'cim:EquivalentInjection.x0');
        }
        if ('cim:EquivalentInjection.x2' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.x2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.x2'], 'cim:Reactance', 'cim:EquivalentInjection.x2');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.x2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.x2'], 'cim:Reactance', 'cim:EquivalentInjection.x2');
        }
        if ('cim:EquivalentInjection.regulationStatus' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.regulationStatus'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.regulationStatus'], 'cim:Boolean', 'cim:EquivalentInjection.regulationStatus');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.regulationStatus'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.regulationStatus'], 'cim:Boolean', 'cim:EquivalentInjection.regulationStatus');
        }
        if ('cim:EquivalentInjection.regulationTarget' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.regulationTarget'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.regulationTarget'], 'cim:Voltage', 'cim:EquivalentInjection.regulationTarget');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.regulationTarget'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.regulationTarget'], 'cim:Voltage', 'cim:EquivalentInjection.regulationTarget');
        }
        if ('cim:EquivalentInjection.p' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.p'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.p'], 'cim:ActivePower', 'cim:EquivalentInjection.p');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.p'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.p'], 'cim:ActivePower', 'cim:EquivalentInjection.p');
        }
        if ('cim:EquivalentInjection.q' in object) {
          attributeEntries['filledEntries']['cim:EquivalentInjection.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.q'], 'cim:ReactivePower', 'cim:EquivalentInjection.q');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentInjection.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentInjection.q'], 'cim:ReactivePower', 'cim:EquivalentInjection.q');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:EquivalentInjection.ReactiveCapabilityCurve", "cim:EquivalentInjection.maxP", "cim:EquivalentInjection.maxQ", "cim:EquivalentInjection.minP", "cim:EquivalentInjection.minQ", "cim:EquivalentInjection.regulationCapability", "cim:EquivalentInjection.r", "cim:EquivalentInjection.r0", "cim:EquivalentInjection.r2", "cim:EquivalentInjection.x", "cim:EquivalentInjection.x0", "cim:EquivalentInjection.x2", "cim:EquivalentInjection.regulationStatus", "cim:EquivalentInjection.regulationTarget", "cim:EquivalentInjection.p", "cim:EquivalentInjection.q"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EquivalentEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EquivalentInjection.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EquivalentInjection: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EquivalentInjection.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return EquivalentInjection;
  }(EquivalentEquipment);
  _defineProperty(EquivalentInjection, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'ReactiveCapabilityCurve': [CGMESProfile.shortNames.EQ],
    'maxP': [CGMESProfile.shortNames.EQ],
    'maxQ': [CGMESProfile.shortNames.EQ],
    'minP': [CGMESProfile.shortNames.EQ],
    'minQ': [CGMESProfile.shortNames.EQ],
    'regulationCapability': [CGMESProfile.shortNames.EQ],
    'r': [CGMESProfile.shortNames.EQ],
    'r0': [CGMESProfile.shortNames.EQ],
    'r2': [CGMESProfile.shortNames.EQ],
    'x': [CGMESProfile.shortNames.EQ],
    'x0': [CGMESProfile.shortNames.EQ],
    'x2': [CGMESProfile.shortNames.EQ],
    'regulationStatus': [CGMESProfile.shortNames.SSH],
    'regulationTarget': [CGMESProfile.shortNames.SSH],
    'p': [CGMESProfile.shortNames.SSH],
    'q': [CGMESProfile.shortNames.SSH]
  });

  var EquivalentNetwork = /*#__PURE__*/function (_ConnectivityNodeCont) {
    _inherits(EquivalentNetwork, _ConnectivityNodeCont);
    var _super = _createSuper(EquivalentNetwork);
    function EquivalentNetwork() {
      _classCallCheck(this, EquivalentNetwork);
      return _super.apply(this, arguments);
    }
    _createClass(EquivalentNetwork, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EquivalentNetwork";
        var attributeEntries = ConnectivityNodeContainer.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConnectivityNodeContainer.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EquivalentNetwork.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EquivalentNetwork: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EquivalentNetwork.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return EquivalentNetwork;
  }(ConnectivityNodeContainer);
  _defineProperty(EquivalentNetwork, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var EquivalentShunt = /*#__PURE__*/function (_EquivalentEquipment) {
    _inherits(EquivalentShunt, _EquivalentEquipment);
    var _super = _createSuper(EquivalentShunt);
    function EquivalentShunt() {
      _classCallCheck(this, EquivalentShunt);
      return _super.apply(this, arguments);
    }
    _createClass(EquivalentShunt, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "EquivalentShunt";
        var attributeEntries = EquivalentEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:EquivalentShunt.b' in object) {
          attributeEntries['filledEntries']['cim:EquivalentShunt.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentShunt.b'], 'cim:Susceptance', 'cim:EquivalentShunt.b');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentShunt.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentShunt.b'], 'cim:Susceptance', 'cim:EquivalentShunt.b');
        }
        if ('cim:EquivalentShunt.g' in object) {
          attributeEntries['filledEntries']['cim:EquivalentShunt.g'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentShunt.g'], 'cim:Conductance', 'cim:EquivalentShunt.g');
        } else {
          attributeEntries['emptyEntries']['cim:EquivalentShunt.g'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['EquivalentShunt.g'], 'cim:Conductance', 'cim:EquivalentShunt.g');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:EquivalentShunt.b", "cim:EquivalentShunt.g"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EquivalentEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!EquivalentShunt.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class EquivalentShunt: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = EquivalentShunt.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return EquivalentShunt;
  }(EquivalentEquipment);
  _defineProperty(EquivalentShunt, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'b': [CGMESProfile.shortNames.EQ],
    'g': [CGMESProfile.shortNames.EQ]
  });

  var ExcitationSystemDynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(ExcitationSystemDynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(ExcitationSystemDynamics);
    function ExcitationSystemDynamics() {
      _classCallCheck(this, ExcitationSystemDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(ExcitationSystemDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcitationSystemDynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcitationSystemDynamics.SynchronousMachineDynamics' in object) {
          attributeEntries['filledEntries']['cim:ExcitationSystemDynamics.SynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcitationSystemDynamics.SynchronousMachineDynamics'], 'cim:SynchronousMachineDynamics', 'cim:ExcitationSystemDynamics.SynchronousMachineDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:ExcitationSystemDynamics.SynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcitationSystemDynamics.SynchronousMachineDynamics'], 'cim:SynchronousMachineDynamics', 'cim:ExcitationSystemDynamics.SynchronousMachineDynamics');
        }
        if ('cim:ExcitationSystemDynamics.PFVArControllerType1Dynamics' in object) {
          attributeEntries['filledEntries']['cim:ExcitationSystemDynamics.PFVArControllerType1Dynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcitationSystemDynamics.PFVArControllerType1Dynamics'], 'cim:PFVArControllerType1Dynamics', 'cim:ExcitationSystemDynamics.PFVArControllerType1Dynamics');
        } else {
          attributeEntries['emptyEntries']['cim:ExcitationSystemDynamics.PFVArControllerType1Dynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcitationSystemDynamics.PFVArControllerType1Dynamics'], 'cim:PFVArControllerType1Dynamics', 'cim:ExcitationSystemDynamics.PFVArControllerType1Dynamics');
        }
        if ('cim:ExcitationSystemDynamics.DiscontinuousExcitationControlDynamics' in object) {
          attributeEntries['filledEntries']['cim:ExcitationSystemDynamics.DiscontinuousExcitationControlDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcitationSystemDynamics.DiscontinuousExcitationControlDynamics'], 'cim:DiscontinuousExcitationControlDynamics', 'cim:ExcitationSystemDynamics.DiscontinuousExcitationControlDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:ExcitationSystemDynamics.DiscontinuousExcitationControlDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcitationSystemDynamics.DiscontinuousExcitationControlDynamics'], 'cim:DiscontinuousExcitationControlDynamics', 'cim:ExcitationSystemDynamics.DiscontinuousExcitationControlDynamics');
        }
        if ('cim:ExcitationSystemDynamics.PFVArControllerType2Dynamics' in object) {
          attributeEntries['filledEntries']['cim:ExcitationSystemDynamics.PFVArControllerType2Dynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcitationSystemDynamics.PFVArControllerType2Dynamics'], 'cim:PFVArControllerType2Dynamics', 'cim:ExcitationSystemDynamics.PFVArControllerType2Dynamics');
        } else {
          attributeEntries['emptyEntries']['cim:ExcitationSystemDynamics.PFVArControllerType2Dynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcitationSystemDynamics.PFVArControllerType2Dynamics'], 'cim:PFVArControllerType2Dynamics', 'cim:ExcitationSystemDynamics.PFVArControllerType2Dynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcitationSystemDynamics.SynchronousMachineDynamics", "cim:ExcitationSystemDynamics.PFVArControllerType1Dynamics", "cim:ExcitationSystemDynamics.DiscontinuousExcitationControlDynamics", "cim:ExcitationSystemDynamics.PFVArControllerType2Dynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcitationSystemDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcitationSystemDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["ExcitationSystemUserDefined", "ExcIEEEAC1A", "ExcIEEEAC2A", "ExcIEEEAC3A", "ExcIEEEAC4A", "ExcIEEEAC5A", "ExcIEEEAC6A", "ExcIEEEAC7B", "ExcIEEEAC8B", "ExcIEEEDC1A", "ExcIEEEDC2A", "ExcIEEEDC3A", "ExcIEEEDC4B", "ExcIEEEST1A", "ExcIEEEST2A", "ExcIEEEST3A", "ExcIEEEST4B", "ExcIEEEST5B", "ExcIEEEST6B", "ExcIEEEST7B", "ExcAC1A", "ExcAC2A", "ExcAC3A", "ExcAC4A", "ExcAC5A", "ExcAC6A", "ExcAC8B", "ExcANS", "ExcAVR1", "ExcAVR2", "ExcAVR3", "ExcAVR4", "ExcAVR5", "ExcAVR7", "ExcBBC", "ExcCZ", "ExcDC1A", "ExcDC2A", "ExcDC3A", "ExcDC3A1", "ExcELIN1", "ExcELIN2", "ExcHU", "ExcOEX3T", "ExcPIC", "ExcREXS", "ExcSCRX", "ExcSEXS", "ExcSK", "ExcST1A", "ExcST2A", "ExcST3A", "ExcST4B", "ExcST6B", "ExcST7B"];
        return subClasses;
      }
    }]);
    return ExcitationSystemDynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(ExcitationSystemDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'SynchronousMachineDynamics': [CGMESProfile.shortNames.DY],
    'PFVArControllerType1Dynamics': [CGMESProfile.shortNames.DY],
    'DiscontinuousExcitationControlDynamics': [CGMESProfile.shortNames.DY],
    'PFVArControllerType2Dynamics': [CGMESProfile.shortNames.DY]
  });

  var ExcAC1A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAC1A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAC1A);
    function ExcAC1A() {
      _classCallCheck(this, ExcAC1A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAC1A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAC1A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAC1A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.tb'], 'cim:Seconds', 'cim:ExcAC1A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.tb'], 'cim:Seconds', 'cim:ExcAC1A.tb');
        }
        if ('cim:ExcAC1A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.tc'], 'cim:Seconds', 'cim:ExcAC1A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.tc'], 'cim:Seconds', 'cim:ExcAC1A.tc');
        }
        if ('cim:ExcAC1A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.ka'], 'cim:PU', 'cim:ExcAC1A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.ka'], 'cim:PU', 'cim:ExcAC1A.ka');
        }
        if ('cim:ExcAC1A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.ta'], 'cim:Seconds', 'cim:ExcAC1A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.ta'], 'cim:Seconds', 'cim:ExcAC1A.ta');
        }
        if ('cim:ExcAC1A.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.vamax'], 'cim:PU', 'cim:ExcAC1A.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.vamax'], 'cim:PU', 'cim:ExcAC1A.vamax');
        }
        if ('cim:ExcAC1A.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.vamin'], 'cim:PU', 'cim:ExcAC1A.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.vamin'], 'cim:PU', 'cim:ExcAC1A.vamin');
        }
        if ('cim:ExcAC1A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.te'], 'cim:Seconds', 'cim:ExcAC1A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.te'], 'cim:Seconds', 'cim:ExcAC1A.te');
        }
        if ('cim:ExcAC1A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.kf'], 'cim:PU', 'cim:ExcAC1A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.kf'], 'cim:PU', 'cim:ExcAC1A.kf');
        }
        if ('cim:ExcAC1A.kf1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.kf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.kf1'], 'cim:PU', 'cim:ExcAC1A.kf1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.kf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.kf1'], 'cim:PU', 'cim:ExcAC1A.kf1');
        }
        if ('cim:ExcAC1A.kf2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.kf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.kf2'], 'cim:PU', 'cim:ExcAC1A.kf2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.kf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.kf2'], 'cim:PU', 'cim:ExcAC1A.kf2');
        }
        if ('cim:ExcAC1A.ks' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.ks'], 'cim:PU', 'cim:ExcAC1A.ks');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.ks'], 'cim:PU', 'cim:ExcAC1A.ks');
        }
        if ('cim:ExcAC1A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.tf'], 'cim:Seconds', 'cim:ExcAC1A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.tf'], 'cim:Seconds', 'cim:ExcAC1A.tf');
        }
        if ('cim:ExcAC1A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.kc'], 'cim:PU', 'cim:ExcAC1A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.kc'], 'cim:PU', 'cim:ExcAC1A.kc');
        }
        if ('cim:ExcAC1A.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.kd'], 'cim:PU', 'cim:ExcAC1A.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.kd'], 'cim:PU', 'cim:ExcAC1A.kd');
        }
        if ('cim:ExcAC1A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.ke'], 'cim:PU', 'cim:ExcAC1A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.ke'], 'cim:PU', 'cim:ExcAC1A.ke');
        }
        if ('cim:ExcAC1A.ve1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.ve1'], 'cim:PU', 'cim:ExcAC1A.ve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.ve1'], 'cim:PU', 'cim:ExcAC1A.ve1');
        }
        if ('cim:ExcAC1A.seve1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.seve1'], 'cim:Simple_Float', 'cim:ExcAC1A.seve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.seve1'], 'cim:Simple_Float', 'cim:ExcAC1A.seve1');
        }
        if ('cim:ExcAC1A.ve2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.ve2'], 'cim:PU', 'cim:ExcAC1A.ve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.ve2'], 'cim:PU', 'cim:ExcAC1A.ve2');
        }
        if ('cim:ExcAC1A.seve2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.seve2'], 'cim:Simple_Float', 'cim:ExcAC1A.seve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.seve2'], 'cim:Simple_Float', 'cim:ExcAC1A.seve2');
        }
        if ('cim:ExcAC1A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.vrmax'], 'cim:PU', 'cim:ExcAC1A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.vrmax'], 'cim:PU', 'cim:ExcAC1A.vrmax');
        }
        if ('cim:ExcAC1A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.vrmin'], 'cim:PU', 'cim:ExcAC1A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.vrmin'], 'cim:PU', 'cim:ExcAC1A.vrmin');
        }
        if ('cim:ExcAC1A.hvlvgates' in object) {
          attributeEntries['filledEntries']['cim:ExcAC1A.hvlvgates'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.hvlvgates'], 'cim:Boolean', 'cim:ExcAC1A.hvlvgates');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC1A.hvlvgates'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC1A.hvlvgates'], 'cim:Boolean', 'cim:ExcAC1A.hvlvgates');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAC1A.tb", "cim:ExcAC1A.tc", "cim:ExcAC1A.ka", "cim:ExcAC1A.ta", "cim:ExcAC1A.vamax", "cim:ExcAC1A.vamin", "cim:ExcAC1A.te", "cim:ExcAC1A.kf", "cim:ExcAC1A.kf1", "cim:ExcAC1A.kf2", "cim:ExcAC1A.ks", "cim:ExcAC1A.tf", "cim:ExcAC1A.kc", "cim:ExcAC1A.kd", "cim:ExcAC1A.ke", "cim:ExcAC1A.ve1", "cim:ExcAC1A.seve1", "cim:ExcAC1A.ve2", "cim:ExcAC1A.seve2", "cim:ExcAC1A.vrmax", "cim:ExcAC1A.vrmin", "cim:ExcAC1A.hvlvgates"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAC1A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAC1A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAC1A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAC1A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAC1A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'kf1': [CGMESProfile.shortNames.DY],
    'kf2': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    've1': [CGMESProfile.shortNames.DY],
    'seve1': [CGMESProfile.shortNames.DY],
    've2': [CGMESProfile.shortNames.DY],
    'seve2': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'hvlvgates': [CGMESProfile.shortNames.DY]
  });

  var ExcAC2A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAC2A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAC2A);
    function ExcAC2A() {
      _classCallCheck(this, ExcAC2A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAC2A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAC2A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAC2A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.tb'], 'cim:Seconds', 'cim:ExcAC2A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.tb'], 'cim:Seconds', 'cim:ExcAC2A.tb');
        }
        if ('cim:ExcAC2A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.tc'], 'cim:Seconds', 'cim:ExcAC2A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.tc'], 'cim:Seconds', 'cim:ExcAC2A.tc');
        }
        if ('cim:ExcAC2A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.ka'], 'cim:PU', 'cim:ExcAC2A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.ka'], 'cim:PU', 'cim:ExcAC2A.ka');
        }
        if ('cim:ExcAC2A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.ta'], 'cim:Seconds', 'cim:ExcAC2A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.ta'], 'cim:Seconds', 'cim:ExcAC2A.ta');
        }
        if ('cim:ExcAC2A.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.vamax'], 'cim:PU', 'cim:ExcAC2A.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.vamax'], 'cim:PU', 'cim:ExcAC2A.vamax');
        }
        if ('cim:ExcAC2A.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.vamin'], 'cim:PU', 'cim:ExcAC2A.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.vamin'], 'cim:PU', 'cim:ExcAC2A.vamin');
        }
        if ('cim:ExcAC2A.kb' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.kb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kb'], 'cim:PU', 'cim:ExcAC2A.kb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.kb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kb'], 'cim:PU', 'cim:ExcAC2A.kb');
        }
        if ('cim:ExcAC2A.kb1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.kb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kb1'], 'cim:PU', 'cim:ExcAC2A.kb1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.kb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kb1'], 'cim:PU', 'cim:ExcAC2A.kb1');
        }
        if ('cim:ExcAC2A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.vrmax'], 'cim:PU', 'cim:ExcAC2A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.vrmax'], 'cim:PU', 'cim:ExcAC2A.vrmax');
        }
        if ('cim:ExcAC2A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.vrmin'], 'cim:PU', 'cim:ExcAC2A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.vrmin'], 'cim:PU', 'cim:ExcAC2A.vrmin');
        }
        if ('cim:ExcAC2A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.te'], 'cim:Seconds', 'cim:ExcAC2A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.te'], 'cim:Seconds', 'cim:ExcAC2A.te');
        }
        if ('cim:ExcAC2A.vfemax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.vfemax'], 'cim:PU', 'cim:ExcAC2A.vfemax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.vfemax'], 'cim:PU', 'cim:ExcAC2A.vfemax');
        }
        if ('cim:ExcAC2A.kh' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kh'], 'cim:PU', 'cim:ExcAC2A.kh');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kh'], 'cim:PU', 'cim:ExcAC2A.kh');
        }
        if ('cim:ExcAC2A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kf'], 'cim:PU', 'cim:ExcAC2A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kf'], 'cim:PU', 'cim:ExcAC2A.kf');
        }
        if ('cim:ExcAC2A.kl' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.kl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kl'], 'cim:PU', 'cim:ExcAC2A.kl');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.kl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kl'], 'cim:PU', 'cim:ExcAC2A.kl');
        }
        if ('cim:ExcAC2A.vlr' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.vlr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.vlr'], 'cim:PU', 'cim:ExcAC2A.vlr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.vlr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.vlr'], 'cim:PU', 'cim:ExcAC2A.vlr');
        }
        if ('cim:ExcAC2A.kl1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.kl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kl1'], 'cim:PU', 'cim:ExcAC2A.kl1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.kl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kl1'], 'cim:PU', 'cim:ExcAC2A.kl1');
        }
        if ('cim:ExcAC2A.ks' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.ks'], 'cim:PU', 'cim:ExcAC2A.ks');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.ks'], 'cim:PU', 'cim:ExcAC2A.ks');
        }
        if ('cim:ExcAC2A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.tf'], 'cim:Seconds', 'cim:ExcAC2A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.tf'], 'cim:Seconds', 'cim:ExcAC2A.tf');
        }
        if ('cim:ExcAC2A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kc'], 'cim:PU', 'cim:ExcAC2A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kc'], 'cim:PU', 'cim:ExcAC2A.kc');
        }
        if ('cim:ExcAC2A.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kd'], 'cim:PU', 'cim:ExcAC2A.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.kd'], 'cim:PU', 'cim:ExcAC2A.kd');
        }
        if ('cim:ExcAC2A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.ke'], 'cim:PU', 'cim:ExcAC2A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.ke'], 'cim:PU', 'cim:ExcAC2A.ke');
        }
        if ('cim:ExcAC2A.ve1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.ve1'], 'cim:PU', 'cim:ExcAC2A.ve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.ve1'], 'cim:PU', 'cim:ExcAC2A.ve1');
        }
        if ('cim:ExcAC2A.seve1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.seve1'], 'cim:Simple_Float', 'cim:ExcAC2A.seve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.seve1'], 'cim:Simple_Float', 'cim:ExcAC2A.seve1');
        }
        if ('cim:ExcAC2A.ve2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.ve2'], 'cim:PU', 'cim:ExcAC2A.ve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.ve2'], 'cim:PU', 'cim:ExcAC2A.ve2');
        }
        if ('cim:ExcAC2A.seve2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.seve2'], 'cim:Simple_Float', 'cim:ExcAC2A.seve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.seve2'], 'cim:Simple_Float', 'cim:ExcAC2A.seve2');
        }
        if ('cim:ExcAC2A.hvgate' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.hvgate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.hvgate'], 'cim:Boolean', 'cim:ExcAC2A.hvgate');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.hvgate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.hvgate'], 'cim:Boolean', 'cim:ExcAC2A.hvgate');
        }
        if ('cim:ExcAC2A.lvgate' in object) {
          attributeEntries['filledEntries']['cim:ExcAC2A.lvgate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.lvgate'], 'cim:Boolean', 'cim:ExcAC2A.lvgate');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC2A.lvgate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC2A.lvgate'], 'cim:Boolean', 'cim:ExcAC2A.lvgate');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAC2A.tb", "cim:ExcAC2A.tc", "cim:ExcAC2A.ka", "cim:ExcAC2A.ta", "cim:ExcAC2A.vamax", "cim:ExcAC2A.vamin", "cim:ExcAC2A.kb", "cim:ExcAC2A.kb1", "cim:ExcAC2A.vrmax", "cim:ExcAC2A.vrmin", "cim:ExcAC2A.te", "cim:ExcAC2A.vfemax", "cim:ExcAC2A.kh", "cim:ExcAC2A.kf", "cim:ExcAC2A.kl", "cim:ExcAC2A.vlr", "cim:ExcAC2A.kl1", "cim:ExcAC2A.ks", "cim:ExcAC2A.tf", "cim:ExcAC2A.kc", "cim:ExcAC2A.kd", "cim:ExcAC2A.ke", "cim:ExcAC2A.ve1", "cim:ExcAC2A.seve1", "cim:ExcAC2A.ve2", "cim:ExcAC2A.seve2", "cim:ExcAC2A.hvgate", "cim:ExcAC2A.lvgate"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAC2A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAC2A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAC2A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAC2A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAC2A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'kb': [CGMESProfile.shortNames.DY],
    'kb1': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'vfemax': [CGMESProfile.shortNames.DY],
    'kh': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'kl': [CGMESProfile.shortNames.DY],
    'vlr': [CGMESProfile.shortNames.DY],
    'kl1': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    've1': [CGMESProfile.shortNames.DY],
    'seve1': [CGMESProfile.shortNames.DY],
    've2': [CGMESProfile.shortNames.DY],
    'seve2': [CGMESProfile.shortNames.DY],
    'hvgate': [CGMESProfile.shortNames.DY],
    'lvgate': [CGMESProfile.shortNames.DY]
  });

  var ExcAC3A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAC3A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAC3A);
    function ExcAC3A() {
      _classCallCheck(this, ExcAC3A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAC3A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAC3A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAC3A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.tb'], 'cim:Seconds', 'cim:ExcAC3A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.tb'], 'cim:Seconds', 'cim:ExcAC3A.tb');
        }
        if ('cim:ExcAC3A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.tc'], 'cim:Seconds', 'cim:ExcAC3A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.tc'], 'cim:Seconds', 'cim:ExcAC3A.tc');
        }
        if ('cim:ExcAC3A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.ka'], 'cim:Seconds', 'cim:ExcAC3A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.ka'], 'cim:Seconds', 'cim:ExcAC3A.ka');
        }
        if ('cim:ExcAC3A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.ta'], 'cim:PU', 'cim:ExcAC3A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.ta'], 'cim:PU', 'cim:ExcAC3A.ta');
        }
        if ('cim:ExcAC3A.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.vamax'], 'cim:PU', 'cim:ExcAC3A.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.vamax'], 'cim:PU', 'cim:ExcAC3A.vamax');
        }
        if ('cim:ExcAC3A.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.vamin'], 'cim:PU', 'cim:ExcAC3A.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.vamin'], 'cim:PU', 'cim:ExcAC3A.vamin');
        }
        if ('cim:ExcAC3A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.te'], 'cim:Seconds', 'cim:ExcAC3A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.te'], 'cim:Seconds', 'cim:ExcAC3A.te');
        }
        if ('cim:ExcAC3A.vemin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.vemin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.vemin'], 'cim:PU', 'cim:ExcAC3A.vemin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.vemin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.vemin'], 'cim:PU', 'cim:ExcAC3A.vemin');
        }
        if ('cim:ExcAC3A.kr' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.kr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kr'], 'cim:PU', 'cim:ExcAC3A.kr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.kr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kr'], 'cim:PU', 'cim:ExcAC3A.kr');
        }
        if ('cim:ExcAC3A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kf'], 'cim:PU', 'cim:ExcAC3A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kf'], 'cim:PU', 'cim:ExcAC3A.kf');
        }
        if ('cim:ExcAC3A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.tf'], 'cim:Seconds', 'cim:ExcAC3A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.tf'], 'cim:Seconds', 'cim:ExcAC3A.tf');
        }
        if ('cim:ExcAC3A.kn' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.kn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kn'], 'cim:PU', 'cim:ExcAC3A.kn');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.kn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kn'], 'cim:PU', 'cim:ExcAC3A.kn');
        }
        if ('cim:ExcAC3A.efdn' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.efdn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.efdn'], 'cim:PU', 'cim:ExcAC3A.efdn');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.efdn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.efdn'], 'cim:PU', 'cim:ExcAC3A.efdn');
        }
        if ('cim:ExcAC3A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kc'], 'cim:PU', 'cim:ExcAC3A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kc'], 'cim:PU', 'cim:ExcAC3A.kc');
        }
        if ('cim:ExcAC3A.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kd'], 'cim:PU', 'cim:ExcAC3A.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kd'], 'cim:PU', 'cim:ExcAC3A.kd');
        }
        if ('cim:ExcAC3A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.ke'], 'cim:PU', 'cim:ExcAC3A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.ke'], 'cim:PU', 'cim:ExcAC3A.ke');
        }
        if ('cim:ExcAC3A.klv' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.klv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.klv'], 'cim:PU', 'cim:ExcAC3A.klv');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.klv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.klv'], 'cim:PU', 'cim:ExcAC3A.klv');
        }
        if ('cim:ExcAC3A.kf1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.kf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kf1'], 'cim:PU', 'cim:ExcAC3A.kf1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.kf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kf1'], 'cim:PU', 'cim:ExcAC3A.kf1');
        }
        if ('cim:ExcAC3A.kf2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.kf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kf2'], 'cim:PU', 'cim:ExcAC3A.kf2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.kf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.kf2'], 'cim:PU', 'cim:ExcAC3A.kf2');
        }
        if ('cim:ExcAC3A.ks' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.ks'], 'cim:PU', 'cim:ExcAC3A.ks');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.ks'], 'cim:PU', 'cim:ExcAC3A.ks');
        }
        if ('cim:ExcAC3A.vfemax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.vfemax'], 'cim:PU', 'cim:ExcAC3A.vfemax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.vfemax'], 'cim:PU', 'cim:ExcAC3A.vfemax');
        }
        if ('cim:ExcAC3A.ve1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.ve1'], 'cim:PU', 'cim:ExcAC3A.ve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.ve1'], 'cim:PU', 'cim:ExcAC3A.ve1');
        }
        if ('cim:ExcAC3A.seve1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.seve1'], 'cim:Simple_Float', 'cim:ExcAC3A.seve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.seve1'], 'cim:Simple_Float', 'cim:ExcAC3A.seve1');
        }
        if ('cim:ExcAC3A.ve2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.ve2'], 'cim:PU', 'cim:ExcAC3A.ve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.ve2'], 'cim:PU', 'cim:ExcAC3A.ve2');
        }
        if ('cim:ExcAC3A.seve2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.seve2'], 'cim:Simple_Float', 'cim:ExcAC3A.seve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.seve2'], 'cim:Simple_Float', 'cim:ExcAC3A.seve2');
        }
        if ('cim:ExcAC3A.vlv' in object) {
          attributeEntries['filledEntries']['cim:ExcAC3A.vlv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.vlv'], 'cim:PU', 'cim:ExcAC3A.vlv');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC3A.vlv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC3A.vlv'], 'cim:PU', 'cim:ExcAC3A.vlv');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAC3A.tb", "cim:ExcAC3A.tc", "cim:ExcAC3A.ka", "cim:ExcAC3A.ta", "cim:ExcAC3A.vamax", "cim:ExcAC3A.vamin", "cim:ExcAC3A.te", "cim:ExcAC3A.vemin", "cim:ExcAC3A.kr", "cim:ExcAC3A.kf", "cim:ExcAC3A.tf", "cim:ExcAC3A.kn", "cim:ExcAC3A.efdn", "cim:ExcAC3A.kc", "cim:ExcAC3A.kd", "cim:ExcAC3A.ke", "cim:ExcAC3A.klv", "cim:ExcAC3A.kf1", "cim:ExcAC3A.kf2", "cim:ExcAC3A.ks", "cim:ExcAC3A.vfemax", "cim:ExcAC3A.ve1", "cim:ExcAC3A.seve1", "cim:ExcAC3A.ve2", "cim:ExcAC3A.seve2", "cim:ExcAC3A.vlv"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAC3A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAC3A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAC3A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAC3A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAC3A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'vemin': [CGMESProfile.shortNames.DY],
    'kr': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kn': [CGMESProfile.shortNames.DY],
    'efdn': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'klv': [CGMESProfile.shortNames.DY],
    'kf1': [CGMESProfile.shortNames.DY],
    'kf2': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'vfemax': [CGMESProfile.shortNames.DY],
    've1': [CGMESProfile.shortNames.DY],
    'seve1': [CGMESProfile.shortNames.DY],
    've2': [CGMESProfile.shortNames.DY],
    'seve2': [CGMESProfile.shortNames.DY],
    'vlv': [CGMESProfile.shortNames.DY]
  });

  var ExcAC4A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAC4A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAC4A);
    function ExcAC4A() {
      _classCallCheck(this, ExcAC4A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAC4A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAC4A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAC4A.vimax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC4A.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.vimax'], 'cim:PU', 'cim:ExcAC4A.vimax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC4A.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.vimax'], 'cim:PU', 'cim:ExcAC4A.vimax');
        }
        if ('cim:ExcAC4A.vimin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC4A.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.vimin'], 'cim:PU', 'cim:ExcAC4A.vimin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC4A.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.vimin'], 'cim:PU', 'cim:ExcAC4A.vimin');
        }
        if ('cim:ExcAC4A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcAC4A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.tc'], 'cim:Seconds', 'cim:ExcAC4A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC4A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.tc'], 'cim:Seconds', 'cim:ExcAC4A.tc');
        }
        if ('cim:ExcAC4A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcAC4A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.tb'], 'cim:Seconds', 'cim:ExcAC4A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC4A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.tb'], 'cim:Seconds', 'cim:ExcAC4A.tb');
        }
        if ('cim:ExcAC4A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcAC4A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.ka'], 'cim:PU', 'cim:ExcAC4A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC4A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.ka'], 'cim:PU', 'cim:ExcAC4A.ka');
        }
        if ('cim:ExcAC4A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcAC4A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.ta'], 'cim:Seconds', 'cim:ExcAC4A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC4A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.ta'], 'cim:Seconds', 'cim:ExcAC4A.ta');
        }
        if ('cim:ExcAC4A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC4A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.vrmax'], 'cim:PU', 'cim:ExcAC4A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC4A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.vrmax'], 'cim:PU', 'cim:ExcAC4A.vrmax');
        }
        if ('cim:ExcAC4A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC4A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.vrmin'], 'cim:PU', 'cim:ExcAC4A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC4A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.vrmin'], 'cim:PU', 'cim:ExcAC4A.vrmin');
        }
        if ('cim:ExcAC4A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcAC4A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.kc'], 'cim:PU', 'cim:ExcAC4A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC4A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC4A.kc'], 'cim:PU', 'cim:ExcAC4A.kc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAC4A.vimax", "cim:ExcAC4A.vimin", "cim:ExcAC4A.tc", "cim:ExcAC4A.tb", "cim:ExcAC4A.ka", "cim:ExcAC4A.ta", "cim:ExcAC4A.vrmax", "cim:ExcAC4A.vrmin", "cim:ExcAC4A.kc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAC4A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAC4A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAC4A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAC4A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAC4A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'vimax': [CGMESProfile.shortNames.DY],
    'vimin': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY]
  });

  var ExcAC5A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAC5A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAC5A);
    function ExcAC5A() {
      _classCallCheck(this, ExcAC5A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAC5A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAC5A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAC5A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.ka'], 'cim:PU', 'cim:ExcAC5A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.ka'], 'cim:PU', 'cim:ExcAC5A.ka');
        }
        if ('cim:ExcAC5A.ks' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.ks'], 'cim:PU', 'cim:ExcAC5A.ks');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.ks'], 'cim:PU', 'cim:ExcAC5A.ks');
        }
        if ('cim:ExcAC5A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.tb'], 'cim:Seconds', 'cim:ExcAC5A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.tb'], 'cim:Seconds', 'cim:ExcAC5A.tb');
        }
        if ('cim:ExcAC5A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.tc'], 'cim:Seconds', 'cim:ExcAC5A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.tc'], 'cim:Seconds', 'cim:ExcAC5A.tc');
        }
        if ('cim:ExcAC5A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.ta'], 'cim:Seconds', 'cim:ExcAC5A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.ta'], 'cim:Seconds', 'cim:ExcAC5A.ta');
        }
        if ('cim:ExcAC5A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.vrmax'], 'cim:PU', 'cim:ExcAC5A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.vrmax'], 'cim:PU', 'cim:ExcAC5A.vrmax');
        }
        if ('cim:ExcAC5A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.vrmin'], 'cim:PU', 'cim:ExcAC5A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.vrmin'], 'cim:PU', 'cim:ExcAC5A.vrmin');
        }
        if ('cim:ExcAC5A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.ke'], 'cim:PU', 'cim:ExcAC5A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.ke'], 'cim:PU', 'cim:ExcAC5A.ke');
        }
        if ('cim:ExcAC5A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.te'], 'cim:Seconds', 'cim:ExcAC5A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.te'], 'cim:Seconds', 'cim:ExcAC5A.te');
        }
        if ('cim:ExcAC5A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.kf'], 'cim:PU', 'cim:ExcAC5A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.kf'], 'cim:PU', 'cim:ExcAC5A.kf');
        }
        if ('cim:ExcAC5A.tf1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.tf1'], 'cim:Seconds', 'cim:ExcAC5A.tf1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.tf1'], 'cim:Seconds', 'cim:ExcAC5A.tf1');
        }
        if ('cim:ExcAC5A.tf2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.tf2'], 'cim:Seconds', 'cim:ExcAC5A.tf2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.tf2'], 'cim:Seconds', 'cim:ExcAC5A.tf2');
        }
        if ('cim:ExcAC5A.tf3' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.tf3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.tf3'], 'cim:Seconds', 'cim:ExcAC5A.tf3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.tf3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.tf3'], 'cim:Seconds', 'cim:ExcAC5A.tf3');
        }
        if ('cim:ExcAC5A.efd1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.efd1'], 'cim:PU', 'cim:ExcAC5A.efd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.efd1'], 'cim:PU', 'cim:ExcAC5A.efd1');
        }
        if ('cim:ExcAC5A.seefd1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.seefd1'], 'cim:Simple_Float', 'cim:ExcAC5A.seefd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.seefd1'], 'cim:Simple_Float', 'cim:ExcAC5A.seefd1');
        }
        if ('cim:ExcAC5A.efd2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.efd2'], 'cim:PU', 'cim:ExcAC5A.efd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.efd2'], 'cim:PU', 'cim:ExcAC5A.efd2');
        }
        if ('cim:ExcAC5A.seefd2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.seefd2'], 'cim:Simple_Float', 'cim:ExcAC5A.seefd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.seefd2'], 'cim:Simple_Float', 'cim:ExcAC5A.seefd2');
        }
        if ('cim:ExcAC5A.a' in object) {
          attributeEntries['filledEntries']['cim:ExcAC5A.a'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.a'], 'cim:Simple_Float', 'cim:ExcAC5A.a');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC5A.a'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC5A.a'], 'cim:Simple_Float', 'cim:ExcAC5A.a');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAC5A.ka", "cim:ExcAC5A.ks", "cim:ExcAC5A.tb", "cim:ExcAC5A.tc", "cim:ExcAC5A.ta", "cim:ExcAC5A.vrmax", "cim:ExcAC5A.vrmin", "cim:ExcAC5A.ke", "cim:ExcAC5A.te", "cim:ExcAC5A.kf", "cim:ExcAC5A.tf1", "cim:ExcAC5A.tf2", "cim:ExcAC5A.tf3", "cim:ExcAC5A.efd1", "cim:ExcAC5A.seefd1", "cim:ExcAC5A.efd2", "cim:ExcAC5A.seefd2", "cim:ExcAC5A.a"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAC5A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAC5A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAC5A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAC5A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAC5A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf1': [CGMESProfile.shortNames.DY],
    'tf2': [CGMESProfile.shortNames.DY],
    'tf3': [CGMESProfile.shortNames.DY],
    'efd1': [CGMESProfile.shortNames.DY],
    'seefd1': [CGMESProfile.shortNames.DY],
    'efd2': [CGMESProfile.shortNames.DY],
    'seefd2': [CGMESProfile.shortNames.DY],
    'a': [CGMESProfile.shortNames.DY]
  });

  var ExcAC6A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAC6A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAC6A);
    function ExcAC6A() {
      _classCallCheck(this, ExcAC6A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAC6A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAC6A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAC6A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.ka'], 'cim:PU', 'cim:ExcAC6A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.ka'], 'cim:PU', 'cim:ExcAC6A.ka');
        }
        if ('cim:ExcAC6A.ks' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.ks'], 'cim:PU', 'cim:ExcAC6A.ks');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.ks'], 'cim:PU', 'cim:ExcAC6A.ks');
        }
        if ('cim:ExcAC6A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.ta'], 'cim:Seconds', 'cim:ExcAC6A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.ta'], 'cim:Seconds', 'cim:ExcAC6A.ta');
        }
        if ('cim:ExcAC6A.tk' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.tk'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.tk'], 'cim:Seconds', 'cim:ExcAC6A.tk');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.tk'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.tk'], 'cim:Seconds', 'cim:ExcAC6A.tk');
        }
        if ('cim:ExcAC6A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.tb'], 'cim:Seconds', 'cim:ExcAC6A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.tb'], 'cim:Seconds', 'cim:ExcAC6A.tb');
        }
        if ('cim:ExcAC6A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.tc'], 'cim:Seconds', 'cim:ExcAC6A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.tc'], 'cim:Seconds', 'cim:ExcAC6A.tc');
        }
        if ('cim:ExcAC6A.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.vamax'], 'cim:PU', 'cim:ExcAC6A.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.vamax'], 'cim:PU', 'cim:ExcAC6A.vamax');
        }
        if ('cim:ExcAC6A.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.vamin'], 'cim:PU', 'cim:ExcAC6A.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.vamin'], 'cim:PU', 'cim:ExcAC6A.vamin');
        }
        if ('cim:ExcAC6A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.vrmax'], 'cim:PU', 'cim:ExcAC6A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.vrmax'], 'cim:PU', 'cim:ExcAC6A.vrmax');
        }
        if ('cim:ExcAC6A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.vrmin'], 'cim:PU', 'cim:ExcAC6A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.vrmin'], 'cim:PU', 'cim:ExcAC6A.vrmin');
        }
        if ('cim:ExcAC6A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.te'], 'cim:Seconds', 'cim:ExcAC6A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.te'], 'cim:Seconds', 'cim:ExcAC6A.te');
        }
        if ('cim:ExcAC6A.kh' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.kh'], 'cim:PU', 'cim:ExcAC6A.kh');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.kh'], 'cim:PU', 'cim:ExcAC6A.kh');
        }
        if ('cim:ExcAC6A.tj' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.tj'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.tj'], 'cim:Seconds', 'cim:ExcAC6A.tj');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.tj'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.tj'], 'cim:Seconds', 'cim:ExcAC6A.tj');
        }
        if ('cim:ExcAC6A.th' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.th'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.th'], 'cim:Seconds', 'cim:ExcAC6A.th');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.th'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.th'], 'cim:Seconds', 'cim:ExcAC6A.th');
        }
        if ('cim:ExcAC6A.vfelim' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.vfelim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.vfelim'], 'cim:PU', 'cim:ExcAC6A.vfelim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.vfelim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.vfelim'], 'cim:PU', 'cim:ExcAC6A.vfelim');
        }
        if ('cim:ExcAC6A.vhmax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.vhmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.vhmax'], 'cim:PU', 'cim:ExcAC6A.vhmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.vhmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.vhmax'], 'cim:PU', 'cim:ExcAC6A.vhmax');
        }
        if ('cim:ExcAC6A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.kc'], 'cim:PU', 'cim:ExcAC6A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.kc'], 'cim:PU', 'cim:ExcAC6A.kc');
        }
        if ('cim:ExcAC6A.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.kd'], 'cim:PU', 'cim:ExcAC6A.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.kd'], 'cim:PU', 'cim:ExcAC6A.kd');
        }
        if ('cim:ExcAC6A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.ke'], 'cim:PU', 'cim:ExcAC6A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.ke'], 'cim:PU', 'cim:ExcAC6A.ke');
        }
        if ('cim:ExcAC6A.ve1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.ve1'], 'cim:PU', 'cim:ExcAC6A.ve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.ve1'], 'cim:PU', 'cim:ExcAC6A.ve1');
        }
        if ('cim:ExcAC6A.seve1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.seve1'], 'cim:Simple_Float', 'cim:ExcAC6A.seve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.seve1'], 'cim:Simple_Float', 'cim:ExcAC6A.seve1');
        }
        if ('cim:ExcAC6A.ve2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.ve2'], 'cim:PU', 'cim:ExcAC6A.ve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.ve2'], 'cim:PU', 'cim:ExcAC6A.ve2');
        }
        if ('cim:ExcAC6A.seve2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC6A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.seve2'], 'cim:Simple_Float', 'cim:ExcAC6A.seve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC6A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC6A.seve2'], 'cim:Simple_Float', 'cim:ExcAC6A.seve2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAC6A.ka", "cim:ExcAC6A.ks", "cim:ExcAC6A.ta", "cim:ExcAC6A.tk", "cim:ExcAC6A.tb", "cim:ExcAC6A.tc", "cim:ExcAC6A.vamax", "cim:ExcAC6A.vamin", "cim:ExcAC6A.vrmax", "cim:ExcAC6A.vrmin", "cim:ExcAC6A.te", "cim:ExcAC6A.kh", "cim:ExcAC6A.tj", "cim:ExcAC6A.th", "cim:ExcAC6A.vfelim", "cim:ExcAC6A.vhmax", "cim:ExcAC6A.kc", "cim:ExcAC6A.kd", "cim:ExcAC6A.ke", "cim:ExcAC6A.ve1", "cim:ExcAC6A.seve1", "cim:ExcAC6A.ve2", "cim:ExcAC6A.seve2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAC6A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAC6A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAC6A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAC6A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAC6A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tk': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kh': [CGMESProfile.shortNames.DY],
    'tj': [CGMESProfile.shortNames.DY],
    'th': [CGMESProfile.shortNames.DY],
    'vfelim': [CGMESProfile.shortNames.DY],
    'vhmax': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    've1': [CGMESProfile.shortNames.DY],
    'seve1': [CGMESProfile.shortNames.DY],
    've2': [CGMESProfile.shortNames.DY],
    'seve2': [CGMESProfile.shortNames.DY]
  });

  var ExcAC8B = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAC8B, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAC8B);
    function ExcAC8B() {
      _classCallCheck(this, ExcAC8B);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAC8B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAC8B";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAC8B.inlim' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.inlim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.inlim'], 'cim:Boolean', 'cim:ExcAC8B.inlim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.inlim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.inlim'], 'cim:Boolean', 'cim:ExcAC8B.inlim');
        }
        if ('cim:ExcAC8B.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.ka'], 'cim:PU', 'cim:ExcAC8B.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.ka'], 'cim:PU', 'cim:ExcAC8B.ka');
        }
        if ('cim:ExcAC8B.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.kc'], 'cim:PU', 'cim:ExcAC8B.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.kc'], 'cim:PU', 'cim:ExcAC8B.kc');
        }
        if ('cim:ExcAC8B.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.kd'], 'cim:PU', 'cim:ExcAC8B.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.kd'], 'cim:PU', 'cim:ExcAC8B.kd');
        }
        if ('cim:ExcAC8B.kdr' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.kdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.kdr'], 'cim:PU', 'cim:ExcAC8B.kdr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.kdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.kdr'], 'cim:PU', 'cim:ExcAC8B.kdr');
        }
        if ('cim:ExcAC8B.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.ke'], 'cim:PU', 'cim:ExcAC8B.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.ke'], 'cim:PU', 'cim:ExcAC8B.ke');
        }
        if ('cim:ExcAC8B.kir' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.kir'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.kir'], 'cim:PU', 'cim:ExcAC8B.kir');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.kir'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.kir'], 'cim:PU', 'cim:ExcAC8B.kir');
        }
        if ('cim:ExcAC8B.kpr' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.kpr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.kpr'], 'cim:PU', 'cim:ExcAC8B.kpr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.kpr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.kpr'], 'cim:PU', 'cim:ExcAC8B.kpr');
        }
        if ('cim:ExcAC8B.ks' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.ks'], 'cim:PU', 'cim:ExcAC8B.ks');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.ks'], 'cim:PU', 'cim:ExcAC8B.ks');
        }
        if ('cim:ExcAC8B.pidlim' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.pidlim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.pidlim'], 'cim:Boolean', 'cim:ExcAC8B.pidlim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.pidlim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.pidlim'], 'cim:Boolean', 'cim:ExcAC8B.pidlim');
        }
        if ('cim:ExcAC8B.seve1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.seve1'], 'cim:Simple_Float', 'cim:ExcAC8B.seve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.seve1'], 'cim:Simple_Float', 'cim:ExcAC8B.seve1');
        }
        if ('cim:ExcAC8B.seve2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.seve2'], 'cim:Simple_Float', 'cim:ExcAC8B.seve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.seve2'], 'cim:Simple_Float', 'cim:ExcAC8B.seve2');
        }
        if ('cim:ExcAC8B.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.ta'], 'cim:Seconds', 'cim:ExcAC8B.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.ta'], 'cim:Seconds', 'cim:ExcAC8B.ta');
        }
        if ('cim:ExcAC8B.tdr' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.tdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.tdr'], 'cim:Seconds', 'cim:ExcAC8B.tdr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.tdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.tdr'], 'cim:Seconds', 'cim:ExcAC8B.tdr');
        }
        if ('cim:ExcAC8B.te' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.te'], 'cim:Seconds', 'cim:ExcAC8B.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.te'], 'cim:Seconds', 'cim:ExcAC8B.te');
        }
        if ('cim:ExcAC8B.telim' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.telim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.telim'], 'cim:Boolean', 'cim:ExcAC8B.telim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.telim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.telim'], 'cim:Boolean', 'cim:ExcAC8B.telim');
        }
        if ('cim:ExcAC8B.ve1' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.ve1'], 'cim:PU', 'cim:ExcAC8B.ve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.ve1'], 'cim:PU', 'cim:ExcAC8B.ve1');
        }
        if ('cim:ExcAC8B.ve2' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.ve2'], 'cim:PU', 'cim:ExcAC8B.ve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.ve2'], 'cim:PU', 'cim:ExcAC8B.ve2');
        }
        if ('cim:ExcAC8B.vemin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.vemin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vemin'], 'cim:PU', 'cim:ExcAC8B.vemin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.vemin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vemin'], 'cim:PU', 'cim:ExcAC8B.vemin');
        }
        if ('cim:ExcAC8B.vfemax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vfemax'], 'cim:PU', 'cim:ExcAC8B.vfemax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vfemax'], 'cim:PU', 'cim:ExcAC8B.vfemax');
        }
        if ('cim:ExcAC8B.vimax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vimax'], 'cim:PU', 'cim:ExcAC8B.vimax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vimax'], 'cim:PU', 'cim:ExcAC8B.vimax');
        }
        if ('cim:ExcAC8B.vimin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vimin'], 'cim:PU', 'cim:ExcAC8B.vimin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vimin'], 'cim:PU', 'cim:ExcAC8B.vimin');
        }
        if ('cim:ExcAC8B.vpidmax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.vpidmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vpidmax'], 'cim:PU', 'cim:ExcAC8B.vpidmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.vpidmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vpidmax'], 'cim:PU', 'cim:ExcAC8B.vpidmax');
        }
        if ('cim:ExcAC8B.vpidmin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.vpidmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vpidmin'], 'cim:PU', 'cim:ExcAC8B.vpidmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.vpidmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vpidmin'], 'cim:PU', 'cim:ExcAC8B.vpidmin');
        }
        if ('cim:ExcAC8B.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vrmax'], 'cim:PU', 'cim:ExcAC8B.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vrmax'], 'cim:PU', 'cim:ExcAC8B.vrmax');
        }
        if ('cim:ExcAC8B.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vrmin'], 'cim:PU', 'cim:ExcAC8B.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vrmin'], 'cim:PU', 'cim:ExcAC8B.vrmin');
        }
        if ('cim:ExcAC8B.vtmult' in object) {
          attributeEntries['filledEntries']['cim:ExcAC8B.vtmult'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vtmult'], 'cim:Boolean', 'cim:ExcAC8B.vtmult');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAC8B.vtmult'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAC8B.vtmult'], 'cim:Boolean', 'cim:ExcAC8B.vtmult');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAC8B.inlim", "cim:ExcAC8B.ka", "cim:ExcAC8B.kc", "cim:ExcAC8B.kd", "cim:ExcAC8B.kdr", "cim:ExcAC8B.ke", "cim:ExcAC8B.kir", "cim:ExcAC8B.kpr", "cim:ExcAC8B.ks", "cim:ExcAC8B.pidlim", "cim:ExcAC8B.seve1", "cim:ExcAC8B.seve2", "cim:ExcAC8B.ta", "cim:ExcAC8B.tdr", "cim:ExcAC8B.te", "cim:ExcAC8B.telim", "cim:ExcAC8B.ve1", "cim:ExcAC8B.ve2", "cim:ExcAC8B.vemin", "cim:ExcAC8B.vfemax", "cim:ExcAC8B.vimax", "cim:ExcAC8B.vimin", "cim:ExcAC8B.vpidmax", "cim:ExcAC8B.vpidmin", "cim:ExcAC8B.vrmax", "cim:ExcAC8B.vrmin", "cim:ExcAC8B.vtmult"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAC8B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAC8B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAC8B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAC8B;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAC8B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'inlim': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'kdr': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'kir': [CGMESProfile.shortNames.DY],
    'kpr': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'pidlim': [CGMESProfile.shortNames.DY],
    'seve1': [CGMESProfile.shortNames.DY],
    'seve2': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tdr': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'telim': [CGMESProfile.shortNames.DY],
    've1': [CGMESProfile.shortNames.DY],
    've2': [CGMESProfile.shortNames.DY],
    'vemin': [CGMESProfile.shortNames.DY],
    'vfemax': [CGMESProfile.shortNames.DY],
    'vimax': [CGMESProfile.shortNames.DY],
    'vimin': [CGMESProfile.shortNames.DY],
    'vpidmax': [CGMESProfile.shortNames.DY],
    'vpidmin': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'vtmult': [CGMESProfile.shortNames.DY]
  });

  var ExcANS = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcANS, _ExcitationSystemDyna);
    var _super = _createSuper(ExcANS);
    function ExcANS() {
      _classCallCheck(this, ExcANS);
      return _super.apply(this, arguments);
    }
    _createClass(ExcANS, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcANS";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcANS.k3' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.k3'], 'cim:Simple_Float', 'cim:ExcANS.k3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.k3'], 'cim:Simple_Float', 'cim:ExcANS.k3');
        }
        if ('cim:ExcANS.k2' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.k2'], 'cim:Simple_Float', 'cim:ExcANS.k2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.k2'], 'cim:Simple_Float', 'cim:ExcANS.k2');
        }
        if ('cim:ExcANS.kce' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.kce'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.kce'], 'cim:Simple_Float', 'cim:ExcANS.kce');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.kce'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.kce'], 'cim:Simple_Float', 'cim:ExcANS.kce');
        }
        if ('cim:ExcANS.t3' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.t3'], 'cim:Seconds', 'cim:ExcANS.t3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.t3'], 'cim:Seconds', 'cim:ExcANS.t3');
        }
        if ('cim:ExcANS.t2' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.t2'], 'cim:Seconds', 'cim:ExcANS.t2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.t2'], 'cim:Seconds', 'cim:ExcANS.t2');
        }
        if ('cim:ExcANS.t1' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.t1'], 'cim:Seconds', 'cim:ExcANS.t1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.t1'], 'cim:Seconds', 'cim:ExcANS.t1');
        }
        if ('cim:ExcANS.blint' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.blint'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.blint'], 'cim:Integer', 'cim:ExcANS.blint');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.blint'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.blint'], 'cim:Integer', 'cim:ExcANS.blint');
        }
        if ('cim:ExcANS.kvfif' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.kvfif'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.kvfif'], 'cim:Integer', 'cim:ExcANS.kvfif');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.kvfif'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.kvfif'], 'cim:Integer', 'cim:ExcANS.kvfif');
        }
        if ('cim:ExcANS.ifmn' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.ifmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.ifmn'], 'cim:PU', 'cim:ExcANS.ifmn');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.ifmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.ifmn'], 'cim:PU', 'cim:ExcANS.ifmn');
        }
        if ('cim:ExcANS.ifmx' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.ifmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.ifmx'], 'cim:PU', 'cim:ExcANS.ifmx');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.ifmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.ifmx'], 'cim:PU', 'cim:ExcANS.ifmx');
        }
        if ('cim:ExcANS.vrmn' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.vrmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.vrmn'], 'cim:PU', 'cim:ExcANS.vrmn');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.vrmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.vrmn'], 'cim:PU', 'cim:ExcANS.vrmn');
        }
        if ('cim:ExcANS.vrmx' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.vrmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.vrmx'], 'cim:PU', 'cim:ExcANS.vrmx');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.vrmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.vrmx'], 'cim:PU', 'cim:ExcANS.vrmx');
        }
        if ('cim:ExcANS.krvecc' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.krvecc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.krvecc'], 'cim:Integer', 'cim:ExcANS.krvecc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.krvecc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.krvecc'], 'cim:Integer', 'cim:ExcANS.krvecc');
        }
        if ('cim:ExcANS.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcANS.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.tb'], 'cim:Seconds', 'cim:ExcANS.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcANS.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcANS.tb'], 'cim:Seconds', 'cim:ExcANS.tb');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcANS.k3", "cim:ExcANS.k2", "cim:ExcANS.kce", "cim:ExcANS.t3", "cim:ExcANS.t2", "cim:ExcANS.t1", "cim:ExcANS.blint", "cim:ExcANS.kvfif", "cim:ExcANS.ifmn", "cim:ExcANS.ifmx", "cim:ExcANS.vrmn", "cim:ExcANS.vrmx", "cim:ExcANS.krvecc", "cim:ExcANS.tb"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcANS.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcANS: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcANS.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcANS;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcANS, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'k3': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    'kce': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    'blint': [CGMESProfile.shortNames.DY],
    'kvfif': [CGMESProfile.shortNames.DY],
    'ifmn': [CGMESProfile.shortNames.DY],
    'ifmx': [CGMESProfile.shortNames.DY],
    'vrmn': [CGMESProfile.shortNames.DY],
    'vrmx': [CGMESProfile.shortNames.DY],
    'krvecc': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY]
  });

  var ExcAVR1 = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAVR1, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAVR1);
    function ExcAVR1() {
      _classCallCheck(this, ExcAVR1);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAVR1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAVR1";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAVR1.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR1.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.ka'], 'cim:Simple_Float', 'cim:ExcAVR1.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR1.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.ka'], 'cim:Simple_Float', 'cim:ExcAVR1.ka');
        }
        if ('cim:ExcAVR1.vrmn' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR1.vrmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.vrmn'], 'cim:PU', 'cim:ExcAVR1.vrmn');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR1.vrmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.vrmn'], 'cim:PU', 'cim:ExcAVR1.vrmn');
        }
        if ('cim:ExcAVR1.vrmx' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR1.vrmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.vrmx'], 'cim:PU', 'cim:ExcAVR1.vrmx');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR1.vrmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.vrmx'], 'cim:PU', 'cim:ExcAVR1.vrmx');
        }
        if ('cim:ExcAVR1.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR1.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.ta'], 'cim:Seconds', 'cim:ExcAVR1.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR1.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.ta'], 'cim:Seconds', 'cim:ExcAVR1.ta');
        }
        if ('cim:ExcAVR1.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR1.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.tb'], 'cim:Seconds', 'cim:ExcAVR1.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR1.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.tb'], 'cim:Seconds', 'cim:ExcAVR1.tb');
        }
        if ('cim:ExcAVR1.te' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR1.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.te'], 'cim:Seconds', 'cim:ExcAVR1.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR1.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.te'], 'cim:Seconds', 'cim:ExcAVR1.te');
        }
        if ('cim:ExcAVR1.e1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR1.e1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.e1'], 'cim:PU', 'cim:ExcAVR1.e1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR1.e1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.e1'], 'cim:PU', 'cim:ExcAVR1.e1');
        }
        if ('cim:ExcAVR1.se1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR1.se1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.se1'], 'cim:Simple_Float', 'cim:ExcAVR1.se1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR1.se1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.se1'], 'cim:Simple_Float', 'cim:ExcAVR1.se1');
        }
        if ('cim:ExcAVR1.e2' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR1.e2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.e2'], 'cim:PU', 'cim:ExcAVR1.e2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR1.e2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.e2'], 'cim:PU', 'cim:ExcAVR1.e2');
        }
        if ('cim:ExcAVR1.se2' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR1.se2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.se2'], 'cim:Simple_Float', 'cim:ExcAVR1.se2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR1.se2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.se2'], 'cim:Simple_Float', 'cim:ExcAVR1.se2');
        }
        if ('cim:ExcAVR1.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR1.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.kf'], 'cim:Simple_Float', 'cim:ExcAVR1.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR1.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.kf'], 'cim:Simple_Float', 'cim:ExcAVR1.kf');
        }
        if ('cim:ExcAVR1.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR1.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.tf'], 'cim:Seconds', 'cim:ExcAVR1.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR1.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR1.tf'], 'cim:Seconds', 'cim:ExcAVR1.tf');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAVR1.ka", "cim:ExcAVR1.vrmn", "cim:ExcAVR1.vrmx", "cim:ExcAVR1.ta", "cim:ExcAVR1.tb", "cim:ExcAVR1.te", "cim:ExcAVR1.e1", "cim:ExcAVR1.se1", "cim:ExcAVR1.e2", "cim:ExcAVR1.se2", "cim:ExcAVR1.kf", "cim:ExcAVR1.tf"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAVR1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAVR1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAVR1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAVR1;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAVR1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'vrmn': [CGMESProfile.shortNames.DY],
    'vrmx': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'e1': [CGMESProfile.shortNames.DY],
    'se1': [CGMESProfile.shortNames.DY],
    'e2': [CGMESProfile.shortNames.DY],
    'se2': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY]
  });

  var ExcAVR2 = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAVR2, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAVR2);
    function ExcAVR2() {
      _classCallCheck(this, ExcAVR2);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAVR2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAVR2";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAVR2.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.ka'], 'cim:Simple_Float', 'cim:ExcAVR2.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.ka'], 'cim:Simple_Float', 'cim:ExcAVR2.ka');
        }
        if ('cim:ExcAVR2.vrmn' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.vrmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.vrmn'], 'cim:PU', 'cim:ExcAVR2.vrmn');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.vrmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.vrmn'], 'cim:PU', 'cim:ExcAVR2.vrmn');
        }
        if ('cim:ExcAVR2.vrmx' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.vrmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.vrmx'], 'cim:PU', 'cim:ExcAVR2.vrmx');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.vrmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.vrmx'], 'cim:PU', 'cim:ExcAVR2.vrmx');
        }
        if ('cim:ExcAVR2.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.ta'], 'cim:Seconds', 'cim:ExcAVR2.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.ta'], 'cim:Seconds', 'cim:ExcAVR2.ta');
        }
        if ('cim:ExcAVR2.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.tb'], 'cim:Seconds', 'cim:ExcAVR2.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.tb'], 'cim:Seconds', 'cim:ExcAVR2.tb');
        }
        if ('cim:ExcAVR2.te' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.te'], 'cim:Seconds', 'cim:ExcAVR2.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.te'], 'cim:Seconds', 'cim:ExcAVR2.te');
        }
        if ('cim:ExcAVR2.e1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.e1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.e1'], 'cim:PU', 'cim:ExcAVR2.e1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.e1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.e1'], 'cim:PU', 'cim:ExcAVR2.e1');
        }
        if ('cim:ExcAVR2.se1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.se1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.se1'], 'cim:Simple_Float', 'cim:ExcAVR2.se1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.se1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.se1'], 'cim:Simple_Float', 'cim:ExcAVR2.se1');
        }
        if ('cim:ExcAVR2.e2' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.e2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.e2'], 'cim:PU', 'cim:ExcAVR2.e2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.e2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.e2'], 'cim:PU', 'cim:ExcAVR2.e2');
        }
        if ('cim:ExcAVR2.se2' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.se2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.se2'], 'cim:Simple_Float', 'cim:ExcAVR2.se2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.se2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.se2'], 'cim:Simple_Float', 'cim:ExcAVR2.se2');
        }
        if ('cim:ExcAVR2.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.kf'], 'cim:Simple_Float', 'cim:ExcAVR2.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.kf'], 'cim:Simple_Float', 'cim:ExcAVR2.kf');
        }
        if ('cim:ExcAVR2.tf1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.tf1'], 'cim:Seconds', 'cim:ExcAVR2.tf1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.tf1'], 'cim:Seconds', 'cim:ExcAVR2.tf1');
        }
        if ('cim:ExcAVR2.tf2' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR2.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.tf2'], 'cim:Seconds', 'cim:ExcAVR2.tf2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR2.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR2.tf2'], 'cim:Seconds', 'cim:ExcAVR2.tf2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAVR2.ka", "cim:ExcAVR2.vrmn", "cim:ExcAVR2.vrmx", "cim:ExcAVR2.ta", "cim:ExcAVR2.tb", "cim:ExcAVR2.te", "cim:ExcAVR2.e1", "cim:ExcAVR2.se1", "cim:ExcAVR2.e2", "cim:ExcAVR2.se2", "cim:ExcAVR2.kf", "cim:ExcAVR2.tf1", "cim:ExcAVR2.tf2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAVR2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAVR2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAVR2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAVR2;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAVR2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'vrmn': [CGMESProfile.shortNames.DY],
    'vrmx': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'e1': [CGMESProfile.shortNames.DY],
    'se1': [CGMESProfile.shortNames.DY],
    'e2': [CGMESProfile.shortNames.DY],
    'se2': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf1': [CGMESProfile.shortNames.DY],
    'tf2': [CGMESProfile.shortNames.DY]
  });

  var ExcAVR3 = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAVR3, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAVR3);
    function ExcAVR3() {
      _classCallCheck(this, ExcAVR3);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAVR3, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAVR3";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAVR3.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR3.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.ka'], 'cim:Simple_Float', 'cim:ExcAVR3.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR3.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.ka'], 'cim:Simple_Float', 'cim:ExcAVR3.ka');
        }
        if ('cim:ExcAVR3.vrmn' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR3.vrmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.vrmn'], 'cim:PU', 'cim:ExcAVR3.vrmn');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR3.vrmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.vrmn'], 'cim:PU', 'cim:ExcAVR3.vrmn');
        }
        if ('cim:ExcAVR3.vrmx' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR3.vrmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.vrmx'], 'cim:PU', 'cim:ExcAVR3.vrmx');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR3.vrmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.vrmx'], 'cim:PU', 'cim:ExcAVR3.vrmx');
        }
        if ('cim:ExcAVR3.t1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR3.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.t1'], 'cim:Seconds', 'cim:ExcAVR3.t1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR3.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.t1'], 'cim:Seconds', 'cim:ExcAVR3.t1');
        }
        if ('cim:ExcAVR3.t2' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR3.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.t2'], 'cim:Seconds', 'cim:ExcAVR3.t2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR3.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.t2'], 'cim:Seconds', 'cim:ExcAVR3.t2');
        }
        if ('cim:ExcAVR3.t3' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR3.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.t3'], 'cim:Seconds', 'cim:ExcAVR3.t3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR3.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.t3'], 'cim:Seconds', 'cim:ExcAVR3.t3');
        }
        if ('cim:ExcAVR3.t4' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR3.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.t4'], 'cim:Seconds', 'cim:ExcAVR3.t4');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR3.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.t4'], 'cim:Seconds', 'cim:ExcAVR3.t4');
        }
        if ('cim:ExcAVR3.te' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR3.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.te'], 'cim:Seconds', 'cim:ExcAVR3.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR3.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.te'], 'cim:Seconds', 'cim:ExcAVR3.te');
        }
        if ('cim:ExcAVR3.e1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR3.e1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.e1'], 'cim:PU', 'cim:ExcAVR3.e1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR3.e1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.e1'], 'cim:PU', 'cim:ExcAVR3.e1');
        }
        if ('cim:ExcAVR3.se1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR3.se1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.se1'], 'cim:Simple_Float', 'cim:ExcAVR3.se1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR3.se1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.se1'], 'cim:Simple_Float', 'cim:ExcAVR3.se1');
        }
        if ('cim:ExcAVR3.e2' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR3.e2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.e2'], 'cim:PU', 'cim:ExcAVR3.e2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR3.e2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.e2'], 'cim:PU', 'cim:ExcAVR3.e2');
        }
        if ('cim:ExcAVR3.se2' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR3.se2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.se2'], 'cim:Simple_Float', 'cim:ExcAVR3.se2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR3.se2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR3.se2'], 'cim:Simple_Float', 'cim:ExcAVR3.se2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAVR3.ka", "cim:ExcAVR3.vrmn", "cim:ExcAVR3.vrmx", "cim:ExcAVR3.t1", "cim:ExcAVR3.t2", "cim:ExcAVR3.t3", "cim:ExcAVR3.t4", "cim:ExcAVR3.te", "cim:ExcAVR3.e1", "cim:ExcAVR3.se1", "cim:ExcAVR3.e2", "cim:ExcAVR3.se2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAVR3.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAVR3: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAVR3.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAVR3;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAVR3, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'vrmn': [CGMESProfile.shortNames.DY],
    'vrmx': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'e1': [CGMESProfile.shortNames.DY],
    'se1': [CGMESProfile.shortNames.DY],
    'e2': [CGMESProfile.shortNames.DY],
    'se2': [CGMESProfile.shortNames.DY]
  });

  var ExcAVR4 = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAVR4, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAVR4);
    function ExcAVR4() {
      _classCallCheck(this, ExcAVR4);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAVR4, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAVR4";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAVR4.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.ka'], 'cim:Simple_Float', 'cim:ExcAVR4.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.ka'], 'cim:Simple_Float', 'cim:ExcAVR4.ka');
        }
        if ('cim:ExcAVR4.vrmn' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.vrmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.vrmn'], 'cim:PU', 'cim:ExcAVR4.vrmn');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.vrmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.vrmn'], 'cim:PU', 'cim:ExcAVR4.vrmn');
        }
        if ('cim:ExcAVR4.vrmx' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.vrmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.vrmx'], 'cim:PU', 'cim:ExcAVR4.vrmx');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.vrmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.vrmx'], 'cim:PU', 'cim:ExcAVR4.vrmx');
        }
        if ('cim:ExcAVR4.t1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.t1'], 'cim:Seconds', 'cim:ExcAVR4.t1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.t1'], 'cim:Seconds', 'cim:ExcAVR4.t1');
        }
        if ('cim:ExcAVR4.t2' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.t2'], 'cim:Seconds', 'cim:ExcAVR4.t2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.t2'], 'cim:Seconds', 'cim:ExcAVR4.t2');
        }
        if ('cim:ExcAVR4.t3' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.t3'], 'cim:Seconds', 'cim:ExcAVR4.t3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.t3'], 'cim:Seconds', 'cim:ExcAVR4.t3');
        }
        if ('cim:ExcAVR4.t4' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.t4'], 'cim:Seconds', 'cim:ExcAVR4.t4');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.t4'], 'cim:Seconds', 'cim:ExcAVR4.t4');
        }
        if ('cim:ExcAVR4.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.ke'], 'cim:Simple_Float', 'cim:ExcAVR4.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.ke'], 'cim:Simple_Float', 'cim:ExcAVR4.ke');
        }
        if ('cim:ExcAVR4.vfmx' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.vfmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.vfmx'], 'cim:PU', 'cim:ExcAVR4.vfmx');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.vfmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.vfmx'], 'cim:PU', 'cim:ExcAVR4.vfmx');
        }
        if ('cim:ExcAVR4.vfmn' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.vfmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.vfmn'], 'cim:PU', 'cim:ExcAVR4.vfmn');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.vfmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.vfmn'], 'cim:PU', 'cim:ExcAVR4.vfmn');
        }
        if ('cim:ExcAVR4.kif' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.kif'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.kif'], 'cim:Simple_Float', 'cim:ExcAVR4.kif');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.kif'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.kif'], 'cim:Simple_Float', 'cim:ExcAVR4.kif');
        }
        if ('cim:ExcAVR4.tif' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.tif'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.tif'], 'cim:Seconds', 'cim:ExcAVR4.tif');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.tif'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.tif'], 'cim:Seconds', 'cim:ExcAVR4.tif');
        }
        if ('cim:ExcAVR4.t1if' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.t1if'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.t1if'], 'cim:Seconds', 'cim:ExcAVR4.t1if');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.t1if'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.t1if'], 'cim:Seconds', 'cim:ExcAVR4.t1if');
        }
        if ('cim:ExcAVR4.imul' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR4.imul'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.imul'], 'cim:Boolean', 'cim:ExcAVR4.imul');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR4.imul'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR4.imul'], 'cim:Boolean', 'cim:ExcAVR4.imul');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAVR4.ka", "cim:ExcAVR4.vrmn", "cim:ExcAVR4.vrmx", "cim:ExcAVR4.t1", "cim:ExcAVR4.t2", "cim:ExcAVR4.t3", "cim:ExcAVR4.t4", "cim:ExcAVR4.ke", "cim:ExcAVR4.vfmx", "cim:ExcAVR4.vfmn", "cim:ExcAVR4.kif", "cim:ExcAVR4.tif", "cim:ExcAVR4.t1if", "cim:ExcAVR4.imul"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAVR4.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAVR4: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAVR4.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAVR4;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAVR4, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'vrmn': [CGMESProfile.shortNames.DY],
    'vrmx': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'vfmx': [CGMESProfile.shortNames.DY],
    'vfmn': [CGMESProfile.shortNames.DY],
    'kif': [CGMESProfile.shortNames.DY],
    'tif': [CGMESProfile.shortNames.DY],
    't1if': [CGMESProfile.shortNames.DY],
    'imul': [CGMESProfile.shortNames.DY]
  });

  var ExcAVR5 = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAVR5, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAVR5);
    function ExcAVR5() {
      _classCallCheck(this, ExcAVR5);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAVR5, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAVR5";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAVR5.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR5.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR5.ka'], 'cim:PU', 'cim:ExcAVR5.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR5.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR5.ka'], 'cim:PU', 'cim:ExcAVR5.ka');
        }
        if ('cim:ExcAVR5.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR5.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR5.ta'], 'cim:Seconds', 'cim:ExcAVR5.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR5.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR5.ta'], 'cim:Seconds', 'cim:ExcAVR5.ta');
        }
        if ('cim:ExcAVR5.rex' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR5.rex'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR5.rex'], 'cim:PU', 'cim:ExcAVR5.rex');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR5.rex'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR5.rex'], 'cim:PU', 'cim:ExcAVR5.rex');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAVR5.ka", "cim:ExcAVR5.ta", "cim:ExcAVR5.rex"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAVR5.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAVR5: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAVR5.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAVR5;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAVR5, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'rex': [CGMESProfile.shortNames.DY]
  });

  var ExcAVR7 = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcAVR7, _ExcitationSystemDyna);
    var _super = _createSuper(ExcAVR7);
    function ExcAVR7() {
      _classCallCheck(this, ExcAVR7);
      return _super.apply(this, arguments);
    }
    _createClass(ExcAVR7, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcAVR7";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcAVR7.k1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.k1'], 'cim:PU', 'cim:ExcAVR7.k1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.k1'], 'cim:PU', 'cim:ExcAVR7.k1');
        }
        if ('cim:ExcAVR7.a1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.a1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.a1'], 'cim:PU', 'cim:ExcAVR7.a1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.a1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.a1'], 'cim:PU', 'cim:ExcAVR7.a1');
        }
        if ('cim:ExcAVR7.a2' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.a2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.a2'], 'cim:PU', 'cim:ExcAVR7.a2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.a2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.a2'], 'cim:PU', 'cim:ExcAVR7.a2');
        }
        if ('cim:ExcAVR7.t1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.t1'], 'cim:Seconds', 'cim:ExcAVR7.t1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.t1'], 'cim:Seconds', 'cim:ExcAVR7.t1');
        }
        if ('cim:ExcAVR7.t2' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.t2'], 'cim:Seconds', 'cim:ExcAVR7.t2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.t2'], 'cim:Seconds', 'cim:ExcAVR7.t2');
        }
        if ('cim:ExcAVR7.vmax1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.vmax1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.vmax1'], 'cim:PU', 'cim:ExcAVR7.vmax1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.vmax1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.vmax1'], 'cim:PU', 'cim:ExcAVR7.vmax1');
        }
        if ('cim:ExcAVR7.vmin1' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.vmin1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.vmin1'], 'cim:PU', 'cim:ExcAVR7.vmin1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.vmin1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.vmin1'], 'cim:PU', 'cim:ExcAVR7.vmin1');
        }
        if ('cim:ExcAVR7.k3' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.k3'], 'cim:PU', 'cim:ExcAVR7.k3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.k3'], 'cim:PU', 'cim:ExcAVR7.k3');
        }
        if ('cim:ExcAVR7.a3' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.a3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.a3'], 'cim:PU', 'cim:ExcAVR7.a3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.a3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.a3'], 'cim:PU', 'cim:ExcAVR7.a3');
        }
        if ('cim:ExcAVR7.a4' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.a4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.a4'], 'cim:PU', 'cim:ExcAVR7.a4');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.a4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.a4'], 'cim:PU', 'cim:ExcAVR7.a4');
        }
        if ('cim:ExcAVR7.t3' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.t3'], 'cim:Seconds', 'cim:ExcAVR7.t3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.t3'], 'cim:Seconds', 'cim:ExcAVR7.t3');
        }
        if ('cim:ExcAVR7.t4' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.t4'], 'cim:Seconds', 'cim:ExcAVR7.t4');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.t4'], 'cim:Seconds', 'cim:ExcAVR7.t4');
        }
        if ('cim:ExcAVR7.vmax3' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.vmax3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.vmax3'], 'cim:PU', 'cim:ExcAVR7.vmax3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.vmax3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.vmax3'], 'cim:PU', 'cim:ExcAVR7.vmax3');
        }
        if ('cim:ExcAVR7.vmin3' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.vmin3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.vmin3'], 'cim:PU', 'cim:ExcAVR7.vmin3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.vmin3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.vmin3'], 'cim:PU', 'cim:ExcAVR7.vmin3');
        }
        if ('cim:ExcAVR7.k5' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.k5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.k5'], 'cim:PU', 'cim:ExcAVR7.k5');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.k5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.k5'], 'cim:PU', 'cim:ExcAVR7.k5');
        }
        if ('cim:ExcAVR7.a5' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.a5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.a5'], 'cim:PU', 'cim:ExcAVR7.a5');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.a5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.a5'], 'cim:PU', 'cim:ExcAVR7.a5');
        }
        if ('cim:ExcAVR7.a6' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.a6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.a6'], 'cim:PU', 'cim:ExcAVR7.a6');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.a6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.a6'], 'cim:PU', 'cim:ExcAVR7.a6');
        }
        if ('cim:ExcAVR7.t5' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.t5'], 'cim:Seconds', 'cim:ExcAVR7.t5');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.t5'], 'cim:Seconds', 'cim:ExcAVR7.t5');
        }
        if ('cim:ExcAVR7.t6' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.t6'], 'cim:Seconds', 'cim:ExcAVR7.t6');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.t6'], 'cim:Seconds', 'cim:ExcAVR7.t6');
        }
        if ('cim:ExcAVR7.vmax5' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.vmax5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.vmax5'], 'cim:PU', 'cim:ExcAVR7.vmax5');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.vmax5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.vmax5'], 'cim:PU', 'cim:ExcAVR7.vmax5');
        }
        if ('cim:ExcAVR7.vmin5' in object) {
          attributeEntries['filledEntries']['cim:ExcAVR7.vmin5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.vmin5'], 'cim:PU', 'cim:ExcAVR7.vmin5');
        } else {
          attributeEntries['emptyEntries']['cim:ExcAVR7.vmin5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcAVR7.vmin5'], 'cim:PU', 'cim:ExcAVR7.vmin5');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcAVR7.k1", "cim:ExcAVR7.a1", "cim:ExcAVR7.a2", "cim:ExcAVR7.t1", "cim:ExcAVR7.t2", "cim:ExcAVR7.vmax1", "cim:ExcAVR7.vmin1", "cim:ExcAVR7.k3", "cim:ExcAVR7.a3", "cim:ExcAVR7.a4", "cim:ExcAVR7.t3", "cim:ExcAVR7.t4", "cim:ExcAVR7.vmax3", "cim:ExcAVR7.vmin3", "cim:ExcAVR7.k5", "cim:ExcAVR7.a5", "cim:ExcAVR7.a6", "cim:ExcAVR7.t5", "cim:ExcAVR7.t6", "cim:ExcAVR7.vmax5", "cim:ExcAVR7.vmin5"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcAVR7.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcAVR7: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcAVR7.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcAVR7;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcAVR7, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'a1': [CGMESProfile.shortNames.DY],
    'a2': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    'vmax1': [CGMESProfile.shortNames.DY],
    'vmin1': [CGMESProfile.shortNames.DY],
    'k3': [CGMESProfile.shortNames.DY],
    'a3': [CGMESProfile.shortNames.DY],
    'a4': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'vmax3': [CGMESProfile.shortNames.DY],
    'vmin3': [CGMESProfile.shortNames.DY],
    'k5': [CGMESProfile.shortNames.DY],
    'a5': [CGMESProfile.shortNames.DY],
    'a6': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    'vmax5': [CGMESProfile.shortNames.DY],
    'vmin5': [CGMESProfile.shortNames.DY]
  });

  var ExcBBC = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcBBC, _ExcitationSystemDyna);
    var _super = _createSuper(ExcBBC);
    function ExcBBC() {
      _classCallCheck(this, ExcBBC);
      return _super.apply(this, arguments);
    }
    _createClass(ExcBBC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcBBC";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcBBC.t1' in object) {
          attributeEntries['filledEntries']['cim:ExcBBC.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.t1'], 'cim:Seconds', 'cim:ExcBBC.t1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcBBC.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.t1'], 'cim:Seconds', 'cim:ExcBBC.t1');
        }
        if ('cim:ExcBBC.t2' in object) {
          attributeEntries['filledEntries']['cim:ExcBBC.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.t2'], 'cim:Seconds', 'cim:ExcBBC.t2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcBBC.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.t2'], 'cim:Seconds', 'cim:ExcBBC.t2');
        }
        if ('cim:ExcBBC.t3' in object) {
          attributeEntries['filledEntries']['cim:ExcBBC.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.t3'], 'cim:Seconds', 'cim:ExcBBC.t3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcBBC.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.t3'], 'cim:Seconds', 'cim:ExcBBC.t3');
        }
        if ('cim:ExcBBC.t4' in object) {
          attributeEntries['filledEntries']['cim:ExcBBC.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.t4'], 'cim:Seconds', 'cim:ExcBBC.t4');
        } else {
          attributeEntries['emptyEntries']['cim:ExcBBC.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.t4'], 'cim:Seconds', 'cim:ExcBBC.t4');
        }
        if ('cim:ExcBBC.k' in object) {
          attributeEntries['filledEntries']['cim:ExcBBC.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.k'], 'cim:PU', 'cim:ExcBBC.k');
        } else {
          attributeEntries['emptyEntries']['cim:ExcBBC.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.k'], 'cim:PU', 'cim:ExcBBC.k');
        }
        if ('cim:ExcBBC.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcBBC.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.vrmin'], 'cim:PU', 'cim:ExcBBC.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcBBC.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.vrmin'], 'cim:PU', 'cim:ExcBBC.vrmin');
        }
        if ('cim:ExcBBC.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcBBC.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.vrmax'], 'cim:PU', 'cim:ExcBBC.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcBBC.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.vrmax'], 'cim:PU', 'cim:ExcBBC.vrmax');
        }
        if ('cim:ExcBBC.efdmin' in object) {
          attributeEntries['filledEntries']['cim:ExcBBC.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.efdmin'], 'cim:PU', 'cim:ExcBBC.efdmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcBBC.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.efdmin'], 'cim:PU', 'cim:ExcBBC.efdmin');
        }
        if ('cim:ExcBBC.efdmax' in object) {
          attributeEntries['filledEntries']['cim:ExcBBC.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.efdmax'], 'cim:PU', 'cim:ExcBBC.efdmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcBBC.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.efdmax'], 'cim:PU', 'cim:ExcBBC.efdmax');
        }
        if ('cim:ExcBBC.xe' in object) {
          attributeEntries['filledEntries']['cim:ExcBBC.xe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.xe'], 'cim:PU', 'cim:ExcBBC.xe');
        } else {
          attributeEntries['emptyEntries']['cim:ExcBBC.xe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.xe'], 'cim:PU', 'cim:ExcBBC.xe');
        }
        if ('cim:ExcBBC.switch' in object) {
          attributeEntries['filledEntries']['cim:ExcBBC.switch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.switch'], 'cim:Boolean', 'cim:ExcBBC.switch');
        } else {
          attributeEntries['emptyEntries']['cim:ExcBBC.switch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcBBC.switch'], 'cim:Boolean', 'cim:ExcBBC.switch');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcBBC.t1", "cim:ExcBBC.t2", "cim:ExcBBC.t3", "cim:ExcBBC.t4", "cim:ExcBBC.k", "cim:ExcBBC.vrmin", "cim:ExcBBC.vrmax", "cim:ExcBBC.efdmin", "cim:ExcBBC.efdmax", "cim:ExcBBC.xe", "cim:ExcBBC.switch"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcBBC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcBBC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcBBC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcBBC;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcBBC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'efdmin': [CGMESProfile.shortNames.DY],
    'efdmax': [CGMESProfile.shortNames.DY],
    'xe': [CGMESProfile.shortNames.DY],
    'switch': [CGMESProfile.shortNames.DY]
  });

  var ExcCZ = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcCZ, _ExcitationSystemDyna);
    var _super = _createSuper(ExcCZ);
    function ExcCZ() {
      _classCallCheck(this, ExcCZ);
      return _super.apply(this, arguments);
    }
    _createClass(ExcCZ, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcCZ";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcCZ.kp' in object) {
          attributeEntries['filledEntries']['cim:ExcCZ.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.kp'], 'cim:PU', 'cim:ExcCZ.kp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcCZ.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.kp'], 'cim:PU', 'cim:ExcCZ.kp');
        }
        if ('cim:ExcCZ.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcCZ.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.tc'], 'cim:Seconds', 'cim:ExcCZ.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcCZ.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.tc'], 'cim:Seconds', 'cim:ExcCZ.tc');
        }
        if ('cim:ExcCZ.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcCZ.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.vrmax'], 'cim:PU', 'cim:ExcCZ.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcCZ.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.vrmax'], 'cim:PU', 'cim:ExcCZ.vrmax');
        }
        if ('cim:ExcCZ.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcCZ.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.vrmin'], 'cim:PU', 'cim:ExcCZ.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcCZ.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.vrmin'], 'cim:PU', 'cim:ExcCZ.vrmin');
        }
        if ('cim:ExcCZ.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcCZ.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.ka'], 'cim:PU', 'cim:ExcCZ.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcCZ.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.ka'], 'cim:PU', 'cim:ExcCZ.ka');
        }
        if ('cim:ExcCZ.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcCZ.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.ta'], 'cim:Seconds', 'cim:ExcCZ.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcCZ.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.ta'], 'cim:Seconds', 'cim:ExcCZ.ta');
        }
        if ('cim:ExcCZ.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcCZ.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.ke'], 'cim:PU', 'cim:ExcCZ.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcCZ.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.ke'], 'cim:PU', 'cim:ExcCZ.ke');
        }
        if ('cim:ExcCZ.te' in object) {
          attributeEntries['filledEntries']['cim:ExcCZ.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.te'], 'cim:Seconds', 'cim:ExcCZ.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcCZ.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.te'], 'cim:Seconds', 'cim:ExcCZ.te');
        }
        if ('cim:ExcCZ.efdmax' in object) {
          attributeEntries['filledEntries']['cim:ExcCZ.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.efdmax'], 'cim:PU', 'cim:ExcCZ.efdmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcCZ.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.efdmax'], 'cim:PU', 'cim:ExcCZ.efdmax');
        }
        if ('cim:ExcCZ.efdmin' in object) {
          attributeEntries['filledEntries']['cim:ExcCZ.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.efdmin'], 'cim:PU', 'cim:ExcCZ.efdmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcCZ.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcCZ.efdmin'], 'cim:PU', 'cim:ExcCZ.efdmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcCZ.kp", "cim:ExcCZ.tc", "cim:ExcCZ.vrmax", "cim:ExcCZ.vrmin", "cim:ExcCZ.ka", "cim:ExcCZ.ta", "cim:ExcCZ.ke", "cim:ExcCZ.te", "cim:ExcCZ.efdmax", "cim:ExcCZ.efdmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcCZ.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcCZ: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcCZ.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcCZ;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcCZ, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'efdmax': [CGMESProfile.shortNames.DY],
    'efdmin': [CGMESProfile.shortNames.DY]
  });

  var ExcDC1A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcDC1A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcDC1A);
    function ExcDC1A() {
      _classCallCheck(this, ExcDC1A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcDC1A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcDC1A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcDC1A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.ka'], 'cim:PU', 'cim:ExcDC1A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.ka'], 'cim:PU', 'cim:ExcDC1A.ka');
        }
        if ('cim:ExcDC1A.ks' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.ks'], 'cim:PU', 'cim:ExcDC1A.ks');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.ks'], 'cim:PU', 'cim:ExcDC1A.ks');
        }
        if ('cim:ExcDC1A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.ta'], 'cim:Seconds', 'cim:ExcDC1A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.ta'], 'cim:Seconds', 'cim:ExcDC1A.ta');
        }
        if ('cim:ExcDC1A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.tb'], 'cim:Seconds', 'cim:ExcDC1A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.tb'], 'cim:Seconds', 'cim:ExcDC1A.tb');
        }
        if ('cim:ExcDC1A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.tc'], 'cim:Seconds', 'cim:ExcDC1A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.tc'], 'cim:Seconds', 'cim:ExcDC1A.tc');
        }
        if ('cim:ExcDC1A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.vrmax'], 'cim:PU', 'cim:ExcDC1A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.vrmax'], 'cim:PU', 'cim:ExcDC1A.vrmax');
        }
        if ('cim:ExcDC1A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.vrmin'], 'cim:PU', 'cim:ExcDC1A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.vrmin'], 'cim:PU', 'cim:ExcDC1A.vrmin');
        }
        if ('cim:ExcDC1A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.ke'], 'cim:PU', 'cim:ExcDC1A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.ke'], 'cim:PU', 'cim:ExcDC1A.ke');
        }
        if ('cim:ExcDC1A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.te'], 'cim:Seconds', 'cim:ExcDC1A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.te'], 'cim:Seconds', 'cim:ExcDC1A.te');
        }
        if ('cim:ExcDC1A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.kf'], 'cim:PU', 'cim:ExcDC1A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.kf'], 'cim:PU', 'cim:ExcDC1A.kf');
        }
        if ('cim:ExcDC1A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.tf'], 'cim:Seconds', 'cim:ExcDC1A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.tf'], 'cim:Seconds', 'cim:ExcDC1A.tf');
        }
        if ('cim:ExcDC1A.efd1' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.efd1'], 'cim:PU', 'cim:ExcDC1A.efd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.efd1'], 'cim:PU', 'cim:ExcDC1A.efd1');
        }
        if ('cim:ExcDC1A.seefd1' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.seefd1'], 'cim:Simple_Float', 'cim:ExcDC1A.seefd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.seefd1'], 'cim:Simple_Float', 'cim:ExcDC1A.seefd1');
        }
        if ('cim:ExcDC1A.efd2' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.efd2'], 'cim:PU', 'cim:ExcDC1A.efd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.efd2'], 'cim:PU', 'cim:ExcDC1A.efd2');
        }
        if ('cim:ExcDC1A.seefd2' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.seefd2'], 'cim:Simple_Float', 'cim:ExcDC1A.seefd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.seefd2'], 'cim:Simple_Float', 'cim:ExcDC1A.seefd2');
        }
        if ('cim:ExcDC1A.exclim' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.exclim'], 'cim:Boolean', 'cim:ExcDC1A.exclim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.exclim'], 'cim:Boolean', 'cim:ExcDC1A.exclim');
        }
        if ('cim:ExcDC1A.efdmin' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.efdmin'], 'cim:PU', 'cim:ExcDC1A.efdmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.efdmin'], 'cim:PU', 'cim:ExcDC1A.efdmin');
        }
        if ('cim:ExcDC1A.edfmax' in object) {
          attributeEntries['filledEntries']['cim:ExcDC1A.edfmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.edfmax'], 'cim:PU', 'cim:ExcDC1A.edfmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC1A.edfmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC1A.edfmax'], 'cim:PU', 'cim:ExcDC1A.edfmax');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcDC1A.ka", "cim:ExcDC1A.ks", "cim:ExcDC1A.ta", "cim:ExcDC1A.tb", "cim:ExcDC1A.tc", "cim:ExcDC1A.vrmax", "cim:ExcDC1A.vrmin", "cim:ExcDC1A.ke", "cim:ExcDC1A.te", "cim:ExcDC1A.kf", "cim:ExcDC1A.tf", "cim:ExcDC1A.efd1", "cim:ExcDC1A.seefd1", "cim:ExcDC1A.efd2", "cim:ExcDC1A.seefd2", "cim:ExcDC1A.exclim", "cim:ExcDC1A.efdmin", "cim:ExcDC1A.edfmax"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcDC1A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcDC1A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcDC1A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcDC1A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcDC1A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'efd1': [CGMESProfile.shortNames.DY],
    'seefd1': [CGMESProfile.shortNames.DY],
    'efd2': [CGMESProfile.shortNames.DY],
    'seefd2': [CGMESProfile.shortNames.DY],
    'exclim': [CGMESProfile.shortNames.DY],
    'efdmin': [CGMESProfile.shortNames.DY],
    'edfmax': [CGMESProfile.shortNames.DY]
  });

  var ExcDC2A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcDC2A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcDC2A);
    function ExcDC2A() {
      _classCallCheck(this, ExcDC2A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcDC2A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcDC2A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcDC2A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.ka'], 'cim:PU', 'cim:ExcDC2A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.ka'], 'cim:PU', 'cim:ExcDC2A.ka');
        }
        if ('cim:ExcDC2A.ks' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.ks'], 'cim:PU', 'cim:ExcDC2A.ks');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.ks'], 'cim:PU', 'cim:ExcDC2A.ks');
        }
        if ('cim:ExcDC2A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.ta'], 'cim:Seconds', 'cim:ExcDC2A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.ta'], 'cim:Seconds', 'cim:ExcDC2A.ta');
        }
        if ('cim:ExcDC2A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.tb'], 'cim:Seconds', 'cim:ExcDC2A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.tb'], 'cim:Seconds', 'cim:ExcDC2A.tb');
        }
        if ('cim:ExcDC2A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.tc'], 'cim:Seconds', 'cim:ExcDC2A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.tc'], 'cim:Seconds', 'cim:ExcDC2A.tc');
        }
        if ('cim:ExcDC2A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.vrmax'], 'cim:PU', 'cim:ExcDC2A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.vrmax'], 'cim:PU', 'cim:ExcDC2A.vrmax');
        }
        if ('cim:ExcDC2A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.vrmin'], 'cim:PU', 'cim:ExcDC2A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.vrmin'], 'cim:PU', 'cim:ExcDC2A.vrmin');
        }
        if ('cim:ExcDC2A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.ke'], 'cim:PU', 'cim:ExcDC2A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.ke'], 'cim:PU', 'cim:ExcDC2A.ke');
        }
        if ('cim:ExcDC2A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.te'], 'cim:Seconds', 'cim:ExcDC2A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.te'], 'cim:Seconds', 'cim:ExcDC2A.te');
        }
        if ('cim:ExcDC2A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.kf'], 'cim:PU', 'cim:ExcDC2A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.kf'], 'cim:PU', 'cim:ExcDC2A.kf');
        }
        if ('cim:ExcDC2A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.tf'], 'cim:Seconds', 'cim:ExcDC2A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.tf'], 'cim:Seconds', 'cim:ExcDC2A.tf');
        }
        if ('cim:ExcDC2A.tf1' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.tf1'], 'cim:Seconds', 'cim:ExcDC2A.tf1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.tf1'], 'cim:Seconds', 'cim:ExcDC2A.tf1');
        }
        if ('cim:ExcDC2A.efd1' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.efd1'], 'cim:PU', 'cim:ExcDC2A.efd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.efd1'], 'cim:PU', 'cim:ExcDC2A.efd1');
        }
        if ('cim:ExcDC2A.seefd1' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.seefd1'], 'cim:Simple_Float', 'cim:ExcDC2A.seefd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.seefd1'], 'cim:Simple_Float', 'cim:ExcDC2A.seefd1');
        }
        if ('cim:ExcDC2A.efd2' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.efd2'], 'cim:PU', 'cim:ExcDC2A.efd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.efd2'], 'cim:PU', 'cim:ExcDC2A.efd2');
        }
        if ('cim:ExcDC2A.seefd2' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.seefd2'], 'cim:Simple_Float', 'cim:ExcDC2A.seefd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.seefd2'], 'cim:Simple_Float', 'cim:ExcDC2A.seefd2');
        }
        if ('cim:ExcDC2A.exclim' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.exclim'], 'cim:Boolean', 'cim:ExcDC2A.exclim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.exclim'], 'cim:Boolean', 'cim:ExcDC2A.exclim');
        }
        if ('cim:ExcDC2A.vtlim' in object) {
          attributeEntries['filledEntries']['cim:ExcDC2A.vtlim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.vtlim'], 'cim:Boolean', 'cim:ExcDC2A.vtlim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC2A.vtlim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC2A.vtlim'], 'cim:Boolean', 'cim:ExcDC2A.vtlim');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcDC2A.ka", "cim:ExcDC2A.ks", "cim:ExcDC2A.ta", "cim:ExcDC2A.tb", "cim:ExcDC2A.tc", "cim:ExcDC2A.vrmax", "cim:ExcDC2A.vrmin", "cim:ExcDC2A.ke", "cim:ExcDC2A.te", "cim:ExcDC2A.kf", "cim:ExcDC2A.tf", "cim:ExcDC2A.tf1", "cim:ExcDC2A.efd1", "cim:ExcDC2A.seefd1", "cim:ExcDC2A.efd2", "cim:ExcDC2A.seefd2", "cim:ExcDC2A.exclim", "cim:ExcDC2A.vtlim"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcDC2A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcDC2A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcDC2A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcDC2A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcDC2A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'tf1': [CGMESProfile.shortNames.DY],
    'efd1': [CGMESProfile.shortNames.DY],
    'seefd1': [CGMESProfile.shortNames.DY],
    'efd2': [CGMESProfile.shortNames.DY],
    'seefd2': [CGMESProfile.shortNames.DY],
    'exclim': [CGMESProfile.shortNames.DY],
    'vtlim': [CGMESProfile.shortNames.DY]
  });

  var ExcDC3A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcDC3A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcDC3A);
    function ExcDC3A() {
      _classCallCheck(this, ExcDC3A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcDC3A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcDC3A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcDC3A.trh' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.trh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.trh'], 'cim:Seconds', 'cim:ExcDC3A.trh');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.trh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.trh'], 'cim:Seconds', 'cim:ExcDC3A.trh');
        }
        if ('cim:ExcDC3A.ks' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.ks'], 'cim:PU', 'cim:ExcDC3A.ks');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.ks'], 'cim:PU', 'cim:ExcDC3A.ks');
        }
        if ('cim:ExcDC3A.kr' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.kr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.kr'], 'cim:PU', 'cim:ExcDC3A.kr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.kr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.kr'], 'cim:PU', 'cim:ExcDC3A.kr');
        }
        if ('cim:ExcDC3A.kv' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.kv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.kv'], 'cim:PU', 'cim:ExcDC3A.kv');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.kv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.kv'], 'cim:PU', 'cim:ExcDC3A.kv');
        }
        if ('cim:ExcDC3A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.vrmax'], 'cim:PU', 'cim:ExcDC3A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.vrmax'], 'cim:PU', 'cim:ExcDC3A.vrmax');
        }
        if ('cim:ExcDC3A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.vrmin'], 'cim:PU', 'cim:ExcDC3A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.vrmin'], 'cim:PU', 'cim:ExcDC3A.vrmin');
        }
        if ('cim:ExcDC3A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.te'], 'cim:Seconds', 'cim:ExcDC3A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.te'], 'cim:Seconds', 'cim:ExcDC3A.te');
        }
        if ('cim:ExcDC3A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.ke'], 'cim:PU', 'cim:ExcDC3A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.ke'], 'cim:PU', 'cim:ExcDC3A.ke');
        }
        if ('cim:ExcDC3A.efd1' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.efd1'], 'cim:PU', 'cim:ExcDC3A.efd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.efd1'], 'cim:PU', 'cim:ExcDC3A.efd1');
        }
        if ('cim:ExcDC3A.seefd1' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.seefd1'], 'cim:Simple_Float', 'cim:ExcDC3A.seefd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.seefd1'], 'cim:Simple_Float', 'cim:ExcDC3A.seefd1');
        }
        if ('cim:ExcDC3A.efd2' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.efd2'], 'cim:PU', 'cim:ExcDC3A.efd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.efd2'], 'cim:PU', 'cim:ExcDC3A.efd2');
        }
        if ('cim:ExcDC3A.seefd2' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.seefd2'], 'cim:Simple_Float', 'cim:ExcDC3A.seefd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.seefd2'], 'cim:Simple_Float', 'cim:ExcDC3A.seefd2');
        }
        if ('cim:ExcDC3A.exclim' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.exclim'], 'cim:Boolean', 'cim:ExcDC3A.exclim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.exclim'], 'cim:Boolean', 'cim:ExcDC3A.exclim');
        }
        if ('cim:ExcDC3A.edfmax' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.edfmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.edfmax'], 'cim:PU', 'cim:ExcDC3A.edfmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.edfmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.edfmax'], 'cim:PU', 'cim:ExcDC3A.edfmax');
        }
        if ('cim:ExcDC3A.efdmin' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.efdmin'], 'cim:PU', 'cim:ExcDC3A.efdmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.efdmin'], 'cim:PU', 'cim:ExcDC3A.efdmin');
        }
        if ('cim:ExcDC3A.efdlim' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A.efdlim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.efdlim'], 'cim:Boolean', 'cim:ExcDC3A.efdlim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A.efdlim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A.efdlim'], 'cim:Boolean', 'cim:ExcDC3A.efdlim');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcDC3A.trh", "cim:ExcDC3A.ks", "cim:ExcDC3A.kr", "cim:ExcDC3A.kv", "cim:ExcDC3A.vrmax", "cim:ExcDC3A.vrmin", "cim:ExcDC3A.te", "cim:ExcDC3A.ke", "cim:ExcDC3A.efd1", "cim:ExcDC3A.seefd1", "cim:ExcDC3A.efd2", "cim:ExcDC3A.seefd2", "cim:ExcDC3A.exclim", "cim:ExcDC3A.edfmax", "cim:ExcDC3A.efdmin", "cim:ExcDC3A.efdlim"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcDC3A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcDC3A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcDC3A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcDC3A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcDC3A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'trh': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'kr': [CGMESProfile.shortNames.DY],
    'kv': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'efd1': [CGMESProfile.shortNames.DY],
    'seefd1': [CGMESProfile.shortNames.DY],
    'efd2': [CGMESProfile.shortNames.DY],
    'seefd2': [CGMESProfile.shortNames.DY],
    'exclim': [CGMESProfile.shortNames.DY],
    'edfmax': [CGMESProfile.shortNames.DY],
    'efdmin': [CGMESProfile.shortNames.DY],
    'efdlim': [CGMESProfile.shortNames.DY]
  });

  var ExcDC3A1 = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcDC3A1, _ExcitationSystemDyna);
    var _super = _createSuper(ExcDC3A1);
    function ExcDC3A1() {
      _classCallCheck(this, ExcDC3A1);
      return _super.apply(this, arguments);
    }
    _createClass(ExcDC3A1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcDC3A1";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcDC3A1.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.ka'], 'cim:PU', 'cim:ExcDC3A1.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.ka'], 'cim:PU', 'cim:ExcDC3A1.ka');
        }
        if ('cim:ExcDC3A1.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.ta'], 'cim:Seconds', 'cim:ExcDC3A1.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.ta'], 'cim:Seconds', 'cim:ExcDC3A1.ta');
        }
        if ('cim:ExcDC3A1.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.vrmax'], 'cim:PU', 'cim:ExcDC3A1.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.vrmax'], 'cim:PU', 'cim:ExcDC3A1.vrmax');
        }
        if ('cim:ExcDC3A1.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.vrmin'], 'cim:PU', 'cim:ExcDC3A1.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.vrmin'], 'cim:PU', 'cim:ExcDC3A1.vrmin');
        }
        if ('cim:ExcDC3A1.te' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.te'], 'cim:Seconds', 'cim:ExcDC3A1.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.te'], 'cim:Seconds', 'cim:ExcDC3A1.te');
        }
        if ('cim:ExcDC3A1.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.kf'], 'cim:PU', 'cim:ExcDC3A1.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.kf'], 'cim:PU', 'cim:ExcDC3A1.kf');
        }
        if ('cim:ExcDC3A1.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.tf'], 'cim:Seconds', 'cim:ExcDC3A1.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.tf'], 'cim:Seconds', 'cim:ExcDC3A1.tf');
        }
        if ('cim:ExcDC3A1.kp' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.kp'], 'cim:PU', 'cim:ExcDC3A1.kp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.kp'], 'cim:PU', 'cim:ExcDC3A1.kp');
        }
        if ('cim:ExcDC3A1.ki' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.ki'], 'cim:PU', 'cim:ExcDC3A1.ki');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.ki'], 'cim:PU', 'cim:ExcDC3A1.ki');
        }
        if ('cim:ExcDC3A1.vbmax' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.vbmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.vbmax'], 'cim:PU', 'cim:ExcDC3A1.vbmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.vbmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.vbmax'], 'cim:PU', 'cim:ExcDC3A1.vbmax');
        }
        if ('cim:ExcDC3A1.exclim' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.exclim'], 'cim:Boolean', 'cim:ExcDC3A1.exclim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.exclim'], 'cim:Boolean', 'cim:ExcDC3A1.exclim');
        }
        if ('cim:ExcDC3A1.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.ke'], 'cim:PU', 'cim:ExcDC3A1.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.ke'], 'cim:PU', 'cim:ExcDC3A1.ke');
        }
        if ('cim:ExcDC3A1.vb1max' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.vb1max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.vb1max'], 'cim:PU', 'cim:ExcDC3A1.vb1max');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.vb1max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.vb1max'], 'cim:PU', 'cim:ExcDC3A1.vb1max');
        }
        if ('cim:ExcDC3A1.vblim' in object) {
          attributeEntries['filledEntries']['cim:ExcDC3A1.vblim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.vblim'], 'cim:Boolean', 'cim:ExcDC3A1.vblim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcDC3A1.vblim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcDC3A1.vblim'], 'cim:Boolean', 'cim:ExcDC3A1.vblim');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcDC3A1.ka", "cim:ExcDC3A1.ta", "cim:ExcDC3A1.vrmax", "cim:ExcDC3A1.vrmin", "cim:ExcDC3A1.te", "cim:ExcDC3A1.kf", "cim:ExcDC3A1.tf", "cim:ExcDC3A1.kp", "cim:ExcDC3A1.ki", "cim:ExcDC3A1.vbmax", "cim:ExcDC3A1.exclim", "cim:ExcDC3A1.ke", "cim:ExcDC3A1.vb1max", "cim:ExcDC3A1.vblim"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcDC3A1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcDC3A1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcDC3A1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcDC3A1;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcDC3A1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'vbmax': [CGMESProfile.shortNames.DY],
    'exclim': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'vb1max': [CGMESProfile.shortNames.DY],
    'vblim': [CGMESProfile.shortNames.DY]
  });

  var ExcELIN1 = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcELIN1, _ExcitationSystemDyna);
    var _super = _createSuper(ExcELIN1);
    function ExcELIN1() {
      _classCallCheck(this, ExcELIN1);
      return _super.apply(this, arguments);
    }
    _createClass(ExcELIN1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcELIN1";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcELIN1.tfi' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.tfi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.tfi'], 'cim:Seconds', 'cim:ExcELIN1.tfi');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.tfi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.tfi'], 'cim:Seconds', 'cim:ExcELIN1.tfi');
        }
        if ('cim:ExcELIN1.tnu' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.tnu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.tnu'], 'cim:Seconds', 'cim:ExcELIN1.tnu');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.tnu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.tnu'], 'cim:Seconds', 'cim:ExcELIN1.tnu');
        }
        if ('cim:ExcELIN1.vpu' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.vpu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.vpu'], 'cim:PU', 'cim:ExcELIN1.vpu');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.vpu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.vpu'], 'cim:PU', 'cim:ExcELIN1.vpu');
        }
        if ('cim:ExcELIN1.vpi' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.vpi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.vpi'], 'cim:PU', 'cim:ExcELIN1.vpi');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.vpi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.vpi'], 'cim:PU', 'cim:ExcELIN1.vpi');
        }
        if ('cim:ExcELIN1.vpnf' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.vpnf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.vpnf'], 'cim:PU', 'cim:ExcELIN1.vpnf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.vpnf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.vpnf'], 'cim:PU', 'cim:ExcELIN1.vpnf');
        }
        if ('cim:ExcELIN1.dpnf' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.dpnf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.dpnf'], 'cim:PU', 'cim:ExcELIN1.dpnf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.dpnf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.dpnf'], 'cim:PU', 'cim:ExcELIN1.dpnf');
        }
        if ('cim:ExcELIN1.tsw' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.tsw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.tsw'], 'cim:Seconds', 'cim:ExcELIN1.tsw');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.tsw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.tsw'], 'cim:Seconds', 'cim:ExcELIN1.tsw');
        }
        if ('cim:ExcELIN1.efmin' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.efmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.efmin'], 'cim:PU', 'cim:ExcELIN1.efmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.efmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.efmin'], 'cim:PU', 'cim:ExcELIN1.efmin');
        }
        if ('cim:ExcELIN1.efmax' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.efmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.efmax'], 'cim:PU', 'cim:ExcELIN1.efmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.efmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.efmax'], 'cim:PU', 'cim:ExcELIN1.efmax');
        }
        if ('cim:ExcELIN1.xe' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.xe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.xe'], 'cim:PU', 'cim:ExcELIN1.xe');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.xe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.xe'], 'cim:PU', 'cim:ExcELIN1.xe');
        }
        if ('cim:ExcELIN1.ks1' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.ks1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.ks1'], 'cim:PU', 'cim:ExcELIN1.ks1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.ks1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.ks1'], 'cim:PU', 'cim:ExcELIN1.ks1');
        }
        if ('cim:ExcELIN1.ks2' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.ks2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.ks2'], 'cim:PU', 'cim:ExcELIN1.ks2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.ks2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.ks2'], 'cim:PU', 'cim:ExcELIN1.ks2');
        }
        if ('cim:ExcELIN1.ts1' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.ts1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.ts1'], 'cim:Seconds', 'cim:ExcELIN1.ts1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.ts1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.ts1'], 'cim:Seconds', 'cim:ExcELIN1.ts1');
        }
        if ('cim:ExcELIN1.ts2' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.ts2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.ts2'], 'cim:Seconds', 'cim:ExcELIN1.ts2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.ts2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.ts2'], 'cim:Seconds', 'cim:ExcELIN1.ts2');
        }
        if ('cim:ExcELIN1.smax' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN1.smax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.smax'], 'cim:PU', 'cim:ExcELIN1.smax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN1.smax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN1.smax'], 'cim:PU', 'cim:ExcELIN1.smax');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcELIN1.tfi", "cim:ExcELIN1.tnu", "cim:ExcELIN1.vpu", "cim:ExcELIN1.vpi", "cim:ExcELIN1.vpnf", "cim:ExcELIN1.dpnf", "cim:ExcELIN1.tsw", "cim:ExcELIN1.efmin", "cim:ExcELIN1.efmax", "cim:ExcELIN1.xe", "cim:ExcELIN1.ks1", "cim:ExcELIN1.ks2", "cim:ExcELIN1.ts1", "cim:ExcELIN1.ts2", "cim:ExcELIN1.smax"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcELIN1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcELIN1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcELIN1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcELIN1;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcELIN1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tfi': [CGMESProfile.shortNames.DY],
    'tnu': [CGMESProfile.shortNames.DY],
    'vpu': [CGMESProfile.shortNames.DY],
    'vpi': [CGMESProfile.shortNames.DY],
    'vpnf': [CGMESProfile.shortNames.DY],
    'dpnf': [CGMESProfile.shortNames.DY],
    'tsw': [CGMESProfile.shortNames.DY],
    'efmin': [CGMESProfile.shortNames.DY],
    'efmax': [CGMESProfile.shortNames.DY],
    'xe': [CGMESProfile.shortNames.DY],
    'ks1': [CGMESProfile.shortNames.DY],
    'ks2': [CGMESProfile.shortNames.DY],
    'ts1': [CGMESProfile.shortNames.DY],
    'ts2': [CGMESProfile.shortNames.DY],
    'smax': [CGMESProfile.shortNames.DY]
  });

  var ExcELIN2 = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcELIN2, _ExcitationSystemDyna);
    var _super = _createSuper(ExcELIN2);
    function ExcELIN2() {
      _classCallCheck(this, ExcELIN2);
      return _super.apply(this, arguments);
    }
    _createClass(ExcELIN2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcELIN2";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcELIN2.k1' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.k1'], 'cim:PU', 'cim:ExcELIN2.k1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.k1'], 'cim:PU', 'cim:ExcELIN2.k1');
        }
        if ('cim:ExcELIN2.k1ec' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.k1ec'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.k1ec'], 'cim:PU', 'cim:ExcELIN2.k1ec');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.k1ec'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.k1ec'], 'cim:PU', 'cim:ExcELIN2.k1ec');
        }
        if ('cim:ExcELIN2.kd1' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.kd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.kd1'], 'cim:PU', 'cim:ExcELIN2.kd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.kd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.kd1'], 'cim:PU', 'cim:ExcELIN2.kd1');
        }
        if ('cim:ExcELIN2.tb1' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.tb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.tb1'], 'cim:Seconds', 'cim:ExcELIN2.tb1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.tb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.tb1'], 'cim:Seconds', 'cim:ExcELIN2.tb1');
        }
        if ('cim:ExcELIN2.pid1max' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.pid1max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.pid1max'], 'cim:PU', 'cim:ExcELIN2.pid1max');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.pid1max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.pid1max'], 'cim:PU', 'cim:ExcELIN2.pid1max');
        }
        if ('cim:ExcELIN2.ti1' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.ti1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ti1'], 'cim:PU', 'cim:ExcELIN2.ti1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.ti1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ti1'], 'cim:PU', 'cim:ExcELIN2.ti1');
        }
        if ('cim:ExcELIN2.iefmax2' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.iefmax2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.iefmax2'], 'cim:PU', 'cim:ExcELIN2.iefmax2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.iefmax2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.iefmax2'], 'cim:PU', 'cim:ExcELIN2.iefmax2');
        }
        if ('cim:ExcELIN2.k2' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.k2'], 'cim:PU', 'cim:ExcELIN2.k2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.k2'], 'cim:PU', 'cim:ExcELIN2.k2');
        }
        if ('cim:ExcELIN2.ketb' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.ketb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ketb'], 'cim:PU', 'cim:ExcELIN2.ketb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.ketb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ketb'], 'cim:PU', 'cim:ExcELIN2.ketb');
        }
        if ('cim:ExcELIN2.upmax' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.upmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.upmax'], 'cim:PU', 'cim:ExcELIN2.upmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.upmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.upmax'], 'cim:PU', 'cim:ExcELIN2.upmax');
        }
        if ('cim:ExcELIN2.upmin' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.upmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.upmin'], 'cim:PU', 'cim:ExcELIN2.upmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.upmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.upmin'], 'cim:PU', 'cim:ExcELIN2.upmin');
        }
        if ('cim:ExcELIN2.te' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.te'], 'cim:Seconds', 'cim:ExcELIN2.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.te'], 'cim:Seconds', 'cim:ExcELIN2.te');
        }
        if ('cim:ExcELIN2.xp' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.xp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.xp'], 'cim:PU', 'cim:ExcELIN2.xp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.xp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.xp'], 'cim:PU', 'cim:ExcELIN2.xp');
        }
        if ('cim:ExcELIN2.te2' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.te2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.te2'], 'cim:Seconds', 'cim:ExcELIN2.te2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.te2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.te2'], 'cim:Seconds', 'cim:ExcELIN2.te2');
        }
        if ('cim:ExcELIN2.ke2' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.ke2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ke2'], 'cim:PU', 'cim:ExcELIN2.ke2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.ke2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ke2'], 'cim:PU', 'cim:ExcELIN2.ke2');
        }
        if ('cim:ExcELIN2.ve1' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ve1'], 'cim:PU', 'cim:ExcELIN2.ve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ve1'], 'cim:PU', 'cim:ExcELIN2.ve1');
        }
        if ('cim:ExcELIN2.seve1' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.seve1'], 'cim:PU', 'cim:ExcELIN2.seve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.seve1'], 'cim:PU', 'cim:ExcELIN2.seve1');
        }
        if ('cim:ExcELIN2.ve2' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ve2'], 'cim:PU', 'cim:ExcELIN2.ve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ve2'], 'cim:PU', 'cim:ExcELIN2.ve2');
        }
        if ('cim:ExcELIN2.seve2' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.seve2'], 'cim:PU', 'cim:ExcELIN2.seve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.seve2'], 'cim:PU', 'cim:ExcELIN2.seve2');
        }
        if ('cim:ExcELIN2.tr4' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.tr4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.tr4'], 'cim:Seconds', 'cim:ExcELIN2.tr4');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.tr4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.tr4'], 'cim:Seconds', 'cim:ExcELIN2.tr4');
        }
        if ('cim:ExcELIN2.k3' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.k3'], 'cim:PU', 'cim:ExcELIN2.k3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.k3'], 'cim:PU', 'cim:ExcELIN2.k3');
        }
        if ('cim:ExcELIN2.ti3' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.ti3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ti3'], 'cim:Seconds', 'cim:ExcELIN2.ti3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.ti3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ti3'], 'cim:Seconds', 'cim:ExcELIN2.ti3');
        }
        if ('cim:ExcELIN2.k4' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.k4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.k4'], 'cim:PU', 'cim:ExcELIN2.k4');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.k4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.k4'], 'cim:PU', 'cim:ExcELIN2.k4');
        }
        if ('cim:ExcELIN2.ti4' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.ti4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ti4'], 'cim:Seconds', 'cim:ExcELIN2.ti4');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.ti4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.ti4'], 'cim:Seconds', 'cim:ExcELIN2.ti4');
        }
        if ('cim:ExcELIN2.iefmax' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.iefmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.iefmax'], 'cim:PU', 'cim:ExcELIN2.iefmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.iefmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.iefmax'], 'cim:PU', 'cim:ExcELIN2.iefmax');
        }
        if ('cim:ExcELIN2.iefmin' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.iefmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.iefmin'], 'cim:PU', 'cim:ExcELIN2.iefmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.iefmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.iefmin'], 'cim:PU', 'cim:ExcELIN2.iefmin');
        }
        if ('cim:ExcELIN2.efdbas' in object) {
          attributeEntries['filledEntries']['cim:ExcELIN2.efdbas'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.efdbas'], 'cim:PU', 'cim:ExcELIN2.efdbas');
        } else {
          attributeEntries['emptyEntries']['cim:ExcELIN2.efdbas'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcELIN2.efdbas'], 'cim:PU', 'cim:ExcELIN2.efdbas');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcELIN2.k1", "cim:ExcELIN2.k1ec", "cim:ExcELIN2.kd1", "cim:ExcELIN2.tb1", "cim:ExcELIN2.pid1max", "cim:ExcELIN2.ti1", "cim:ExcELIN2.iefmax2", "cim:ExcELIN2.k2", "cim:ExcELIN2.ketb", "cim:ExcELIN2.upmax", "cim:ExcELIN2.upmin", "cim:ExcELIN2.te", "cim:ExcELIN2.xp", "cim:ExcELIN2.te2", "cim:ExcELIN2.ke2", "cim:ExcELIN2.ve1", "cim:ExcELIN2.seve1", "cim:ExcELIN2.ve2", "cim:ExcELIN2.seve2", "cim:ExcELIN2.tr4", "cim:ExcELIN2.k3", "cim:ExcELIN2.ti3", "cim:ExcELIN2.k4", "cim:ExcELIN2.ti4", "cim:ExcELIN2.iefmax", "cim:ExcELIN2.iefmin", "cim:ExcELIN2.efdbas"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcELIN2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcELIN2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcELIN2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcELIN2;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcELIN2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'k1ec': [CGMESProfile.shortNames.DY],
    'kd1': [CGMESProfile.shortNames.DY],
    'tb1': [CGMESProfile.shortNames.DY],
    'pid1max': [CGMESProfile.shortNames.DY],
    'ti1': [CGMESProfile.shortNames.DY],
    'iefmax2': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    'ketb': [CGMESProfile.shortNames.DY],
    'upmax': [CGMESProfile.shortNames.DY],
    'upmin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'xp': [CGMESProfile.shortNames.DY],
    'te2': [CGMESProfile.shortNames.DY],
    'ke2': [CGMESProfile.shortNames.DY],
    've1': [CGMESProfile.shortNames.DY],
    'seve1': [CGMESProfile.shortNames.DY],
    've2': [CGMESProfile.shortNames.DY],
    'seve2': [CGMESProfile.shortNames.DY],
    'tr4': [CGMESProfile.shortNames.DY],
    'k3': [CGMESProfile.shortNames.DY],
    'ti3': [CGMESProfile.shortNames.DY],
    'k4': [CGMESProfile.shortNames.DY],
    'ti4': [CGMESProfile.shortNames.DY],
    'iefmax': [CGMESProfile.shortNames.DY],
    'iefmin': [CGMESProfile.shortNames.DY],
    'efdbas': [CGMESProfile.shortNames.DY]
  });

  var ExcHU = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcHU, _ExcitationSystemDyna);
    var _super = _createSuper(ExcHU);
    function ExcHU() {
      _classCallCheck(this, ExcHU);
      return _super.apply(this, arguments);
    }
    _createClass(ExcHU, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcHU";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcHU.tr' in object) {
          attributeEntries['filledEntries']['cim:ExcHU.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.tr'], 'cim:Seconds', 'cim:ExcHU.tr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcHU.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.tr'], 'cim:Seconds', 'cim:ExcHU.tr');
        }
        if ('cim:ExcHU.te' in object) {
          attributeEntries['filledEntries']['cim:ExcHU.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.te'], 'cim:Seconds', 'cim:ExcHU.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcHU.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.te'], 'cim:Seconds', 'cim:ExcHU.te');
        }
        if ('cim:ExcHU.imin' in object) {
          attributeEntries['filledEntries']['cim:ExcHU.imin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.imin'], 'cim:PU', 'cim:ExcHU.imin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcHU.imin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.imin'], 'cim:PU', 'cim:ExcHU.imin');
        }
        if ('cim:ExcHU.imax' in object) {
          attributeEntries['filledEntries']['cim:ExcHU.imax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.imax'], 'cim:PU', 'cim:ExcHU.imax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcHU.imax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.imax'], 'cim:PU', 'cim:ExcHU.imax');
        }
        if ('cim:ExcHU.ae' in object) {
          attributeEntries['filledEntries']['cim:ExcHU.ae'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.ae'], 'cim:PU', 'cim:ExcHU.ae');
        } else {
          attributeEntries['emptyEntries']['cim:ExcHU.ae'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.ae'], 'cim:PU', 'cim:ExcHU.ae');
        }
        if ('cim:ExcHU.emin' in object) {
          attributeEntries['filledEntries']['cim:ExcHU.emin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.emin'], 'cim:PU', 'cim:ExcHU.emin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcHU.emin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.emin'], 'cim:PU', 'cim:ExcHU.emin');
        }
        if ('cim:ExcHU.emax' in object) {
          attributeEntries['filledEntries']['cim:ExcHU.emax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.emax'], 'cim:PU', 'cim:ExcHU.emax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcHU.emax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.emax'], 'cim:PU', 'cim:ExcHU.emax');
        }
        if ('cim:ExcHU.ki' in object) {
          attributeEntries['filledEntries']['cim:ExcHU.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.ki'], 'cim:Simple_Float', 'cim:ExcHU.ki');
        } else {
          attributeEntries['emptyEntries']['cim:ExcHU.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.ki'], 'cim:Simple_Float', 'cim:ExcHU.ki');
        }
        if ('cim:ExcHU.ai' in object) {
          attributeEntries['filledEntries']['cim:ExcHU.ai'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.ai'], 'cim:PU', 'cim:ExcHU.ai');
        } else {
          attributeEntries['emptyEntries']['cim:ExcHU.ai'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.ai'], 'cim:PU', 'cim:ExcHU.ai');
        }
        if ('cim:ExcHU.ti' in object) {
          attributeEntries['filledEntries']['cim:ExcHU.ti'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.ti'], 'cim:Seconds', 'cim:ExcHU.ti');
        } else {
          attributeEntries['emptyEntries']['cim:ExcHU.ti'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.ti'], 'cim:Seconds', 'cim:ExcHU.ti');
        }
        if ('cim:ExcHU.atr' in object) {
          attributeEntries['filledEntries']['cim:ExcHU.atr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.atr'], 'cim:PU', 'cim:ExcHU.atr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcHU.atr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.atr'], 'cim:PU', 'cim:ExcHU.atr');
        }
        if ('cim:ExcHU.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcHU.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.ke'], 'cim:Simple_Float', 'cim:ExcHU.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcHU.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcHU.ke'], 'cim:Simple_Float', 'cim:ExcHU.ke');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcHU.tr", "cim:ExcHU.te", "cim:ExcHU.imin", "cim:ExcHU.imax", "cim:ExcHU.ae", "cim:ExcHU.emin", "cim:ExcHU.emax", "cim:ExcHU.ki", "cim:ExcHU.ai", "cim:ExcHU.ti", "cim:ExcHU.atr", "cim:ExcHU.ke"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcHU.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcHU: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcHU.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcHU;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcHU, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tr': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'imin': [CGMESProfile.shortNames.DY],
    'imax': [CGMESProfile.shortNames.DY],
    'ae': [CGMESProfile.shortNames.DY],
    'emin': [CGMESProfile.shortNames.DY],
    'emax': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'ai': [CGMESProfile.shortNames.DY],
    'ti': [CGMESProfile.shortNames.DY],
    'atr': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEAC1A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEAC1A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEAC1A);
    function ExcIEEEAC1A() {
      _classCallCheck(this, ExcIEEEAC1A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEAC1A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEAC1A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEAC1A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.tb'], 'cim:Seconds', 'cim:ExcIEEEAC1A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.tb'], 'cim:Seconds', 'cim:ExcIEEEAC1A.tb');
        }
        if ('cim:ExcIEEEAC1A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.tc'], 'cim:Seconds', 'cim:ExcIEEEAC1A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.tc'], 'cim:Seconds', 'cim:ExcIEEEAC1A.tc');
        }
        if ('cim:ExcIEEEAC1A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.ka'], 'cim:PU', 'cim:ExcIEEEAC1A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.ka'], 'cim:PU', 'cim:ExcIEEEAC1A.ka');
        }
        if ('cim:ExcIEEEAC1A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.ta'], 'cim:Seconds', 'cim:ExcIEEEAC1A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.ta'], 'cim:Seconds', 'cim:ExcIEEEAC1A.ta');
        }
        if ('cim:ExcIEEEAC1A.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.vamax'], 'cim:PU', 'cim:ExcIEEEAC1A.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.vamax'], 'cim:PU', 'cim:ExcIEEEAC1A.vamax');
        }
        if ('cim:ExcIEEEAC1A.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.vamin'], 'cim:PU', 'cim:ExcIEEEAC1A.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.vamin'], 'cim:PU', 'cim:ExcIEEEAC1A.vamin');
        }
        if ('cim:ExcIEEEAC1A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.te'], 'cim:Seconds', 'cim:ExcIEEEAC1A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.te'], 'cim:Seconds', 'cim:ExcIEEEAC1A.te');
        }
        if ('cim:ExcIEEEAC1A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.kf'], 'cim:PU', 'cim:ExcIEEEAC1A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.kf'], 'cim:PU', 'cim:ExcIEEEAC1A.kf');
        }
        if ('cim:ExcIEEEAC1A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.tf'], 'cim:Seconds', 'cim:ExcIEEEAC1A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.tf'], 'cim:Seconds', 'cim:ExcIEEEAC1A.tf');
        }
        if ('cim:ExcIEEEAC1A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.kc'], 'cim:PU', 'cim:ExcIEEEAC1A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.kc'], 'cim:PU', 'cim:ExcIEEEAC1A.kc');
        }
        if ('cim:ExcIEEEAC1A.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.kd'], 'cim:PU', 'cim:ExcIEEEAC1A.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.kd'], 'cim:PU', 'cim:ExcIEEEAC1A.kd');
        }
        if ('cim:ExcIEEEAC1A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.ke'], 'cim:PU', 'cim:ExcIEEEAC1A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.ke'], 'cim:PU', 'cim:ExcIEEEAC1A.ke');
        }
        if ('cim:ExcIEEEAC1A.ve1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.ve1'], 'cim:PU', 'cim:ExcIEEEAC1A.ve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.ve1'], 'cim:PU', 'cim:ExcIEEEAC1A.ve1');
        }
        if ('cim:ExcIEEEAC1A.seve1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.seve1'], 'cim:Simple_Float', 'cim:ExcIEEEAC1A.seve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.seve1'], 'cim:Simple_Float', 'cim:ExcIEEEAC1A.seve1');
        }
        if ('cim:ExcIEEEAC1A.ve2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.ve2'], 'cim:PU', 'cim:ExcIEEEAC1A.ve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.ve2'], 'cim:PU', 'cim:ExcIEEEAC1A.ve2');
        }
        if ('cim:ExcIEEEAC1A.seve2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.seve2'], 'cim:Simple_Float', 'cim:ExcIEEEAC1A.seve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.seve2'], 'cim:Simple_Float', 'cim:ExcIEEEAC1A.seve2');
        }
        if ('cim:ExcIEEEAC1A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.vrmax'], 'cim:PU', 'cim:ExcIEEEAC1A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.vrmax'], 'cim:PU', 'cim:ExcIEEEAC1A.vrmax');
        }
        if ('cim:ExcIEEEAC1A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.vrmin'], 'cim:PU', 'cim:ExcIEEEAC1A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC1A.vrmin'], 'cim:PU', 'cim:ExcIEEEAC1A.vrmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEAC1A.tb", "cim:ExcIEEEAC1A.tc", "cim:ExcIEEEAC1A.ka", "cim:ExcIEEEAC1A.ta", "cim:ExcIEEEAC1A.vamax", "cim:ExcIEEEAC1A.vamin", "cim:ExcIEEEAC1A.te", "cim:ExcIEEEAC1A.kf", "cim:ExcIEEEAC1A.tf", "cim:ExcIEEEAC1A.kc", "cim:ExcIEEEAC1A.kd", "cim:ExcIEEEAC1A.ke", "cim:ExcIEEEAC1A.ve1", "cim:ExcIEEEAC1A.seve1", "cim:ExcIEEEAC1A.ve2", "cim:ExcIEEEAC1A.seve2", "cim:ExcIEEEAC1A.vrmax", "cim:ExcIEEEAC1A.vrmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEAC1A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEAC1A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEAC1A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEAC1A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEAC1A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    've1': [CGMESProfile.shortNames.DY],
    'seve1': [CGMESProfile.shortNames.DY],
    've2': [CGMESProfile.shortNames.DY],
    'seve2': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEAC2A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEAC2A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEAC2A);
    function ExcIEEEAC2A() {
      _classCallCheck(this, ExcIEEEAC2A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEAC2A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEAC2A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEAC2A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.tb'], 'cim:Seconds', 'cim:ExcIEEEAC2A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.tb'], 'cim:Seconds', 'cim:ExcIEEEAC2A.tb');
        }
        if ('cim:ExcIEEEAC2A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.tc'], 'cim:Seconds', 'cim:ExcIEEEAC2A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.tc'], 'cim:Seconds', 'cim:ExcIEEEAC2A.tc');
        }
        if ('cim:ExcIEEEAC2A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.ka'], 'cim:PU', 'cim:ExcIEEEAC2A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.ka'], 'cim:PU', 'cim:ExcIEEEAC2A.ka');
        }
        if ('cim:ExcIEEEAC2A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.ta'], 'cim:Seconds', 'cim:ExcIEEEAC2A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.ta'], 'cim:Seconds', 'cim:ExcIEEEAC2A.ta');
        }
        if ('cim:ExcIEEEAC2A.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.vamax'], 'cim:PU', 'cim:ExcIEEEAC2A.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.vamax'], 'cim:PU', 'cim:ExcIEEEAC2A.vamax');
        }
        if ('cim:ExcIEEEAC2A.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.vamin'], 'cim:PU', 'cim:ExcIEEEAC2A.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.vamin'], 'cim:PU', 'cim:ExcIEEEAC2A.vamin');
        }
        if ('cim:ExcIEEEAC2A.kb' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.kb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.kb'], 'cim:PU', 'cim:ExcIEEEAC2A.kb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.kb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.kb'], 'cim:PU', 'cim:ExcIEEEAC2A.kb');
        }
        if ('cim:ExcIEEEAC2A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.vrmax'], 'cim:PU', 'cim:ExcIEEEAC2A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.vrmax'], 'cim:PU', 'cim:ExcIEEEAC2A.vrmax');
        }
        if ('cim:ExcIEEEAC2A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.vrmin'], 'cim:PU', 'cim:ExcIEEEAC2A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.vrmin'], 'cim:PU', 'cim:ExcIEEEAC2A.vrmin');
        }
        if ('cim:ExcIEEEAC2A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.te'], 'cim:Seconds', 'cim:ExcIEEEAC2A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.te'], 'cim:Seconds', 'cim:ExcIEEEAC2A.te');
        }
        if ('cim:ExcIEEEAC2A.vfemax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.vfemax'], 'cim:PU', 'cim:ExcIEEEAC2A.vfemax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.vfemax'], 'cim:PU', 'cim:ExcIEEEAC2A.vfemax');
        }
        if ('cim:ExcIEEEAC2A.kh' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.kh'], 'cim:PU', 'cim:ExcIEEEAC2A.kh');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.kh'], 'cim:PU', 'cim:ExcIEEEAC2A.kh');
        }
        if ('cim:ExcIEEEAC2A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.kf'], 'cim:PU', 'cim:ExcIEEEAC2A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.kf'], 'cim:PU', 'cim:ExcIEEEAC2A.kf');
        }
        if ('cim:ExcIEEEAC2A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.tf'], 'cim:Seconds', 'cim:ExcIEEEAC2A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.tf'], 'cim:Seconds', 'cim:ExcIEEEAC2A.tf');
        }
        if ('cim:ExcIEEEAC2A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.kc'], 'cim:PU', 'cim:ExcIEEEAC2A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.kc'], 'cim:PU', 'cim:ExcIEEEAC2A.kc');
        }
        if ('cim:ExcIEEEAC2A.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.kd'], 'cim:PU', 'cim:ExcIEEEAC2A.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.kd'], 'cim:PU', 'cim:ExcIEEEAC2A.kd');
        }
        if ('cim:ExcIEEEAC2A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.ke'], 'cim:PU', 'cim:ExcIEEEAC2A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.ke'], 'cim:PU', 'cim:ExcIEEEAC2A.ke');
        }
        if ('cim:ExcIEEEAC2A.ve1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.ve1'], 'cim:PU', 'cim:ExcIEEEAC2A.ve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.ve1'], 'cim:PU', 'cim:ExcIEEEAC2A.ve1');
        }
        if ('cim:ExcIEEEAC2A.seve1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.seve1'], 'cim:Simple_Float', 'cim:ExcIEEEAC2A.seve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.seve1'], 'cim:Simple_Float', 'cim:ExcIEEEAC2A.seve1');
        }
        if ('cim:ExcIEEEAC2A.ve2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.ve2'], 'cim:PU', 'cim:ExcIEEEAC2A.ve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.ve2'], 'cim:PU', 'cim:ExcIEEEAC2A.ve2');
        }
        if ('cim:ExcIEEEAC2A.seve2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC2A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.seve2'], 'cim:Simple_Float', 'cim:ExcIEEEAC2A.seve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC2A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC2A.seve2'], 'cim:Simple_Float', 'cim:ExcIEEEAC2A.seve2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEAC2A.tb", "cim:ExcIEEEAC2A.tc", "cim:ExcIEEEAC2A.ka", "cim:ExcIEEEAC2A.ta", "cim:ExcIEEEAC2A.vamax", "cim:ExcIEEEAC2A.vamin", "cim:ExcIEEEAC2A.kb", "cim:ExcIEEEAC2A.vrmax", "cim:ExcIEEEAC2A.vrmin", "cim:ExcIEEEAC2A.te", "cim:ExcIEEEAC2A.vfemax", "cim:ExcIEEEAC2A.kh", "cim:ExcIEEEAC2A.kf", "cim:ExcIEEEAC2A.tf", "cim:ExcIEEEAC2A.kc", "cim:ExcIEEEAC2A.kd", "cim:ExcIEEEAC2A.ke", "cim:ExcIEEEAC2A.ve1", "cim:ExcIEEEAC2A.seve1", "cim:ExcIEEEAC2A.ve2", "cim:ExcIEEEAC2A.seve2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEAC2A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEAC2A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEAC2A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEAC2A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEAC2A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'kb': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'vfemax': [CGMESProfile.shortNames.DY],
    'kh': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    've1': [CGMESProfile.shortNames.DY],
    'seve1': [CGMESProfile.shortNames.DY],
    've2': [CGMESProfile.shortNames.DY],
    'seve2': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEAC3A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEAC3A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEAC3A);
    function ExcIEEEAC3A() {
      _classCallCheck(this, ExcIEEEAC3A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEAC3A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEAC3A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEAC3A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.tb'], 'cim:Seconds', 'cim:ExcIEEEAC3A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.tb'], 'cim:Seconds', 'cim:ExcIEEEAC3A.tb');
        }
        if ('cim:ExcIEEEAC3A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.tc'], 'cim:Seconds', 'cim:ExcIEEEAC3A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.tc'], 'cim:Seconds', 'cim:ExcIEEEAC3A.tc');
        }
        if ('cim:ExcIEEEAC3A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.ka'], 'cim:PU', 'cim:ExcIEEEAC3A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.ka'], 'cim:PU', 'cim:ExcIEEEAC3A.ka');
        }
        if ('cim:ExcIEEEAC3A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.ta'], 'cim:Seconds', 'cim:ExcIEEEAC3A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.ta'], 'cim:Seconds', 'cim:ExcIEEEAC3A.ta');
        }
        if ('cim:ExcIEEEAC3A.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.vamax'], 'cim:PU', 'cim:ExcIEEEAC3A.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.vamax'], 'cim:PU', 'cim:ExcIEEEAC3A.vamax');
        }
        if ('cim:ExcIEEEAC3A.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.vamin'], 'cim:PU', 'cim:ExcIEEEAC3A.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.vamin'], 'cim:PU', 'cim:ExcIEEEAC3A.vamin');
        }
        if ('cim:ExcIEEEAC3A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.te'], 'cim:Seconds', 'cim:ExcIEEEAC3A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.te'], 'cim:Seconds', 'cim:ExcIEEEAC3A.te');
        }
        if ('cim:ExcIEEEAC3A.vemin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.vemin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.vemin'], 'cim:PU', 'cim:ExcIEEEAC3A.vemin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.vemin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.vemin'], 'cim:PU', 'cim:ExcIEEEAC3A.vemin');
        }
        if ('cim:ExcIEEEAC3A.kr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.kr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.kr'], 'cim:PU', 'cim:ExcIEEEAC3A.kr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.kr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.kr'], 'cim:PU', 'cim:ExcIEEEAC3A.kr');
        }
        if ('cim:ExcIEEEAC3A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.kf'], 'cim:PU', 'cim:ExcIEEEAC3A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.kf'], 'cim:PU', 'cim:ExcIEEEAC3A.kf');
        }
        if ('cim:ExcIEEEAC3A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.tf'], 'cim:Seconds', 'cim:ExcIEEEAC3A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.tf'], 'cim:Seconds', 'cim:ExcIEEEAC3A.tf');
        }
        if ('cim:ExcIEEEAC3A.kn' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.kn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.kn'], 'cim:PU', 'cim:ExcIEEEAC3A.kn');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.kn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.kn'], 'cim:PU', 'cim:ExcIEEEAC3A.kn');
        }
        if ('cim:ExcIEEEAC3A.efdn' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.efdn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.efdn'], 'cim:PU', 'cim:ExcIEEEAC3A.efdn');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.efdn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.efdn'], 'cim:PU', 'cim:ExcIEEEAC3A.efdn');
        }
        if ('cim:ExcIEEEAC3A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.kc'], 'cim:PU', 'cim:ExcIEEEAC3A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.kc'], 'cim:PU', 'cim:ExcIEEEAC3A.kc');
        }
        if ('cim:ExcIEEEAC3A.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.kd'], 'cim:PU', 'cim:ExcIEEEAC3A.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.kd'], 'cim:PU', 'cim:ExcIEEEAC3A.kd');
        }
        if ('cim:ExcIEEEAC3A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.ke'], 'cim:PU', 'cim:ExcIEEEAC3A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.ke'], 'cim:PU', 'cim:ExcIEEEAC3A.ke');
        }
        if ('cim:ExcIEEEAC3A.vfemax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.vfemax'], 'cim:PU', 'cim:ExcIEEEAC3A.vfemax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.vfemax'], 'cim:PU', 'cim:ExcIEEEAC3A.vfemax');
        }
        if ('cim:ExcIEEEAC3A.ve1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.ve1'], 'cim:PU', 'cim:ExcIEEEAC3A.ve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.ve1'], 'cim:PU', 'cim:ExcIEEEAC3A.ve1');
        }
        if ('cim:ExcIEEEAC3A.seve1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.seve1'], 'cim:Simple_Float', 'cim:ExcIEEEAC3A.seve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.seve1'], 'cim:Simple_Float', 'cim:ExcIEEEAC3A.seve1');
        }
        if ('cim:ExcIEEEAC3A.ve2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.ve2'], 'cim:PU', 'cim:ExcIEEEAC3A.ve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.ve2'], 'cim:PU', 'cim:ExcIEEEAC3A.ve2');
        }
        if ('cim:ExcIEEEAC3A.seve2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC3A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.seve2'], 'cim:Simple_Float', 'cim:ExcIEEEAC3A.seve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC3A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC3A.seve2'], 'cim:Simple_Float', 'cim:ExcIEEEAC3A.seve2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEAC3A.tb", "cim:ExcIEEEAC3A.tc", "cim:ExcIEEEAC3A.ka", "cim:ExcIEEEAC3A.ta", "cim:ExcIEEEAC3A.vamax", "cim:ExcIEEEAC3A.vamin", "cim:ExcIEEEAC3A.te", "cim:ExcIEEEAC3A.vemin", "cim:ExcIEEEAC3A.kr", "cim:ExcIEEEAC3A.kf", "cim:ExcIEEEAC3A.tf", "cim:ExcIEEEAC3A.kn", "cim:ExcIEEEAC3A.efdn", "cim:ExcIEEEAC3A.kc", "cim:ExcIEEEAC3A.kd", "cim:ExcIEEEAC3A.ke", "cim:ExcIEEEAC3A.vfemax", "cim:ExcIEEEAC3A.ve1", "cim:ExcIEEEAC3A.seve1", "cim:ExcIEEEAC3A.ve2", "cim:ExcIEEEAC3A.seve2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEAC3A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEAC3A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEAC3A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEAC3A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEAC3A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'vemin': [CGMESProfile.shortNames.DY],
    'kr': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kn': [CGMESProfile.shortNames.DY],
    'efdn': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'vfemax': [CGMESProfile.shortNames.DY],
    've1': [CGMESProfile.shortNames.DY],
    'seve1': [CGMESProfile.shortNames.DY],
    've2': [CGMESProfile.shortNames.DY],
    'seve2': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEAC4A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEAC4A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEAC4A);
    function ExcIEEEAC4A() {
      _classCallCheck(this, ExcIEEEAC4A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEAC4A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEAC4A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEAC4A.vimax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC4A.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.vimax'], 'cim:PU', 'cim:ExcIEEEAC4A.vimax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC4A.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.vimax'], 'cim:PU', 'cim:ExcIEEEAC4A.vimax');
        }
        if ('cim:ExcIEEEAC4A.vimin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC4A.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.vimin'], 'cim:PU', 'cim:ExcIEEEAC4A.vimin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC4A.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.vimin'], 'cim:PU', 'cim:ExcIEEEAC4A.vimin');
        }
        if ('cim:ExcIEEEAC4A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC4A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.tc'], 'cim:Seconds', 'cim:ExcIEEEAC4A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC4A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.tc'], 'cim:Seconds', 'cim:ExcIEEEAC4A.tc');
        }
        if ('cim:ExcIEEEAC4A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC4A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.tb'], 'cim:Seconds', 'cim:ExcIEEEAC4A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC4A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.tb'], 'cim:Seconds', 'cim:ExcIEEEAC4A.tb');
        }
        if ('cim:ExcIEEEAC4A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC4A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.ka'], 'cim:PU', 'cim:ExcIEEEAC4A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC4A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.ka'], 'cim:PU', 'cim:ExcIEEEAC4A.ka');
        }
        if ('cim:ExcIEEEAC4A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC4A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.ta'], 'cim:Seconds', 'cim:ExcIEEEAC4A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC4A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.ta'], 'cim:Seconds', 'cim:ExcIEEEAC4A.ta');
        }
        if ('cim:ExcIEEEAC4A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC4A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.vrmax'], 'cim:PU', 'cim:ExcIEEEAC4A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC4A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.vrmax'], 'cim:PU', 'cim:ExcIEEEAC4A.vrmax');
        }
        if ('cim:ExcIEEEAC4A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC4A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.vrmin'], 'cim:PU', 'cim:ExcIEEEAC4A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC4A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.vrmin'], 'cim:PU', 'cim:ExcIEEEAC4A.vrmin');
        }
        if ('cim:ExcIEEEAC4A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC4A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.kc'], 'cim:PU', 'cim:ExcIEEEAC4A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC4A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC4A.kc'], 'cim:PU', 'cim:ExcIEEEAC4A.kc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEAC4A.vimax", "cim:ExcIEEEAC4A.vimin", "cim:ExcIEEEAC4A.tc", "cim:ExcIEEEAC4A.tb", "cim:ExcIEEEAC4A.ka", "cim:ExcIEEEAC4A.ta", "cim:ExcIEEEAC4A.vrmax", "cim:ExcIEEEAC4A.vrmin", "cim:ExcIEEEAC4A.kc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEAC4A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEAC4A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEAC4A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEAC4A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEAC4A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'vimax': [CGMESProfile.shortNames.DY],
    'vimin': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEAC5A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEAC5A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEAC5A);
    function ExcIEEEAC5A() {
      _classCallCheck(this, ExcIEEEAC5A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEAC5A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEAC5A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEAC5A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.ka'], 'cim:PU', 'cim:ExcIEEEAC5A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.ka'], 'cim:PU', 'cim:ExcIEEEAC5A.ka');
        }
        if ('cim:ExcIEEEAC5A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.ta'], 'cim:Seconds', 'cim:ExcIEEEAC5A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.ta'], 'cim:Seconds', 'cim:ExcIEEEAC5A.ta');
        }
        if ('cim:ExcIEEEAC5A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.vrmax'], 'cim:PU', 'cim:ExcIEEEAC5A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.vrmax'], 'cim:PU', 'cim:ExcIEEEAC5A.vrmax');
        }
        if ('cim:ExcIEEEAC5A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.vrmin'], 'cim:PU', 'cim:ExcIEEEAC5A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.vrmin'], 'cim:PU', 'cim:ExcIEEEAC5A.vrmin');
        }
        if ('cim:ExcIEEEAC5A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.ke'], 'cim:PU', 'cim:ExcIEEEAC5A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.ke'], 'cim:PU', 'cim:ExcIEEEAC5A.ke');
        }
        if ('cim:ExcIEEEAC5A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.te'], 'cim:Seconds', 'cim:ExcIEEEAC5A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.te'], 'cim:Seconds', 'cim:ExcIEEEAC5A.te');
        }
        if ('cim:ExcIEEEAC5A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.kf'], 'cim:PU', 'cim:ExcIEEEAC5A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.kf'], 'cim:PU', 'cim:ExcIEEEAC5A.kf');
        }
        if ('cim:ExcIEEEAC5A.tf1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.tf1'], 'cim:Seconds', 'cim:ExcIEEEAC5A.tf1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.tf1'], 'cim:Seconds', 'cim:ExcIEEEAC5A.tf1');
        }
        if ('cim:ExcIEEEAC5A.tf2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.tf2'], 'cim:Seconds', 'cim:ExcIEEEAC5A.tf2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.tf2'], 'cim:Seconds', 'cim:ExcIEEEAC5A.tf2');
        }
        if ('cim:ExcIEEEAC5A.tf3' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.tf3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.tf3'], 'cim:Seconds', 'cim:ExcIEEEAC5A.tf3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.tf3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.tf3'], 'cim:Seconds', 'cim:ExcIEEEAC5A.tf3');
        }
        if ('cim:ExcIEEEAC5A.efd1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.efd1'], 'cim:PU', 'cim:ExcIEEEAC5A.efd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.efd1'], 'cim:PU', 'cim:ExcIEEEAC5A.efd1');
        }
        if ('cim:ExcIEEEAC5A.seefd1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.seefd1'], 'cim:Simple_Float', 'cim:ExcIEEEAC5A.seefd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.seefd1'], 'cim:Simple_Float', 'cim:ExcIEEEAC5A.seefd1');
        }
        if ('cim:ExcIEEEAC5A.efd2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.efd2'], 'cim:PU', 'cim:ExcIEEEAC5A.efd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.efd2'], 'cim:PU', 'cim:ExcIEEEAC5A.efd2');
        }
        if ('cim:ExcIEEEAC5A.seefd2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC5A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.seefd2'], 'cim:Simple_Float', 'cim:ExcIEEEAC5A.seefd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC5A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC5A.seefd2'], 'cim:Simple_Float', 'cim:ExcIEEEAC5A.seefd2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEAC5A.ka", "cim:ExcIEEEAC5A.ta", "cim:ExcIEEEAC5A.vrmax", "cim:ExcIEEEAC5A.vrmin", "cim:ExcIEEEAC5A.ke", "cim:ExcIEEEAC5A.te", "cim:ExcIEEEAC5A.kf", "cim:ExcIEEEAC5A.tf1", "cim:ExcIEEEAC5A.tf2", "cim:ExcIEEEAC5A.tf3", "cim:ExcIEEEAC5A.efd1", "cim:ExcIEEEAC5A.seefd1", "cim:ExcIEEEAC5A.efd2", "cim:ExcIEEEAC5A.seefd2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEAC5A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEAC5A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEAC5A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEAC5A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEAC5A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf1': [CGMESProfile.shortNames.DY],
    'tf2': [CGMESProfile.shortNames.DY],
    'tf3': [CGMESProfile.shortNames.DY],
    'efd1': [CGMESProfile.shortNames.DY],
    'seefd1': [CGMESProfile.shortNames.DY],
    'efd2': [CGMESProfile.shortNames.DY],
    'seefd2': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEAC6A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEAC6A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEAC6A);
    function ExcIEEEAC6A() {
      _classCallCheck(this, ExcIEEEAC6A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEAC6A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEAC6A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEAC6A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.ka'], 'cim:PU', 'cim:ExcIEEEAC6A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.ka'], 'cim:PU', 'cim:ExcIEEEAC6A.ka');
        }
        if ('cim:ExcIEEEAC6A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.ta'], 'cim:Seconds', 'cim:ExcIEEEAC6A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.ta'], 'cim:Seconds', 'cim:ExcIEEEAC6A.ta');
        }
        if ('cim:ExcIEEEAC6A.tk' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.tk'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.tk'], 'cim:Seconds', 'cim:ExcIEEEAC6A.tk');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.tk'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.tk'], 'cim:Seconds', 'cim:ExcIEEEAC6A.tk');
        }
        if ('cim:ExcIEEEAC6A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.tb'], 'cim:Seconds', 'cim:ExcIEEEAC6A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.tb'], 'cim:Seconds', 'cim:ExcIEEEAC6A.tb');
        }
        if ('cim:ExcIEEEAC6A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.tc'], 'cim:Seconds', 'cim:ExcIEEEAC6A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.tc'], 'cim:Seconds', 'cim:ExcIEEEAC6A.tc');
        }
        if ('cim:ExcIEEEAC6A.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.vamax'], 'cim:PU', 'cim:ExcIEEEAC6A.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.vamax'], 'cim:PU', 'cim:ExcIEEEAC6A.vamax');
        }
        if ('cim:ExcIEEEAC6A.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.vamin'], 'cim:PU', 'cim:ExcIEEEAC6A.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.vamin'], 'cim:PU', 'cim:ExcIEEEAC6A.vamin');
        }
        if ('cim:ExcIEEEAC6A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.vrmax'], 'cim:PU', 'cim:ExcIEEEAC6A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.vrmax'], 'cim:PU', 'cim:ExcIEEEAC6A.vrmax');
        }
        if ('cim:ExcIEEEAC6A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.vrmin'], 'cim:PU', 'cim:ExcIEEEAC6A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.vrmin'], 'cim:PU', 'cim:ExcIEEEAC6A.vrmin');
        }
        if ('cim:ExcIEEEAC6A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.te'], 'cim:Seconds', 'cim:ExcIEEEAC6A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.te'], 'cim:Seconds', 'cim:ExcIEEEAC6A.te');
        }
        if ('cim:ExcIEEEAC6A.kh' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.kh'], 'cim:PU', 'cim:ExcIEEEAC6A.kh');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.kh'], 'cim:PU', 'cim:ExcIEEEAC6A.kh');
        }
        if ('cim:ExcIEEEAC6A.tj' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.tj'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.tj'], 'cim:Seconds', 'cim:ExcIEEEAC6A.tj');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.tj'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.tj'], 'cim:Seconds', 'cim:ExcIEEEAC6A.tj');
        }
        if ('cim:ExcIEEEAC6A.th' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.th'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.th'], 'cim:Seconds', 'cim:ExcIEEEAC6A.th');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.th'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.th'], 'cim:Seconds', 'cim:ExcIEEEAC6A.th');
        }
        if ('cim:ExcIEEEAC6A.vfelim' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.vfelim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.vfelim'], 'cim:PU', 'cim:ExcIEEEAC6A.vfelim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.vfelim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.vfelim'], 'cim:PU', 'cim:ExcIEEEAC6A.vfelim');
        }
        if ('cim:ExcIEEEAC6A.vhmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.vhmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.vhmax'], 'cim:PU', 'cim:ExcIEEEAC6A.vhmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.vhmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.vhmax'], 'cim:PU', 'cim:ExcIEEEAC6A.vhmax');
        }
        if ('cim:ExcIEEEAC6A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.kc'], 'cim:PU', 'cim:ExcIEEEAC6A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.kc'], 'cim:PU', 'cim:ExcIEEEAC6A.kc');
        }
        if ('cim:ExcIEEEAC6A.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.kd'], 'cim:PU', 'cim:ExcIEEEAC6A.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.kd'], 'cim:PU', 'cim:ExcIEEEAC6A.kd');
        }
        if ('cim:ExcIEEEAC6A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.ke'], 'cim:PU', 'cim:ExcIEEEAC6A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.ke'], 'cim:PU', 'cim:ExcIEEEAC6A.ke');
        }
        if ('cim:ExcIEEEAC6A.ve1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.ve1'], 'cim:PU', 'cim:ExcIEEEAC6A.ve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.ve1'], 'cim:PU', 'cim:ExcIEEEAC6A.ve1');
        }
        if ('cim:ExcIEEEAC6A.seve1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.seve1'], 'cim:Simple_Float', 'cim:ExcIEEEAC6A.seve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.seve1'], 'cim:Simple_Float', 'cim:ExcIEEEAC6A.seve1');
        }
        if ('cim:ExcIEEEAC6A.ve2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.ve2'], 'cim:PU', 'cim:ExcIEEEAC6A.ve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.ve2'], 'cim:PU', 'cim:ExcIEEEAC6A.ve2');
        }
        if ('cim:ExcIEEEAC6A.seve2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC6A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.seve2'], 'cim:Simple_Float', 'cim:ExcIEEEAC6A.seve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC6A.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC6A.seve2'], 'cim:Simple_Float', 'cim:ExcIEEEAC6A.seve2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEAC6A.ka", "cim:ExcIEEEAC6A.ta", "cim:ExcIEEEAC6A.tk", "cim:ExcIEEEAC6A.tb", "cim:ExcIEEEAC6A.tc", "cim:ExcIEEEAC6A.vamax", "cim:ExcIEEEAC6A.vamin", "cim:ExcIEEEAC6A.vrmax", "cim:ExcIEEEAC6A.vrmin", "cim:ExcIEEEAC6A.te", "cim:ExcIEEEAC6A.kh", "cim:ExcIEEEAC6A.tj", "cim:ExcIEEEAC6A.th", "cim:ExcIEEEAC6A.vfelim", "cim:ExcIEEEAC6A.vhmax", "cim:ExcIEEEAC6A.kc", "cim:ExcIEEEAC6A.kd", "cim:ExcIEEEAC6A.ke", "cim:ExcIEEEAC6A.ve1", "cim:ExcIEEEAC6A.seve1", "cim:ExcIEEEAC6A.ve2", "cim:ExcIEEEAC6A.seve2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEAC6A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEAC6A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEAC6A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEAC6A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEAC6A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tk': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kh': [CGMESProfile.shortNames.DY],
    'tj': [CGMESProfile.shortNames.DY],
    'th': [CGMESProfile.shortNames.DY],
    'vfelim': [CGMESProfile.shortNames.DY],
    'vhmax': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    've1': [CGMESProfile.shortNames.DY],
    'seve1': [CGMESProfile.shortNames.DY],
    've2': [CGMESProfile.shortNames.DY],
    'seve2': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEAC7B = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEAC7B, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEAC7B);
    function ExcIEEEAC7B() {
      _classCallCheck(this, ExcIEEEAC7B);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEAC7B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEAC7B";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEAC7B.kpr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.kpr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kpr'], 'cim:PU', 'cim:ExcIEEEAC7B.kpr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.kpr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kpr'], 'cim:PU', 'cim:ExcIEEEAC7B.kpr');
        }
        if ('cim:ExcIEEEAC7B.kir' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.kir'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kir'], 'cim:PU', 'cim:ExcIEEEAC7B.kir');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.kir'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kir'], 'cim:PU', 'cim:ExcIEEEAC7B.kir');
        }
        if ('cim:ExcIEEEAC7B.kdr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.kdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kdr'], 'cim:PU', 'cim:ExcIEEEAC7B.kdr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.kdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kdr'], 'cim:PU', 'cim:ExcIEEEAC7B.kdr');
        }
        if ('cim:ExcIEEEAC7B.tdr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.tdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.tdr'], 'cim:Seconds', 'cim:ExcIEEEAC7B.tdr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.tdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.tdr'], 'cim:Seconds', 'cim:ExcIEEEAC7B.tdr');
        }
        if ('cim:ExcIEEEAC7B.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.vrmax'], 'cim:PU', 'cim:ExcIEEEAC7B.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.vrmax'], 'cim:PU', 'cim:ExcIEEEAC7B.vrmax');
        }
        if ('cim:ExcIEEEAC7B.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.vrmin'], 'cim:PU', 'cim:ExcIEEEAC7B.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.vrmin'], 'cim:PU', 'cim:ExcIEEEAC7B.vrmin');
        }
        if ('cim:ExcIEEEAC7B.kpa' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.kpa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kpa'], 'cim:PU', 'cim:ExcIEEEAC7B.kpa');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.kpa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kpa'], 'cim:PU', 'cim:ExcIEEEAC7B.kpa');
        }
        if ('cim:ExcIEEEAC7B.kia' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.kia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kia'], 'cim:PU', 'cim:ExcIEEEAC7B.kia');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.kia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kia'], 'cim:PU', 'cim:ExcIEEEAC7B.kia');
        }
        if ('cim:ExcIEEEAC7B.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.vamax'], 'cim:PU', 'cim:ExcIEEEAC7B.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.vamax'], 'cim:PU', 'cim:ExcIEEEAC7B.vamax');
        }
        if ('cim:ExcIEEEAC7B.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.vamin'], 'cim:PU', 'cim:ExcIEEEAC7B.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.vamin'], 'cim:PU', 'cim:ExcIEEEAC7B.vamin');
        }
        if ('cim:ExcIEEEAC7B.kp' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kp'], 'cim:PU', 'cim:ExcIEEEAC7B.kp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kp'], 'cim:PU', 'cim:ExcIEEEAC7B.kp');
        }
        if ('cim:ExcIEEEAC7B.kl' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.kl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kl'], 'cim:PU', 'cim:ExcIEEEAC7B.kl');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.kl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kl'], 'cim:PU', 'cim:ExcIEEEAC7B.kl');
        }
        if ('cim:ExcIEEEAC7B.te' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.te'], 'cim:Seconds', 'cim:ExcIEEEAC7B.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.te'], 'cim:Seconds', 'cim:ExcIEEEAC7B.te');
        }
        if ('cim:ExcIEEEAC7B.vfemax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.vfemax'], 'cim:PU', 'cim:ExcIEEEAC7B.vfemax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.vfemax'], 'cim:PU', 'cim:ExcIEEEAC7B.vfemax');
        }
        if ('cim:ExcIEEEAC7B.vemin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.vemin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.vemin'], 'cim:PU', 'cim:ExcIEEEAC7B.vemin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.vemin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.vemin'], 'cim:PU', 'cim:ExcIEEEAC7B.vemin');
        }
        if ('cim:ExcIEEEAC7B.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.ke'], 'cim:PU', 'cim:ExcIEEEAC7B.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.ke'], 'cim:PU', 'cim:ExcIEEEAC7B.ke');
        }
        if ('cim:ExcIEEEAC7B.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kc'], 'cim:PU', 'cim:ExcIEEEAC7B.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kc'], 'cim:PU', 'cim:ExcIEEEAC7B.kc');
        }
        if ('cim:ExcIEEEAC7B.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kd'], 'cim:PU', 'cim:ExcIEEEAC7B.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kd'], 'cim:PU', 'cim:ExcIEEEAC7B.kd');
        }
        if ('cim:ExcIEEEAC7B.kf1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.kf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kf1'], 'cim:PU', 'cim:ExcIEEEAC7B.kf1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.kf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kf1'], 'cim:PU', 'cim:ExcIEEEAC7B.kf1');
        }
        if ('cim:ExcIEEEAC7B.kf2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.kf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kf2'], 'cim:PU', 'cim:ExcIEEEAC7B.kf2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.kf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kf2'], 'cim:PU', 'cim:ExcIEEEAC7B.kf2');
        }
        if ('cim:ExcIEEEAC7B.kf3' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.kf3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kf3'], 'cim:PU', 'cim:ExcIEEEAC7B.kf3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.kf3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.kf3'], 'cim:PU', 'cim:ExcIEEEAC7B.kf3');
        }
        if ('cim:ExcIEEEAC7B.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.tf'], 'cim:Seconds', 'cim:ExcIEEEAC7B.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.tf'], 'cim:Seconds', 'cim:ExcIEEEAC7B.tf');
        }
        if ('cim:ExcIEEEAC7B.ve1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.ve1'], 'cim:PU', 'cim:ExcIEEEAC7B.ve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.ve1'], 'cim:PU', 'cim:ExcIEEEAC7B.ve1');
        }
        if ('cim:ExcIEEEAC7B.seve1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.seve1'], 'cim:Simple_Float', 'cim:ExcIEEEAC7B.seve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.seve1'], 'cim:Simple_Float', 'cim:ExcIEEEAC7B.seve1');
        }
        if ('cim:ExcIEEEAC7B.ve2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.ve2'], 'cim:PU', 'cim:ExcIEEEAC7B.ve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.ve2'], 'cim:PU', 'cim:ExcIEEEAC7B.ve2');
        }
        if ('cim:ExcIEEEAC7B.seve2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC7B.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.seve2'], 'cim:Simple_Float', 'cim:ExcIEEEAC7B.seve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC7B.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC7B.seve2'], 'cim:Simple_Float', 'cim:ExcIEEEAC7B.seve2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEAC7B.kpr", "cim:ExcIEEEAC7B.kir", "cim:ExcIEEEAC7B.kdr", "cim:ExcIEEEAC7B.tdr", "cim:ExcIEEEAC7B.vrmax", "cim:ExcIEEEAC7B.vrmin", "cim:ExcIEEEAC7B.kpa", "cim:ExcIEEEAC7B.kia", "cim:ExcIEEEAC7B.vamax", "cim:ExcIEEEAC7B.vamin", "cim:ExcIEEEAC7B.kp", "cim:ExcIEEEAC7B.kl", "cim:ExcIEEEAC7B.te", "cim:ExcIEEEAC7B.vfemax", "cim:ExcIEEEAC7B.vemin", "cim:ExcIEEEAC7B.ke", "cim:ExcIEEEAC7B.kc", "cim:ExcIEEEAC7B.kd", "cim:ExcIEEEAC7B.kf1", "cim:ExcIEEEAC7B.kf2", "cim:ExcIEEEAC7B.kf3", "cim:ExcIEEEAC7B.tf", "cim:ExcIEEEAC7B.ve1", "cim:ExcIEEEAC7B.seve1", "cim:ExcIEEEAC7B.ve2", "cim:ExcIEEEAC7B.seve2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEAC7B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEAC7B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEAC7B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEAC7B;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEAC7B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kpr': [CGMESProfile.shortNames.DY],
    'kir': [CGMESProfile.shortNames.DY],
    'kdr': [CGMESProfile.shortNames.DY],
    'tdr': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'kpa': [CGMESProfile.shortNames.DY],
    'kia': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'kl': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'vfemax': [CGMESProfile.shortNames.DY],
    'vemin': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'kf1': [CGMESProfile.shortNames.DY],
    'kf2': [CGMESProfile.shortNames.DY],
    'kf3': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    've1': [CGMESProfile.shortNames.DY],
    'seve1': [CGMESProfile.shortNames.DY],
    've2': [CGMESProfile.shortNames.DY],
    'seve2': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEAC8B = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEAC8B, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEAC8B);
    function ExcIEEEAC8B() {
      _classCallCheck(this, ExcIEEEAC8B);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEAC8B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEAC8B";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEAC8B.kpr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.kpr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.kpr'], 'cim:PU', 'cim:ExcIEEEAC8B.kpr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.kpr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.kpr'], 'cim:PU', 'cim:ExcIEEEAC8B.kpr');
        }
        if ('cim:ExcIEEEAC8B.kir' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.kir'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.kir'], 'cim:PU', 'cim:ExcIEEEAC8B.kir');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.kir'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.kir'], 'cim:PU', 'cim:ExcIEEEAC8B.kir');
        }
        if ('cim:ExcIEEEAC8B.kdr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.kdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.kdr'], 'cim:PU', 'cim:ExcIEEEAC8B.kdr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.kdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.kdr'], 'cim:PU', 'cim:ExcIEEEAC8B.kdr');
        }
        if ('cim:ExcIEEEAC8B.tdr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.tdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.tdr'], 'cim:Seconds', 'cim:ExcIEEEAC8B.tdr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.tdr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.tdr'], 'cim:Seconds', 'cim:ExcIEEEAC8B.tdr');
        }
        if ('cim:ExcIEEEAC8B.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.vrmax'], 'cim:PU', 'cim:ExcIEEEAC8B.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.vrmax'], 'cim:PU', 'cim:ExcIEEEAC8B.vrmax');
        }
        if ('cim:ExcIEEEAC8B.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.vrmin'], 'cim:PU', 'cim:ExcIEEEAC8B.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.vrmin'], 'cim:PU', 'cim:ExcIEEEAC8B.vrmin');
        }
        if ('cim:ExcIEEEAC8B.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.ka'], 'cim:PU', 'cim:ExcIEEEAC8B.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.ka'], 'cim:PU', 'cim:ExcIEEEAC8B.ka');
        }
        if ('cim:ExcIEEEAC8B.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.ta'], 'cim:Seconds', 'cim:ExcIEEEAC8B.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.ta'], 'cim:Seconds', 'cim:ExcIEEEAC8B.ta');
        }
        if ('cim:ExcIEEEAC8B.te' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.te'], 'cim:Seconds', 'cim:ExcIEEEAC8B.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.te'], 'cim:Seconds', 'cim:ExcIEEEAC8B.te');
        }
        if ('cim:ExcIEEEAC8B.vfemax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.vfemax'], 'cim:PU', 'cim:ExcIEEEAC8B.vfemax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.vfemax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.vfemax'], 'cim:PU', 'cim:ExcIEEEAC8B.vfemax');
        }
        if ('cim:ExcIEEEAC8B.vemin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.vemin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.vemin'], 'cim:PU', 'cim:ExcIEEEAC8B.vemin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.vemin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.vemin'], 'cim:PU', 'cim:ExcIEEEAC8B.vemin');
        }
        if ('cim:ExcIEEEAC8B.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.ke'], 'cim:PU', 'cim:ExcIEEEAC8B.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.ke'], 'cim:PU', 'cim:ExcIEEEAC8B.ke');
        }
        if ('cim:ExcIEEEAC8B.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.kc'], 'cim:PU', 'cim:ExcIEEEAC8B.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.kc'], 'cim:PU', 'cim:ExcIEEEAC8B.kc');
        }
        if ('cim:ExcIEEEAC8B.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.kd'], 'cim:PU', 'cim:ExcIEEEAC8B.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.kd'], 'cim:PU', 'cim:ExcIEEEAC8B.kd');
        }
        if ('cim:ExcIEEEAC8B.ve1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.ve1'], 'cim:PU', 'cim:ExcIEEEAC8B.ve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.ve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.ve1'], 'cim:PU', 'cim:ExcIEEEAC8B.ve1');
        }
        if ('cim:ExcIEEEAC8B.seve1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.seve1'], 'cim:Simple_Float', 'cim:ExcIEEEAC8B.seve1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.seve1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.seve1'], 'cim:Simple_Float', 'cim:ExcIEEEAC8B.seve1');
        }
        if ('cim:ExcIEEEAC8B.ve2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.ve2'], 'cim:PU', 'cim:ExcIEEEAC8B.ve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.ve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.ve2'], 'cim:PU', 'cim:ExcIEEEAC8B.ve2');
        }
        if ('cim:ExcIEEEAC8B.seve2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEAC8B.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.seve2'], 'cim:Simple_Float', 'cim:ExcIEEEAC8B.seve2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEAC8B.seve2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEAC8B.seve2'], 'cim:Simple_Float', 'cim:ExcIEEEAC8B.seve2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEAC8B.kpr", "cim:ExcIEEEAC8B.kir", "cim:ExcIEEEAC8B.kdr", "cim:ExcIEEEAC8B.tdr", "cim:ExcIEEEAC8B.vrmax", "cim:ExcIEEEAC8B.vrmin", "cim:ExcIEEEAC8B.ka", "cim:ExcIEEEAC8B.ta", "cim:ExcIEEEAC8B.te", "cim:ExcIEEEAC8B.vfemax", "cim:ExcIEEEAC8B.vemin", "cim:ExcIEEEAC8B.ke", "cim:ExcIEEEAC8B.kc", "cim:ExcIEEEAC8B.kd", "cim:ExcIEEEAC8B.ve1", "cim:ExcIEEEAC8B.seve1", "cim:ExcIEEEAC8B.ve2", "cim:ExcIEEEAC8B.seve2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEAC8B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEAC8B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEAC8B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEAC8B;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEAC8B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kpr': [CGMESProfile.shortNames.DY],
    'kir': [CGMESProfile.shortNames.DY],
    'kdr': [CGMESProfile.shortNames.DY],
    'tdr': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'vfemax': [CGMESProfile.shortNames.DY],
    'vemin': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    've1': [CGMESProfile.shortNames.DY],
    'seve1': [CGMESProfile.shortNames.DY],
    've2': [CGMESProfile.shortNames.DY],
    'seve2': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEDC1A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEDC1A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEDC1A);
    function ExcIEEEDC1A() {
      _classCallCheck(this, ExcIEEEDC1A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEDC1A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEDC1A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEDC1A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.ka'], 'cim:PU', 'cim:ExcIEEEDC1A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.ka'], 'cim:PU', 'cim:ExcIEEEDC1A.ka');
        }
        if ('cim:ExcIEEEDC1A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.ta'], 'cim:Seconds', 'cim:ExcIEEEDC1A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.ta'], 'cim:Seconds', 'cim:ExcIEEEDC1A.ta');
        }
        if ('cim:ExcIEEEDC1A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.tb'], 'cim:Seconds', 'cim:ExcIEEEDC1A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.tb'], 'cim:Seconds', 'cim:ExcIEEEDC1A.tb');
        }
        if ('cim:ExcIEEEDC1A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.tc'], 'cim:Seconds', 'cim:ExcIEEEDC1A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.tc'], 'cim:Seconds', 'cim:ExcIEEEDC1A.tc');
        }
        if ('cim:ExcIEEEDC1A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.vrmax'], 'cim:PU', 'cim:ExcIEEEDC1A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.vrmax'], 'cim:PU', 'cim:ExcIEEEDC1A.vrmax');
        }
        if ('cim:ExcIEEEDC1A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.vrmin'], 'cim:PU', 'cim:ExcIEEEDC1A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.vrmin'], 'cim:PU', 'cim:ExcIEEEDC1A.vrmin');
        }
        if ('cim:ExcIEEEDC1A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.ke'], 'cim:PU', 'cim:ExcIEEEDC1A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.ke'], 'cim:PU', 'cim:ExcIEEEDC1A.ke');
        }
        if ('cim:ExcIEEEDC1A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.te'], 'cim:Seconds', 'cim:ExcIEEEDC1A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.te'], 'cim:Seconds', 'cim:ExcIEEEDC1A.te');
        }
        if ('cim:ExcIEEEDC1A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.kf'], 'cim:PU', 'cim:ExcIEEEDC1A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.kf'], 'cim:PU', 'cim:ExcIEEEDC1A.kf');
        }
        if ('cim:ExcIEEEDC1A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.tf'], 'cim:Seconds', 'cim:ExcIEEEDC1A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.tf'], 'cim:Seconds', 'cim:ExcIEEEDC1A.tf');
        }
        if ('cim:ExcIEEEDC1A.efd1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.efd1'], 'cim:PU', 'cim:ExcIEEEDC1A.efd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.efd1'], 'cim:PU', 'cim:ExcIEEEDC1A.efd1');
        }
        if ('cim:ExcIEEEDC1A.seefd1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.seefd1'], 'cim:Simple_Float', 'cim:ExcIEEEDC1A.seefd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.seefd1'], 'cim:Simple_Float', 'cim:ExcIEEEDC1A.seefd1');
        }
        if ('cim:ExcIEEEDC1A.efd2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.efd2'], 'cim:PU', 'cim:ExcIEEEDC1A.efd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.efd2'], 'cim:PU', 'cim:ExcIEEEDC1A.efd2');
        }
        if ('cim:ExcIEEEDC1A.seefd2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.seefd2'], 'cim:Simple_Float', 'cim:ExcIEEEDC1A.seefd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.seefd2'], 'cim:Simple_Float', 'cim:ExcIEEEDC1A.seefd2');
        }
        if ('cim:ExcIEEEDC1A.uelin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.uelin'], 'cim:Boolean', 'cim:ExcIEEEDC1A.uelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.uelin'], 'cim:Boolean', 'cim:ExcIEEEDC1A.uelin');
        }
        if ('cim:ExcIEEEDC1A.exclim' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC1A.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.exclim'], 'cim:Boolean', 'cim:ExcIEEEDC1A.exclim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC1A.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC1A.exclim'], 'cim:Boolean', 'cim:ExcIEEEDC1A.exclim');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEDC1A.ka", "cim:ExcIEEEDC1A.ta", "cim:ExcIEEEDC1A.tb", "cim:ExcIEEEDC1A.tc", "cim:ExcIEEEDC1A.vrmax", "cim:ExcIEEEDC1A.vrmin", "cim:ExcIEEEDC1A.ke", "cim:ExcIEEEDC1A.te", "cim:ExcIEEEDC1A.kf", "cim:ExcIEEEDC1A.tf", "cim:ExcIEEEDC1A.efd1", "cim:ExcIEEEDC1A.seefd1", "cim:ExcIEEEDC1A.efd2", "cim:ExcIEEEDC1A.seefd2", "cim:ExcIEEEDC1A.uelin", "cim:ExcIEEEDC1A.exclim"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEDC1A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEDC1A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEDC1A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEDC1A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEDC1A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'efd1': [CGMESProfile.shortNames.DY],
    'seefd1': [CGMESProfile.shortNames.DY],
    'efd2': [CGMESProfile.shortNames.DY],
    'seefd2': [CGMESProfile.shortNames.DY],
    'uelin': [CGMESProfile.shortNames.DY],
    'exclim': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEDC2A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEDC2A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEDC2A);
    function ExcIEEEDC2A() {
      _classCallCheck(this, ExcIEEEDC2A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEDC2A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEDC2A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEDC2A.efd1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.efd1'], 'cim:PU', 'cim:ExcIEEEDC2A.efd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.efd1'], 'cim:PU', 'cim:ExcIEEEDC2A.efd1');
        }
        if ('cim:ExcIEEEDC2A.efd2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.efd2'], 'cim:PU', 'cim:ExcIEEEDC2A.efd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.efd2'], 'cim:PU', 'cim:ExcIEEEDC2A.efd2');
        }
        if ('cim:ExcIEEEDC2A.exclim' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.exclim'], 'cim:PU', 'cim:ExcIEEEDC2A.exclim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.exclim'], 'cim:PU', 'cim:ExcIEEEDC2A.exclim');
        }
        if ('cim:ExcIEEEDC2A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.ka'], 'cim:PU', 'cim:ExcIEEEDC2A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.ka'], 'cim:PU', 'cim:ExcIEEEDC2A.ka');
        }
        if ('cim:ExcIEEEDC2A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.ke'], 'cim:PU', 'cim:ExcIEEEDC2A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.ke'], 'cim:PU', 'cim:ExcIEEEDC2A.ke');
        }
        if ('cim:ExcIEEEDC2A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.kf'], 'cim:PU', 'cim:ExcIEEEDC2A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.kf'], 'cim:PU', 'cim:ExcIEEEDC2A.kf');
        }
        if ('cim:ExcIEEEDC2A.seefd1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.seefd1'], 'cim:Simple_Float', 'cim:ExcIEEEDC2A.seefd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.seefd1'], 'cim:Simple_Float', 'cim:ExcIEEEDC2A.seefd1');
        }
        if ('cim:ExcIEEEDC2A.seefd2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.seefd2'], 'cim:Simple_Float', 'cim:ExcIEEEDC2A.seefd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.seefd2'], 'cim:Simple_Float', 'cim:ExcIEEEDC2A.seefd2');
        }
        if ('cim:ExcIEEEDC2A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.ta'], 'cim:Seconds', 'cim:ExcIEEEDC2A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.ta'], 'cim:Seconds', 'cim:ExcIEEEDC2A.ta');
        }
        if ('cim:ExcIEEEDC2A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.tb'], 'cim:Seconds', 'cim:ExcIEEEDC2A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.tb'], 'cim:Seconds', 'cim:ExcIEEEDC2A.tb');
        }
        if ('cim:ExcIEEEDC2A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.tc'], 'cim:Seconds', 'cim:ExcIEEEDC2A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.tc'], 'cim:Seconds', 'cim:ExcIEEEDC2A.tc');
        }
        if ('cim:ExcIEEEDC2A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.te'], 'cim:Seconds', 'cim:ExcIEEEDC2A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.te'], 'cim:Seconds', 'cim:ExcIEEEDC2A.te');
        }
        if ('cim:ExcIEEEDC2A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.tf'], 'cim:Seconds', 'cim:ExcIEEEDC2A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.tf'], 'cim:Seconds', 'cim:ExcIEEEDC2A.tf');
        }
        if ('cim:ExcIEEEDC2A.uelin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.uelin'], 'cim:Boolean', 'cim:ExcIEEEDC2A.uelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.uelin'], 'cim:Boolean', 'cim:ExcIEEEDC2A.uelin');
        }
        if ('cim:ExcIEEEDC2A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.vrmax'], 'cim:PU', 'cim:ExcIEEEDC2A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.vrmax'], 'cim:PU', 'cim:ExcIEEEDC2A.vrmax');
        }
        if ('cim:ExcIEEEDC2A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC2A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.vrmin'], 'cim:PU', 'cim:ExcIEEEDC2A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC2A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC2A.vrmin'], 'cim:PU', 'cim:ExcIEEEDC2A.vrmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEDC2A.efd1", "cim:ExcIEEEDC2A.efd2", "cim:ExcIEEEDC2A.exclim", "cim:ExcIEEEDC2A.ka", "cim:ExcIEEEDC2A.ke", "cim:ExcIEEEDC2A.kf", "cim:ExcIEEEDC2A.seefd1", "cim:ExcIEEEDC2A.seefd2", "cim:ExcIEEEDC2A.ta", "cim:ExcIEEEDC2A.tb", "cim:ExcIEEEDC2A.tc", "cim:ExcIEEEDC2A.te", "cim:ExcIEEEDC2A.tf", "cim:ExcIEEEDC2A.uelin", "cim:ExcIEEEDC2A.vrmax", "cim:ExcIEEEDC2A.vrmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEDC2A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEDC2A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEDC2A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEDC2A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEDC2A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'efd1': [CGMESProfile.shortNames.DY],
    'efd2': [CGMESProfile.shortNames.DY],
    'exclim': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'seefd1': [CGMESProfile.shortNames.DY],
    'seefd2': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'uelin': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEDC3A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEDC3A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEDC3A);
    function ExcIEEEDC3A() {
      _classCallCheck(this, ExcIEEEDC3A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEDC3A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEDC3A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEDC3A.trh' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC3A.trh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.trh'], 'cim:Seconds', 'cim:ExcIEEEDC3A.trh');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC3A.trh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.trh'], 'cim:Seconds', 'cim:ExcIEEEDC3A.trh');
        }
        if ('cim:ExcIEEEDC3A.kv' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC3A.kv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.kv'], 'cim:PU', 'cim:ExcIEEEDC3A.kv');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC3A.kv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.kv'], 'cim:PU', 'cim:ExcIEEEDC3A.kv');
        }
        if ('cim:ExcIEEEDC3A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC3A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.vrmax'], 'cim:PU', 'cim:ExcIEEEDC3A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC3A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.vrmax'], 'cim:PU', 'cim:ExcIEEEDC3A.vrmax');
        }
        if ('cim:ExcIEEEDC3A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC3A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.vrmin'], 'cim:PU', 'cim:ExcIEEEDC3A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC3A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.vrmin'], 'cim:PU', 'cim:ExcIEEEDC3A.vrmin');
        }
        if ('cim:ExcIEEEDC3A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC3A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.te'], 'cim:Seconds', 'cim:ExcIEEEDC3A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC3A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.te'], 'cim:Seconds', 'cim:ExcIEEEDC3A.te');
        }
        if ('cim:ExcIEEEDC3A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC3A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.ke'], 'cim:PU', 'cim:ExcIEEEDC3A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC3A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.ke'], 'cim:PU', 'cim:ExcIEEEDC3A.ke');
        }
        if ('cim:ExcIEEEDC3A.efd1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC3A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.efd1'], 'cim:PU', 'cim:ExcIEEEDC3A.efd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC3A.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.efd1'], 'cim:PU', 'cim:ExcIEEEDC3A.efd1');
        }
        if ('cim:ExcIEEEDC3A.seefd1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC3A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.seefd1'], 'cim:Simple_Float', 'cim:ExcIEEEDC3A.seefd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC3A.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.seefd1'], 'cim:Simple_Float', 'cim:ExcIEEEDC3A.seefd1');
        }
        if ('cim:ExcIEEEDC3A.efd2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC3A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.efd2'], 'cim:PU', 'cim:ExcIEEEDC3A.efd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC3A.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.efd2'], 'cim:PU', 'cim:ExcIEEEDC3A.efd2');
        }
        if ('cim:ExcIEEEDC3A.seefd2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC3A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.seefd2'], 'cim:Simple_Float', 'cim:ExcIEEEDC3A.seefd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC3A.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.seefd2'], 'cim:Simple_Float', 'cim:ExcIEEEDC3A.seefd2');
        }
        if ('cim:ExcIEEEDC3A.exclim' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC3A.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.exclim'], 'cim:Boolean', 'cim:ExcIEEEDC3A.exclim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC3A.exclim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC3A.exclim'], 'cim:Boolean', 'cim:ExcIEEEDC3A.exclim');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEDC3A.trh", "cim:ExcIEEEDC3A.kv", "cim:ExcIEEEDC3A.vrmax", "cim:ExcIEEEDC3A.vrmin", "cim:ExcIEEEDC3A.te", "cim:ExcIEEEDC3A.ke", "cim:ExcIEEEDC3A.efd1", "cim:ExcIEEEDC3A.seefd1", "cim:ExcIEEEDC3A.efd2", "cim:ExcIEEEDC3A.seefd2", "cim:ExcIEEEDC3A.exclim"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEDC3A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEDC3A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEDC3A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEDC3A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEDC3A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'trh': [CGMESProfile.shortNames.DY],
    'kv': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'efd1': [CGMESProfile.shortNames.DY],
    'seefd1': [CGMESProfile.shortNames.DY],
    'efd2': [CGMESProfile.shortNames.DY],
    'seefd2': [CGMESProfile.shortNames.DY],
    'exclim': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEDC4B = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEDC4B, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEDC4B);
    function ExcIEEEDC4B() {
      _classCallCheck(this, ExcIEEEDC4B);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEDC4B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEDC4B";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEDC4B.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.ka'], 'cim:PU', 'cim:ExcIEEEDC4B.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.ka'], 'cim:PU', 'cim:ExcIEEEDC4B.ka');
        }
        if ('cim:ExcIEEEDC4B.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.ta'], 'cim:Seconds', 'cim:ExcIEEEDC4B.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.ta'], 'cim:Seconds', 'cim:ExcIEEEDC4B.ta');
        }
        if ('cim:ExcIEEEDC4B.kp' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.kp'], 'cim:PU', 'cim:ExcIEEEDC4B.kp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.kp'], 'cim:PU', 'cim:ExcIEEEDC4B.kp');
        }
        if ('cim:ExcIEEEDC4B.ki' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.ki'], 'cim:PU', 'cim:ExcIEEEDC4B.ki');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.ki'], 'cim:PU', 'cim:ExcIEEEDC4B.ki');
        }
        if ('cim:ExcIEEEDC4B.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.kd'], 'cim:PU', 'cim:ExcIEEEDC4B.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.kd'], 'cim:PU', 'cim:ExcIEEEDC4B.kd');
        }
        if ('cim:ExcIEEEDC4B.td' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.td'], 'cim:Seconds', 'cim:ExcIEEEDC4B.td');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.td'], 'cim:Seconds', 'cim:ExcIEEEDC4B.td');
        }
        if ('cim:ExcIEEEDC4B.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.vrmax'], 'cim:PU', 'cim:ExcIEEEDC4B.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.vrmax'], 'cim:PU', 'cim:ExcIEEEDC4B.vrmax');
        }
        if ('cim:ExcIEEEDC4B.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.vrmin'], 'cim:PU', 'cim:ExcIEEEDC4B.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.vrmin'], 'cim:PU', 'cim:ExcIEEEDC4B.vrmin');
        }
        if ('cim:ExcIEEEDC4B.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.ke'], 'cim:PU', 'cim:ExcIEEEDC4B.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.ke'], 'cim:PU', 'cim:ExcIEEEDC4B.ke');
        }
        if ('cim:ExcIEEEDC4B.te' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.te'], 'cim:Seconds', 'cim:ExcIEEEDC4B.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.te'], 'cim:Seconds', 'cim:ExcIEEEDC4B.te');
        }
        if ('cim:ExcIEEEDC4B.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.kf'], 'cim:PU', 'cim:ExcIEEEDC4B.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.kf'], 'cim:PU', 'cim:ExcIEEEDC4B.kf');
        }
        if ('cim:ExcIEEEDC4B.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.tf'], 'cim:Seconds', 'cim:ExcIEEEDC4B.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.tf'], 'cim:Seconds', 'cim:ExcIEEEDC4B.tf');
        }
        if ('cim:ExcIEEEDC4B.efd1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.efd1'], 'cim:PU', 'cim:ExcIEEEDC4B.efd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.efd1'], 'cim:PU', 'cim:ExcIEEEDC4B.efd1');
        }
        if ('cim:ExcIEEEDC4B.seefd1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.seefd1'], 'cim:Simple_Float', 'cim:ExcIEEEDC4B.seefd1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.seefd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.seefd1'], 'cim:Simple_Float', 'cim:ExcIEEEDC4B.seefd1');
        }
        if ('cim:ExcIEEEDC4B.efd2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.efd2'], 'cim:PU', 'cim:ExcIEEEDC4B.efd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.efd2'], 'cim:PU', 'cim:ExcIEEEDC4B.efd2');
        }
        if ('cim:ExcIEEEDC4B.seefd2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.seefd2'], 'cim:Simple_Float', 'cim:ExcIEEEDC4B.seefd2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.seefd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.seefd2'], 'cim:Simple_Float', 'cim:ExcIEEEDC4B.seefd2');
        }
        if ('cim:ExcIEEEDC4B.vemin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.vemin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.vemin'], 'cim:PU', 'cim:ExcIEEEDC4B.vemin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.vemin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.vemin'], 'cim:PU', 'cim:ExcIEEEDC4B.vemin');
        }
        if ('cim:ExcIEEEDC4B.oelin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.oelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.oelin'], 'cim:Boolean', 'cim:ExcIEEEDC4B.oelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.oelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.oelin'], 'cim:Boolean', 'cim:ExcIEEEDC4B.oelin');
        }
        if ('cim:ExcIEEEDC4B.uelin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEDC4B.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.uelin'], 'cim:Boolean', 'cim:ExcIEEEDC4B.uelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEDC4B.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEDC4B.uelin'], 'cim:Boolean', 'cim:ExcIEEEDC4B.uelin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEDC4B.ka", "cim:ExcIEEEDC4B.ta", "cim:ExcIEEEDC4B.kp", "cim:ExcIEEEDC4B.ki", "cim:ExcIEEEDC4B.kd", "cim:ExcIEEEDC4B.td", "cim:ExcIEEEDC4B.vrmax", "cim:ExcIEEEDC4B.vrmin", "cim:ExcIEEEDC4B.ke", "cim:ExcIEEEDC4B.te", "cim:ExcIEEEDC4B.kf", "cim:ExcIEEEDC4B.tf", "cim:ExcIEEEDC4B.efd1", "cim:ExcIEEEDC4B.seefd1", "cim:ExcIEEEDC4B.efd2", "cim:ExcIEEEDC4B.seefd2", "cim:ExcIEEEDC4B.vemin", "cim:ExcIEEEDC4B.oelin", "cim:ExcIEEEDC4B.uelin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEDC4B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEDC4B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEDC4B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEDC4B;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEDC4B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'td': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'efd1': [CGMESProfile.shortNames.DY],
    'seefd1': [CGMESProfile.shortNames.DY],
    'efd2': [CGMESProfile.shortNames.DY],
    'seefd2': [CGMESProfile.shortNames.DY],
    'vemin': [CGMESProfile.shortNames.DY],
    'oelin': [CGMESProfile.shortNames.DY],
    'uelin': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEST1A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEST1A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEST1A);
    function ExcIEEEST1A() {
      _classCallCheck(this, ExcIEEEST1A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEST1A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEST1A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEST1A.ilr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.ilr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.ilr'], 'cim:PU', 'cim:ExcIEEEST1A.ilr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.ilr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.ilr'], 'cim:PU', 'cim:ExcIEEEST1A.ilr');
        }
        if ('cim:ExcIEEEST1A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.ka'], 'cim:PU', 'cim:ExcIEEEST1A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.ka'], 'cim:PU', 'cim:ExcIEEEST1A.ka');
        }
        if ('cim:ExcIEEEST1A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.kc'], 'cim:PU', 'cim:ExcIEEEST1A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.kc'], 'cim:PU', 'cim:ExcIEEEST1A.kc');
        }
        if ('cim:ExcIEEEST1A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.kf'], 'cim:PU', 'cim:ExcIEEEST1A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.kf'], 'cim:PU', 'cim:ExcIEEEST1A.kf');
        }
        if ('cim:ExcIEEEST1A.klr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.klr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.klr'], 'cim:PU', 'cim:ExcIEEEST1A.klr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.klr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.klr'], 'cim:PU', 'cim:ExcIEEEST1A.klr');
        }
        if ('cim:ExcIEEEST1A.pssin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.pssin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.pssin'], 'cim:Boolean', 'cim:ExcIEEEST1A.pssin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.pssin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.pssin'], 'cim:Boolean', 'cim:ExcIEEEST1A.pssin');
        }
        if ('cim:ExcIEEEST1A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.ta'], 'cim:Seconds', 'cim:ExcIEEEST1A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.ta'], 'cim:Seconds', 'cim:ExcIEEEST1A.ta');
        }
        if ('cim:ExcIEEEST1A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.tb'], 'cim:Seconds', 'cim:ExcIEEEST1A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.tb'], 'cim:Seconds', 'cim:ExcIEEEST1A.tb');
        }
        if ('cim:ExcIEEEST1A.tb1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.tb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.tb1'], 'cim:Seconds', 'cim:ExcIEEEST1A.tb1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.tb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.tb1'], 'cim:Seconds', 'cim:ExcIEEEST1A.tb1');
        }
        if ('cim:ExcIEEEST1A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.tc'], 'cim:Seconds', 'cim:ExcIEEEST1A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.tc'], 'cim:Seconds', 'cim:ExcIEEEST1A.tc');
        }
        if ('cim:ExcIEEEST1A.tc1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.tc1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.tc1'], 'cim:Seconds', 'cim:ExcIEEEST1A.tc1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.tc1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.tc1'], 'cim:Seconds', 'cim:ExcIEEEST1A.tc1');
        }
        if ('cim:ExcIEEEST1A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.tf'], 'cim:Seconds', 'cim:ExcIEEEST1A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.tf'], 'cim:Seconds', 'cim:ExcIEEEST1A.tf');
        }
        if ('cim:ExcIEEEST1A.uelin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.uelin'], 'cim:ExcIEEEST1AUELselectorKind', 'cim:ExcIEEEST1A.uelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.uelin'], 'cim:ExcIEEEST1AUELselectorKind', 'cim:ExcIEEEST1A.uelin');
        }
        if ('cim:ExcIEEEST1A.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.vamax'], 'cim:PU', 'cim:ExcIEEEST1A.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.vamax'], 'cim:PU', 'cim:ExcIEEEST1A.vamax');
        }
        if ('cim:ExcIEEEST1A.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.vamin'], 'cim:PU', 'cim:ExcIEEEST1A.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.vamin'], 'cim:PU', 'cim:ExcIEEEST1A.vamin');
        }
        if ('cim:ExcIEEEST1A.vimax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.vimax'], 'cim:PU', 'cim:ExcIEEEST1A.vimax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.vimax'], 'cim:PU', 'cim:ExcIEEEST1A.vimax');
        }
        if ('cim:ExcIEEEST1A.vimin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.vimin'], 'cim:PU', 'cim:ExcIEEEST1A.vimin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.vimin'], 'cim:PU', 'cim:ExcIEEEST1A.vimin');
        }
        if ('cim:ExcIEEEST1A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.vrmax'], 'cim:PU', 'cim:ExcIEEEST1A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.vrmax'], 'cim:PU', 'cim:ExcIEEEST1A.vrmax');
        }
        if ('cim:ExcIEEEST1A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.vrmin'], 'cim:PU', 'cim:ExcIEEEST1A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST1A.vrmin'], 'cim:PU', 'cim:ExcIEEEST1A.vrmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEST1A.ilr", "cim:ExcIEEEST1A.ka", "cim:ExcIEEEST1A.kc", "cim:ExcIEEEST1A.kf", "cim:ExcIEEEST1A.klr", "cim:ExcIEEEST1A.pssin", "cim:ExcIEEEST1A.ta", "cim:ExcIEEEST1A.tb", "cim:ExcIEEEST1A.tb1", "cim:ExcIEEEST1A.tc", "cim:ExcIEEEST1A.tc1", "cim:ExcIEEEST1A.tf", "cim:ExcIEEEST1A.uelin", "cim:ExcIEEEST1A.vamax", "cim:ExcIEEEST1A.vamin", "cim:ExcIEEEST1A.vimax", "cim:ExcIEEEST1A.vimin", "cim:ExcIEEEST1A.vrmax", "cim:ExcIEEEST1A.vrmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEST1A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEST1A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEST1A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEST1A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEST1A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ilr': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'klr': [CGMESProfile.shortNames.DY],
    'pssin': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tb1': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'tc1': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'uelin': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'vimax': [CGMESProfile.shortNames.DY],
    'vimin': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$C = [{
    "value": "--"
  }, {
    "value": "ExcIEEEST1AUELselectorKind.ignoreUELsignal",
    "label": "ignoreUELsignal"
  }, {
    "value": "ExcIEEEST1AUELselectorKind.inputHVgateVoltageOutput",
    "label": "inputHVgateVoltageOutput"
  }, {
    "value": "ExcIEEEST1AUELselectorKind.inputHVgateErrorSignal",
    "label": "inputHVgateErrorSignal"
  }, {
    "value": "ExcIEEEST1AUELselectorKind.inputAddedToErrorSignal",
    "label": "inputAddedToErrorSignal"
  }];
  var ExcIEEEST1AUELselectorKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(ExcIEEEST1AUELselectorKind, _BaseClass);
    var _super = _createSuper(ExcIEEEST1AUELselectorKind);
    function ExcIEEEST1AUELselectorKind() {
      _classCallCheck(this, ExcIEEEST1AUELselectorKind);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEST1AUELselectorKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEST1AUELselectorKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEST1AUELselectorKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEST1AUELselectorKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEST1AUELselectorKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$C;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEST1AUELselectorKind;
  }(BaseClass);
  _defineProperty(ExcIEEEST1AUELselectorKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEST2A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEST2A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEST2A);
    function ExcIEEEST2A() {
      _classCallCheck(this, ExcIEEEST2A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEST2A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEST2A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEST2A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.ka'], 'cim:PU', 'cim:ExcIEEEST2A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.ka'], 'cim:PU', 'cim:ExcIEEEST2A.ka');
        }
        if ('cim:ExcIEEEST2A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.ta'], 'cim:Seconds', 'cim:ExcIEEEST2A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.ta'], 'cim:Seconds', 'cim:ExcIEEEST2A.ta');
        }
        if ('cim:ExcIEEEST2A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.vrmax'], 'cim:PU', 'cim:ExcIEEEST2A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.vrmax'], 'cim:PU', 'cim:ExcIEEEST2A.vrmax');
        }
        if ('cim:ExcIEEEST2A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.vrmin'], 'cim:PU', 'cim:ExcIEEEST2A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.vrmin'], 'cim:PU', 'cim:ExcIEEEST2A.vrmin');
        }
        if ('cim:ExcIEEEST2A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.ke'], 'cim:PU', 'cim:ExcIEEEST2A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.ke'], 'cim:PU', 'cim:ExcIEEEST2A.ke');
        }
        if ('cim:ExcIEEEST2A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.te'], 'cim:Seconds', 'cim:ExcIEEEST2A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.te'], 'cim:Seconds', 'cim:ExcIEEEST2A.te');
        }
        if ('cim:ExcIEEEST2A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.kf'], 'cim:PU', 'cim:ExcIEEEST2A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.kf'], 'cim:PU', 'cim:ExcIEEEST2A.kf');
        }
        if ('cim:ExcIEEEST2A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.tf'], 'cim:Seconds', 'cim:ExcIEEEST2A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.tf'], 'cim:Seconds', 'cim:ExcIEEEST2A.tf');
        }
        if ('cim:ExcIEEEST2A.kp' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.kp'], 'cim:PU', 'cim:ExcIEEEST2A.kp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.kp'], 'cim:PU', 'cim:ExcIEEEST2A.kp');
        }
        if ('cim:ExcIEEEST2A.ki' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.ki'], 'cim:PU', 'cim:ExcIEEEST2A.ki');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.ki'], 'cim:PU', 'cim:ExcIEEEST2A.ki');
        }
        if ('cim:ExcIEEEST2A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.kc'], 'cim:PU', 'cim:ExcIEEEST2A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.kc'], 'cim:PU', 'cim:ExcIEEEST2A.kc');
        }
        if ('cim:ExcIEEEST2A.efdmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.efdmax'], 'cim:PU', 'cim:ExcIEEEST2A.efdmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.efdmax'], 'cim:PU', 'cim:ExcIEEEST2A.efdmax');
        }
        if ('cim:ExcIEEEST2A.uelin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST2A.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.uelin'], 'cim:Boolean', 'cim:ExcIEEEST2A.uelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST2A.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST2A.uelin'], 'cim:Boolean', 'cim:ExcIEEEST2A.uelin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEST2A.ka", "cim:ExcIEEEST2A.ta", "cim:ExcIEEEST2A.vrmax", "cim:ExcIEEEST2A.vrmin", "cim:ExcIEEEST2A.ke", "cim:ExcIEEEST2A.te", "cim:ExcIEEEST2A.kf", "cim:ExcIEEEST2A.tf", "cim:ExcIEEEST2A.kp", "cim:ExcIEEEST2A.ki", "cim:ExcIEEEST2A.kc", "cim:ExcIEEEST2A.efdmax", "cim:ExcIEEEST2A.uelin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEST2A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEST2A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEST2A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEST2A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEST2A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'efdmax': [CGMESProfile.shortNames.DY],
    'uelin': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEST3A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEST3A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEST3A);
    function ExcIEEEST3A() {
      _classCallCheck(this, ExcIEEEST3A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEST3A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEST3A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEST3A.vimax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vimax'], 'cim:PU', 'cim:ExcIEEEST3A.vimax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vimax'], 'cim:PU', 'cim:ExcIEEEST3A.vimax');
        }
        if ('cim:ExcIEEEST3A.vimin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vimin'], 'cim:PU', 'cim:ExcIEEEST3A.vimin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vimin'], 'cim:PU', 'cim:ExcIEEEST3A.vimin');
        }
        if ('cim:ExcIEEEST3A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.ka'], 'cim:PU', 'cim:ExcIEEEST3A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.ka'], 'cim:PU', 'cim:ExcIEEEST3A.ka');
        }
        if ('cim:ExcIEEEST3A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.ta'], 'cim:Seconds', 'cim:ExcIEEEST3A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.ta'], 'cim:Seconds', 'cim:ExcIEEEST3A.ta');
        }
        if ('cim:ExcIEEEST3A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.tb'], 'cim:Seconds', 'cim:ExcIEEEST3A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.tb'], 'cim:Seconds', 'cim:ExcIEEEST3A.tb');
        }
        if ('cim:ExcIEEEST3A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.tc'], 'cim:Seconds', 'cim:ExcIEEEST3A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.tc'], 'cim:Seconds', 'cim:ExcIEEEST3A.tc');
        }
        if ('cim:ExcIEEEST3A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vrmax'], 'cim:PU', 'cim:ExcIEEEST3A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vrmax'], 'cim:PU', 'cim:ExcIEEEST3A.vrmax');
        }
        if ('cim:ExcIEEEST3A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vrmin'], 'cim:PU', 'cim:ExcIEEEST3A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vrmin'], 'cim:PU', 'cim:ExcIEEEST3A.vrmin');
        }
        if ('cim:ExcIEEEST3A.km' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.km'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.km'], 'cim:PU', 'cim:ExcIEEEST3A.km');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.km'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.km'], 'cim:PU', 'cim:ExcIEEEST3A.km');
        }
        if ('cim:ExcIEEEST3A.tm' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.tm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.tm'], 'cim:Seconds', 'cim:ExcIEEEST3A.tm');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.tm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.tm'], 'cim:Seconds', 'cim:ExcIEEEST3A.tm');
        }
        if ('cim:ExcIEEEST3A.vmmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.vmmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vmmax'], 'cim:PU', 'cim:ExcIEEEST3A.vmmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.vmmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vmmax'], 'cim:PU', 'cim:ExcIEEEST3A.vmmax');
        }
        if ('cim:ExcIEEEST3A.vmmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.vmmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vmmin'], 'cim:PU', 'cim:ExcIEEEST3A.vmmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.vmmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vmmin'], 'cim:PU', 'cim:ExcIEEEST3A.vmmin');
        }
        if ('cim:ExcIEEEST3A.kg' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.kg'], 'cim:PU', 'cim:ExcIEEEST3A.kg');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.kg'], 'cim:PU', 'cim:ExcIEEEST3A.kg');
        }
        if ('cim:ExcIEEEST3A.kp' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.kp'], 'cim:PU', 'cim:ExcIEEEST3A.kp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.kp'], 'cim:PU', 'cim:ExcIEEEST3A.kp');
        }
        if ('cim:ExcIEEEST3A.thetap' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.thetap'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.thetap'], 'cim:AngleDegrees', 'cim:ExcIEEEST3A.thetap');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.thetap'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.thetap'], 'cim:AngleDegrees', 'cim:ExcIEEEST3A.thetap');
        }
        if ('cim:ExcIEEEST3A.ki' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.ki'], 'cim:PU', 'cim:ExcIEEEST3A.ki');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.ki'], 'cim:PU', 'cim:ExcIEEEST3A.ki');
        }
        if ('cim:ExcIEEEST3A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.kc'], 'cim:PU', 'cim:ExcIEEEST3A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.kc'], 'cim:PU', 'cim:ExcIEEEST3A.kc');
        }
        if ('cim:ExcIEEEST3A.xl' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.xl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.xl'], 'cim:PU', 'cim:ExcIEEEST3A.xl');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.xl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.xl'], 'cim:PU', 'cim:ExcIEEEST3A.xl');
        }
        if ('cim:ExcIEEEST3A.vbmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.vbmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vbmax'], 'cim:PU', 'cim:ExcIEEEST3A.vbmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.vbmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vbmax'], 'cim:PU', 'cim:ExcIEEEST3A.vbmax');
        }
        if ('cim:ExcIEEEST3A.vgmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST3A.vgmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vgmax'], 'cim:PU', 'cim:ExcIEEEST3A.vgmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST3A.vgmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST3A.vgmax'], 'cim:PU', 'cim:ExcIEEEST3A.vgmax');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEST3A.vimax", "cim:ExcIEEEST3A.vimin", "cim:ExcIEEEST3A.ka", "cim:ExcIEEEST3A.ta", "cim:ExcIEEEST3A.tb", "cim:ExcIEEEST3A.tc", "cim:ExcIEEEST3A.vrmax", "cim:ExcIEEEST3A.vrmin", "cim:ExcIEEEST3A.km", "cim:ExcIEEEST3A.tm", "cim:ExcIEEEST3A.vmmax", "cim:ExcIEEEST3A.vmmin", "cim:ExcIEEEST3A.kg", "cim:ExcIEEEST3A.kp", "cim:ExcIEEEST3A.thetap", "cim:ExcIEEEST3A.ki", "cim:ExcIEEEST3A.kc", "cim:ExcIEEEST3A.xl", "cim:ExcIEEEST3A.vbmax", "cim:ExcIEEEST3A.vgmax"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEST3A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEST3A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEST3A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEST3A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEST3A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'vimax': [CGMESProfile.shortNames.DY],
    'vimin': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'km': [CGMESProfile.shortNames.DY],
    'tm': [CGMESProfile.shortNames.DY],
    'vmmax': [CGMESProfile.shortNames.DY],
    'vmmin': [CGMESProfile.shortNames.DY],
    'kg': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'thetap': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'xl': [CGMESProfile.shortNames.DY],
    'vbmax': [CGMESProfile.shortNames.DY],
    'vgmax': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEST4B = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEST4B, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEST4B);
    function ExcIEEEST4B() {
      _classCallCheck(this, ExcIEEEST4B);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEST4B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEST4B";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEST4B.kpr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.kpr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kpr'], 'cim:PU', 'cim:ExcIEEEST4B.kpr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.kpr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kpr'], 'cim:PU', 'cim:ExcIEEEST4B.kpr');
        }
        if ('cim:ExcIEEEST4B.kir' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.kir'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kir'], 'cim:PU', 'cim:ExcIEEEST4B.kir');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.kir'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kir'], 'cim:PU', 'cim:ExcIEEEST4B.kir');
        }
        if ('cim:ExcIEEEST4B.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.ta'], 'cim:Seconds', 'cim:ExcIEEEST4B.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.ta'], 'cim:Seconds', 'cim:ExcIEEEST4B.ta');
        }
        if ('cim:ExcIEEEST4B.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.vrmax'], 'cim:PU', 'cim:ExcIEEEST4B.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.vrmax'], 'cim:PU', 'cim:ExcIEEEST4B.vrmax');
        }
        if ('cim:ExcIEEEST4B.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.vrmin'], 'cim:PU', 'cim:ExcIEEEST4B.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.vrmin'], 'cim:PU', 'cim:ExcIEEEST4B.vrmin');
        }
        if ('cim:ExcIEEEST4B.kpm' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.kpm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kpm'], 'cim:PU', 'cim:ExcIEEEST4B.kpm');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.kpm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kpm'], 'cim:PU', 'cim:ExcIEEEST4B.kpm');
        }
        if ('cim:ExcIEEEST4B.kim' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.kim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kim'], 'cim:PU', 'cim:ExcIEEEST4B.kim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.kim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kim'], 'cim:PU', 'cim:ExcIEEEST4B.kim');
        }
        if ('cim:ExcIEEEST4B.vmmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.vmmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.vmmax'], 'cim:PU', 'cim:ExcIEEEST4B.vmmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.vmmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.vmmax'], 'cim:PU', 'cim:ExcIEEEST4B.vmmax');
        }
        if ('cim:ExcIEEEST4B.vmmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.vmmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.vmmin'], 'cim:PU', 'cim:ExcIEEEST4B.vmmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.vmmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.vmmin'], 'cim:PU', 'cim:ExcIEEEST4B.vmmin');
        }
        if ('cim:ExcIEEEST4B.kg' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kg'], 'cim:PU', 'cim:ExcIEEEST4B.kg');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kg'], 'cim:PU', 'cim:ExcIEEEST4B.kg');
        }
        if ('cim:ExcIEEEST4B.kp' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kp'], 'cim:PU', 'cim:ExcIEEEST4B.kp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kp'], 'cim:PU', 'cim:ExcIEEEST4B.kp');
        }
        if ('cim:ExcIEEEST4B.thetap' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.thetap'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.thetap'], 'cim:AngleDegrees', 'cim:ExcIEEEST4B.thetap');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.thetap'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.thetap'], 'cim:AngleDegrees', 'cim:ExcIEEEST4B.thetap');
        }
        if ('cim:ExcIEEEST4B.ki' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.ki'], 'cim:PU', 'cim:ExcIEEEST4B.ki');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.ki'], 'cim:PU', 'cim:ExcIEEEST4B.ki');
        }
        if ('cim:ExcIEEEST4B.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kc'], 'cim:PU', 'cim:ExcIEEEST4B.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.kc'], 'cim:PU', 'cim:ExcIEEEST4B.kc');
        }
        if ('cim:ExcIEEEST4B.xl' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.xl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.xl'], 'cim:PU', 'cim:ExcIEEEST4B.xl');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.xl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.xl'], 'cim:PU', 'cim:ExcIEEEST4B.xl');
        }
        if ('cim:ExcIEEEST4B.vbmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST4B.vbmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.vbmax'], 'cim:PU', 'cim:ExcIEEEST4B.vbmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST4B.vbmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST4B.vbmax'], 'cim:PU', 'cim:ExcIEEEST4B.vbmax');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEST4B.kpr", "cim:ExcIEEEST4B.kir", "cim:ExcIEEEST4B.ta", "cim:ExcIEEEST4B.vrmax", "cim:ExcIEEEST4B.vrmin", "cim:ExcIEEEST4B.kpm", "cim:ExcIEEEST4B.kim", "cim:ExcIEEEST4B.vmmax", "cim:ExcIEEEST4B.vmmin", "cim:ExcIEEEST4B.kg", "cim:ExcIEEEST4B.kp", "cim:ExcIEEEST4B.thetap", "cim:ExcIEEEST4B.ki", "cim:ExcIEEEST4B.kc", "cim:ExcIEEEST4B.xl", "cim:ExcIEEEST4B.vbmax"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEST4B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEST4B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEST4B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEST4B;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEST4B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kpr': [CGMESProfile.shortNames.DY],
    'kir': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'kpm': [CGMESProfile.shortNames.DY],
    'kim': [CGMESProfile.shortNames.DY],
    'vmmax': [CGMESProfile.shortNames.DY],
    'vmmin': [CGMESProfile.shortNames.DY],
    'kg': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'thetap': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'xl': [CGMESProfile.shortNames.DY],
    'vbmax': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEST5B = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEST5B, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEST5B);
    function ExcIEEEST5B() {
      _classCallCheck(this, ExcIEEEST5B);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEST5B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEST5B";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEST5B.kr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.kr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.kr'], 'cim:PU', 'cim:ExcIEEEST5B.kr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.kr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.kr'], 'cim:PU', 'cim:ExcIEEEST5B.kr');
        }
        if ('cim:ExcIEEEST5B.t1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.t1'], 'cim:Seconds', 'cim:ExcIEEEST5B.t1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.t1'], 'cim:Seconds', 'cim:ExcIEEEST5B.t1');
        }
        if ('cim:ExcIEEEST5B.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.kc'], 'cim:PU', 'cim:ExcIEEEST5B.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.kc'], 'cim:PU', 'cim:ExcIEEEST5B.kc');
        }
        if ('cim:ExcIEEEST5B.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.vrmax'], 'cim:PU', 'cim:ExcIEEEST5B.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.vrmax'], 'cim:PU', 'cim:ExcIEEEST5B.vrmax');
        }
        if ('cim:ExcIEEEST5B.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.vrmin'], 'cim:PU', 'cim:ExcIEEEST5B.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.vrmin'], 'cim:PU', 'cim:ExcIEEEST5B.vrmin');
        }
        if ('cim:ExcIEEEST5B.tc1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.tc1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tc1'], 'cim:Seconds', 'cim:ExcIEEEST5B.tc1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.tc1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tc1'], 'cim:Seconds', 'cim:ExcIEEEST5B.tc1');
        }
        if ('cim:ExcIEEEST5B.tb1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.tb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tb1'], 'cim:Seconds', 'cim:ExcIEEEST5B.tb1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.tb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tb1'], 'cim:Seconds', 'cim:ExcIEEEST5B.tb1');
        }
        if ('cim:ExcIEEEST5B.tc2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.tc2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tc2'], 'cim:Seconds', 'cim:ExcIEEEST5B.tc2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.tc2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tc2'], 'cim:Seconds', 'cim:ExcIEEEST5B.tc2');
        }
        if ('cim:ExcIEEEST5B.tb2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.tb2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tb2'], 'cim:Seconds', 'cim:ExcIEEEST5B.tb2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.tb2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tb2'], 'cim:Seconds', 'cim:ExcIEEEST5B.tb2');
        }
        if ('cim:ExcIEEEST5B.toc1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.toc1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.toc1'], 'cim:Seconds', 'cim:ExcIEEEST5B.toc1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.toc1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.toc1'], 'cim:Seconds', 'cim:ExcIEEEST5B.toc1');
        }
        if ('cim:ExcIEEEST5B.tob1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.tob1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tob1'], 'cim:Seconds', 'cim:ExcIEEEST5B.tob1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.tob1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tob1'], 'cim:Seconds', 'cim:ExcIEEEST5B.tob1');
        }
        if ('cim:ExcIEEEST5B.toc2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.toc2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.toc2'], 'cim:Seconds', 'cim:ExcIEEEST5B.toc2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.toc2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.toc2'], 'cim:Seconds', 'cim:ExcIEEEST5B.toc2');
        }
        if ('cim:ExcIEEEST5B.tob2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.tob2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tob2'], 'cim:Seconds', 'cim:ExcIEEEST5B.tob2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.tob2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tob2'], 'cim:Seconds', 'cim:ExcIEEEST5B.tob2');
        }
        if ('cim:ExcIEEEST5B.tuc1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.tuc1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tuc1'], 'cim:Seconds', 'cim:ExcIEEEST5B.tuc1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.tuc1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tuc1'], 'cim:Seconds', 'cim:ExcIEEEST5B.tuc1');
        }
        if ('cim:ExcIEEEST5B.tub1' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.tub1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tub1'], 'cim:Seconds', 'cim:ExcIEEEST5B.tub1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.tub1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tub1'], 'cim:Seconds', 'cim:ExcIEEEST5B.tub1');
        }
        if ('cim:ExcIEEEST5B.tuc2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.tuc2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tuc2'], 'cim:Seconds', 'cim:ExcIEEEST5B.tuc2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.tuc2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tuc2'], 'cim:Seconds', 'cim:ExcIEEEST5B.tuc2');
        }
        if ('cim:ExcIEEEST5B.tub2' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST5B.tub2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tub2'], 'cim:Seconds', 'cim:ExcIEEEST5B.tub2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST5B.tub2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST5B.tub2'], 'cim:Seconds', 'cim:ExcIEEEST5B.tub2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEST5B.kr", "cim:ExcIEEEST5B.t1", "cim:ExcIEEEST5B.kc", "cim:ExcIEEEST5B.vrmax", "cim:ExcIEEEST5B.vrmin", "cim:ExcIEEEST5B.tc1", "cim:ExcIEEEST5B.tb1", "cim:ExcIEEEST5B.tc2", "cim:ExcIEEEST5B.tb2", "cim:ExcIEEEST5B.toc1", "cim:ExcIEEEST5B.tob1", "cim:ExcIEEEST5B.toc2", "cim:ExcIEEEST5B.tob2", "cim:ExcIEEEST5B.tuc1", "cim:ExcIEEEST5B.tub1", "cim:ExcIEEEST5B.tuc2", "cim:ExcIEEEST5B.tub2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEST5B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEST5B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEST5B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEST5B;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEST5B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kr': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'tc1': [CGMESProfile.shortNames.DY],
    'tb1': [CGMESProfile.shortNames.DY],
    'tc2': [CGMESProfile.shortNames.DY],
    'tb2': [CGMESProfile.shortNames.DY],
    'toc1': [CGMESProfile.shortNames.DY],
    'tob1': [CGMESProfile.shortNames.DY],
    'toc2': [CGMESProfile.shortNames.DY],
    'tob2': [CGMESProfile.shortNames.DY],
    'tuc1': [CGMESProfile.shortNames.DY],
    'tub1': [CGMESProfile.shortNames.DY],
    'tuc2': [CGMESProfile.shortNames.DY],
    'tub2': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEST6B = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEST6B, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEST6B);
    function ExcIEEEST6B() {
      _classCallCheck(this, ExcIEEEST6B);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEST6B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEST6B";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEST6B.ilr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.ilr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.ilr'], 'cim:PU', 'cim:ExcIEEEST6B.ilr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.ilr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.ilr'], 'cim:PU', 'cim:ExcIEEEST6B.ilr');
        }
        if ('cim:ExcIEEEST6B.kci' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.kci'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.kci'], 'cim:PU', 'cim:ExcIEEEST6B.kci');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.kci'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.kci'], 'cim:PU', 'cim:ExcIEEEST6B.kci');
        }
        if ('cim:ExcIEEEST6B.kff' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.kff'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.kff'], 'cim:PU', 'cim:ExcIEEEST6B.kff');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.kff'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.kff'], 'cim:PU', 'cim:ExcIEEEST6B.kff');
        }
        if ('cim:ExcIEEEST6B.kg' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.kg'], 'cim:PU', 'cim:ExcIEEEST6B.kg');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.kg'], 'cim:PU', 'cim:ExcIEEEST6B.kg');
        }
        if ('cim:ExcIEEEST6B.kia' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.kia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.kia'], 'cim:PU', 'cim:ExcIEEEST6B.kia');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.kia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.kia'], 'cim:PU', 'cim:ExcIEEEST6B.kia');
        }
        if ('cim:ExcIEEEST6B.klr' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.klr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.klr'], 'cim:PU', 'cim:ExcIEEEST6B.klr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.klr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.klr'], 'cim:PU', 'cim:ExcIEEEST6B.klr');
        }
        if ('cim:ExcIEEEST6B.km' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.km'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.km'], 'cim:PU', 'cim:ExcIEEEST6B.km');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.km'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.km'], 'cim:PU', 'cim:ExcIEEEST6B.km');
        }
        if ('cim:ExcIEEEST6B.kpa' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.kpa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.kpa'], 'cim:PU', 'cim:ExcIEEEST6B.kpa');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.kpa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.kpa'], 'cim:PU', 'cim:ExcIEEEST6B.kpa');
        }
        if ('cim:ExcIEEEST6B.oelin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.oelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.oelin'], 'cim:ExcST6BOELselectorKind', 'cim:ExcIEEEST6B.oelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.oelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.oelin'], 'cim:ExcST6BOELselectorKind', 'cim:ExcIEEEST6B.oelin');
        }
        if ('cim:ExcIEEEST6B.tg' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.tg'], 'cim:Seconds', 'cim:ExcIEEEST6B.tg');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.tg'], 'cim:Seconds', 'cim:ExcIEEEST6B.tg');
        }
        if ('cim:ExcIEEEST6B.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.vamax'], 'cim:PU', 'cim:ExcIEEEST6B.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.vamax'], 'cim:PU', 'cim:ExcIEEEST6B.vamax');
        }
        if ('cim:ExcIEEEST6B.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.vamin'], 'cim:PU', 'cim:ExcIEEEST6B.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.vamin'], 'cim:PU', 'cim:ExcIEEEST6B.vamin');
        }
        if ('cim:ExcIEEEST6B.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.vrmax'], 'cim:PU', 'cim:ExcIEEEST6B.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.vrmax'], 'cim:PU', 'cim:ExcIEEEST6B.vrmax');
        }
        if ('cim:ExcIEEEST6B.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST6B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.vrmin'], 'cim:PU', 'cim:ExcIEEEST6B.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST6B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST6B.vrmin'], 'cim:PU', 'cim:ExcIEEEST6B.vrmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEST6B.ilr", "cim:ExcIEEEST6B.kci", "cim:ExcIEEEST6B.kff", "cim:ExcIEEEST6B.kg", "cim:ExcIEEEST6B.kia", "cim:ExcIEEEST6B.klr", "cim:ExcIEEEST6B.km", "cim:ExcIEEEST6B.kpa", "cim:ExcIEEEST6B.oelin", "cim:ExcIEEEST6B.tg", "cim:ExcIEEEST6B.vamax", "cim:ExcIEEEST6B.vamin", "cim:ExcIEEEST6B.vrmax", "cim:ExcIEEEST6B.vrmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEST6B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEST6B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEST6B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEST6B;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEST6B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ilr': [CGMESProfile.shortNames.DY],
    'kci': [CGMESProfile.shortNames.DY],
    'kff': [CGMESProfile.shortNames.DY],
    'kg': [CGMESProfile.shortNames.DY],
    'kia': [CGMESProfile.shortNames.DY],
    'klr': [CGMESProfile.shortNames.DY],
    'km': [CGMESProfile.shortNames.DY],
    'kpa': [CGMESProfile.shortNames.DY],
    'oelin': [CGMESProfile.shortNames.DY],
    'tg': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY]
  });

  var ExcIEEEST7B = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcIEEEST7B, _ExcitationSystemDyna);
    var _super = _createSuper(ExcIEEEST7B);
    function ExcIEEEST7B() {
      _classCallCheck(this, ExcIEEEST7B);
      return _super.apply(this, arguments);
    }
    _createClass(ExcIEEEST7B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcIEEEST7B";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcIEEEST7B.kh' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.kh'], 'cim:PU', 'cim:ExcIEEEST7B.kh');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.kh'], 'cim:PU', 'cim:ExcIEEEST7B.kh');
        }
        if ('cim:ExcIEEEST7B.kia' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.kia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.kia'], 'cim:PU', 'cim:ExcIEEEST7B.kia');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.kia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.kia'], 'cim:PU', 'cim:ExcIEEEST7B.kia');
        }
        if ('cim:ExcIEEEST7B.kl' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.kl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.kl'], 'cim:PU', 'cim:ExcIEEEST7B.kl');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.kl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.kl'], 'cim:PU', 'cim:ExcIEEEST7B.kl');
        }
        if ('cim:ExcIEEEST7B.kpa' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.kpa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.kpa'], 'cim:PU', 'cim:ExcIEEEST7B.kpa');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.kpa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.kpa'], 'cim:PU', 'cim:ExcIEEEST7B.kpa');
        }
        if ('cim:ExcIEEEST7B.oelin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.oelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.oelin'], 'cim:ExcST7BOELselectorKind', 'cim:ExcIEEEST7B.oelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.oelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.oelin'], 'cim:ExcST7BOELselectorKind', 'cim:ExcIEEEST7B.oelin');
        }
        if ('cim:ExcIEEEST7B.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.tb'], 'cim:Seconds', 'cim:ExcIEEEST7B.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.tb'], 'cim:Seconds', 'cim:ExcIEEEST7B.tb');
        }
        if ('cim:ExcIEEEST7B.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.tc'], 'cim:Seconds', 'cim:ExcIEEEST7B.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.tc'], 'cim:Seconds', 'cim:ExcIEEEST7B.tc');
        }
        if ('cim:ExcIEEEST7B.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.tf'], 'cim:Seconds', 'cim:ExcIEEEST7B.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.tf'], 'cim:Seconds', 'cim:ExcIEEEST7B.tf');
        }
        if ('cim:ExcIEEEST7B.tg' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.tg'], 'cim:Seconds', 'cim:ExcIEEEST7B.tg');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.tg'], 'cim:Seconds', 'cim:ExcIEEEST7B.tg');
        }
        if ('cim:ExcIEEEST7B.tia' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.tia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.tia'], 'cim:Seconds', 'cim:ExcIEEEST7B.tia');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.tia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.tia'], 'cim:Seconds', 'cim:ExcIEEEST7B.tia');
        }
        if ('cim:ExcIEEEST7B.uelin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.uelin'], 'cim:ExcST7BUELselectorKind', 'cim:ExcIEEEST7B.uelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.uelin'], 'cim:ExcST7BUELselectorKind', 'cim:ExcIEEEST7B.uelin');
        }
        if ('cim:ExcIEEEST7B.vmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.vmax'], 'cim:PU', 'cim:ExcIEEEST7B.vmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.vmax'], 'cim:PU', 'cim:ExcIEEEST7B.vmax');
        }
        if ('cim:ExcIEEEST7B.vmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.vmin'], 'cim:PU', 'cim:ExcIEEEST7B.vmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.vmin'], 'cim:PU', 'cim:ExcIEEEST7B.vmin');
        }
        if ('cim:ExcIEEEST7B.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.vrmax'], 'cim:PU', 'cim:ExcIEEEST7B.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.vrmax'], 'cim:PU', 'cim:ExcIEEEST7B.vrmax');
        }
        if ('cim:ExcIEEEST7B.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcIEEEST7B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.vrmin'], 'cim:PU', 'cim:ExcIEEEST7B.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcIEEEST7B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcIEEEST7B.vrmin'], 'cim:PU', 'cim:ExcIEEEST7B.vrmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcIEEEST7B.kh", "cim:ExcIEEEST7B.kia", "cim:ExcIEEEST7B.kl", "cim:ExcIEEEST7B.kpa", "cim:ExcIEEEST7B.oelin", "cim:ExcIEEEST7B.tb", "cim:ExcIEEEST7B.tc", "cim:ExcIEEEST7B.tf", "cim:ExcIEEEST7B.tg", "cim:ExcIEEEST7B.tia", "cim:ExcIEEEST7B.uelin", "cim:ExcIEEEST7B.vmax", "cim:ExcIEEEST7B.vmin", "cim:ExcIEEEST7B.vrmax", "cim:ExcIEEEST7B.vrmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcIEEEST7B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcIEEEST7B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcIEEEST7B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcIEEEST7B;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcIEEEST7B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kh': [CGMESProfile.shortNames.DY],
    'kia': [CGMESProfile.shortNames.DY],
    'kl': [CGMESProfile.shortNames.DY],
    'kpa': [CGMESProfile.shortNames.DY],
    'oelin': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'tg': [CGMESProfile.shortNames.DY],
    'tia': [CGMESProfile.shortNames.DY],
    'uelin': [CGMESProfile.shortNames.DY],
    'vmax': [CGMESProfile.shortNames.DY],
    'vmin': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY]
  });

  var ExcOEX3T = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcOEX3T, _ExcitationSystemDyna);
    var _super = _createSuper(ExcOEX3T);
    function ExcOEX3T() {
      _classCallCheck(this, ExcOEX3T);
      return _super.apply(this, arguments);
    }
    _createClass(ExcOEX3T, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcOEX3T";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcOEX3T.t1' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.t1'], 'cim:Seconds', 'cim:ExcOEX3T.t1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.t1'], 'cim:Seconds', 'cim:ExcOEX3T.t1');
        }
        if ('cim:ExcOEX3T.t2' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.t2'], 'cim:Seconds', 'cim:ExcOEX3T.t2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.t2'], 'cim:Seconds', 'cim:ExcOEX3T.t2');
        }
        if ('cim:ExcOEX3T.t3' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.t3'], 'cim:Seconds', 'cim:ExcOEX3T.t3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.t3'], 'cim:Seconds', 'cim:ExcOEX3T.t3');
        }
        if ('cim:ExcOEX3T.t4' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.t4'], 'cim:Seconds', 'cim:ExcOEX3T.t4');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.t4'], 'cim:Seconds', 'cim:ExcOEX3T.t4');
        }
        if ('cim:ExcOEX3T.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.ka'], 'cim:PU', 'cim:ExcOEX3T.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.ka'], 'cim:PU', 'cim:ExcOEX3T.ka');
        }
        if ('cim:ExcOEX3T.t5' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.t5'], 'cim:Seconds', 'cim:ExcOEX3T.t5');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.t5'], 'cim:Seconds', 'cim:ExcOEX3T.t5');
        }
        if ('cim:ExcOEX3T.t6' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.t6'], 'cim:Seconds', 'cim:ExcOEX3T.t6');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.t6'], 'cim:Seconds', 'cim:ExcOEX3T.t6');
        }
        if ('cim:ExcOEX3T.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.vrmax'], 'cim:PU', 'cim:ExcOEX3T.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.vrmax'], 'cim:PU', 'cim:ExcOEX3T.vrmax');
        }
        if ('cim:ExcOEX3T.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.vrmin'], 'cim:PU', 'cim:ExcOEX3T.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.vrmin'], 'cim:PU', 'cim:ExcOEX3T.vrmin');
        }
        if ('cim:ExcOEX3T.te' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.te'], 'cim:Seconds', 'cim:ExcOEX3T.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.te'], 'cim:Seconds', 'cim:ExcOEX3T.te');
        }
        if ('cim:ExcOEX3T.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.kf'], 'cim:PU', 'cim:ExcOEX3T.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.kf'], 'cim:PU', 'cim:ExcOEX3T.kf');
        }
        if ('cim:ExcOEX3T.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.tf'], 'cim:Seconds', 'cim:ExcOEX3T.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.tf'], 'cim:Seconds', 'cim:ExcOEX3T.tf');
        }
        if ('cim:ExcOEX3T.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.kc'], 'cim:PU', 'cim:ExcOEX3T.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.kc'], 'cim:PU', 'cim:ExcOEX3T.kc');
        }
        if ('cim:ExcOEX3T.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.kd'], 'cim:PU', 'cim:ExcOEX3T.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.kd'], 'cim:PU', 'cim:ExcOEX3T.kd');
        }
        if ('cim:ExcOEX3T.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.ke'], 'cim:PU', 'cim:ExcOEX3T.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.ke'], 'cim:PU', 'cim:ExcOEX3T.ke');
        }
        if ('cim:ExcOEX3T.e1' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.e1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.e1'], 'cim:PU', 'cim:ExcOEX3T.e1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.e1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.e1'], 'cim:PU', 'cim:ExcOEX3T.e1');
        }
        if ('cim:ExcOEX3T.see1' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.see1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.see1'], 'cim:PU', 'cim:ExcOEX3T.see1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.see1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.see1'], 'cim:PU', 'cim:ExcOEX3T.see1');
        }
        if ('cim:ExcOEX3T.e2' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.e2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.e2'], 'cim:PU', 'cim:ExcOEX3T.e2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.e2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.e2'], 'cim:PU', 'cim:ExcOEX3T.e2');
        }
        if ('cim:ExcOEX3T.see2' in object) {
          attributeEntries['filledEntries']['cim:ExcOEX3T.see2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.see2'], 'cim:PU', 'cim:ExcOEX3T.see2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcOEX3T.see2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcOEX3T.see2'], 'cim:PU', 'cim:ExcOEX3T.see2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcOEX3T.t1", "cim:ExcOEX3T.t2", "cim:ExcOEX3T.t3", "cim:ExcOEX3T.t4", "cim:ExcOEX3T.ka", "cim:ExcOEX3T.t5", "cim:ExcOEX3T.t6", "cim:ExcOEX3T.vrmax", "cim:ExcOEX3T.vrmin", "cim:ExcOEX3T.te", "cim:ExcOEX3T.kf", "cim:ExcOEX3T.tf", "cim:ExcOEX3T.kc", "cim:ExcOEX3T.kd", "cim:ExcOEX3T.ke", "cim:ExcOEX3T.e1", "cim:ExcOEX3T.see1", "cim:ExcOEX3T.e2", "cim:ExcOEX3T.see2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcOEX3T.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcOEX3T: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcOEX3T.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcOEX3T;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcOEX3T, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'e1': [CGMESProfile.shortNames.DY],
    'see1': [CGMESProfile.shortNames.DY],
    'e2': [CGMESProfile.shortNames.DY],
    'see2': [CGMESProfile.shortNames.DY]
  });

  var ExcPIC = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcPIC, _ExcitationSystemDyna);
    var _super = _createSuper(ExcPIC);
    function ExcPIC() {
      _classCallCheck(this, ExcPIC);
      return _super.apply(this, arguments);
    }
    _createClass(ExcPIC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcPIC";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcPIC.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ka'], 'cim:PU', 'cim:ExcPIC.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ka'], 'cim:PU', 'cim:ExcPIC.ka');
        }
        if ('cim:ExcPIC.ta1' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.ta1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ta1'], 'cim:Seconds', 'cim:ExcPIC.ta1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.ta1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ta1'], 'cim:Seconds', 'cim:ExcPIC.ta1');
        }
        if ('cim:ExcPIC.vr1' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.vr1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.vr1'], 'cim:PU', 'cim:ExcPIC.vr1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.vr1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.vr1'], 'cim:PU', 'cim:ExcPIC.vr1');
        }
        if ('cim:ExcPIC.vr2' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.vr2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.vr2'], 'cim:PU', 'cim:ExcPIC.vr2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.vr2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.vr2'], 'cim:PU', 'cim:ExcPIC.vr2');
        }
        if ('cim:ExcPIC.ta2' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.ta2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ta2'], 'cim:Seconds', 'cim:ExcPIC.ta2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.ta2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ta2'], 'cim:Seconds', 'cim:ExcPIC.ta2');
        }
        if ('cim:ExcPIC.ta3' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.ta3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ta3'], 'cim:Seconds', 'cim:ExcPIC.ta3');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.ta3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ta3'], 'cim:Seconds', 'cim:ExcPIC.ta3');
        }
        if ('cim:ExcPIC.ta4' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.ta4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ta4'], 'cim:Seconds', 'cim:ExcPIC.ta4');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.ta4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ta4'], 'cim:Seconds', 'cim:ExcPIC.ta4');
        }
        if ('cim:ExcPIC.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.vrmax'], 'cim:PU', 'cim:ExcPIC.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.vrmax'], 'cim:PU', 'cim:ExcPIC.vrmax');
        }
        if ('cim:ExcPIC.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.vrmin'], 'cim:PU', 'cim:ExcPIC.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.vrmin'], 'cim:PU', 'cim:ExcPIC.vrmin');
        }
        if ('cim:ExcPIC.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.kf'], 'cim:PU', 'cim:ExcPIC.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.kf'], 'cim:PU', 'cim:ExcPIC.kf');
        }
        if ('cim:ExcPIC.tf1' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.tf1'], 'cim:Seconds', 'cim:ExcPIC.tf1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.tf1'], 'cim:Seconds', 'cim:ExcPIC.tf1');
        }
        if ('cim:ExcPIC.tf2' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.tf2'], 'cim:Seconds', 'cim:ExcPIC.tf2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.tf2'], 'cim:Seconds', 'cim:ExcPIC.tf2');
        }
        if ('cim:ExcPIC.efdmax' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.efdmax'], 'cim:PU', 'cim:ExcPIC.efdmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.efdmax'], 'cim:PU', 'cim:ExcPIC.efdmax');
        }
        if ('cim:ExcPIC.efdmin' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.efdmin'], 'cim:PU', 'cim:ExcPIC.efdmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.efdmin'], 'cim:PU', 'cim:ExcPIC.efdmin');
        }
        if ('cim:ExcPIC.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ke'], 'cim:PU', 'cim:ExcPIC.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ke'], 'cim:PU', 'cim:ExcPIC.ke');
        }
        if ('cim:ExcPIC.te' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.te'], 'cim:Seconds', 'cim:ExcPIC.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.te'], 'cim:Seconds', 'cim:ExcPIC.te');
        }
        if ('cim:ExcPIC.e1' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.e1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.e1'], 'cim:PU', 'cim:ExcPIC.e1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.e1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.e1'], 'cim:PU', 'cim:ExcPIC.e1');
        }
        if ('cim:ExcPIC.se1' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.se1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.se1'], 'cim:PU', 'cim:ExcPIC.se1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.se1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.se1'], 'cim:PU', 'cim:ExcPIC.se1');
        }
        if ('cim:ExcPIC.e2' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.e2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.e2'], 'cim:PU', 'cim:ExcPIC.e2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.e2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.e2'], 'cim:PU', 'cim:ExcPIC.e2');
        }
        if ('cim:ExcPIC.se2' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.se2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.se2'], 'cim:PU', 'cim:ExcPIC.se2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.se2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.se2'], 'cim:PU', 'cim:ExcPIC.se2');
        }
        if ('cim:ExcPIC.kp' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.kp'], 'cim:PU', 'cim:ExcPIC.kp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.kp'], 'cim:PU', 'cim:ExcPIC.kp');
        }
        if ('cim:ExcPIC.ki' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ki'], 'cim:PU', 'cim:ExcPIC.ki');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.ki'], 'cim:PU', 'cim:ExcPIC.ki');
        }
        if ('cim:ExcPIC.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcPIC.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.kc'], 'cim:PU', 'cim:ExcPIC.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcPIC.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcPIC.kc'], 'cim:PU', 'cim:ExcPIC.kc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcPIC.ka", "cim:ExcPIC.ta1", "cim:ExcPIC.vr1", "cim:ExcPIC.vr2", "cim:ExcPIC.ta2", "cim:ExcPIC.ta3", "cim:ExcPIC.ta4", "cim:ExcPIC.vrmax", "cim:ExcPIC.vrmin", "cim:ExcPIC.kf", "cim:ExcPIC.tf1", "cim:ExcPIC.tf2", "cim:ExcPIC.efdmax", "cim:ExcPIC.efdmin", "cim:ExcPIC.ke", "cim:ExcPIC.te", "cim:ExcPIC.e1", "cim:ExcPIC.se1", "cim:ExcPIC.e2", "cim:ExcPIC.se2", "cim:ExcPIC.kp", "cim:ExcPIC.ki", "cim:ExcPIC.kc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcPIC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcPIC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcPIC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcPIC;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcPIC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta1': [CGMESProfile.shortNames.DY],
    'vr1': [CGMESProfile.shortNames.DY],
    'vr2': [CGMESProfile.shortNames.DY],
    'ta2': [CGMESProfile.shortNames.DY],
    'ta3': [CGMESProfile.shortNames.DY],
    'ta4': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf1': [CGMESProfile.shortNames.DY],
    'tf2': [CGMESProfile.shortNames.DY],
    'efdmax': [CGMESProfile.shortNames.DY],
    'efdmin': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'e1': [CGMESProfile.shortNames.DY],
    'se1': [CGMESProfile.shortNames.DY],
    'e2': [CGMESProfile.shortNames.DY],
    'se2': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY]
  });

  var ExcREXS = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcREXS, _ExcitationSystemDyna);
    var _super = _createSuper(ExcREXS);
    function ExcREXS() {
      _classCallCheck(this, ExcREXS);
      return _super.apply(this, arguments);
    }
    _createClass(ExcREXS, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcREXS";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcREXS.e1' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.e1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.e1'], 'cim:PU', 'cim:ExcREXS.e1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.e1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.e1'], 'cim:PU', 'cim:ExcREXS.e1');
        }
        if ('cim:ExcREXS.e2' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.e2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.e2'], 'cim:PU', 'cim:ExcREXS.e2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.e2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.e2'], 'cim:PU', 'cim:ExcREXS.e2');
        }
        if ('cim:ExcREXS.fbf' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.fbf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.fbf'], 'cim:ExcREXSFeedbackSignalKind', 'cim:ExcREXS.fbf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.fbf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.fbf'], 'cim:ExcREXSFeedbackSignalKind', 'cim:ExcREXS.fbf');
        }
        if ('cim:ExcREXS.flimf' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.flimf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.flimf'], 'cim:PU', 'cim:ExcREXS.flimf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.flimf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.flimf'], 'cim:PU', 'cim:ExcREXS.flimf');
        }
        if ('cim:ExcREXS.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kc'], 'cim:PU', 'cim:ExcREXS.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kc'], 'cim:PU', 'cim:ExcREXS.kc');
        }
        if ('cim:ExcREXS.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kd'], 'cim:PU', 'cim:ExcREXS.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kd'], 'cim:PU', 'cim:ExcREXS.kd');
        }
        if ('cim:ExcREXS.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.ke'], 'cim:PU', 'cim:ExcREXS.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.ke'], 'cim:PU', 'cim:ExcREXS.ke');
        }
        if ('cim:ExcREXS.kefd' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.kefd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kefd'], 'cim:PU', 'cim:ExcREXS.kefd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.kefd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kefd'], 'cim:PU', 'cim:ExcREXS.kefd');
        }
        if ('cim:ExcREXS.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kf'], 'cim:Seconds', 'cim:ExcREXS.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kf'], 'cim:Seconds', 'cim:ExcREXS.kf');
        }
        if ('cim:ExcREXS.kh' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kh'], 'cim:PU', 'cim:ExcREXS.kh');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kh'], 'cim:PU', 'cim:ExcREXS.kh');
        }
        if ('cim:ExcREXS.kii' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.kii'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kii'], 'cim:PU', 'cim:ExcREXS.kii');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.kii'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kii'], 'cim:PU', 'cim:ExcREXS.kii');
        }
        if ('cim:ExcREXS.kip' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.kip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kip'], 'cim:PU', 'cim:ExcREXS.kip');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.kip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kip'], 'cim:PU', 'cim:ExcREXS.kip');
        }
        if ('cim:ExcREXS.ks' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.ks'], 'cim:PU', 'cim:ExcREXS.ks');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.ks'], 'cim:PU', 'cim:ExcREXS.ks');
        }
        if ('cim:ExcREXS.kvi' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.kvi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kvi'], 'cim:PU', 'cim:ExcREXS.kvi');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.kvi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kvi'], 'cim:PU', 'cim:ExcREXS.kvi');
        }
        if ('cim:ExcREXS.kvp' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.kvp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kvp'], 'cim:PU', 'cim:ExcREXS.kvp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.kvp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kvp'], 'cim:PU', 'cim:ExcREXS.kvp');
        }
        if ('cim:ExcREXS.kvphz' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.kvphz'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kvphz'], 'cim:PU', 'cim:ExcREXS.kvphz');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.kvphz'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.kvphz'], 'cim:PU', 'cim:ExcREXS.kvphz');
        }
        if ('cim:ExcREXS.nvphz' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.nvphz'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.nvphz'], 'cim:PU', 'cim:ExcREXS.nvphz');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.nvphz'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.nvphz'], 'cim:PU', 'cim:ExcREXS.nvphz');
        }
        if ('cim:ExcREXS.se1' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.se1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.se1'], 'cim:PU', 'cim:ExcREXS.se1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.se1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.se1'], 'cim:PU', 'cim:ExcREXS.se1');
        }
        if ('cim:ExcREXS.se2' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.se2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.se2'], 'cim:PU', 'cim:ExcREXS.se2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.se2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.se2'], 'cim:PU', 'cim:ExcREXS.se2');
        }
        if ('cim:ExcREXS.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.ta'], 'cim:Seconds', 'cim:ExcREXS.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.ta'], 'cim:Seconds', 'cim:ExcREXS.ta');
        }
        if ('cim:ExcREXS.tb1' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.tb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tb1'], 'cim:Seconds', 'cim:ExcREXS.tb1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.tb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tb1'], 'cim:Seconds', 'cim:ExcREXS.tb1');
        }
        if ('cim:ExcREXS.tb2' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.tb2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tb2'], 'cim:Seconds', 'cim:ExcREXS.tb2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.tb2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tb2'], 'cim:Seconds', 'cim:ExcREXS.tb2');
        }
        if ('cim:ExcREXS.tc1' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.tc1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tc1'], 'cim:Seconds', 'cim:ExcREXS.tc1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.tc1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tc1'], 'cim:Seconds', 'cim:ExcREXS.tc1');
        }
        if ('cim:ExcREXS.tc2' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.tc2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tc2'], 'cim:Seconds', 'cim:ExcREXS.tc2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.tc2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tc2'], 'cim:Seconds', 'cim:ExcREXS.tc2');
        }
        if ('cim:ExcREXS.te' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.te'], 'cim:Seconds', 'cim:ExcREXS.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.te'], 'cim:Seconds', 'cim:ExcREXS.te');
        }
        if ('cim:ExcREXS.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tf'], 'cim:Seconds', 'cim:ExcREXS.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tf'], 'cim:Seconds', 'cim:ExcREXS.tf');
        }
        if ('cim:ExcREXS.tf1' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tf1'], 'cim:Seconds', 'cim:ExcREXS.tf1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tf1'], 'cim:Seconds', 'cim:ExcREXS.tf1');
        }
        if ('cim:ExcREXS.tf2' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tf2'], 'cim:Seconds', 'cim:ExcREXS.tf2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tf2'], 'cim:Seconds', 'cim:ExcREXS.tf2');
        }
        if ('cim:ExcREXS.tp' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tp'], 'cim:Seconds', 'cim:ExcREXS.tp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.tp'], 'cim:Seconds', 'cim:ExcREXS.tp');
        }
        if ('cim:ExcREXS.vcmax' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.vcmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.vcmax'], 'cim:PU', 'cim:ExcREXS.vcmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.vcmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.vcmax'], 'cim:PU', 'cim:ExcREXS.vcmax');
        }
        if ('cim:ExcREXS.vfmax' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.vfmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.vfmax'], 'cim:PU', 'cim:ExcREXS.vfmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.vfmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.vfmax'], 'cim:PU', 'cim:ExcREXS.vfmax');
        }
        if ('cim:ExcREXS.vfmin' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.vfmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.vfmin'], 'cim:PU', 'cim:ExcREXS.vfmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.vfmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.vfmin'], 'cim:PU', 'cim:ExcREXS.vfmin');
        }
        if ('cim:ExcREXS.vimax' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.vimax'], 'cim:PU', 'cim:ExcREXS.vimax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.vimax'], 'cim:PU', 'cim:ExcREXS.vimax');
        }
        if ('cim:ExcREXS.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.vrmax'], 'cim:PU', 'cim:ExcREXS.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.vrmax'], 'cim:PU', 'cim:ExcREXS.vrmax');
        }
        if ('cim:ExcREXS.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.vrmin'], 'cim:PU', 'cim:ExcREXS.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.vrmin'], 'cim:PU', 'cim:ExcREXS.vrmin');
        }
        if ('cim:ExcREXS.xc' in object) {
          attributeEntries['filledEntries']['cim:ExcREXS.xc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.xc'], 'cim:PU', 'cim:ExcREXS.xc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcREXS.xc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcREXS.xc'], 'cim:PU', 'cim:ExcREXS.xc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcREXS.e1", "cim:ExcREXS.e2", "cim:ExcREXS.fbf", "cim:ExcREXS.flimf", "cim:ExcREXS.kc", "cim:ExcREXS.kd", "cim:ExcREXS.ke", "cim:ExcREXS.kefd", "cim:ExcREXS.kf", "cim:ExcREXS.kh", "cim:ExcREXS.kii", "cim:ExcREXS.kip", "cim:ExcREXS.ks", "cim:ExcREXS.kvi", "cim:ExcREXS.kvp", "cim:ExcREXS.kvphz", "cim:ExcREXS.nvphz", "cim:ExcREXS.se1", "cim:ExcREXS.se2", "cim:ExcREXS.ta", "cim:ExcREXS.tb1", "cim:ExcREXS.tb2", "cim:ExcREXS.tc1", "cim:ExcREXS.tc2", "cim:ExcREXS.te", "cim:ExcREXS.tf", "cim:ExcREXS.tf1", "cim:ExcREXS.tf2", "cim:ExcREXS.tp", "cim:ExcREXS.vcmax", "cim:ExcREXS.vfmax", "cim:ExcREXS.vfmin", "cim:ExcREXS.vimax", "cim:ExcREXS.vrmax", "cim:ExcREXS.vrmin", "cim:ExcREXS.xc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcREXS.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcREXS: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcREXS.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcREXS;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcREXS, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'e1': [CGMESProfile.shortNames.DY],
    'e2': [CGMESProfile.shortNames.DY],
    'fbf': [CGMESProfile.shortNames.DY],
    'flimf': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'kefd': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'kh': [CGMESProfile.shortNames.DY],
    'kii': [CGMESProfile.shortNames.DY],
    'kip': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'kvi': [CGMESProfile.shortNames.DY],
    'kvp': [CGMESProfile.shortNames.DY],
    'kvphz': [CGMESProfile.shortNames.DY],
    'nvphz': [CGMESProfile.shortNames.DY],
    'se1': [CGMESProfile.shortNames.DY],
    'se2': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb1': [CGMESProfile.shortNames.DY],
    'tb2': [CGMESProfile.shortNames.DY],
    'tc1': [CGMESProfile.shortNames.DY],
    'tc2': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'tf1': [CGMESProfile.shortNames.DY],
    'tf2': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    'vcmax': [CGMESProfile.shortNames.DY],
    'vfmax': [CGMESProfile.shortNames.DY],
    'vfmin': [CGMESProfile.shortNames.DY],
    'vimax': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'xc': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$B = [{
    "value": "--"
  }, {
    "value": "ExcREXSFeedbackSignalKind.fieldVoltage",
    "label": "fieldVoltage"
  }, {
    "value": "ExcREXSFeedbackSignalKind.fieldCurrent",
    "label": "fieldCurrent"
  }, {
    "value": "ExcREXSFeedbackSignalKind.outputVoltage",
    "label": "outputVoltage"
  }];
  var ExcREXSFeedbackSignalKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(ExcREXSFeedbackSignalKind, _BaseClass);
    var _super = _createSuper(ExcREXSFeedbackSignalKind);
    function ExcREXSFeedbackSignalKind() {
      _classCallCheck(this, ExcREXSFeedbackSignalKind);
      return _super.apply(this, arguments);
    }
    _createClass(ExcREXSFeedbackSignalKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcREXSFeedbackSignalKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcREXSFeedbackSignalKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcREXSFeedbackSignalKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcREXSFeedbackSignalKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$B;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcREXSFeedbackSignalKind;
  }(BaseClass);
  _defineProperty(ExcREXSFeedbackSignalKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var ExcSCRX = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcSCRX, _ExcitationSystemDyna);
    var _super = _createSuper(ExcSCRX);
    function ExcSCRX() {
      _classCallCheck(this, ExcSCRX);
      return _super.apply(this, arguments);
    }
    _createClass(ExcSCRX, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcSCRX";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcSCRX.tatb' in object) {
          attributeEntries['filledEntries']['cim:ExcSCRX.tatb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.tatb'], 'cim:Simple_Float', 'cim:ExcSCRX.tatb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSCRX.tatb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.tatb'], 'cim:Simple_Float', 'cim:ExcSCRX.tatb');
        }
        if ('cim:ExcSCRX.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcSCRX.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.tb'], 'cim:Seconds', 'cim:ExcSCRX.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSCRX.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.tb'], 'cim:Seconds', 'cim:ExcSCRX.tb');
        }
        if ('cim:ExcSCRX.k' in object) {
          attributeEntries['filledEntries']['cim:ExcSCRX.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.k'], 'cim:PU', 'cim:ExcSCRX.k');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSCRX.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.k'], 'cim:PU', 'cim:ExcSCRX.k');
        }
        if ('cim:ExcSCRX.te' in object) {
          attributeEntries['filledEntries']['cim:ExcSCRX.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.te'], 'cim:Seconds', 'cim:ExcSCRX.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSCRX.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.te'], 'cim:Seconds', 'cim:ExcSCRX.te');
        }
        if ('cim:ExcSCRX.emin' in object) {
          attributeEntries['filledEntries']['cim:ExcSCRX.emin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.emin'], 'cim:PU', 'cim:ExcSCRX.emin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSCRX.emin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.emin'], 'cim:PU', 'cim:ExcSCRX.emin');
        }
        if ('cim:ExcSCRX.emax' in object) {
          attributeEntries['filledEntries']['cim:ExcSCRX.emax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.emax'], 'cim:PU', 'cim:ExcSCRX.emax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSCRX.emax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.emax'], 'cim:PU', 'cim:ExcSCRX.emax');
        }
        if ('cim:ExcSCRX.cswitch' in object) {
          attributeEntries['filledEntries']['cim:ExcSCRX.cswitch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.cswitch'], 'cim:Boolean', 'cim:ExcSCRX.cswitch');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSCRX.cswitch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.cswitch'], 'cim:Boolean', 'cim:ExcSCRX.cswitch');
        }
        if ('cim:ExcSCRX.rcrfd' in object) {
          attributeEntries['filledEntries']['cim:ExcSCRX.rcrfd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.rcrfd'], 'cim:Simple_Float', 'cim:ExcSCRX.rcrfd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSCRX.rcrfd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSCRX.rcrfd'], 'cim:Simple_Float', 'cim:ExcSCRX.rcrfd');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcSCRX.tatb", "cim:ExcSCRX.tb", "cim:ExcSCRX.k", "cim:ExcSCRX.te", "cim:ExcSCRX.emin", "cim:ExcSCRX.emax", "cim:ExcSCRX.cswitch", "cim:ExcSCRX.rcrfd"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcSCRX.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcSCRX: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcSCRX.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcSCRX;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcSCRX, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tatb': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'emin': [CGMESProfile.shortNames.DY],
    'emax': [CGMESProfile.shortNames.DY],
    'cswitch': [CGMESProfile.shortNames.DY],
    'rcrfd': [CGMESProfile.shortNames.DY]
  });

  var ExcSEXS = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcSEXS, _ExcitationSystemDyna);
    var _super = _createSuper(ExcSEXS);
    function ExcSEXS() {
      _classCallCheck(this, ExcSEXS);
      return _super.apply(this, arguments);
    }
    _createClass(ExcSEXS, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcSEXS";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcSEXS.tatb' in object) {
          attributeEntries['filledEntries']['cim:ExcSEXS.tatb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.tatb'], 'cim:Simple_Float', 'cim:ExcSEXS.tatb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSEXS.tatb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.tatb'], 'cim:Simple_Float', 'cim:ExcSEXS.tatb');
        }
        if ('cim:ExcSEXS.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcSEXS.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.tb'], 'cim:Seconds', 'cim:ExcSEXS.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSEXS.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.tb'], 'cim:Seconds', 'cim:ExcSEXS.tb');
        }
        if ('cim:ExcSEXS.k' in object) {
          attributeEntries['filledEntries']['cim:ExcSEXS.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.k'], 'cim:PU', 'cim:ExcSEXS.k');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSEXS.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.k'], 'cim:PU', 'cim:ExcSEXS.k');
        }
        if ('cim:ExcSEXS.te' in object) {
          attributeEntries['filledEntries']['cim:ExcSEXS.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.te'], 'cim:Seconds', 'cim:ExcSEXS.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSEXS.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.te'], 'cim:Seconds', 'cim:ExcSEXS.te');
        }
        if ('cim:ExcSEXS.emin' in object) {
          attributeEntries['filledEntries']['cim:ExcSEXS.emin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.emin'], 'cim:PU', 'cim:ExcSEXS.emin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSEXS.emin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.emin'], 'cim:PU', 'cim:ExcSEXS.emin');
        }
        if ('cim:ExcSEXS.emax' in object) {
          attributeEntries['filledEntries']['cim:ExcSEXS.emax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.emax'], 'cim:PU', 'cim:ExcSEXS.emax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSEXS.emax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.emax'], 'cim:PU', 'cim:ExcSEXS.emax');
        }
        if ('cim:ExcSEXS.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcSEXS.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.kc'], 'cim:PU', 'cim:ExcSEXS.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSEXS.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.kc'], 'cim:PU', 'cim:ExcSEXS.kc');
        }
        if ('cim:ExcSEXS.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcSEXS.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.tc'], 'cim:Seconds', 'cim:ExcSEXS.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSEXS.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.tc'], 'cim:Seconds', 'cim:ExcSEXS.tc');
        }
        if ('cim:ExcSEXS.efdmin' in object) {
          attributeEntries['filledEntries']['cim:ExcSEXS.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.efdmin'], 'cim:PU', 'cim:ExcSEXS.efdmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSEXS.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.efdmin'], 'cim:PU', 'cim:ExcSEXS.efdmin');
        }
        if ('cim:ExcSEXS.efdmax' in object) {
          attributeEntries['filledEntries']['cim:ExcSEXS.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.efdmax'], 'cim:PU', 'cim:ExcSEXS.efdmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSEXS.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSEXS.efdmax'], 'cim:PU', 'cim:ExcSEXS.efdmax');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcSEXS.tatb", "cim:ExcSEXS.tb", "cim:ExcSEXS.k", "cim:ExcSEXS.te", "cim:ExcSEXS.emin", "cim:ExcSEXS.emax", "cim:ExcSEXS.kc", "cim:ExcSEXS.tc", "cim:ExcSEXS.efdmin", "cim:ExcSEXS.efdmax"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcSEXS.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcSEXS: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcSEXS.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcSEXS;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcSEXS, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tatb': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'emin': [CGMESProfile.shortNames.DY],
    'emax': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'efdmin': [CGMESProfile.shortNames.DY],
    'efdmax': [CGMESProfile.shortNames.DY]
  });

  var ExcSK = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcSK, _ExcitationSystemDyna);
    var _super = _createSuper(ExcSK);
    function ExcSK() {
      _classCallCheck(this, ExcSK);
      return _super.apply(this, arguments);
    }
    _createClass(ExcSK, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcSK";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcSK.efdmax' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.efdmax'], 'cim:PU', 'cim:ExcSK.efdmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.efdmax'], 'cim:PU', 'cim:ExcSK.efdmax');
        }
        if ('cim:ExcSK.efdmin' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.efdmin'], 'cim:PU', 'cim:ExcSK.efdmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.efdmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.efdmin'], 'cim:PU', 'cim:ExcSK.efdmin');
        }
        if ('cim:ExcSK.emax' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.emax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.emax'], 'cim:PU', 'cim:ExcSK.emax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.emax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.emax'], 'cim:PU', 'cim:ExcSK.emax');
        }
        if ('cim:ExcSK.emin' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.emin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.emin'], 'cim:PU', 'cim:ExcSK.emin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.emin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.emin'], 'cim:PU', 'cim:ExcSK.emin');
        }
        if ('cim:ExcSK.k' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.k'], 'cim:PU', 'cim:ExcSK.k');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.k'], 'cim:PU', 'cim:ExcSK.k');
        }
        if ('cim:ExcSK.k1' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.k1'], 'cim:PU', 'cim:ExcSK.k1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.k1'], 'cim:PU', 'cim:ExcSK.k1');
        }
        if ('cim:ExcSK.k2' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.k2'], 'cim:PU', 'cim:ExcSK.k2');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.k2'], 'cim:PU', 'cim:ExcSK.k2');
        }
        if ('cim:ExcSK.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kc'], 'cim:PU', 'cim:ExcSK.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kc'], 'cim:PU', 'cim:ExcSK.kc');
        }
        if ('cim:ExcSK.kce' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.kce'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kce'], 'cim:PU', 'cim:ExcSK.kce');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.kce'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kce'], 'cim:PU', 'cim:ExcSK.kce');
        }
        if ('cim:ExcSK.kd' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kd'], 'cim:PU', 'cim:ExcSK.kd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kd'], 'cim:PU', 'cim:ExcSK.kd');
        }
        if ('cim:ExcSK.kgob' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.kgob'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kgob'], 'cim:PU', 'cim:ExcSK.kgob');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.kgob'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kgob'], 'cim:PU', 'cim:ExcSK.kgob');
        }
        if ('cim:ExcSK.kp' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kp'], 'cim:PU', 'cim:ExcSK.kp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kp'], 'cim:PU', 'cim:ExcSK.kp');
        }
        if ('cim:ExcSK.kqi' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.kqi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kqi'], 'cim:PU', 'cim:ExcSK.kqi');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.kqi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kqi'], 'cim:PU', 'cim:ExcSK.kqi');
        }
        if ('cim:ExcSK.kqob' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.kqob'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kqob'], 'cim:PU', 'cim:ExcSK.kqob');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.kqob'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kqob'], 'cim:PU', 'cim:ExcSK.kqob');
        }
        if ('cim:ExcSK.kqp' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.kqp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kqp'], 'cim:PU', 'cim:ExcSK.kqp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.kqp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.kqp'], 'cim:PU', 'cim:ExcSK.kqp');
        }
        if ('cim:ExcSK.nq' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.nq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.nq'], 'cim:PU', 'cim:ExcSK.nq');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.nq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.nq'], 'cim:PU', 'cim:ExcSK.nq');
        }
        if ('cim:ExcSK.qconoff' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.qconoff'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.qconoff'], 'cim:Boolean', 'cim:ExcSK.qconoff');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.qconoff'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.qconoff'], 'cim:Boolean', 'cim:ExcSK.qconoff');
        }
        if ('cim:ExcSK.qz' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.qz'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.qz'], 'cim:PU', 'cim:ExcSK.qz');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.qz'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.qz'], 'cim:PU', 'cim:ExcSK.qz');
        }
        if ('cim:ExcSK.remote' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.remote'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.remote'], 'cim:Boolean', 'cim:ExcSK.remote');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.remote'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.remote'], 'cim:Boolean', 'cim:ExcSK.remote');
        }
        if ('cim:ExcSK.sbase' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.sbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.sbase'], 'cim:ApparentPower', 'cim:ExcSK.sbase');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.sbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.sbase'], 'cim:ApparentPower', 'cim:ExcSK.sbase');
        }
        if ('cim:ExcSK.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.tc'], 'cim:Seconds', 'cim:ExcSK.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.tc'], 'cim:Seconds', 'cim:ExcSK.tc');
        }
        if ('cim:ExcSK.te' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.te'], 'cim:Seconds', 'cim:ExcSK.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.te'], 'cim:Seconds', 'cim:ExcSK.te');
        }
        if ('cim:ExcSK.ti' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.ti'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.ti'], 'cim:Seconds', 'cim:ExcSK.ti');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.ti'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.ti'], 'cim:Seconds', 'cim:ExcSK.ti');
        }
        if ('cim:ExcSK.tp' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.tp'], 'cim:Seconds', 'cim:ExcSK.tp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.tp'], 'cim:Seconds', 'cim:ExcSK.tp');
        }
        if ('cim:ExcSK.tr' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.tr'], 'cim:Seconds', 'cim:ExcSK.tr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.tr'], 'cim:Seconds', 'cim:ExcSK.tr');
        }
        if ('cim:ExcSK.uimax' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.uimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.uimax'], 'cim:PU', 'cim:ExcSK.uimax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.uimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.uimax'], 'cim:PU', 'cim:ExcSK.uimax');
        }
        if ('cim:ExcSK.uimin' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.uimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.uimin'], 'cim:PU', 'cim:ExcSK.uimin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.uimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.uimin'], 'cim:PU', 'cim:ExcSK.uimin');
        }
        if ('cim:ExcSK.urmax' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.urmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.urmax'], 'cim:PU', 'cim:ExcSK.urmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.urmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.urmax'], 'cim:PU', 'cim:ExcSK.urmax');
        }
        if ('cim:ExcSK.urmin' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.urmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.urmin'], 'cim:PU', 'cim:ExcSK.urmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.urmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.urmin'], 'cim:PU', 'cim:ExcSK.urmin');
        }
        if ('cim:ExcSK.vtmax' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.vtmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.vtmax'], 'cim:PU', 'cim:ExcSK.vtmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.vtmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.vtmax'], 'cim:PU', 'cim:ExcSK.vtmax');
        }
        if ('cim:ExcSK.vtmin' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.vtmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.vtmin'], 'cim:PU', 'cim:ExcSK.vtmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.vtmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.vtmin'], 'cim:PU', 'cim:ExcSK.vtmin');
        }
        if ('cim:ExcSK.yp' in object) {
          attributeEntries['filledEntries']['cim:ExcSK.yp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.yp'], 'cim:PU', 'cim:ExcSK.yp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcSK.yp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcSK.yp'], 'cim:PU', 'cim:ExcSK.yp');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcSK.efdmax", "cim:ExcSK.efdmin", "cim:ExcSK.emax", "cim:ExcSK.emin", "cim:ExcSK.k", "cim:ExcSK.k1", "cim:ExcSK.k2", "cim:ExcSK.kc", "cim:ExcSK.kce", "cim:ExcSK.kd", "cim:ExcSK.kgob", "cim:ExcSK.kp", "cim:ExcSK.kqi", "cim:ExcSK.kqob", "cim:ExcSK.kqp", "cim:ExcSK.nq", "cim:ExcSK.qconoff", "cim:ExcSK.qz", "cim:ExcSK.remote", "cim:ExcSK.sbase", "cim:ExcSK.tc", "cim:ExcSK.te", "cim:ExcSK.ti", "cim:ExcSK.tp", "cim:ExcSK.tr", "cim:ExcSK.uimax", "cim:ExcSK.uimin", "cim:ExcSK.urmax", "cim:ExcSK.urmin", "cim:ExcSK.vtmax", "cim:ExcSK.vtmin", "cim:ExcSK.yp"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcSK.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcSK: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcSK.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcSK;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcSK, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'efdmax': [CGMESProfile.shortNames.DY],
    'efdmin': [CGMESProfile.shortNames.DY],
    'emax': [CGMESProfile.shortNames.DY],
    'emin': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kce': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'kgob': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'kqi': [CGMESProfile.shortNames.DY],
    'kqob': [CGMESProfile.shortNames.DY],
    'kqp': [CGMESProfile.shortNames.DY],
    'nq': [CGMESProfile.shortNames.DY],
    'qconoff': [CGMESProfile.shortNames.DY],
    'qz': [CGMESProfile.shortNames.DY],
    'remote': [CGMESProfile.shortNames.DY],
    'sbase': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'ti': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    'tr': [CGMESProfile.shortNames.DY],
    'uimax': [CGMESProfile.shortNames.DY],
    'uimin': [CGMESProfile.shortNames.DY],
    'urmax': [CGMESProfile.shortNames.DY],
    'urmin': [CGMESProfile.shortNames.DY],
    'vtmax': [CGMESProfile.shortNames.DY],
    'vtmin': [CGMESProfile.shortNames.DY],
    'yp': [CGMESProfile.shortNames.DY]
  });

  var ExcST1A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcST1A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcST1A);
    function ExcST1A() {
      _classCallCheck(this, ExcST1A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcST1A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcST1A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcST1A.vimax' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.vimax'], 'cim:PU', 'cim:ExcST1A.vimax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.vimax'], 'cim:PU', 'cim:ExcST1A.vimax');
        }
        if ('cim:ExcST1A.vimin' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.vimin'], 'cim:PU', 'cim:ExcST1A.vimin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.vimin'], 'cim:PU', 'cim:ExcST1A.vimin');
        }
        if ('cim:ExcST1A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.tc'], 'cim:Seconds', 'cim:ExcST1A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.tc'], 'cim:Seconds', 'cim:ExcST1A.tc');
        }
        if ('cim:ExcST1A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.tb'], 'cim:Seconds', 'cim:ExcST1A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.tb'], 'cim:Seconds', 'cim:ExcST1A.tb');
        }
        if ('cim:ExcST1A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.ka'], 'cim:PU', 'cim:ExcST1A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.ka'], 'cim:PU', 'cim:ExcST1A.ka');
        }
        if ('cim:ExcST1A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.ta'], 'cim:Seconds', 'cim:ExcST1A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.ta'], 'cim:Seconds', 'cim:ExcST1A.ta');
        }
        if ('cim:ExcST1A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.vrmax'], 'cim:PU', 'cim:ExcST1A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.vrmax'], 'cim:PU', 'cim:ExcST1A.vrmax');
        }
        if ('cim:ExcST1A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.vrmin'], 'cim:PU', 'cim:ExcST1A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.vrmin'], 'cim:PU', 'cim:ExcST1A.vrmin');
        }
        if ('cim:ExcST1A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.kc'], 'cim:PU', 'cim:ExcST1A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.kc'], 'cim:PU', 'cim:ExcST1A.kc');
        }
        if ('cim:ExcST1A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.kf'], 'cim:PU', 'cim:ExcST1A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.kf'], 'cim:PU', 'cim:ExcST1A.kf');
        }
        if ('cim:ExcST1A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.tf'], 'cim:Seconds', 'cim:ExcST1A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.tf'], 'cim:Seconds', 'cim:ExcST1A.tf');
        }
        if ('cim:ExcST1A.tc1' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.tc1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.tc1'], 'cim:Seconds', 'cim:ExcST1A.tc1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.tc1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.tc1'], 'cim:Seconds', 'cim:ExcST1A.tc1');
        }
        if ('cim:ExcST1A.tb1' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.tb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.tb1'], 'cim:Seconds', 'cim:ExcST1A.tb1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.tb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.tb1'], 'cim:Seconds', 'cim:ExcST1A.tb1');
        }
        if ('cim:ExcST1A.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.vamax'], 'cim:PU', 'cim:ExcST1A.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.vamax'], 'cim:PU', 'cim:ExcST1A.vamax');
        }
        if ('cim:ExcST1A.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.vamin'], 'cim:PU', 'cim:ExcST1A.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.vamin'], 'cim:PU', 'cim:ExcST1A.vamin');
        }
        if ('cim:ExcST1A.ilr' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.ilr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.ilr'], 'cim:PU', 'cim:ExcST1A.ilr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.ilr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.ilr'], 'cim:PU', 'cim:ExcST1A.ilr');
        }
        if ('cim:ExcST1A.klr' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.klr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.klr'], 'cim:PU', 'cim:ExcST1A.klr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.klr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.klr'], 'cim:PU', 'cim:ExcST1A.klr');
        }
        if ('cim:ExcST1A.xe' in object) {
          attributeEntries['filledEntries']['cim:ExcST1A.xe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.xe'], 'cim:PU', 'cim:ExcST1A.xe');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST1A.xe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST1A.xe'], 'cim:PU', 'cim:ExcST1A.xe');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcST1A.vimax", "cim:ExcST1A.vimin", "cim:ExcST1A.tc", "cim:ExcST1A.tb", "cim:ExcST1A.ka", "cim:ExcST1A.ta", "cim:ExcST1A.vrmax", "cim:ExcST1A.vrmin", "cim:ExcST1A.kc", "cim:ExcST1A.kf", "cim:ExcST1A.tf", "cim:ExcST1A.tc1", "cim:ExcST1A.tb1", "cim:ExcST1A.vamax", "cim:ExcST1A.vamin", "cim:ExcST1A.ilr", "cim:ExcST1A.klr", "cim:ExcST1A.xe"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcST1A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcST1A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcST1A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcST1A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcST1A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'vimax': [CGMESProfile.shortNames.DY],
    'vimin': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'tc1': [CGMESProfile.shortNames.DY],
    'tb1': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'ilr': [CGMESProfile.shortNames.DY],
    'klr': [CGMESProfile.shortNames.DY],
    'xe': [CGMESProfile.shortNames.DY]
  });

  var ExcST2A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcST2A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcST2A);
    function ExcST2A() {
      _classCallCheck(this, ExcST2A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcST2A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcST2A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcST2A.ka' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.ka'], 'cim:PU', 'cim:ExcST2A.ka');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.ka'], 'cim:PU', 'cim:ExcST2A.ka');
        }
        if ('cim:ExcST2A.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.ta'], 'cim:Seconds', 'cim:ExcST2A.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.ta'], 'cim:Seconds', 'cim:ExcST2A.ta');
        }
        if ('cim:ExcST2A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.vrmax'], 'cim:PU', 'cim:ExcST2A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.vrmax'], 'cim:PU', 'cim:ExcST2A.vrmax');
        }
        if ('cim:ExcST2A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.vrmin'], 'cim:PU', 'cim:ExcST2A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.vrmin'], 'cim:PU', 'cim:ExcST2A.vrmin');
        }
        if ('cim:ExcST2A.ke' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.ke'], 'cim:PU', 'cim:ExcST2A.ke');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.ke'], 'cim:PU', 'cim:ExcST2A.ke');
        }
        if ('cim:ExcST2A.te' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.te'], 'cim:Seconds', 'cim:ExcST2A.te');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.te'], 'cim:Seconds', 'cim:ExcST2A.te');
        }
        if ('cim:ExcST2A.kf' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.kf'], 'cim:PU', 'cim:ExcST2A.kf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.kf'], 'cim:PU', 'cim:ExcST2A.kf');
        }
        if ('cim:ExcST2A.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.tf'], 'cim:Seconds', 'cim:ExcST2A.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.tf'], 'cim:Seconds', 'cim:ExcST2A.tf');
        }
        if ('cim:ExcST2A.kp' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.kp'], 'cim:PU', 'cim:ExcST2A.kp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.kp'], 'cim:PU', 'cim:ExcST2A.kp');
        }
        if ('cim:ExcST2A.ki' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.ki'], 'cim:PU', 'cim:ExcST2A.ki');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.ki'], 'cim:PU', 'cim:ExcST2A.ki');
        }
        if ('cim:ExcST2A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.kc'], 'cim:PU', 'cim:ExcST2A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.kc'], 'cim:PU', 'cim:ExcST2A.kc');
        }
        if ('cim:ExcST2A.efdmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.efdmax'], 'cim:PU', 'cim:ExcST2A.efdmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.efdmax'], 'cim:PU', 'cim:ExcST2A.efdmax');
        }
        if ('cim:ExcST2A.uelin' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.uelin'], 'cim:Boolean', 'cim:ExcST2A.uelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.uelin'], 'cim:Boolean', 'cim:ExcST2A.uelin');
        }
        if ('cim:ExcST2A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.tb'], 'cim:Seconds', 'cim:ExcST2A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.tb'], 'cim:Seconds', 'cim:ExcST2A.tb');
        }
        if ('cim:ExcST2A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcST2A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.tc'], 'cim:Seconds', 'cim:ExcST2A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST2A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST2A.tc'], 'cim:Seconds', 'cim:ExcST2A.tc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcST2A.ka", "cim:ExcST2A.ta", "cim:ExcST2A.vrmax", "cim:ExcST2A.vrmin", "cim:ExcST2A.ke", "cim:ExcST2A.te", "cim:ExcST2A.kf", "cim:ExcST2A.tf", "cim:ExcST2A.kp", "cim:ExcST2A.ki", "cim:ExcST2A.kc", "cim:ExcST2A.efdmax", "cim:ExcST2A.uelin", "cim:ExcST2A.tb", "cim:ExcST2A.tc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcST2A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcST2A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcST2A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcST2A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcST2A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'efdmax': [CGMESProfile.shortNames.DY],
    'uelin': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY]
  });

  var ExcST3A = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcST3A, _ExcitationSystemDyna);
    var _super = _createSuper(ExcST3A);
    function ExcST3A() {
      _classCallCheck(this, ExcST3A);
      return _super.apply(this, arguments);
    }
    _createClass(ExcST3A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcST3A";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcST3A.vimax' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.vimax'], 'cim:PU', 'cim:ExcST3A.vimax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.vimax'], 'cim:PU', 'cim:ExcST3A.vimax');
        }
        if ('cim:ExcST3A.vimin' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.vimin'], 'cim:PU', 'cim:ExcST3A.vimin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.vimin'], 'cim:PU', 'cim:ExcST3A.vimin');
        }
        if ('cim:ExcST3A.kj' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.kj'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.kj'], 'cim:PU', 'cim:ExcST3A.kj');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.kj'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.kj'], 'cim:PU', 'cim:ExcST3A.kj');
        }
        if ('cim:ExcST3A.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.tb'], 'cim:Seconds', 'cim:ExcST3A.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.tb'], 'cim:Seconds', 'cim:ExcST3A.tb');
        }
        if ('cim:ExcST3A.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.tc'], 'cim:Seconds', 'cim:ExcST3A.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.tc'], 'cim:Seconds', 'cim:ExcST3A.tc');
        }
        if ('cim:ExcST3A.efdmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.efdmax'], 'cim:PU', 'cim:ExcST3A.efdmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.efdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.efdmax'], 'cim:PU', 'cim:ExcST3A.efdmax');
        }
        if ('cim:ExcST3A.km' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.km'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.km'], 'cim:PU', 'cim:ExcST3A.km');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.km'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.km'], 'cim:PU', 'cim:ExcST3A.km');
        }
        if ('cim:ExcST3A.tm' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.tm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.tm'], 'cim:Seconds', 'cim:ExcST3A.tm');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.tm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.tm'], 'cim:Seconds', 'cim:ExcST3A.tm');
        }
        if ('cim:ExcST3A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.vrmax'], 'cim:PU', 'cim:ExcST3A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.vrmax'], 'cim:PU', 'cim:ExcST3A.vrmax');
        }
        if ('cim:ExcST3A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.vrmin'], 'cim:PU', 'cim:ExcST3A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.vrmin'], 'cim:PU', 'cim:ExcST3A.vrmin');
        }
        if ('cim:ExcST3A.kg' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.kg'], 'cim:PU', 'cim:ExcST3A.kg');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.kg'], 'cim:PU', 'cim:ExcST3A.kg');
        }
        if ('cim:ExcST3A.kp' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.kp'], 'cim:PU', 'cim:ExcST3A.kp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.kp'], 'cim:PU', 'cim:ExcST3A.kp');
        }
        if ('cim:ExcST3A.thetap' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.thetap'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.thetap'], 'cim:AngleDegrees', 'cim:ExcST3A.thetap');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.thetap'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.thetap'], 'cim:AngleDegrees', 'cim:ExcST3A.thetap');
        }
        if ('cim:ExcST3A.ki' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.ki'], 'cim:PU', 'cim:ExcST3A.ki');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.ki'], 'cim:PU', 'cim:ExcST3A.ki');
        }
        if ('cim:ExcST3A.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.kc'], 'cim:PU', 'cim:ExcST3A.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.kc'], 'cim:PU', 'cim:ExcST3A.kc');
        }
        if ('cim:ExcST3A.xl' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.xl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.xl'], 'cim:PU', 'cim:ExcST3A.xl');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.xl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.xl'], 'cim:PU', 'cim:ExcST3A.xl');
        }
        if ('cim:ExcST3A.vbmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.vbmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.vbmax'], 'cim:PU', 'cim:ExcST3A.vbmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.vbmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.vbmax'], 'cim:PU', 'cim:ExcST3A.vbmax');
        }
        if ('cim:ExcST3A.vgmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.vgmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.vgmax'], 'cim:PU', 'cim:ExcST3A.vgmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.vgmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.vgmax'], 'cim:PU', 'cim:ExcST3A.vgmax');
        }
        if ('cim:ExcST3A.ks' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.ks'], 'cim:PU', 'cim:ExcST3A.ks');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.ks'], 'cim:PU', 'cim:ExcST3A.ks');
        }
        if ('cim:ExcST3A.ks1' in object) {
          attributeEntries['filledEntries']['cim:ExcST3A.ks1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.ks1'], 'cim:PU', 'cim:ExcST3A.ks1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST3A.ks1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST3A.ks1'], 'cim:PU', 'cim:ExcST3A.ks1');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcST3A.vimax", "cim:ExcST3A.vimin", "cim:ExcST3A.kj", "cim:ExcST3A.tb", "cim:ExcST3A.tc", "cim:ExcST3A.efdmax", "cim:ExcST3A.km", "cim:ExcST3A.tm", "cim:ExcST3A.vrmax", "cim:ExcST3A.vrmin", "cim:ExcST3A.kg", "cim:ExcST3A.kp", "cim:ExcST3A.thetap", "cim:ExcST3A.ki", "cim:ExcST3A.kc", "cim:ExcST3A.xl", "cim:ExcST3A.vbmax", "cim:ExcST3A.vgmax", "cim:ExcST3A.ks", "cim:ExcST3A.ks1"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcST3A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcST3A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcST3A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcST3A;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcST3A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'vimax': [CGMESProfile.shortNames.DY],
    'vimin': [CGMESProfile.shortNames.DY],
    'kj': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'efdmax': [CGMESProfile.shortNames.DY],
    'km': [CGMESProfile.shortNames.DY],
    'tm': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'kg': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'thetap': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'xl': [CGMESProfile.shortNames.DY],
    'vbmax': [CGMESProfile.shortNames.DY],
    'vgmax': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'ks1': [CGMESProfile.shortNames.DY]
  });

  var ExcST4B = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcST4B, _ExcitationSystemDyna);
    var _super = _createSuper(ExcST4B);
    function ExcST4B() {
      _classCallCheck(this, ExcST4B);
      return _super.apply(this, arguments);
    }
    _createClass(ExcST4B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcST4B";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcST4B.kpr' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.kpr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kpr'], 'cim:PU', 'cim:ExcST4B.kpr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.kpr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kpr'], 'cim:PU', 'cim:ExcST4B.kpr');
        }
        if ('cim:ExcST4B.kir' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.kir'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kir'], 'cim:PU', 'cim:ExcST4B.kir');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.kir'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kir'], 'cim:PU', 'cim:ExcST4B.kir');
        }
        if ('cim:ExcST4B.ta' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.ta'], 'cim:Seconds', 'cim:ExcST4B.ta');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.ta'], 'cim:Seconds', 'cim:ExcST4B.ta');
        }
        if ('cim:ExcST4B.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.vrmax'], 'cim:PU', 'cim:ExcST4B.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.vrmax'], 'cim:PU', 'cim:ExcST4B.vrmax');
        }
        if ('cim:ExcST4B.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.vrmin'], 'cim:PU', 'cim:ExcST4B.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.vrmin'], 'cim:PU', 'cim:ExcST4B.vrmin');
        }
        if ('cim:ExcST4B.kpm' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.kpm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kpm'], 'cim:PU', 'cim:ExcST4B.kpm');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.kpm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kpm'], 'cim:PU', 'cim:ExcST4B.kpm');
        }
        if ('cim:ExcST4B.kim' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.kim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kim'], 'cim:PU', 'cim:ExcST4B.kim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.kim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kim'], 'cim:PU', 'cim:ExcST4B.kim');
        }
        if ('cim:ExcST4B.vmmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.vmmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.vmmax'], 'cim:PU', 'cim:ExcST4B.vmmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.vmmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.vmmax'], 'cim:PU', 'cim:ExcST4B.vmmax');
        }
        if ('cim:ExcST4B.vmmin' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.vmmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.vmmin'], 'cim:PU', 'cim:ExcST4B.vmmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.vmmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.vmmin'], 'cim:PU', 'cim:ExcST4B.vmmin');
        }
        if ('cim:ExcST4B.kg' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kg'], 'cim:PU', 'cim:ExcST4B.kg');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kg'], 'cim:PU', 'cim:ExcST4B.kg');
        }
        if ('cim:ExcST4B.kp' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kp'], 'cim:PU', 'cim:ExcST4B.kp');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kp'], 'cim:PU', 'cim:ExcST4B.kp');
        }
        if ('cim:ExcST4B.thetap' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.thetap'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.thetap'], 'cim:AngleDegrees', 'cim:ExcST4B.thetap');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.thetap'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.thetap'], 'cim:AngleDegrees', 'cim:ExcST4B.thetap');
        }
        if ('cim:ExcST4B.ki' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.ki'], 'cim:PU', 'cim:ExcST4B.ki');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.ki'], 'cim:PU', 'cim:ExcST4B.ki');
        }
        if ('cim:ExcST4B.kc' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kc'], 'cim:PU', 'cim:ExcST4B.kc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.kc'], 'cim:PU', 'cim:ExcST4B.kc');
        }
        if ('cim:ExcST4B.xl' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.xl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.xl'], 'cim:PU', 'cim:ExcST4B.xl');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.xl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.xl'], 'cim:PU', 'cim:ExcST4B.xl');
        }
        if ('cim:ExcST4B.vbmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.vbmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.vbmax'], 'cim:PU', 'cim:ExcST4B.vbmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.vbmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.vbmax'], 'cim:PU', 'cim:ExcST4B.vbmax');
        }
        if ('cim:ExcST4B.vgmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.vgmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.vgmax'], 'cim:PU', 'cim:ExcST4B.vgmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.vgmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.vgmax'], 'cim:PU', 'cim:ExcST4B.vgmax');
        }
        if ('cim:ExcST4B.uel' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.uel'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.uel'], 'cim:Boolean', 'cim:ExcST4B.uel');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.uel'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.uel'], 'cim:Boolean', 'cim:ExcST4B.uel');
        }
        if ('cim:ExcST4B.lvgate' in object) {
          attributeEntries['filledEntries']['cim:ExcST4B.lvgate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.lvgate'], 'cim:Boolean', 'cim:ExcST4B.lvgate');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST4B.lvgate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST4B.lvgate'], 'cim:Boolean', 'cim:ExcST4B.lvgate');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcST4B.kpr", "cim:ExcST4B.kir", "cim:ExcST4B.ta", "cim:ExcST4B.vrmax", "cim:ExcST4B.vrmin", "cim:ExcST4B.kpm", "cim:ExcST4B.kim", "cim:ExcST4B.vmmax", "cim:ExcST4B.vmmin", "cim:ExcST4B.kg", "cim:ExcST4B.kp", "cim:ExcST4B.thetap", "cim:ExcST4B.ki", "cim:ExcST4B.kc", "cim:ExcST4B.xl", "cim:ExcST4B.vbmax", "cim:ExcST4B.vgmax", "cim:ExcST4B.uel", "cim:ExcST4B.lvgate"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcST4B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcST4B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcST4B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcST4B;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcST4B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kpr': [CGMESProfile.shortNames.DY],
    'kir': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'kpm': [CGMESProfile.shortNames.DY],
    'kim': [CGMESProfile.shortNames.DY],
    'vmmax': [CGMESProfile.shortNames.DY],
    'vmmin': [CGMESProfile.shortNames.DY],
    'kg': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'thetap': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'xl': [CGMESProfile.shortNames.DY],
    'vbmax': [CGMESProfile.shortNames.DY],
    'vgmax': [CGMESProfile.shortNames.DY],
    'uel': [CGMESProfile.shortNames.DY],
    'lvgate': [CGMESProfile.shortNames.DY]
  });

  var ExcST6B = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcST6B, _ExcitationSystemDyna);
    var _super = _createSuper(ExcST6B);
    function ExcST6B() {
      _classCallCheck(this, ExcST6B);
      return _super.apply(this, arguments);
    }
    _createClass(ExcST6B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcST6B";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcST6B.ilr' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.ilr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.ilr'], 'cim:PU', 'cim:ExcST6B.ilr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.ilr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.ilr'], 'cim:PU', 'cim:ExcST6B.ilr');
        }
        if ('cim:ExcST6B.k1' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.k1'], 'cim:Boolean', 'cim:ExcST6B.k1');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.k1'], 'cim:Boolean', 'cim:ExcST6B.k1');
        }
        if ('cim:ExcST6B.kcl' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.kcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.kcl'], 'cim:PU', 'cim:ExcST6B.kcl');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.kcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.kcl'], 'cim:PU', 'cim:ExcST6B.kcl');
        }
        if ('cim:ExcST6B.kff' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.kff'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.kff'], 'cim:PU', 'cim:ExcST6B.kff');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.kff'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.kff'], 'cim:PU', 'cim:ExcST6B.kff');
        }
        if ('cim:ExcST6B.kg' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.kg'], 'cim:PU', 'cim:ExcST6B.kg');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.kg'], 'cim:PU', 'cim:ExcST6B.kg');
        }
        if ('cim:ExcST6B.kia' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.kia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.kia'], 'cim:PU', 'cim:ExcST6B.kia');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.kia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.kia'], 'cim:PU', 'cim:ExcST6B.kia');
        }
        if ('cim:ExcST6B.klr' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.klr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.klr'], 'cim:PU', 'cim:ExcST6B.klr');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.klr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.klr'], 'cim:PU', 'cim:ExcST6B.klr');
        }
        if ('cim:ExcST6B.km' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.km'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.km'], 'cim:PU', 'cim:ExcST6B.km');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.km'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.km'], 'cim:PU', 'cim:ExcST6B.km');
        }
        if ('cim:ExcST6B.kpa' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.kpa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.kpa'], 'cim:PU', 'cim:ExcST6B.kpa');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.kpa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.kpa'], 'cim:PU', 'cim:ExcST6B.kpa');
        }
        if ('cim:ExcST6B.kvd' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.kvd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.kvd'], 'cim:PU', 'cim:ExcST6B.kvd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.kvd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.kvd'], 'cim:PU', 'cim:ExcST6B.kvd');
        }
        if ('cim:ExcST6B.oelin' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.oelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.oelin'], 'cim:ExcST6BOELselectorKind', 'cim:ExcST6B.oelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.oelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.oelin'], 'cim:ExcST6BOELselectorKind', 'cim:ExcST6B.oelin');
        }
        if ('cim:ExcST6B.tg' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.tg'], 'cim:Seconds', 'cim:ExcST6B.tg');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.tg'], 'cim:Seconds', 'cim:ExcST6B.tg');
        }
        if ('cim:ExcST6B.ts' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.ts'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.ts'], 'cim:Seconds', 'cim:ExcST6B.ts');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.ts'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.ts'], 'cim:Seconds', 'cim:ExcST6B.ts');
        }
        if ('cim:ExcST6B.tvd' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.tvd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.tvd'], 'cim:Seconds', 'cim:ExcST6B.tvd');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.tvd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.tvd'], 'cim:Seconds', 'cim:ExcST6B.tvd');
        }
        if ('cim:ExcST6B.vamax' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vamax'], 'cim:PU', 'cim:ExcST6B.vamax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.vamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vamax'], 'cim:PU', 'cim:ExcST6B.vamax');
        }
        if ('cim:ExcST6B.vamin' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vamin'], 'cim:PU', 'cim:ExcST6B.vamin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.vamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vamin'], 'cim:PU', 'cim:ExcST6B.vamin');
        }
        if ('cim:ExcST6B.vilim' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.vilim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vilim'], 'cim:Boolean', 'cim:ExcST6B.vilim');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.vilim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vilim'], 'cim:Boolean', 'cim:ExcST6B.vilim');
        }
        if ('cim:ExcST6B.vimax' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vimax'], 'cim:PU', 'cim:ExcST6B.vimax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vimax'], 'cim:PU', 'cim:ExcST6B.vimax');
        }
        if ('cim:ExcST6B.vimin' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vimin'], 'cim:PU', 'cim:ExcST6B.vimin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vimin'], 'cim:PU', 'cim:ExcST6B.vimin');
        }
        if ('cim:ExcST6B.vmult' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.vmult'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vmult'], 'cim:Boolean', 'cim:ExcST6B.vmult');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.vmult'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vmult'], 'cim:Boolean', 'cim:ExcST6B.vmult');
        }
        if ('cim:ExcST6B.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vrmax'], 'cim:PU', 'cim:ExcST6B.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vrmax'], 'cim:PU', 'cim:ExcST6B.vrmax');
        }
        if ('cim:ExcST6B.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vrmin'], 'cim:PU', 'cim:ExcST6B.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.vrmin'], 'cim:PU', 'cim:ExcST6B.vrmin');
        }
        if ('cim:ExcST6B.xc' in object) {
          attributeEntries['filledEntries']['cim:ExcST6B.xc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.xc'], 'cim:PU', 'cim:ExcST6B.xc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST6B.xc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST6B.xc'], 'cim:PU', 'cim:ExcST6B.xc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcST6B.ilr", "cim:ExcST6B.k1", "cim:ExcST6B.kcl", "cim:ExcST6B.kff", "cim:ExcST6B.kg", "cim:ExcST6B.kia", "cim:ExcST6B.klr", "cim:ExcST6B.km", "cim:ExcST6B.kpa", "cim:ExcST6B.kvd", "cim:ExcST6B.oelin", "cim:ExcST6B.tg", "cim:ExcST6B.ts", "cim:ExcST6B.tvd", "cim:ExcST6B.vamax", "cim:ExcST6B.vamin", "cim:ExcST6B.vilim", "cim:ExcST6B.vimax", "cim:ExcST6B.vimin", "cim:ExcST6B.vmult", "cim:ExcST6B.vrmax", "cim:ExcST6B.vrmin", "cim:ExcST6B.xc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcST6B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcST6B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcST6B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcST6B;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcST6B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ilr': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'kcl': [CGMESProfile.shortNames.DY],
    'kff': [CGMESProfile.shortNames.DY],
    'kg': [CGMESProfile.shortNames.DY],
    'kia': [CGMESProfile.shortNames.DY],
    'klr': [CGMESProfile.shortNames.DY],
    'km': [CGMESProfile.shortNames.DY],
    'kpa': [CGMESProfile.shortNames.DY],
    'kvd': [CGMESProfile.shortNames.DY],
    'oelin': [CGMESProfile.shortNames.DY],
    'tg': [CGMESProfile.shortNames.DY],
    'ts': [CGMESProfile.shortNames.DY],
    'tvd': [CGMESProfile.shortNames.DY],
    'vamax': [CGMESProfile.shortNames.DY],
    'vamin': [CGMESProfile.shortNames.DY],
    'vilim': [CGMESProfile.shortNames.DY],
    'vimax': [CGMESProfile.shortNames.DY],
    'vimin': [CGMESProfile.shortNames.DY],
    'vmult': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'xc': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$A = [{
    "value": "--"
  }, {
    "value": "ExcST6BOELselectorKind.noOELinput",
    "label": "noOELinput"
  }, {
    "value": "ExcST6BOELselectorKind.beforeUEL",
    "label": "beforeUEL"
  }, {
    "value": "ExcST6BOELselectorKind.afterUEL",
    "label": "afterUEL"
  }];
  var ExcST6BOELselectorKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(ExcST6BOELselectorKind, _BaseClass);
    var _super = _createSuper(ExcST6BOELselectorKind);
    function ExcST6BOELselectorKind() {
      _classCallCheck(this, ExcST6BOELselectorKind);
      return _super.apply(this, arguments);
    }
    _createClass(ExcST6BOELselectorKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcST6BOELselectorKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcST6BOELselectorKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcST6BOELselectorKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcST6BOELselectorKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$A;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcST6BOELselectorKind;
  }(BaseClass);
  _defineProperty(ExcST6BOELselectorKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var ExcST7B = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcST7B, _ExcitationSystemDyna);
    var _super = _createSuper(ExcST7B);
    function ExcST7B() {
      _classCallCheck(this, ExcST7B);
      return _super.apply(this, arguments);
    }
    _createClass(ExcST7B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcST7B";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcST7B.kh' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.kh'], 'cim:PU', 'cim:ExcST7B.kh');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.kh'], 'cim:PU', 'cim:ExcST7B.kh');
        }
        if ('cim:ExcST7B.kia' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.kia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.kia'], 'cim:PU', 'cim:ExcST7B.kia');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.kia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.kia'], 'cim:PU', 'cim:ExcST7B.kia');
        }
        if ('cim:ExcST7B.kl' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.kl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.kl'], 'cim:PU', 'cim:ExcST7B.kl');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.kl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.kl'], 'cim:PU', 'cim:ExcST7B.kl');
        }
        if ('cim:ExcST7B.kpa' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.kpa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.kpa'], 'cim:PU', 'cim:ExcST7B.kpa');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.kpa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.kpa'], 'cim:PU', 'cim:ExcST7B.kpa');
        }
        if ('cim:ExcST7B.oelin' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.oelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.oelin'], 'cim:ExcST7BOELselectorKind', 'cim:ExcST7B.oelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.oelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.oelin'], 'cim:ExcST7BOELselectorKind', 'cim:ExcST7B.oelin');
        }
        if ('cim:ExcST7B.tb' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.tb'], 'cim:Seconds', 'cim:ExcST7B.tb');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.tb'], 'cim:Seconds', 'cim:ExcST7B.tb');
        }
        if ('cim:ExcST7B.tc' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.tc'], 'cim:Seconds', 'cim:ExcST7B.tc');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.tc'], 'cim:Seconds', 'cim:ExcST7B.tc');
        }
        if ('cim:ExcST7B.tf' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.tf'], 'cim:Seconds', 'cim:ExcST7B.tf');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.tf'], 'cim:Seconds', 'cim:ExcST7B.tf');
        }
        if ('cim:ExcST7B.tg' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.tg'], 'cim:Seconds', 'cim:ExcST7B.tg');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.tg'], 'cim:Seconds', 'cim:ExcST7B.tg');
        }
        if ('cim:ExcST7B.tia' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.tia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.tia'], 'cim:Seconds', 'cim:ExcST7B.tia');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.tia'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.tia'], 'cim:Seconds', 'cim:ExcST7B.tia');
        }
        if ('cim:ExcST7B.ts' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.ts'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.ts'], 'cim:Seconds', 'cim:ExcST7B.ts');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.ts'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.ts'], 'cim:Seconds', 'cim:ExcST7B.ts');
        }
        if ('cim:ExcST7B.uelin' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.uelin'], 'cim:ExcST7BUELselectorKind', 'cim:ExcST7B.uelin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.uelin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.uelin'], 'cim:ExcST7BUELselectorKind', 'cim:ExcST7B.uelin');
        }
        if ('cim:ExcST7B.vmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.vmax'], 'cim:PU', 'cim:ExcST7B.vmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.vmax'], 'cim:PU', 'cim:ExcST7B.vmax');
        }
        if ('cim:ExcST7B.vmin' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.vmin'], 'cim:PU', 'cim:ExcST7B.vmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.vmin'], 'cim:PU', 'cim:ExcST7B.vmin');
        }
        if ('cim:ExcST7B.vrmax' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.vrmax'], 'cim:PU', 'cim:ExcST7B.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.vrmax'], 'cim:PU', 'cim:ExcST7B.vrmax');
        }
        if ('cim:ExcST7B.vrmin' in object) {
          attributeEntries['filledEntries']['cim:ExcST7B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.vrmin'], 'cim:PU', 'cim:ExcST7B.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:ExcST7B.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcST7B.vrmin'], 'cim:PU', 'cim:ExcST7B.vrmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcST7B.kh", "cim:ExcST7B.kia", "cim:ExcST7B.kl", "cim:ExcST7B.kpa", "cim:ExcST7B.oelin", "cim:ExcST7B.tb", "cim:ExcST7B.tc", "cim:ExcST7B.tf", "cim:ExcST7B.tg", "cim:ExcST7B.tia", "cim:ExcST7B.ts", "cim:ExcST7B.uelin", "cim:ExcST7B.vmax", "cim:ExcST7B.vmin", "cim:ExcST7B.vrmax", "cim:ExcST7B.vrmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcST7B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcST7B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcST7B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcST7B;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcST7B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kh': [CGMESProfile.shortNames.DY],
    'kia': [CGMESProfile.shortNames.DY],
    'kl': [CGMESProfile.shortNames.DY],
    'kpa': [CGMESProfile.shortNames.DY],
    'oelin': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'tg': [CGMESProfile.shortNames.DY],
    'tia': [CGMESProfile.shortNames.DY],
    'ts': [CGMESProfile.shortNames.DY],
    'uelin': [CGMESProfile.shortNames.DY],
    'vmax': [CGMESProfile.shortNames.DY],
    'vmin': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$z = [{
    "value": "--"
  }, {
    "value": "ExcST7BOELselectorKind.noOELinput",
    "label": "noOELinput"
  }, {
    "value": "ExcST7BOELselectorKind.addVref",
    "label": "addVref"
  }, {
    "value": "ExcST7BOELselectorKind.inputLVgate",
    "label": "inputLVgate"
  }, {
    "value": "ExcST7BOELselectorKind.outputLVgate",
    "label": "outputLVgate"
  }];
  var ExcST7BOELselectorKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(ExcST7BOELselectorKind, _BaseClass);
    var _super = _createSuper(ExcST7BOELselectorKind);
    function ExcST7BOELselectorKind() {
      _classCallCheck(this, ExcST7BOELselectorKind);
      return _super.apply(this, arguments);
    }
    _createClass(ExcST7BOELselectorKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcST7BOELselectorKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcST7BOELselectorKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcST7BOELselectorKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcST7BOELselectorKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$z;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcST7BOELselectorKind;
  }(BaseClass);
  _defineProperty(ExcST7BOELselectorKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$y = [{
    "value": "--"
  }, {
    "value": "ExcST7BUELselectorKind.noUELinput",
    "label": "noUELinput"
  }, {
    "value": "ExcST7BUELselectorKind.addVref",
    "label": "addVref"
  }, {
    "value": "ExcST7BUELselectorKind.inputHVgate",
    "label": "inputHVgate"
  }, {
    "value": "ExcST7BUELselectorKind.outputHVgate",
    "label": "outputHVgate"
  }];
  var ExcST7BUELselectorKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(ExcST7BUELselectorKind, _BaseClass);
    var _super = _createSuper(ExcST7BUELselectorKind);
    function ExcST7BUELselectorKind() {
      _classCallCheck(this, ExcST7BUELselectorKind);
      return _super.apply(this, arguments);
    }
    _createClass(ExcST7BUELselectorKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcST7BUELselectorKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcST7BUELselectorKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcST7BUELselectorKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcST7BUELselectorKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$y;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcST7BUELselectorKind;
  }(BaseClass);
  _defineProperty(ExcST7BUELselectorKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var ExcitationSystemUserDefined = /*#__PURE__*/function (_ExcitationSystemDyna) {
    _inherits(ExcitationSystemUserDefined, _ExcitationSystemDyna);
    var _super = _createSuper(ExcitationSystemUserDefined);
    function ExcitationSystemUserDefined() {
      _classCallCheck(this, ExcitationSystemUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(ExcitationSystemUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExcitationSystemUserDefined";
        var attributeEntries = ExcitationSystemDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:ExcitationSystemUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:ExcitationSystemUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcitationSystemUserDefined.proprietary'], 'cim:Boolean', 'cim:ExcitationSystemUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:ExcitationSystemUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExcitationSystemUserDefined.proprietary'], 'cim:Boolean', 'cim:ExcitationSystemUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExcitationSystemUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ExcitationSystemDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExcitationSystemUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExcitationSystemUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExcitationSystemUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExcitationSystemUserDefined;
  }(ExcitationSystemDynamics);
  _defineProperty(ExcitationSystemUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var ExternalNetworkInjection = /*#__PURE__*/function (_RegulatingCondEq) {
    _inherits(ExternalNetworkInjection, _RegulatingCondEq);
    var _super = _createSuper(ExternalNetworkInjection);
    function ExternalNetworkInjection() {
      _classCallCheck(this, ExternalNetworkInjection);
      return _super.apply(this, arguments);
    }
    _createClass(ExternalNetworkInjection, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ExternalNetworkInjection";
        var attributeEntries = RegulatingCondEq.attributeHTML(object, cimmenu, classType);
        if ('cim:ExternalNetworkInjection.governorSCD' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.governorSCD'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.governorSCD'], 'cim:ActivePowerPerFrequency', 'cim:ExternalNetworkInjection.governorSCD');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.governorSCD'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.governorSCD'], 'cim:ActivePowerPerFrequency', 'cim:ExternalNetworkInjection.governorSCD');
        }
        if ('cim:ExternalNetworkInjection.maxP' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.maxP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.maxP'], 'cim:ActivePower', 'cim:ExternalNetworkInjection.maxP');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.maxP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.maxP'], 'cim:ActivePower', 'cim:ExternalNetworkInjection.maxP');
        }
        if ('cim:ExternalNetworkInjection.maxQ' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.maxQ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.maxQ'], 'cim:ReactivePower', 'cim:ExternalNetworkInjection.maxQ');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.maxQ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.maxQ'], 'cim:ReactivePower', 'cim:ExternalNetworkInjection.maxQ');
        }
        if ('cim:ExternalNetworkInjection.minP' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.minP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.minP'], 'cim:ActivePower', 'cim:ExternalNetworkInjection.minP');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.minP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.minP'], 'cim:ActivePower', 'cim:ExternalNetworkInjection.minP');
        }
        if ('cim:ExternalNetworkInjection.minQ' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.minQ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.minQ'], 'cim:ReactivePower', 'cim:ExternalNetworkInjection.minQ');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.minQ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.minQ'], 'cim:ReactivePower', 'cim:ExternalNetworkInjection.minQ');
        }
        if ('cim:ExternalNetworkInjection.ikSecond' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.ikSecond'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.ikSecond'], 'cim:Boolean', 'cim:ExternalNetworkInjection.ikSecond');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.ikSecond'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.ikSecond'], 'cim:Boolean', 'cim:ExternalNetworkInjection.ikSecond');
        }
        if ('cim:ExternalNetworkInjection.maxInitialSymShCCurrent' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.maxInitialSymShCCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.maxInitialSymShCCurrent'], 'cim:CurrentFlow', 'cim:ExternalNetworkInjection.maxInitialSymShCCurrent');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.maxInitialSymShCCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.maxInitialSymShCCurrent'], 'cim:CurrentFlow', 'cim:ExternalNetworkInjection.maxInitialSymShCCurrent');
        }
        if ('cim:ExternalNetworkInjection.maxR0ToX0Ratio' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.maxR0ToX0Ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.maxR0ToX0Ratio'], 'cim:Simple_Float', 'cim:ExternalNetworkInjection.maxR0ToX0Ratio');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.maxR0ToX0Ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.maxR0ToX0Ratio'], 'cim:Simple_Float', 'cim:ExternalNetworkInjection.maxR0ToX0Ratio');
        }
        if ('cim:ExternalNetworkInjection.maxR1ToX1Ratio' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.maxR1ToX1Ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.maxR1ToX1Ratio'], 'cim:Simple_Float', 'cim:ExternalNetworkInjection.maxR1ToX1Ratio');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.maxR1ToX1Ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.maxR1ToX1Ratio'], 'cim:Simple_Float', 'cim:ExternalNetworkInjection.maxR1ToX1Ratio');
        }
        if ('cim:ExternalNetworkInjection.maxZ0ToZ1Ratio' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.maxZ0ToZ1Ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.maxZ0ToZ1Ratio'], 'cim:Simple_Float', 'cim:ExternalNetworkInjection.maxZ0ToZ1Ratio');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.maxZ0ToZ1Ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.maxZ0ToZ1Ratio'], 'cim:Simple_Float', 'cim:ExternalNetworkInjection.maxZ0ToZ1Ratio');
        }
        if ('cim:ExternalNetworkInjection.minInitialSymShCCurrent' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.minInitialSymShCCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.minInitialSymShCCurrent'], 'cim:CurrentFlow', 'cim:ExternalNetworkInjection.minInitialSymShCCurrent');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.minInitialSymShCCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.minInitialSymShCCurrent'], 'cim:CurrentFlow', 'cim:ExternalNetworkInjection.minInitialSymShCCurrent');
        }
        if ('cim:ExternalNetworkInjection.minR0ToX0Ratio' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.minR0ToX0Ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.minR0ToX0Ratio'], 'cim:Simple_Float', 'cim:ExternalNetworkInjection.minR0ToX0Ratio');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.minR0ToX0Ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.minR0ToX0Ratio'], 'cim:Simple_Float', 'cim:ExternalNetworkInjection.minR0ToX0Ratio');
        }
        if ('cim:ExternalNetworkInjection.minR1ToX1Ratio' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.minR1ToX1Ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.minR1ToX1Ratio'], 'cim:Simple_Float', 'cim:ExternalNetworkInjection.minR1ToX1Ratio');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.minR1ToX1Ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.minR1ToX1Ratio'], 'cim:Simple_Float', 'cim:ExternalNetworkInjection.minR1ToX1Ratio');
        }
        if ('cim:ExternalNetworkInjection.minZ0ToZ1Ratio' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.minZ0ToZ1Ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.minZ0ToZ1Ratio'], 'cim:Simple_Float', 'cim:ExternalNetworkInjection.minZ0ToZ1Ratio');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.minZ0ToZ1Ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.minZ0ToZ1Ratio'], 'cim:Simple_Float', 'cim:ExternalNetworkInjection.minZ0ToZ1Ratio');
        }
        if ('cim:ExternalNetworkInjection.voltageFactor' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.voltageFactor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.voltageFactor'], 'cim:PU', 'cim:ExternalNetworkInjection.voltageFactor');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.voltageFactor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.voltageFactor'], 'cim:PU', 'cim:ExternalNetworkInjection.voltageFactor');
        }
        if ('cim:ExternalNetworkInjection.referencePriority' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.referencePriority'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.referencePriority'], 'cim:Integer', 'cim:ExternalNetworkInjection.referencePriority');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.referencePriority'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.referencePriority'], 'cim:Integer', 'cim:ExternalNetworkInjection.referencePriority');
        }
        if ('cim:ExternalNetworkInjection.p' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.p'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.p'], 'cim:ActivePower', 'cim:ExternalNetworkInjection.p');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.p'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.p'], 'cim:ActivePower', 'cim:ExternalNetworkInjection.p');
        }
        if ('cim:ExternalNetworkInjection.q' in object) {
          attributeEntries['filledEntries']['cim:ExternalNetworkInjection.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.q'], 'cim:ReactivePower', 'cim:ExternalNetworkInjection.q');
        } else {
          attributeEntries['emptyEntries']['cim:ExternalNetworkInjection.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ExternalNetworkInjection.q'], 'cim:ReactivePower', 'cim:ExternalNetworkInjection.q');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ExternalNetworkInjection.governorSCD", "cim:ExternalNetworkInjection.maxP", "cim:ExternalNetworkInjection.maxQ", "cim:ExternalNetworkInjection.minP", "cim:ExternalNetworkInjection.minQ", "cim:ExternalNetworkInjection.ikSecond", "cim:ExternalNetworkInjection.maxInitialSymShCCurrent", "cim:ExternalNetworkInjection.maxR0ToX0Ratio", "cim:ExternalNetworkInjection.maxR1ToX1Ratio", "cim:ExternalNetworkInjection.maxZ0ToZ1Ratio", "cim:ExternalNetworkInjection.minInitialSymShCCurrent", "cim:ExternalNetworkInjection.minR0ToX0Ratio", "cim:ExternalNetworkInjection.minR1ToX1Ratio", "cim:ExternalNetworkInjection.minZ0ToZ1Ratio", "cim:ExternalNetworkInjection.voltageFactor", "cim:ExternalNetworkInjection.referencePriority", "cim:ExternalNetworkInjection.p", "cim:ExternalNetworkInjection.q"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (RegulatingCondEq.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ExternalNetworkInjection.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ExternalNetworkInjection: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ExternalNetworkInjection.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ExternalNetworkInjection;
  }(RegulatingCondEq);
  _defineProperty(ExternalNetworkInjection, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'governorSCD': [CGMESProfile.shortNames.EQ],
    'maxP': [CGMESProfile.shortNames.EQ],
    'maxQ': [CGMESProfile.shortNames.EQ],
    'minP': [CGMESProfile.shortNames.EQ],
    'minQ': [CGMESProfile.shortNames.EQ],
    'ikSecond': [CGMESProfile.shortNames.EQ],
    'maxInitialSymShCCurrent': [CGMESProfile.shortNames.EQ],
    'maxR0ToX0Ratio': [CGMESProfile.shortNames.EQ],
    'maxR1ToX1Ratio': [CGMESProfile.shortNames.EQ],
    'maxZ0ToZ1Ratio': [CGMESProfile.shortNames.EQ],
    'minInitialSymShCCurrent': [CGMESProfile.shortNames.EQ],
    'minR0ToX0Ratio': [CGMESProfile.shortNames.EQ],
    'minR1ToX1Ratio': [CGMESProfile.shortNames.EQ],
    'minZ0ToZ1Ratio': [CGMESProfile.shortNames.EQ],
    'voltageFactor': [CGMESProfile.shortNames.EQ],
    'referencePriority': [CGMESProfile.shortNames.SSH],
    'p': [CGMESProfile.shortNames.SSH],
    'q': [CGMESProfile.shortNames.SSH]
  });

  var Float = /*#__PURE__*/function (_BaseClass) {
    _inherits(Float, _BaseClass);
    var _super = _createSuper(Float);
    function Float() {
      _classCallCheck(this, Float);
      return _super.apply(this, arguments);
    }
    _createClass(Float, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Float";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Float.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Float: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Float.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Float;
  }(BaseClass);
  _defineProperty(Float, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.EQ_BD]
  });

  var FossilFuel = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(FossilFuel, _IdentifiedObject);
    var _super = _createSuper(FossilFuel);
    function FossilFuel() {
      _classCallCheck(this, FossilFuel);
      return _super.apply(this, arguments);
    }
    _createClass(FossilFuel, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "FossilFuel";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:FossilFuel.fossilFuelType' in object) {
          attributeEntries['filledEntries']['cim:FossilFuel.fossilFuelType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['FossilFuel.fossilFuelType'], 'cim:FuelType', 'cim:FossilFuel.fossilFuelType');
        } else {
          attributeEntries['emptyEntries']['cim:FossilFuel.fossilFuelType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['FossilFuel.fossilFuelType'], 'cim:FuelType', 'cim:FossilFuel.fossilFuelType');
        }
        if ('cim:FossilFuel.ThermalGeneratingUnit' in object) {
          attributeEntries['filledEntries']['cim:FossilFuel.ThermalGeneratingUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['FossilFuel.ThermalGeneratingUnit'], 'cim:ThermalGeneratingUnit', 'cim:FossilFuel.ThermalGeneratingUnit');
        } else {
          attributeEntries['emptyEntries']['cim:FossilFuel.ThermalGeneratingUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['FossilFuel.ThermalGeneratingUnit'], 'cim:ThermalGeneratingUnit', 'cim:FossilFuel.ThermalGeneratingUnit');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:FossilFuel.fossilFuelType", "cim:FossilFuel.ThermalGeneratingUnit"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!FossilFuel.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class FossilFuel: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = FossilFuel.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return FossilFuel;
  }(IdentifiedObject);
  _defineProperty(FossilFuel, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'fossilFuelType': [CGMESProfile.shortNames.EQ],
    'ThermalGeneratingUnit': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$x = [{
    "value": "--"
  }, {
    "value": "FrancisGovernorControlKind.mechanicHydrolicTachoAccelerator",
    "label": "mechanicHydrolicTachoAccelerator"
  }, {
    "value": "FrancisGovernorControlKind.mechanicHydraulicTransientFeedback",
    "label": "mechanicHydraulicTransientFeedback"
  }, {
    "value": "FrancisGovernorControlKind.electromechanicalElectrohydraulic",
    "label": "electromechanicalElectrohydraulic"
  }];
  var FrancisGovernorControlKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(FrancisGovernorControlKind, _BaseClass);
    var _super = _createSuper(FrancisGovernorControlKind);
    function FrancisGovernorControlKind() {
      _classCallCheck(this, FrancisGovernorControlKind);
      return _super.apply(this, arguments);
    }
    _createClass(FrancisGovernorControlKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "FrancisGovernorControlKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!FrancisGovernorControlKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class FrancisGovernorControlKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = FrancisGovernorControlKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$x;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return FrancisGovernorControlKind;
  }(BaseClass);
  _defineProperty(FrancisGovernorControlKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var Frequency = /*#__PURE__*/function (_BaseClass) {
    _inherits(Frequency, _BaseClass);
    var _super = _createSuper(Frequency);
    function Frequency() {
      _classCallCheck(this, Frequency);
      return _super.apply(this, arguments);
    }
    _createClass(Frequency, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Frequency";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Frequency.value' in object) {
          attributeEntries['filledEntries']['cim:Frequency.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Frequency.value'], 'cim:Float', 'cim:Frequency.value');
        } else {
          attributeEntries['emptyEntries']['cim:Frequency.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Frequency.value'], 'cim:Float', 'cim:Frequency.value');
        }
        if ('cim:Frequency.unit' in object) {
          attributeEntries['filledEntries']['cim:Frequency.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Frequency.unit'], 'cim:UnitSymbol', 'cim:Frequency.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Frequency.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Frequency.unit'], 'cim:UnitSymbol', 'cim:Frequency.unit');
        }
        if ('cim:Frequency.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Frequency.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Frequency.multiplier'], 'cim:UnitMultiplier', 'cim:Frequency.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Frequency.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Frequency.multiplier'], 'cim:UnitMultiplier', 'cim:Frequency.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Frequency.value", "cim:Frequency.unit", "cim:Frequency.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Frequency.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Frequency: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Frequency.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Frequency;
  }(BaseClass);
  _defineProperty(Frequency, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'value': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'unit': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'multiplier': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY]
  });

  var possibleValues$w = [{
    "value": "--"
  }, {
    "value": "FuelType.coal",
    "label": "coal"
  }, {
    "value": "FuelType.oil",
    "label": "oil"
  }, {
    "value": "FuelType.gas",
    "label": "gas"
  }, {
    "value": "FuelType.lignite",
    "label": "lignite"
  }, {
    "value": "FuelType.hardCoal",
    "label": "hardCoal"
  }, {
    "value": "FuelType.oilShale",
    "label": "oilShale"
  }];
  var FuelType = /*#__PURE__*/function (_BaseClass) {
    _inherits(FuelType, _BaseClass);
    var _super = _createSuper(FuelType);
    function FuelType() {
      _classCallCheck(this, FuelType);
      return _super.apply(this, arguments);
    }
    _createClass(FuelType, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "FuelType";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!FuelType.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class FuelType: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = FuelType.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$w;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return FuelType;
  }(BaseClass);
  _defineProperty(FuelType, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var GenICompensationForGenJ = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(GenICompensationForGenJ, _IdentifiedObject);
    var _super = _createSuper(GenICompensationForGenJ);
    function GenICompensationForGenJ() {
      _classCallCheck(this, GenICompensationForGenJ);
      return _super.apply(this, arguments);
    }
    _createClass(GenICompensationForGenJ, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GenICompensationForGenJ";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:GenICompensationForGenJ.SynchronousMachineDynamics' in object) {
          attributeEntries['filledEntries']['cim:GenICompensationForGenJ.SynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GenICompensationForGenJ.SynchronousMachineDynamics'], 'cim:SynchronousMachineDynamics', 'cim:GenICompensationForGenJ.SynchronousMachineDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:GenICompensationForGenJ.SynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GenICompensationForGenJ.SynchronousMachineDynamics'], 'cim:SynchronousMachineDynamics', 'cim:GenICompensationForGenJ.SynchronousMachineDynamics');
        }
        if ('cim:GenICompensationForGenJ.VcompIEEEType2' in object) {
          attributeEntries['filledEntries']['cim:GenICompensationForGenJ.VcompIEEEType2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GenICompensationForGenJ.VcompIEEEType2'], 'cim:VCompIEEEType2', 'cim:GenICompensationForGenJ.VcompIEEEType2');
        } else {
          attributeEntries['emptyEntries']['cim:GenICompensationForGenJ.VcompIEEEType2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GenICompensationForGenJ.VcompIEEEType2'], 'cim:VCompIEEEType2', 'cim:GenICompensationForGenJ.VcompIEEEType2');
        }
        if ('cim:GenICompensationForGenJ.rcij' in object) {
          attributeEntries['filledEntries']['cim:GenICompensationForGenJ.rcij'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GenICompensationForGenJ.rcij'], 'cim:PU', 'cim:GenICompensationForGenJ.rcij');
        } else {
          attributeEntries['emptyEntries']['cim:GenICompensationForGenJ.rcij'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GenICompensationForGenJ.rcij'], 'cim:PU', 'cim:GenICompensationForGenJ.rcij');
        }
        if ('cim:GenICompensationForGenJ.xcij' in object) {
          attributeEntries['filledEntries']['cim:GenICompensationForGenJ.xcij'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GenICompensationForGenJ.xcij'], 'cim:PU', 'cim:GenICompensationForGenJ.xcij');
        } else {
          attributeEntries['emptyEntries']['cim:GenICompensationForGenJ.xcij'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GenICompensationForGenJ.xcij'], 'cim:PU', 'cim:GenICompensationForGenJ.xcij');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GenICompensationForGenJ.SynchronousMachineDynamics", "cim:GenICompensationForGenJ.VcompIEEEType2", "cim:GenICompensationForGenJ.rcij", "cim:GenICompensationForGenJ.xcij"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GenICompensationForGenJ.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GenICompensationForGenJ: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GenICompensationForGenJ.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GenICompensationForGenJ;
  }(IdentifiedObject);
  _defineProperty(GenICompensationForGenJ, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'SynchronousMachineDynamics': [CGMESProfile.shortNames.DY],
    'VcompIEEEType2': [CGMESProfile.shortNames.DY],
    'rcij': [CGMESProfile.shortNames.DY],
    'xcij': [CGMESProfile.shortNames.DY]
  });

  var GeneratingUnit = /*#__PURE__*/function (_Equipment) {
    _inherits(GeneratingUnit, _Equipment);
    var _super = _createSuper(GeneratingUnit);
    function GeneratingUnit() {
      _classCallCheck(this, GeneratingUnit);
      return _super.apply(this, arguments);
    }
    _createClass(GeneratingUnit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GeneratingUnit";
        var attributeEntries = Equipment.attributeHTML(object, cimmenu, classType);
        if ('cim:GeneratingUnit.genControlSource' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.genControlSource'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.genControlSource'], 'cim:GeneratorControlSource', 'cim:GeneratingUnit.genControlSource');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.genControlSource'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.genControlSource'], 'cim:GeneratorControlSource', 'cim:GeneratingUnit.genControlSource');
        }
        if ('cim:GeneratingUnit.governorSCD' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.governorSCD'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.governorSCD'], 'cim:PerCent', 'cim:GeneratingUnit.governorSCD');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.governorSCD'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.governorSCD'], 'cim:PerCent', 'cim:GeneratingUnit.governorSCD');
        }
        if ('cim:GeneratingUnit.initialP' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.initialP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.initialP'], 'cim:ActivePower', 'cim:GeneratingUnit.initialP');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.initialP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.initialP'], 'cim:ActivePower', 'cim:GeneratingUnit.initialP');
        }
        if ('cim:GeneratingUnit.longPF' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.longPF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.longPF'], 'cim:Simple_Float', 'cim:GeneratingUnit.longPF');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.longPF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.longPF'], 'cim:Simple_Float', 'cim:GeneratingUnit.longPF');
        }
        if ('cim:GeneratingUnit.maximumAllowableSpinningReserve' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.maximumAllowableSpinningReserve'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.maximumAllowableSpinningReserve'], 'cim:ActivePower', 'cim:GeneratingUnit.maximumAllowableSpinningReserve');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.maximumAllowableSpinningReserve'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.maximumAllowableSpinningReserve'], 'cim:ActivePower', 'cim:GeneratingUnit.maximumAllowableSpinningReserve');
        }
        if ('cim:GeneratingUnit.maxOperatingP' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.maxOperatingP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.maxOperatingP'], 'cim:ActivePower', 'cim:GeneratingUnit.maxOperatingP');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.maxOperatingP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.maxOperatingP'], 'cim:ActivePower', 'cim:GeneratingUnit.maxOperatingP');
        }
        if ('cim:GeneratingUnit.minOperatingP' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.minOperatingP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.minOperatingP'], 'cim:ActivePower', 'cim:GeneratingUnit.minOperatingP');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.minOperatingP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.minOperatingP'], 'cim:ActivePower', 'cim:GeneratingUnit.minOperatingP');
        }
        if ('cim:GeneratingUnit.nominalP' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.nominalP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.nominalP'], 'cim:ActivePower', 'cim:GeneratingUnit.nominalP');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.nominalP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.nominalP'], 'cim:ActivePower', 'cim:GeneratingUnit.nominalP');
        }
        if ('cim:GeneratingUnit.ratedGrossMaxP' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.ratedGrossMaxP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.ratedGrossMaxP'], 'cim:ActivePower', 'cim:GeneratingUnit.ratedGrossMaxP');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.ratedGrossMaxP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.ratedGrossMaxP'], 'cim:ActivePower', 'cim:GeneratingUnit.ratedGrossMaxP');
        }
        if ('cim:GeneratingUnit.ratedGrossMinP' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.ratedGrossMinP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.ratedGrossMinP'], 'cim:ActivePower', 'cim:GeneratingUnit.ratedGrossMinP');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.ratedGrossMinP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.ratedGrossMinP'], 'cim:ActivePower', 'cim:GeneratingUnit.ratedGrossMinP');
        }
        if ('cim:GeneratingUnit.ratedNetMaxP' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.ratedNetMaxP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.ratedNetMaxP'], 'cim:ActivePower', 'cim:GeneratingUnit.ratedNetMaxP');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.ratedNetMaxP'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.ratedNetMaxP'], 'cim:ActivePower', 'cim:GeneratingUnit.ratedNetMaxP');
        }
        if ('cim:GeneratingUnit.shortPF' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.shortPF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.shortPF'], 'cim:Simple_Float', 'cim:GeneratingUnit.shortPF');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.shortPF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.shortPF'], 'cim:Simple_Float', 'cim:GeneratingUnit.shortPF');
        }
        if ('cim:GeneratingUnit.startupCost' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.startupCost'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.startupCost'], 'cim:Money', 'cim:GeneratingUnit.startupCost');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.startupCost'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.startupCost'], 'cim:Money', 'cim:GeneratingUnit.startupCost');
        }
        if ('cim:GeneratingUnit.variableCost' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.variableCost'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.variableCost'], 'cim:Money', 'cim:GeneratingUnit.variableCost');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.variableCost'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.variableCost'], 'cim:Money', 'cim:GeneratingUnit.variableCost');
        }
        if ('cim:GeneratingUnit.totalEfficiency' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.totalEfficiency'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.totalEfficiency'], 'cim:PerCent', 'cim:GeneratingUnit.totalEfficiency');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.totalEfficiency'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.totalEfficiency'], 'cim:PerCent', 'cim:GeneratingUnit.totalEfficiency');
        }
        if ('cim:GeneratingUnit.RotatingMachine' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.RotatingMachine'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.RotatingMachine'], 'cim:RotatingMachine', 'cim:GeneratingUnit.RotatingMachine');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.RotatingMachine'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.RotatingMachine'], 'cim:RotatingMachine', 'cim:GeneratingUnit.RotatingMachine');
        }
        if ('cim:GeneratingUnit.normalPF' in object) {
          attributeEntries['filledEntries']['cim:GeneratingUnit.normalPF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.normalPF'], 'cim:Simple_Float', 'cim:GeneratingUnit.normalPF');
        } else {
          attributeEntries['emptyEntries']['cim:GeneratingUnit.normalPF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeneratingUnit.normalPF'], 'cim:Simple_Float', 'cim:GeneratingUnit.normalPF');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GeneratingUnit.genControlSource", "cim:GeneratingUnit.governorSCD", "cim:GeneratingUnit.initialP", "cim:GeneratingUnit.longPF", "cim:GeneratingUnit.maximumAllowableSpinningReserve", "cim:GeneratingUnit.maxOperatingP", "cim:GeneratingUnit.minOperatingP", "cim:GeneratingUnit.nominalP", "cim:GeneratingUnit.ratedGrossMaxP", "cim:GeneratingUnit.ratedGrossMinP", "cim:GeneratingUnit.ratedNetMaxP", "cim:GeneratingUnit.shortPF", "cim:GeneratingUnit.startupCost", "cim:GeneratingUnit.variableCost", "cim:GeneratingUnit.totalEfficiency", "cim:GeneratingUnit.RotatingMachine", "cim:GeneratingUnit.normalPF"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Equipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GeneratingUnit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GeneratingUnit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GeneratingUnit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["HydroGeneratingUnit", "NuclearGeneratingUnit", "SolarGeneratingUnit", "ThermalGeneratingUnit", "WindGeneratingUnit"];
        return subClasses;
      }
    }]);
    return GeneratingUnit;
  }(Equipment);
  _defineProperty(GeneratingUnit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'genControlSource': [CGMESProfile.shortNames.EQ],
    'governorSCD': [CGMESProfile.shortNames.EQ],
    'initialP': [CGMESProfile.shortNames.EQ],
    'longPF': [CGMESProfile.shortNames.EQ],
    'maximumAllowableSpinningReserve': [CGMESProfile.shortNames.EQ],
    'maxOperatingP': [CGMESProfile.shortNames.EQ],
    'minOperatingP': [CGMESProfile.shortNames.EQ],
    'nominalP': [CGMESProfile.shortNames.EQ],
    'ratedGrossMaxP': [CGMESProfile.shortNames.EQ],
    'ratedGrossMinP': [CGMESProfile.shortNames.EQ],
    'ratedNetMaxP': [CGMESProfile.shortNames.EQ],
    'shortPF': [CGMESProfile.shortNames.EQ],
    'startupCost': [CGMESProfile.shortNames.EQ],
    'variableCost': [CGMESProfile.shortNames.EQ],
    'totalEfficiency': [CGMESProfile.shortNames.EQ],
    'RotatingMachine': [CGMESProfile.shortNames.EQ],
    'normalPF': [CGMESProfile.shortNames.SSH]
  });

  var possibleValues$v = [{
    "value": "--"
  }, {
    "value": "GeneratorControlSource.unavailable",
    "label": "unavailable"
  }, {
    "value": "GeneratorControlSource.offAGC",
    "label": "offAGC"
  }, {
    "value": "GeneratorControlSource.onAGC",
    "label": "onAGC"
  }, {
    "value": "GeneratorControlSource.plantControl",
    "label": "plantControl"
  }];
  var GeneratorControlSource = /*#__PURE__*/function (_BaseClass) {
    _inherits(GeneratorControlSource, _BaseClass);
    var _super = _createSuper(GeneratorControlSource);
    function GeneratorControlSource() {
      _classCallCheck(this, GeneratorControlSource);
      return _super.apply(this, arguments);
    }
    _createClass(GeneratorControlSource, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GeneratorControlSource";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GeneratorControlSource.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GeneratorControlSource: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GeneratorControlSource.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$v;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GeneratorControlSource;
  }(BaseClass);
  _defineProperty(GeneratorControlSource, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$u = [{
    "value": "--"
  }, {
    "value": "GenericNonLinearLoadModelKind.exponentialRecovery",
    "label": "exponentialRecovery"
  }, {
    "value": "GenericNonLinearLoadModelKind.loadAdaptive",
    "label": "loadAdaptive"
  }];
  var GenericNonLinearLoadModelKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(GenericNonLinearLoadModelKind, _BaseClass);
    var _super = _createSuper(GenericNonLinearLoadModelKind);
    function GenericNonLinearLoadModelKind() {
      _classCallCheck(this, GenericNonLinearLoadModelKind);
      return _super.apply(this, arguments);
    }
    _createClass(GenericNonLinearLoadModelKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GenericNonLinearLoadModelKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GenericNonLinearLoadModelKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GenericNonLinearLoadModelKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GenericNonLinearLoadModelKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$u;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GenericNonLinearLoadModelKind;
  }(BaseClass);
  _defineProperty(GenericNonLinearLoadModelKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var GeographicalLocationVersion = /*#__PURE__*/function (_BaseClass) {
    _inherits(GeographicalLocationVersion, _BaseClass);
    var _super = _createSuper(GeographicalLocationVersion);
    function GeographicalLocationVersion() {
      _classCallCheck(this, GeographicalLocationVersion);
      return _super.apply(this, arguments);
    }
    _createClass(GeographicalLocationVersion, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GeographicalLocationVersion";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:GeographicalLocationVersion.baseUML' in object) {
          attributeEntries['filledEntries']['cim:GeographicalLocationVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.baseUML'], 'cim:String', 'cim:GeographicalLocationVersion.baseUML');
        } else {
          attributeEntries['emptyEntries']['cim:GeographicalLocationVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.baseUML'], 'cim:String', 'cim:GeographicalLocationVersion.baseUML');
        }
        if ('cim:GeographicalLocationVersion.baseURI' in object) {
          attributeEntries['filledEntries']['cim:GeographicalLocationVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.baseURI'], 'cim:String', 'cim:GeographicalLocationVersion.baseURI');
        } else {
          attributeEntries['emptyEntries']['cim:GeographicalLocationVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.baseURI'], 'cim:String', 'cim:GeographicalLocationVersion.baseURI');
        }
        if ('cim:GeographicalLocationVersion.date' in object) {
          attributeEntries['filledEntries']['cim:GeographicalLocationVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.date'], 'cim:Date', 'cim:GeographicalLocationVersion.date');
        } else {
          attributeEntries['emptyEntries']['cim:GeographicalLocationVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.date'], 'cim:Date', 'cim:GeographicalLocationVersion.date');
        }
        if ('cim:GeographicalLocationVersion.differenceModelURI' in object) {
          attributeEntries['filledEntries']['cim:GeographicalLocationVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.differenceModelURI'], 'cim:String', 'cim:GeographicalLocationVersion.differenceModelURI');
        } else {
          attributeEntries['emptyEntries']['cim:GeographicalLocationVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.differenceModelURI'], 'cim:String', 'cim:GeographicalLocationVersion.differenceModelURI');
        }
        if ('cim:GeographicalLocationVersion.entsoeUML' in object) {
          attributeEntries['filledEntries']['cim:GeographicalLocationVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.entsoeUML'], 'cim:String', 'cim:GeographicalLocationVersion.entsoeUML');
        } else {
          attributeEntries['emptyEntries']['cim:GeographicalLocationVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.entsoeUML'], 'cim:String', 'cim:GeographicalLocationVersion.entsoeUML');
        }
        if ('cim:GeographicalLocationVersion.entsoeURI' in object) {
          attributeEntries['filledEntries']['cim:GeographicalLocationVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.entsoeURI'], 'cim:String', 'cim:GeographicalLocationVersion.entsoeURI');
        } else {
          attributeEntries['emptyEntries']['cim:GeographicalLocationVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.entsoeURI'], 'cim:String', 'cim:GeographicalLocationVersion.entsoeURI');
        }
        if ('cim:GeographicalLocationVersion.modelDescriptionURI' in object) {
          attributeEntries['filledEntries']['cim:GeographicalLocationVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.modelDescriptionURI'], 'cim:String', 'cim:GeographicalLocationVersion.modelDescriptionURI');
        } else {
          attributeEntries['emptyEntries']['cim:GeographicalLocationVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.modelDescriptionURI'], 'cim:String', 'cim:GeographicalLocationVersion.modelDescriptionURI');
        }
        if ('cim:GeographicalLocationVersion.namespaceRDF' in object) {
          attributeEntries['filledEntries']['cim:GeographicalLocationVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.namespaceRDF'], 'cim:String', 'cim:GeographicalLocationVersion.namespaceRDF');
        } else {
          attributeEntries['emptyEntries']['cim:GeographicalLocationVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.namespaceRDF'], 'cim:String', 'cim:GeographicalLocationVersion.namespaceRDF');
        }
        if ('cim:GeographicalLocationVersion.namespaceUML' in object) {
          attributeEntries['filledEntries']['cim:GeographicalLocationVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.namespaceUML'], 'cim:String', 'cim:GeographicalLocationVersion.namespaceUML');
        } else {
          attributeEntries['emptyEntries']['cim:GeographicalLocationVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.namespaceUML'], 'cim:String', 'cim:GeographicalLocationVersion.namespaceUML');
        }
        if ('cim:GeographicalLocationVersion.shortName' in object) {
          attributeEntries['filledEntries']['cim:GeographicalLocationVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.shortName'], 'cim:String', 'cim:GeographicalLocationVersion.shortName');
        } else {
          attributeEntries['emptyEntries']['cim:GeographicalLocationVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GeographicalLocationVersion.shortName'], 'cim:String', 'cim:GeographicalLocationVersion.shortName');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GeographicalLocationVersion.baseUML", "cim:GeographicalLocationVersion.baseURI", "cim:GeographicalLocationVersion.date", "cim:GeographicalLocationVersion.differenceModelURI", "cim:GeographicalLocationVersion.entsoeUML", "cim:GeographicalLocationVersion.entsoeURI", "cim:GeographicalLocationVersion.modelDescriptionURI", "cim:GeographicalLocationVersion.namespaceRDF", "cim:GeographicalLocationVersion.namespaceUML", "cim:GeographicalLocationVersion.shortName"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GeographicalLocationVersion.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GeographicalLocationVersion: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GeographicalLocationVersion.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GeographicalLocationVersion;
  }(BaseClass);
  _defineProperty(GeographicalLocationVersion, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.GL],
    'baseUML': [CGMESProfile.shortNames.GL],
    'baseURI': [CGMESProfile.shortNames.GL],
    'date': [CGMESProfile.shortNames.GL],
    'differenceModelURI': [CGMESProfile.shortNames.GL],
    'entsoeUML': [CGMESProfile.shortNames.GL],
    'entsoeURI': [CGMESProfile.shortNames.GL],
    'modelDescriptionURI': [CGMESProfile.shortNames.GL],
    'namespaceRDF': [CGMESProfile.shortNames.GL],
    'namespaceUML': [CGMESProfile.shortNames.GL],
    'shortName': [CGMESProfile.shortNames.GL]
  });

  var GeographicalRegion = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(GeographicalRegion, _IdentifiedObject);
    var _super = _createSuper(GeographicalRegion);
    function GeographicalRegion() {
      _classCallCheck(this, GeographicalRegion);
      return _super.apply(this, arguments);
    }
    _createClass(GeographicalRegion, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GeographicalRegion";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GeographicalRegion.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GeographicalRegion: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GeographicalRegion.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GeographicalRegion;
  }(IdentifiedObject);
  _defineProperty(GeographicalRegion, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD]
  });

  var TurbineGovernorDynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(TurbineGovernorDynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(TurbineGovernorDynamics);
    function TurbineGovernorDynamics() {
      _classCallCheck(this, TurbineGovernorDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(TurbineGovernorDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TurbineGovernorDynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:TurbineGovernorDynamics.SynchronousMachineDynamics' in object) {
          attributeEntries['filledEntries']['cim:TurbineGovernorDynamics.SynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbineGovernorDynamics.SynchronousMachineDynamics'], 'cim:SynchronousMachineDynamics', 'cim:TurbineGovernorDynamics.SynchronousMachineDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:TurbineGovernorDynamics.SynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbineGovernorDynamics.SynchronousMachineDynamics'], 'cim:SynchronousMachineDynamics', 'cim:TurbineGovernorDynamics.SynchronousMachineDynamics');
        }
        if ('cim:TurbineGovernorDynamics.AsynchronousMachineDynamics' in object) {
          attributeEntries['filledEntries']['cim:TurbineGovernorDynamics.AsynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbineGovernorDynamics.AsynchronousMachineDynamics'], 'cim:AsynchronousMachineDynamics', 'cim:TurbineGovernorDynamics.AsynchronousMachineDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:TurbineGovernorDynamics.AsynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbineGovernorDynamics.AsynchronousMachineDynamics'], 'cim:AsynchronousMachineDynamics', 'cim:TurbineGovernorDynamics.AsynchronousMachineDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TurbineGovernorDynamics.SynchronousMachineDynamics", "cim:TurbineGovernorDynamics.AsynchronousMachineDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TurbineGovernorDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TurbineGovernorDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["TurbineGovernorUserDefined", "GovHydroIEEE0", "GovHydroIEEE2", "GovSteamIEEE1", "GovCT1", "GovCT2", "GovGAST", "GovGAST1", "GovGAST2", "GovGAST3", "GovGAST4", "GovGASTWD", "GovHydro1", "GovHydro2", "GovHydro3", "GovHydro4", "GovHydroDD", "GovHydroFrancis", "GovHydroPelton", "GovHydroPID", "GovHydroPID2", "GovHydroR", "GovHydroWEH", "GovHydroWPID", "GovSteam0", "GovSteam1", "GovSteam2", "GovSteamCC", "GovSteamEU", "GovSteamFV2", "GovSteamFV3", "GovSteamFV4", "GovSteamSGO"];
        return subClasses;
      }
    }]);
    return TurbineGovernorDynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(TurbineGovernorDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'SynchronousMachineDynamics': [CGMESProfile.shortNames.DY],
    'AsynchronousMachineDynamics': [CGMESProfile.shortNames.DY]
  });

  var GovCT1 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovCT1, _TurbineGovernorDynam);
    var _super = _createSuper(GovCT1);
    function GovCT1() {
      _classCallCheck(this, GovCT1);
      return _super.apply(this, arguments);
    }
    _createClass(GovCT1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovCT1";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovCT1.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.mwbase'], 'cim:ActivePower', 'cim:GovCT1.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.mwbase'], 'cim:ActivePower', 'cim:GovCT1.mwbase');
        }
        if ('cim:GovCT1.r' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.r'], 'cim:PU', 'cim:GovCT1.r');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.r'], 'cim:PU', 'cim:GovCT1.r');
        }
        if ('cim:GovCT1.rselect' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.rselect'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.rselect'], 'cim:DroopSignalFeedbackKind', 'cim:GovCT1.rselect');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.rselect'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.rselect'], 'cim:DroopSignalFeedbackKind', 'cim:GovCT1.rselect');
        }
        if ('cim:GovCT1.tpelec' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.tpelec'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tpelec'], 'cim:Seconds', 'cim:GovCT1.tpelec');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.tpelec'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tpelec'], 'cim:Seconds', 'cim:GovCT1.tpelec');
        }
        if ('cim:GovCT1.maxerr' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.maxerr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.maxerr'], 'cim:PU', 'cim:GovCT1.maxerr');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.maxerr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.maxerr'], 'cim:PU', 'cim:GovCT1.maxerr');
        }
        if ('cim:GovCT1.minerr' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.minerr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.minerr'], 'cim:PU', 'cim:GovCT1.minerr');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.minerr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.minerr'], 'cim:PU', 'cim:GovCT1.minerr');
        }
        if ('cim:GovCT1.kpgov' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.kpgov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kpgov'], 'cim:PU', 'cim:GovCT1.kpgov');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.kpgov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kpgov'], 'cim:PU', 'cim:GovCT1.kpgov');
        }
        if ('cim:GovCT1.kigov' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.kigov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kigov'], 'cim:PU', 'cim:GovCT1.kigov');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.kigov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kigov'], 'cim:PU', 'cim:GovCT1.kigov');
        }
        if ('cim:GovCT1.kdgov' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.kdgov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kdgov'], 'cim:PU', 'cim:GovCT1.kdgov');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.kdgov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kdgov'], 'cim:PU', 'cim:GovCT1.kdgov');
        }
        if ('cim:GovCT1.tdgov' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.tdgov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tdgov'], 'cim:Seconds', 'cim:GovCT1.tdgov');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.tdgov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tdgov'], 'cim:Seconds', 'cim:GovCT1.tdgov');
        }
        if ('cim:GovCT1.vmax' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.vmax'], 'cim:PU', 'cim:GovCT1.vmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.vmax'], 'cim:PU', 'cim:GovCT1.vmax');
        }
        if ('cim:GovCT1.vmin' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.vmin'], 'cim:PU', 'cim:GovCT1.vmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.vmin'], 'cim:PU', 'cim:GovCT1.vmin');
        }
        if ('cim:GovCT1.tact' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.tact'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tact'], 'cim:Seconds', 'cim:GovCT1.tact');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.tact'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tact'], 'cim:Seconds', 'cim:GovCT1.tact');
        }
        if ('cim:GovCT1.kturb' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.kturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kturb'], 'cim:PU', 'cim:GovCT1.kturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.kturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kturb'], 'cim:PU', 'cim:GovCT1.kturb');
        }
        if ('cim:GovCT1.wfnl' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.wfnl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.wfnl'], 'cim:PU', 'cim:GovCT1.wfnl');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.wfnl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.wfnl'], 'cim:PU', 'cim:GovCT1.wfnl');
        }
        if ('cim:GovCT1.tb' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tb'], 'cim:Seconds', 'cim:GovCT1.tb');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tb'], 'cim:Seconds', 'cim:GovCT1.tb');
        }
        if ('cim:GovCT1.tc' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tc'], 'cim:Seconds', 'cim:GovCT1.tc');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tc'], 'cim:Seconds', 'cim:GovCT1.tc');
        }
        if ('cim:GovCT1.wfspd' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.wfspd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.wfspd'], 'cim:Boolean', 'cim:GovCT1.wfspd');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.wfspd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.wfspd'], 'cim:Boolean', 'cim:GovCT1.wfspd');
        }
        if ('cim:GovCT1.teng' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.teng'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.teng'], 'cim:Seconds', 'cim:GovCT1.teng');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.teng'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.teng'], 'cim:Seconds', 'cim:GovCT1.teng');
        }
        if ('cim:GovCT1.tfload' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.tfload'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tfload'], 'cim:Seconds', 'cim:GovCT1.tfload');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.tfload'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tfload'], 'cim:Seconds', 'cim:GovCT1.tfload');
        }
        if ('cim:GovCT1.kpload' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.kpload'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kpload'], 'cim:PU', 'cim:GovCT1.kpload');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.kpload'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kpload'], 'cim:PU', 'cim:GovCT1.kpload');
        }
        if ('cim:GovCT1.kiload' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.kiload'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kiload'], 'cim:PU', 'cim:GovCT1.kiload');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.kiload'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kiload'], 'cim:PU', 'cim:GovCT1.kiload');
        }
        if ('cim:GovCT1.ldref' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.ldref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.ldref'], 'cim:PU', 'cim:GovCT1.ldref');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.ldref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.ldref'], 'cim:PU', 'cim:GovCT1.ldref');
        }
        if ('cim:GovCT1.dm' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.dm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.dm'], 'cim:PU', 'cim:GovCT1.dm');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.dm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.dm'], 'cim:PU', 'cim:GovCT1.dm');
        }
        if ('cim:GovCT1.ropen' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.ropen'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.ropen'], 'cim:Simple_Float', 'cim:GovCT1.ropen');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.ropen'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.ropen'], 'cim:Simple_Float', 'cim:GovCT1.ropen');
        }
        if ('cim:GovCT1.rclose' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.rclose'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.rclose'], 'cim:Simple_Float', 'cim:GovCT1.rclose');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.rclose'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.rclose'], 'cim:Simple_Float', 'cim:GovCT1.rclose');
        }
        if ('cim:GovCT1.kimw' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.kimw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kimw'], 'cim:PU', 'cim:GovCT1.kimw');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.kimw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.kimw'], 'cim:PU', 'cim:GovCT1.kimw');
        }
        if ('cim:GovCT1.aset' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.aset'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.aset'], 'cim:Simple_Float', 'cim:GovCT1.aset');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.aset'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.aset'], 'cim:Simple_Float', 'cim:GovCT1.aset');
        }
        if ('cim:GovCT1.ka' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.ka'], 'cim:PU', 'cim:GovCT1.ka');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.ka'], 'cim:PU', 'cim:GovCT1.ka');
        }
        if ('cim:GovCT1.ta' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.ta'], 'cim:Seconds', 'cim:GovCT1.ta');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.ta'], 'cim:Seconds', 'cim:GovCT1.ta');
        }
        if ('cim:GovCT1.db' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.db'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.db'], 'cim:PU', 'cim:GovCT1.db');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.db'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.db'], 'cim:PU', 'cim:GovCT1.db');
        }
        if ('cim:GovCT1.tsa' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.tsa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tsa'], 'cim:Seconds', 'cim:GovCT1.tsa');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.tsa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tsa'], 'cim:Seconds', 'cim:GovCT1.tsa');
        }
        if ('cim:GovCT1.tsb' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.tsb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tsb'], 'cim:Seconds', 'cim:GovCT1.tsb');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.tsb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.tsb'], 'cim:Seconds', 'cim:GovCT1.tsb');
        }
        if ('cim:GovCT1.rup' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.rup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.rup'], 'cim:PU', 'cim:GovCT1.rup');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.rup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.rup'], 'cim:PU', 'cim:GovCT1.rup');
        }
        if ('cim:GovCT1.rdown' in object) {
          attributeEntries['filledEntries']['cim:GovCT1.rdown'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.rdown'], 'cim:PU', 'cim:GovCT1.rdown');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT1.rdown'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT1.rdown'], 'cim:PU', 'cim:GovCT1.rdown');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovCT1.mwbase", "cim:GovCT1.r", "cim:GovCT1.rselect", "cim:GovCT1.tpelec", "cim:GovCT1.maxerr", "cim:GovCT1.minerr", "cim:GovCT1.kpgov", "cim:GovCT1.kigov", "cim:GovCT1.kdgov", "cim:GovCT1.tdgov", "cim:GovCT1.vmax", "cim:GovCT1.vmin", "cim:GovCT1.tact", "cim:GovCT1.kturb", "cim:GovCT1.wfnl", "cim:GovCT1.tb", "cim:GovCT1.tc", "cim:GovCT1.wfspd", "cim:GovCT1.teng", "cim:GovCT1.tfload", "cim:GovCT1.kpload", "cim:GovCT1.kiload", "cim:GovCT1.ldref", "cim:GovCT1.dm", "cim:GovCT1.ropen", "cim:GovCT1.rclose", "cim:GovCT1.kimw", "cim:GovCT1.aset", "cim:GovCT1.ka", "cim:GovCT1.ta", "cim:GovCT1.db", "cim:GovCT1.tsa", "cim:GovCT1.tsb", "cim:GovCT1.rup", "cim:GovCT1.rdown"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovCT1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovCT1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovCT1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovCT1;
  }(TurbineGovernorDynamics);
  _defineProperty(GovCT1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'r': [CGMESProfile.shortNames.DY],
    'rselect': [CGMESProfile.shortNames.DY],
    'tpelec': [CGMESProfile.shortNames.DY],
    'maxerr': [CGMESProfile.shortNames.DY],
    'minerr': [CGMESProfile.shortNames.DY],
    'kpgov': [CGMESProfile.shortNames.DY],
    'kigov': [CGMESProfile.shortNames.DY],
    'kdgov': [CGMESProfile.shortNames.DY],
    'tdgov': [CGMESProfile.shortNames.DY],
    'vmax': [CGMESProfile.shortNames.DY],
    'vmin': [CGMESProfile.shortNames.DY],
    'tact': [CGMESProfile.shortNames.DY],
    'kturb': [CGMESProfile.shortNames.DY],
    'wfnl': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'wfspd': [CGMESProfile.shortNames.DY],
    'teng': [CGMESProfile.shortNames.DY],
    'tfload': [CGMESProfile.shortNames.DY],
    'kpload': [CGMESProfile.shortNames.DY],
    'kiload': [CGMESProfile.shortNames.DY],
    'ldref': [CGMESProfile.shortNames.DY],
    'dm': [CGMESProfile.shortNames.DY],
    'ropen': [CGMESProfile.shortNames.DY],
    'rclose': [CGMESProfile.shortNames.DY],
    'kimw': [CGMESProfile.shortNames.DY],
    'aset': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'db': [CGMESProfile.shortNames.DY],
    'tsa': [CGMESProfile.shortNames.DY],
    'tsb': [CGMESProfile.shortNames.DY],
    'rup': [CGMESProfile.shortNames.DY],
    'rdown': [CGMESProfile.shortNames.DY]
  });

  var GovCT2 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovCT2, _TurbineGovernorDynam);
    var _super = _createSuper(GovCT2);
    function GovCT2() {
      _classCallCheck(this, GovCT2);
      return _super.apply(this, arguments);
    }
    _createClass(GovCT2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovCT2";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovCT2.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.mwbase'], 'cim:ActivePower', 'cim:GovCT2.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.mwbase'], 'cim:ActivePower', 'cim:GovCT2.mwbase');
        }
        if ('cim:GovCT2.r' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.r'], 'cim:PU', 'cim:GovCT2.r');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.r'], 'cim:PU', 'cim:GovCT2.r');
        }
        if ('cim:GovCT2.rselect' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.rselect'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.rselect'], 'cim:DroopSignalFeedbackKind', 'cim:GovCT2.rselect');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.rselect'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.rselect'], 'cim:DroopSignalFeedbackKind', 'cim:GovCT2.rselect');
        }
        if ('cim:GovCT2.tpelec' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.tpelec'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tpelec'], 'cim:Seconds', 'cim:GovCT2.tpelec');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.tpelec'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tpelec'], 'cim:Seconds', 'cim:GovCT2.tpelec');
        }
        if ('cim:GovCT2.maxerr' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.maxerr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.maxerr'], 'cim:PU', 'cim:GovCT2.maxerr');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.maxerr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.maxerr'], 'cim:PU', 'cim:GovCT2.maxerr');
        }
        if ('cim:GovCT2.minerr' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.minerr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.minerr'], 'cim:PU', 'cim:GovCT2.minerr');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.minerr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.minerr'], 'cim:PU', 'cim:GovCT2.minerr');
        }
        if ('cim:GovCT2.kpgov' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.kpgov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kpgov'], 'cim:PU', 'cim:GovCT2.kpgov');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.kpgov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kpgov'], 'cim:PU', 'cim:GovCT2.kpgov');
        }
        if ('cim:GovCT2.kigov' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.kigov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kigov'], 'cim:PU', 'cim:GovCT2.kigov');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.kigov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kigov'], 'cim:PU', 'cim:GovCT2.kigov');
        }
        if ('cim:GovCT2.kdgov' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.kdgov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kdgov'], 'cim:PU', 'cim:GovCT2.kdgov');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.kdgov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kdgov'], 'cim:PU', 'cim:GovCT2.kdgov');
        }
        if ('cim:GovCT2.tdgov' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.tdgov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tdgov'], 'cim:Seconds', 'cim:GovCT2.tdgov');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.tdgov'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tdgov'], 'cim:Seconds', 'cim:GovCT2.tdgov');
        }
        if ('cim:GovCT2.vmax' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.vmax'], 'cim:PU', 'cim:GovCT2.vmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.vmax'], 'cim:PU', 'cim:GovCT2.vmax');
        }
        if ('cim:GovCT2.vmin' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.vmin'], 'cim:PU', 'cim:GovCT2.vmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.vmin'], 'cim:PU', 'cim:GovCT2.vmin');
        }
        if ('cim:GovCT2.tact' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.tact'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tact'], 'cim:Seconds', 'cim:GovCT2.tact');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.tact'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tact'], 'cim:Seconds', 'cim:GovCT2.tact');
        }
        if ('cim:GovCT2.kturb' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.kturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kturb'], 'cim:PU', 'cim:GovCT2.kturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.kturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kturb'], 'cim:PU', 'cim:GovCT2.kturb');
        }
        if ('cim:GovCT2.wfnl' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.wfnl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.wfnl'], 'cim:PU', 'cim:GovCT2.wfnl');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.wfnl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.wfnl'], 'cim:PU', 'cim:GovCT2.wfnl');
        }
        if ('cim:GovCT2.tb' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tb'], 'cim:Seconds', 'cim:GovCT2.tb');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tb'], 'cim:Seconds', 'cim:GovCT2.tb');
        }
        if ('cim:GovCT2.tc' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tc'], 'cim:Seconds', 'cim:GovCT2.tc');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tc'], 'cim:Seconds', 'cim:GovCT2.tc');
        }
        if ('cim:GovCT2.wfspd' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.wfspd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.wfspd'], 'cim:Boolean', 'cim:GovCT2.wfspd');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.wfspd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.wfspd'], 'cim:Boolean', 'cim:GovCT2.wfspd');
        }
        if ('cim:GovCT2.teng' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.teng'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.teng'], 'cim:Seconds', 'cim:GovCT2.teng');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.teng'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.teng'], 'cim:Seconds', 'cim:GovCT2.teng');
        }
        if ('cim:GovCT2.tfload' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.tfload'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tfload'], 'cim:Seconds', 'cim:GovCT2.tfload');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.tfload'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tfload'], 'cim:Seconds', 'cim:GovCT2.tfload');
        }
        if ('cim:GovCT2.kpload' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.kpload'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kpload'], 'cim:PU', 'cim:GovCT2.kpload');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.kpload'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kpload'], 'cim:PU', 'cim:GovCT2.kpload');
        }
        if ('cim:GovCT2.kiload' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.kiload'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kiload'], 'cim:PU', 'cim:GovCT2.kiload');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.kiload'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kiload'], 'cim:PU', 'cim:GovCT2.kiload');
        }
        if ('cim:GovCT2.ldref' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.ldref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.ldref'], 'cim:PU', 'cim:GovCT2.ldref');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.ldref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.ldref'], 'cim:PU', 'cim:GovCT2.ldref');
        }
        if ('cim:GovCT2.dm' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.dm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.dm'], 'cim:PU', 'cim:GovCT2.dm');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.dm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.dm'], 'cim:PU', 'cim:GovCT2.dm');
        }
        if ('cim:GovCT2.ropen' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.ropen'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.ropen'], 'cim:Simple_Float', 'cim:GovCT2.ropen');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.ropen'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.ropen'], 'cim:Simple_Float', 'cim:GovCT2.ropen');
        }
        if ('cim:GovCT2.rclose' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.rclose'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.rclose'], 'cim:Simple_Float', 'cim:GovCT2.rclose');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.rclose'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.rclose'], 'cim:Simple_Float', 'cim:GovCT2.rclose');
        }
        if ('cim:GovCT2.kimw' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.kimw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kimw'], 'cim:PU', 'cim:GovCT2.kimw');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.kimw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.kimw'], 'cim:PU', 'cim:GovCT2.kimw');
        }
        if ('cim:GovCT2.aset' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.aset'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.aset'], 'cim:Simple_Float', 'cim:GovCT2.aset');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.aset'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.aset'], 'cim:Simple_Float', 'cim:GovCT2.aset');
        }
        if ('cim:GovCT2.ka' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.ka'], 'cim:PU', 'cim:GovCT2.ka');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.ka'], 'cim:PU', 'cim:GovCT2.ka');
        }
        if ('cim:GovCT2.ta' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.ta'], 'cim:Seconds', 'cim:GovCT2.ta');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.ta'], 'cim:Seconds', 'cim:GovCT2.ta');
        }
        if ('cim:GovCT2.db' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.db'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.db'], 'cim:PU', 'cim:GovCT2.db');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.db'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.db'], 'cim:PU', 'cim:GovCT2.db');
        }
        if ('cim:GovCT2.tsa' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.tsa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tsa'], 'cim:Seconds', 'cim:GovCT2.tsa');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.tsa'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tsa'], 'cim:Seconds', 'cim:GovCT2.tsa');
        }
        if ('cim:GovCT2.tsb' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.tsb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tsb'], 'cim:Seconds', 'cim:GovCT2.tsb');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.tsb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.tsb'], 'cim:Seconds', 'cim:GovCT2.tsb');
        }
        if ('cim:GovCT2.rup' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.rup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.rup'], 'cim:PU', 'cim:GovCT2.rup');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.rup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.rup'], 'cim:PU', 'cim:GovCT2.rup');
        }
        if ('cim:GovCT2.rdown' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.rdown'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.rdown'], 'cim:PU', 'cim:GovCT2.rdown');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.rdown'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.rdown'], 'cim:PU', 'cim:GovCT2.rdown');
        }
        if ('cim:GovCT2.prate' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.prate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.prate'], 'cim:PU', 'cim:GovCT2.prate');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.prate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.prate'], 'cim:PU', 'cim:GovCT2.prate');
        }
        if ('cim:GovCT2.flim1' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.flim1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim1'], 'cim:Frequency', 'cim:GovCT2.flim1');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.flim1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim1'], 'cim:Frequency', 'cim:GovCT2.flim1');
        }
        if ('cim:GovCT2.plim1' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.plim1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim1'], 'cim:PU', 'cim:GovCT2.plim1');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.plim1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim1'], 'cim:PU', 'cim:GovCT2.plim1');
        }
        if ('cim:GovCT2.flim2' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.flim2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim2'], 'cim:Frequency', 'cim:GovCT2.flim2');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.flim2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim2'], 'cim:Frequency', 'cim:GovCT2.flim2');
        }
        if ('cim:GovCT2.plim2' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.plim2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim2'], 'cim:PU', 'cim:GovCT2.plim2');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.plim2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim2'], 'cim:PU', 'cim:GovCT2.plim2');
        }
        if ('cim:GovCT2.flim3' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.flim3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim3'], 'cim:Frequency', 'cim:GovCT2.flim3');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.flim3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim3'], 'cim:Frequency', 'cim:GovCT2.flim3');
        }
        if ('cim:GovCT2.plim3' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.plim3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim3'], 'cim:PU', 'cim:GovCT2.plim3');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.plim3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim3'], 'cim:PU', 'cim:GovCT2.plim3');
        }
        if ('cim:GovCT2.flim4' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.flim4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim4'], 'cim:Frequency', 'cim:GovCT2.flim4');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.flim4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim4'], 'cim:Frequency', 'cim:GovCT2.flim4');
        }
        if ('cim:GovCT2.plim4' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.plim4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim4'], 'cim:PU', 'cim:GovCT2.plim4');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.plim4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim4'], 'cim:PU', 'cim:GovCT2.plim4');
        }
        if ('cim:GovCT2.flim5' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.flim5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim5'], 'cim:Frequency', 'cim:GovCT2.flim5');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.flim5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim5'], 'cim:Frequency', 'cim:GovCT2.flim5');
        }
        if ('cim:GovCT2.plim5' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.plim5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim5'], 'cim:PU', 'cim:GovCT2.plim5');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.plim5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim5'], 'cim:PU', 'cim:GovCT2.plim5');
        }
        if ('cim:GovCT2.flim6' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.flim6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim6'], 'cim:Frequency', 'cim:GovCT2.flim6');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.flim6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim6'], 'cim:Frequency', 'cim:GovCT2.flim6');
        }
        if ('cim:GovCT2.plim6' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.plim6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim6'], 'cim:PU', 'cim:GovCT2.plim6');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.plim6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim6'], 'cim:PU', 'cim:GovCT2.plim6');
        }
        if ('cim:GovCT2.flim7' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.flim7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim7'], 'cim:Frequency', 'cim:GovCT2.flim7');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.flim7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim7'], 'cim:Frequency', 'cim:GovCT2.flim7');
        }
        if ('cim:GovCT2.plim7' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.plim7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim7'], 'cim:PU', 'cim:GovCT2.plim7');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.plim7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim7'], 'cim:PU', 'cim:GovCT2.plim7');
        }
        if ('cim:GovCT2.flim8' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.flim8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim8'], 'cim:Frequency', 'cim:GovCT2.flim8');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.flim8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim8'], 'cim:Frequency', 'cim:GovCT2.flim8');
        }
        if ('cim:GovCT2.plim8' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.plim8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim8'], 'cim:PU', 'cim:GovCT2.plim8');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.plim8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim8'], 'cim:PU', 'cim:GovCT2.plim8');
        }
        if ('cim:GovCT2.flim9' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.flim9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim9'], 'cim:Frequency', 'cim:GovCT2.flim9');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.flim9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim9'], 'cim:Frequency', 'cim:GovCT2.flim9');
        }
        if ('cim:GovCT2.plim9' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.plim9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim9'], 'cim:PU', 'cim:GovCT2.plim9');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.plim9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim9'], 'cim:PU', 'cim:GovCT2.plim9');
        }
        if ('cim:GovCT2.flim10' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.flim10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim10'], 'cim:Frequency', 'cim:GovCT2.flim10');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.flim10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.flim10'], 'cim:Frequency', 'cim:GovCT2.flim10');
        }
        if ('cim:GovCT2.plim10' in object) {
          attributeEntries['filledEntries']['cim:GovCT2.plim10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim10'], 'cim:PU', 'cim:GovCT2.plim10');
        } else {
          attributeEntries['emptyEntries']['cim:GovCT2.plim10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovCT2.plim10'], 'cim:PU', 'cim:GovCT2.plim10');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovCT2.mwbase", "cim:GovCT2.r", "cim:GovCT2.rselect", "cim:GovCT2.tpelec", "cim:GovCT2.maxerr", "cim:GovCT2.minerr", "cim:GovCT2.kpgov", "cim:GovCT2.kigov", "cim:GovCT2.kdgov", "cim:GovCT2.tdgov", "cim:GovCT2.vmax", "cim:GovCT2.vmin", "cim:GovCT2.tact", "cim:GovCT2.kturb", "cim:GovCT2.wfnl", "cim:GovCT2.tb", "cim:GovCT2.tc", "cim:GovCT2.wfspd", "cim:GovCT2.teng", "cim:GovCT2.tfload", "cim:GovCT2.kpload", "cim:GovCT2.kiload", "cim:GovCT2.ldref", "cim:GovCT2.dm", "cim:GovCT2.ropen", "cim:GovCT2.rclose", "cim:GovCT2.kimw", "cim:GovCT2.aset", "cim:GovCT2.ka", "cim:GovCT2.ta", "cim:GovCT2.db", "cim:GovCT2.tsa", "cim:GovCT2.tsb", "cim:GovCT2.rup", "cim:GovCT2.rdown", "cim:GovCT2.prate", "cim:GovCT2.flim1", "cim:GovCT2.plim1", "cim:GovCT2.flim2", "cim:GovCT2.plim2", "cim:GovCT2.flim3", "cim:GovCT2.plim3", "cim:GovCT2.flim4", "cim:GovCT2.plim4", "cim:GovCT2.flim5", "cim:GovCT2.plim5", "cim:GovCT2.flim6", "cim:GovCT2.plim6", "cim:GovCT2.flim7", "cim:GovCT2.plim7", "cim:GovCT2.flim8", "cim:GovCT2.plim8", "cim:GovCT2.flim9", "cim:GovCT2.plim9", "cim:GovCT2.flim10", "cim:GovCT2.plim10"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovCT2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovCT2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovCT2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovCT2;
  }(TurbineGovernorDynamics);
  _defineProperty(GovCT2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'r': [CGMESProfile.shortNames.DY],
    'rselect': [CGMESProfile.shortNames.DY],
    'tpelec': [CGMESProfile.shortNames.DY],
    'maxerr': [CGMESProfile.shortNames.DY],
    'minerr': [CGMESProfile.shortNames.DY],
    'kpgov': [CGMESProfile.shortNames.DY],
    'kigov': [CGMESProfile.shortNames.DY],
    'kdgov': [CGMESProfile.shortNames.DY],
    'tdgov': [CGMESProfile.shortNames.DY],
    'vmax': [CGMESProfile.shortNames.DY],
    'vmin': [CGMESProfile.shortNames.DY],
    'tact': [CGMESProfile.shortNames.DY],
    'kturb': [CGMESProfile.shortNames.DY],
    'wfnl': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'wfspd': [CGMESProfile.shortNames.DY],
    'teng': [CGMESProfile.shortNames.DY],
    'tfload': [CGMESProfile.shortNames.DY],
    'kpload': [CGMESProfile.shortNames.DY],
    'kiload': [CGMESProfile.shortNames.DY],
    'ldref': [CGMESProfile.shortNames.DY],
    'dm': [CGMESProfile.shortNames.DY],
    'ropen': [CGMESProfile.shortNames.DY],
    'rclose': [CGMESProfile.shortNames.DY],
    'kimw': [CGMESProfile.shortNames.DY],
    'aset': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'db': [CGMESProfile.shortNames.DY],
    'tsa': [CGMESProfile.shortNames.DY],
    'tsb': [CGMESProfile.shortNames.DY],
    'rup': [CGMESProfile.shortNames.DY],
    'rdown': [CGMESProfile.shortNames.DY],
    'prate': [CGMESProfile.shortNames.DY],
    'flim1': [CGMESProfile.shortNames.DY],
    'plim1': [CGMESProfile.shortNames.DY],
    'flim2': [CGMESProfile.shortNames.DY],
    'plim2': [CGMESProfile.shortNames.DY],
    'flim3': [CGMESProfile.shortNames.DY],
    'plim3': [CGMESProfile.shortNames.DY],
    'flim4': [CGMESProfile.shortNames.DY],
    'plim4': [CGMESProfile.shortNames.DY],
    'flim5': [CGMESProfile.shortNames.DY],
    'plim5': [CGMESProfile.shortNames.DY],
    'flim6': [CGMESProfile.shortNames.DY],
    'plim6': [CGMESProfile.shortNames.DY],
    'flim7': [CGMESProfile.shortNames.DY],
    'plim7': [CGMESProfile.shortNames.DY],
    'flim8': [CGMESProfile.shortNames.DY],
    'plim8': [CGMESProfile.shortNames.DY],
    'flim9': [CGMESProfile.shortNames.DY],
    'plim9': [CGMESProfile.shortNames.DY],
    'flim10': [CGMESProfile.shortNames.DY],
    'plim10': [CGMESProfile.shortNames.DY]
  });

  var GovGAST = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovGAST, _TurbineGovernorDynam);
    var _super = _createSuper(GovGAST);
    function GovGAST() {
      _classCallCheck(this, GovGAST);
      return _super.apply(this, arguments);
    }
    _createClass(GovGAST, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovGAST";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovGAST.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovGAST.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.mwbase'], 'cim:ActivePower', 'cim:GovGAST.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.mwbase'], 'cim:ActivePower', 'cim:GovGAST.mwbase');
        }
        if ('cim:GovGAST.r' in object) {
          attributeEntries['filledEntries']['cim:GovGAST.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.r'], 'cim:PU', 'cim:GovGAST.r');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.r'], 'cim:PU', 'cim:GovGAST.r');
        }
        if ('cim:GovGAST.t1' in object) {
          attributeEntries['filledEntries']['cim:GovGAST.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.t1'], 'cim:Seconds', 'cim:GovGAST.t1');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.t1'], 'cim:Seconds', 'cim:GovGAST.t1');
        }
        if ('cim:GovGAST.t2' in object) {
          attributeEntries['filledEntries']['cim:GovGAST.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.t2'], 'cim:Seconds', 'cim:GovGAST.t2');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.t2'], 'cim:Seconds', 'cim:GovGAST.t2');
        }
        if ('cim:GovGAST.t3' in object) {
          attributeEntries['filledEntries']['cim:GovGAST.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.t3'], 'cim:Seconds', 'cim:GovGAST.t3');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.t3'], 'cim:Seconds', 'cim:GovGAST.t3');
        }
        if ('cim:GovGAST.at' in object) {
          attributeEntries['filledEntries']['cim:GovGAST.at'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.at'], 'cim:PU', 'cim:GovGAST.at');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST.at'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.at'], 'cim:PU', 'cim:GovGAST.at');
        }
        if ('cim:GovGAST.kt' in object) {
          attributeEntries['filledEntries']['cim:GovGAST.kt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.kt'], 'cim:PU', 'cim:GovGAST.kt');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST.kt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.kt'], 'cim:PU', 'cim:GovGAST.kt');
        }
        if ('cim:GovGAST.vmax' in object) {
          attributeEntries['filledEntries']['cim:GovGAST.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.vmax'], 'cim:PU', 'cim:GovGAST.vmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.vmax'], 'cim:PU', 'cim:GovGAST.vmax');
        }
        if ('cim:GovGAST.vmin' in object) {
          attributeEntries['filledEntries']['cim:GovGAST.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.vmin'], 'cim:PU', 'cim:GovGAST.vmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.vmin'], 'cim:PU', 'cim:GovGAST.vmin');
        }
        if ('cim:GovGAST.dturb' in object) {
          attributeEntries['filledEntries']['cim:GovGAST.dturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.dturb'], 'cim:PU', 'cim:GovGAST.dturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST.dturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST.dturb'], 'cim:PU', 'cim:GovGAST.dturb');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovGAST.mwbase", "cim:GovGAST.r", "cim:GovGAST.t1", "cim:GovGAST.t2", "cim:GovGAST.t3", "cim:GovGAST.at", "cim:GovGAST.kt", "cim:GovGAST.vmax", "cim:GovGAST.vmin", "cim:GovGAST.dturb"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovGAST.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovGAST: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovGAST.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovGAST;
  }(TurbineGovernorDynamics);
  _defineProperty(GovGAST, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'r': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    'at': [CGMESProfile.shortNames.DY],
    'kt': [CGMESProfile.shortNames.DY],
    'vmax': [CGMESProfile.shortNames.DY],
    'vmin': [CGMESProfile.shortNames.DY],
    'dturb': [CGMESProfile.shortNames.DY]
  });

  var GovGAST1 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovGAST1, _TurbineGovernorDynam);
    var _super = _createSuper(GovGAST1);
    function GovGAST1() {
      _classCallCheck(this, GovGAST1);
      return _super.apply(this, arguments);
    }
    _createClass(GovGAST1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovGAST1";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovGAST1.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.mwbase'], 'cim:ActivePower', 'cim:GovGAST1.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.mwbase'], 'cim:ActivePower', 'cim:GovGAST1.mwbase');
        }
        if ('cim:GovGAST1.r' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.r'], 'cim:PU', 'cim:GovGAST1.r');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.r'], 'cim:PU', 'cim:GovGAST1.r');
        }
        if ('cim:GovGAST1.t1' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.t1'], 'cim:Seconds', 'cim:GovGAST1.t1');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.t1'], 'cim:Seconds', 'cim:GovGAST1.t1');
        }
        if ('cim:GovGAST1.t2' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.t2'], 'cim:Seconds', 'cim:GovGAST1.t2');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.t2'], 'cim:Seconds', 'cim:GovGAST1.t2');
        }
        if ('cim:GovGAST1.t3' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.t3'], 'cim:Seconds', 'cim:GovGAST1.t3');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.t3'], 'cim:Seconds', 'cim:GovGAST1.t3');
        }
        if ('cim:GovGAST1.lmax' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.lmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.lmax'], 'cim:PU', 'cim:GovGAST1.lmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.lmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.lmax'], 'cim:PU', 'cim:GovGAST1.lmax');
        }
        if ('cim:GovGAST1.kt' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.kt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.kt'], 'cim:PU', 'cim:GovGAST1.kt');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.kt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.kt'], 'cim:PU', 'cim:GovGAST1.kt');
        }
        if ('cim:GovGAST1.vmax' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.vmax'], 'cim:PU', 'cim:GovGAST1.vmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.vmax'], 'cim:PU', 'cim:GovGAST1.vmax');
        }
        if ('cim:GovGAST1.vmin' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.vmin'], 'cim:PU', 'cim:GovGAST1.vmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.vmin'], 'cim:PU', 'cim:GovGAST1.vmin');
        }
        if ('cim:GovGAST1.fidle' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.fidle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.fidle'], 'cim:PU', 'cim:GovGAST1.fidle');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.fidle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.fidle'], 'cim:PU', 'cim:GovGAST1.fidle');
        }
        if ('cim:GovGAST1.rmax' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.rmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.rmax'], 'cim:Simple_Float', 'cim:GovGAST1.rmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.rmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.rmax'], 'cim:Simple_Float', 'cim:GovGAST1.rmax');
        }
        if ('cim:GovGAST1.loadinc' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.loadinc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.loadinc'], 'cim:PU', 'cim:GovGAST1.loadinc');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.loadinc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.loadinc'], 'cim:PU', 'cim:GovGAST1.loadinc');
        }
        if ('cim:GovGAST1.tltr' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.tltr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.tltr'], 'cim:Seconds', 'cim:GovGAST1.tltr');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.tltr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.tltr'], 'cim:Seconds', 'cim:GovGAST1.tltr');
        }
        if ('cim:GovGAST1.ltrate' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.ltrate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.ltrate'], 'cim:Simple_Float', 'cim:GovGAST1.ltrate');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.ltrate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.ltrate'], 'cim:Simple_Float', 'cim:GovGAST1.ltrate');
        }
        if ('cim:GovGAST1.a' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.a'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.a'], 'cim:Simple_Float', 'cim:GovGAST1.a');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.a'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.a'], 'cim:Simple_Float', 'cim:GovGAST1.a');
        }
        if ('cim:GovGAST1.b' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.b'], 'cim:Simple_Float', 'cim:GovGAST1.b');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.b'], 'cim:Simple_Float', 'cim:GovGAST1.b');
        }
        if ('cim:GovGAST1.db1' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.db1'], 'cim:Frequency', 'cim:GovGAST1.db1');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.db1'], 'cim:Frequency', 'cim:GovGAST1.db1');
        }
        if ('cim:GovGAST1.eps' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.eps'], 'cim:Frequency', 'cim:GovGAST1.eps');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.eps'], 'cim:Frequency', 'cim:GovGAST1.eps');
        }
        if ('cim:GovGAST1.db2' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.db2'], 'cim:ActivePower', 'cim:GovGAST1.db2');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.db2'], 'cim:ActivePower', 'cim:GovGAST1.db2');
        }
        if ('cim:GovGAST1.gv1' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.gv1'], 'cim:PU', 'cim:GovGAST1.gv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.gv1'], 'cim:PU', 'cim:GovGAST1.gv1');
        }
        if ('cim:GovGAST1.pgv1' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.pgv1'], 'cim:PU', 'cim:GovGAST1.pgv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.pgv1'], 'cim:PU', 'cim:GovGAST1.pgv1');
        }
        if ('cim:GovGAST1.gv2' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.gv2'], 'cim:PU', 'cim:GovGAST1.gv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.gv2'], 'cim:PU', 'cim:GovGAST1.gv2');
        }
        if ('cim:GovGAST1.pgv2' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.pgv2'], 'cim:PU', 'cim:GovGAST1.pgv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.pgv2'], 'cim:PU', 'cim:GovGAST1.pgv2');
        }
        if ('cim:GovGAST1.gv3' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.gv3'], 'cim:PU', 'cim:GovGAST1.gv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.gv3'], 'cim:PU', 'cim:GovGAST1.gv3');
        }
        if ('cim:GovGAST1.pgv3' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.pgv3'], 'cim:PU', 'cim:GovGAST1.pgv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.pgv3'], 'cim:PU', 'cim:GovGAST1.pgv3');
        }
        if ('cim:GovGAST1.gv4' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.gv4'], 'cim:PU', 'cim:GovGAST1.gv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.gv4'], 'cim:PU', 'cim:GovGAST1.gv4');
        }
        if ('cim:GovGAST1.pgv4' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.pgv4'], 'cim:PU', 'cim:GovGAST1.pgv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.pgv4'], 'cim:PU', 'cim:GovGAST1.pgv4');
        }
        if ('cim:GovGAST1.gv5' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.gv5'], 'cim:PU', 'cim:GovGAST1.gv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.gv5'], 'cim:PU', 'cim:GovGAST1.gv5');
        }
        if ('cim:GovGAST1.pgv5' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.pgv5'], 'cim:PU', 'cim:GovGAST1.pgv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.pgv5'], 'cim:PU', 'cim:GovGAST1.pgv5');
        }
        if ('cim:GovGAST1.gv6' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.gv6'], 'cim:PU', 'cim:GovGAST1.gv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.gv6'], 'cim:PU', 'cim:GovGAST1.gv6');
        }
        if ('cim:GovGAST1.pgv6' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.pgv6'], 'cim:PU', 'cim:GovGAST1.pgv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.pgv6'], 'cim:PU', 'cim:GovGAST1.pgv6');
        }
        if ('cim:GovGAST1.ka' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.ka'], 'cim:PU', 'cim:GovGAST1.ka');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.ka'], 'cim:PU', 'cim:GovGAST1.ka');
        }
        if ('cim:GovGAST1.t4' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.t4'], 'cim:Seconds', 'cim:GovGAST1.t4');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.t4'], 'cim:Seconds', 'cim:GovGAST1.t4');
        }
        if ('cim:GovGAST1.t5' in object) {
          attributeEntries['filledEntries']['cim:GovGAST1.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.t5'], 'cim:Seconds', 'cim:GovGAST1.t5');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST1.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST1.t5'], 'cim:Seconds', 'cim:GovGAST1.t5');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovGAST1.mwbase", "cim:GovGAST1.r", "cim:GovGAST1.t1", "cim:GovGAST1.t2", "cim:GovGAST1.t3", "cim:GovGAST1.lmax", "cim:GovGAST1.kt", "cim:GovGAST1.vmax", "cim:GovGAST1.vmin", "cim:GovGAST1.fidle", "cim:GovGAST1.rmax", "cim:GovGAST1.loadinc", "cim:GovGAST1.tltr", "cim:GovGAST1.ltrate", "cim:GovGAST1.a", "cim:GovGAST1.b", "cim:GovGAST1.db1", "cim:GovGAST1.eps", "cim:GovGAST1.db2", "cim:GovGAST1.gv1", "cim:GovGAST1.pgv1", "cim:GovGAST1.gv2", "cim:GovGAST1.pgv2", "cim:GovGAST1.gv3", "cim:GovGAST1.pgv3", "cim:GovGAST1.gv4", "cim:GovGAST1.pgv4", "cim:GovGAST1.gv5", "cim:GovGAST1.pgv5", "cim:GovGAST1.gv6", "cim:GovGAST1.pgv6", "cim:GovGAST1.ka", "cim:GovGAST1.t4", "cim:GovGAST1.t5"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovGAST1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovGAST1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovGAST1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovGAST1;
  }(TurbineGovernorDynamics);
  _defineProperty(GovGAST1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'r': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    'lmax': [CGMESProfile.shortNames.DY],
    'kt': [CGMESProfile.shortNames.DY],
    'vmax': [CGMESProfile.shortNames.DY],
    'vmin': [CGMESProfile.shortNames.DY],
    'fidle': [CGMESProfile.shortNames.DY],
    'rmax': [CGMESProfile.shortNames.DY],
    'loadinc': [CGMESProfile.shortNames.DY],
    'tltr': [CGMESProfile.shortNames.DY],
    'ltrate': [CGMESProfile.shortNames.DY],
    'a': [CGMESProfile.shortNames.DY],
    'b': [CGMESProfile.shortNames.DY],
    'db1': [CGMESProfile.shortNames.DY],
    'eps': [CGMESProfile.shortNames.DY],
    'db2': [CGMESProfile.shortNames.DY],
    'gv1': [CGMESProfile.shortNames.DY],
    'pgv1': [CGMESProfile.shortNames.DY],
    'gv2': [CGMESProfile.shortNames.DY],
    'pgv2': [CGMESProfile.shortNames.DY],
    'gv3': [CGMESProfile.shortNames.DY],
    'pgv3': [CGMESProfile.shortNames.DY],
    'gv4': [CGMESProfile.shortNames.DY],
    'pgv4': [CGMESProfile.shortNames.DY],
    'gv5': [CGMESProfile.shortNames.DY],
    'pgv5': [CGMESProfile.shortNames.DY],
    'gv6': [CGMESProfile.shortNames.DY],
    'pgv6': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY]
  });

  var GovGAST2 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovGAST2, _TurbineGovernorDynam);
    var _super = _createSuper(GovGAST2);
    function GovGAST2() {
      _classCallCheck(this, GovGAST2);
      return _super.apply(this, arguments);
    }
    _createClass(GovGAST2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovGAST2";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovGAST2.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.mwbase'], 'cim:ActivePower', 'cim:GovGAST2.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.mwbase'], 'cim:ActivePower', 'cim:GovGAST2.mwbase');
        }
        if ('cim:GovGAST2.w' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.w'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.w'], 'cim:PU', 'cim:GovGAST2.w');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.w'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.w'], 'cim:PU', 'cim:GovGAST2.w');
        }
        if ('cim:GovGAST2.x' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.x'], 'cim:Seconds', 'cim:GovGAST2.x');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.x'], 'cim:Seconds', 'cim:GovGAST2.x');
        }
        if ('cim:GovGAST2.y' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.y'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.y'], 'cim:Seconds', 'cim:GovGAST2.y');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.y'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.y'], 'cim:Seconds', 'cim:GovGAST2.y');
        }
        if ('cim:GovGAST2.z' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.z'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.z'], 'cim:Boolean', 'cim:GovGAST2.z');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.z'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.z'], 'cim:Boolean', 'cim:GovGAST2.z');
        }
        if ('cim:GovGAST2.etd' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.etd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.etd'], 'cim:Seconds', 'cim:GovGAST2.etd');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.etd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.etd'], 'cim:Seconds', 'cim:GovGAST2.etd');
        }
        if ('cim:GovGAST2.tcd' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.tcd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tcd'], 'cim:Seconds', 'cim:GovGAST2.tcd');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.tcd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tcd'], 'cim:Seconds', 'cim:GovGAST2.tcd');
        }
        if ('cim:GovGAST2.trate' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.trate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.trate'], 'cim:ActivePower', 'cim:GovGAST2.trate');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.trate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.trate'], 'cim:ActivePower', 'cim:GovGAST2.trate');
        }
        if ('cim:GovGAST2.t' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.t'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.t'], 'cim:Seconds', 'cim:GovGAST2.t');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.t'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.t'], 'cim:Seconds', 'cim:GovGAST2.t');
        }
        if ('cim:GovGAST2.tmax' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.tmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tmax'], 'cim:PU', 'cim:GovGAST2.tmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.tmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tmax'], 'cim:PU', 'cim:GovGAST2.tmax');
        }
        if ('cim:GovGAST2.tmin' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.tmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tmin'], 'cim:PU', 'cim:GovGAST2.tmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.tmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tmin'], 'cim:PU', 'cim:GovGAST2.tmin');
        }
        if ('cim:GovGAST2.ecr' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.ecr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.ecr'], 'cim:Seconds', 'cim:GovGAST2.ecr');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.ecr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.ecr'], 'cim:Seconds', 'cim:GovGAST2.ecr');
        }
        if ('cim:GovGAST2.k3' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.k3'], 'cim:PU', 'cim:GovGAST2.k3');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.k3'], 'cim:PU', 'cim:GovGAST2.k3');
        }
        if ('cim:GovGAST2.a' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.a'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.a'], 'cim:Simple_Float', 'cim:GovGAST2.a');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.a'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.a'], 'cim:Simple_Float', 'cim:GovGAST2.a');
        }
        if ('cim:GovGAST2.b' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.b'], 'cim:Simple_Float', 'cim:GovGAST2.b');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.b'], 'cim:Simple_Float', 'cim:GovGAST2.b');
        }
        if ('cim:GovGAST2.c' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.c'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.c'], 'cim:Simple_Float', 'cim:GovGAST2.c');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.c'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.c'], 'cim:Simple_Float', 'cim:GovGAST2.c');
        }
        if ('cim:GovGAST2.tf' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tf'], 'cim:Seconds', 'cim:GovGAST2.tf');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tf'], 'cim:Seconds', 'cim:GovGAST2.tf');
        }
        if ('cim:GovGAST2.kf' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.kf'], 'cim:PU', 'cim:GovGAST2.kf');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.kf'], 'cim:PU', 'cim:GovGAST2.kf');
        }
        if ('cim:GovGAST2.k5' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.k5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.k5'], 'cim:PU', 'cim:GovGAST2.k5');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.k5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.k5'], 'cim:PU', 'cim:GovGAST2.k5');
        }
        if ('cim:GovGAST2.k4' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.k4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.k4'], 'cim:PU', 'cim:GovGAST2.k4');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.k4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.k4'], 'cim:PU', 'cim:GovGAST2.k4');
        }
        if ('cim:GovGAST2.t3' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.t3'], 'cim:Seconds', 'cim:GovGAST2.t3');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.t3'], 'cim:Seconds', 'cim:GovGAST2.t3');
        }
        if ('cim:GovGAST2.t4' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.t4'], 'cim:Seconds', 'cim:GovGAST2.t4');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.t4'], 'cim:Seconds', 'cim:GovGAST2.t4');
        }
        if ('cim:GovGAST2.tt' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tt'], 'cim:Seconds', 'cim:GovGAST2.tt');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tt'], 'cim:Seconds', 'cim:GovGAST2.tt');
        }
        if ('cim:GovGAST2.t5' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.t5'], 'cim:Seconds', 'cim:GovGAST2.t5');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.t5'], 'cim:Seconds', 'cim:GovGAST2.t5');
        }
        if ('cim:GovGAST2.af1' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.af1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.af1'], 'cim:PU', 'cim:GovGAST2.af1');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.af1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.af1'], 'cim:PU', 'cim:GovGAST2.af1');
        }
        if ('cim:GovGAST2.bf1' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.bf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.bf1'], 'cim:PU', 'cim:GovGAST2.bf1');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.bf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.bf1'], 'cim:PU', 'cim:GovGAST2.bf1');
        }
        if ('cim:GovGAST2.af2' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.af2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.af2'], 'cim:PU', 'cim:GovGAST2.af2');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.af2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.af2'], 'cim:PU', 'cim:GovGAST2.af2');
        }
        if ('cim:GovGAST2.bf2' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.bf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.bf2'], 'cim:PU', 'cim:GovGAST2.bf2');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.bf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.bf2'], 'cim:PU', 'cim:GovGAST2.bf2');
        }
        if ('cim:GovGAST2.cf2' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.cf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.cf2'], 'cim:PU', 'cim:GovGAST2.cf2');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.cf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.cf2'], 'cim:PU', 'cim:GovGAST2.cf2');
        }
        if ('cim:GovGAST2.tr' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tr'], 'cim:Temperature', 'cim:GovGAST2.tr');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tr'], 'cim:Temperature', 'cim:GovGAST2.tr');
        }
        if ('cim:GovGAST2.k6' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.k6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.k6'], 'cim:PU', 'cim:GovGAST2.k6');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.k6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.k6'], 'cim:PU', 'cim:GovGAST2.k6');
        }
        if ('cim:GovGAST2.tc' in object) {
          attributeEntries['filledEntries']['cim:GovGAST2.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tc'], 'cim:Temperature', 'cim:GovGAST2.tc');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST2.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST2.tc'], 'cim:Temperature', 'cim:GovGAST2.tc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovGAST2.mwbase", "cim:GovGAST2.w", "cim:GovGAST2.x", "cim:GovGAST2.y", "cim:GovGAST2.z", "cim:GovGAST2.etd", "cim:GovGAST2.tcd", "cim:GovGAST2.trate", "cim:GovGAST2.t", "cim:GovGAST2.tmax", "cim:GovGAST2.tmin", "cim:GovGAST2.ecr", "cim:GovGAST2.k3", "cim:GovGAST2.a", "cim:GovGAST2.b", "cim:GovGAST2.c", "cim:GovGAST2.tf", "cim:GovGAST2.kf", "cim:GovGAST2.k5", "cim:GovGAST2.k4", "cim:GovGAST2.t3", "cim:GovGAST2.t4", "cim:GovGAST2.tt", "cim:GovGAST2.t5", "cim:GovGAST2.af1", "cim:GovGAST2.bf1", "cim:GovGAST2.af2", "cim:GovGAST2.bf2", "cim:GovGAST2.cf2", "cim:GovGAST2.tr", "cim:GovGAST2.k6", "cim:GovGAST2.tc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovGAST2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovGAST2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovGAST2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovGAST2;
  }(TurbineGovernorDynamics);
  _defineProperty(GovGAST2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'w': [CGMESProfile.shortNames.DY],
    'x': [CGMESProfile.shortNames.DY],
    'y': [CGMESProfile.shortNames.DY],
    'z': [CGMESProfile.shortNames.DY],
    'etd': [CGMESProfile.shortNames.DY],
    'tcd': [CGMESProfile.shortNames.DY],
    'trate': [CGMESProfile.shortNames.DY],
    't': [CGMESProfile.shortNames.DY],
    'tmax': [CGMESProfile.shortNames.DY],
    'tmin': [CGMESProfile.shortNames.DY],
    'ecr': [CGMESProfile.shortNames.DY],
    'k3': [CGMESProfile.shortNames.DY],
    'a': [CGMESProfile.shortNames.DY],
    'b': [CGMESProfile.shortNames.DY],
    'c': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'k5': [CGMESProfile.shortNames.DY],
    'k4': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'tt': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    'af1': [CGMESProfile.shortNames.DY],
    'bf1': [CGMESProfile.shortNames.DY],
    'af2': [CGMESProfile.shortNames.DY],
    'bf2': [CGMESProfile.shortNames.DY],
    'cf2': [CGMESProfile.shortNames.DY],
    'tr': [CGMESProfile.shortNames.DY],
    'k6': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY]
  });

  var GovGAST3 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovGAST3, _TurbineGovernorDynam);
    var _super = _createSuper(GovGAST3);
    function GovGAST3() {
      _classCallCheck(this, GovGAST3);
      return _super.apply(this, arguments);
    }
    _createClass(GovGAST3, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovGAST3";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovGAST3.bp' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.bp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.bp'], 'cim:PU', 'cim:GovGAST3.bp');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.bp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.bp'], 'cim:PU', 'cim:GovGAST3.bp');
        }
        if ('cim:GovGAST3.tg' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.tg'], 'cim:Seconds', 'cim:GovGAST3.tg');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.tg'], 'cim:Seconds', 'cim:GovGAST3.tg');
        }
        if ('cim:GovGAST3.rcmx' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.rcmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.rcmx'], 'cim:PU', 'cim:GovGAST3.rcmx');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.rcmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.rcmx'], 'cim:PU', 'cim:GovGAST3.rcmx');
        }
        if ('cim:GovGAST3.rcmn' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.rcmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.rcmn'], 'cim:PU', 'cim:GovGAST3.rcmn');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.rcmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.rcmn'], 'cim:PU', 'cim:GovGAST3.rcmn');
        }
        if ('cim:GovGAST3.ky' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.ky'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.ky'], 'cim:Simple_Float', 'cim:GovGAST3.ky');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.ky'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.ky'], 'cim:Simple_Float', 'cim:GovGAST3.ky');
        }
        if ('cim:GovGAST3.ty' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.ty'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.ty'], 'cim:Seconds', 'cim:GovGAST3.ty');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.ty'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.ty'], 'cim:Seconds', 'cim:GovGAST3.ty');
        }
        if ('cim:GovGAST3.tac' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.tac'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.tac'], 'cim:Seconds', 'cim:GovGAST3.tac');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.tac'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.tac'], 'cim:Seconds', 'cim:GovGAST3.tac');
        }
        if ('cim:GovGAST3.kac' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.kac'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.kac'], 'cim:Simple_Float', 'cim:GovGAST3.kac');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.kac'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.kac'], 'cim:Simple_Float', 'cim:GovGAST3.kac');
        }
        if ('cim:GovGAST3.tc' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.tc'], 'cim:Seconds', 'cim:GovGAST3.tc');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.tc'], 'cim:Seconds', 'cim:GovGAST3.tc');
        }
        if ('cim:GovGAST3.bca' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.bca'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.bca'], 'cim:Simple_Float', 'cim:GovGAST3.bca');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.bca'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.bca'], 'cim:Simple_Float', 'cim:GovGAST3.bca');
        }
        if ('cim:GovGAST3.kca' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.kca'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.kca'], 'cim:Simple_Float', 'cim:GovGAST3.kca');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.kca'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.kca'], 'cim:Simple_Float', 'cim:GovGAST3.kca');
        }
        if ('cim:GovGAST3.dtc' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.dtc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.dtc'], 'cim:Temperature', 'cim:GovGAST3.dtc');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.dtc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.dtc'], 'cim:Temperature', 'cim:GovGAST3.dtc');
        }
        if ('cim:GovGAST3.ka' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.ka'], 'cim:PU', 'cim:GovGAST3.ka');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.ka'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.ka'], 'cim:PU', 'cim:GovGAST3.ka');
        }
        if ('cim:GovGAST3.tsi' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.tsi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.tsi'], 'cim:Seconds', 'cim:GovGAST3.tsi');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.tsi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.tsi'], 'cim:Seconds', 'cim:GovGAST3.tsi');
        }
        if ('cim:GovGAST3.ksi' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.ksi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.ksi'], 'cim:Simple_Float', 'cim:GovGAST3.ksi');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.ksi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.ksi'], 'cim:Simple_Float', 'cim:GovGAST3.ksi');
        }
        if ('cim:GovGAST3.ttc' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.ttc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.ttc'], 'cim:Seconds', 'cim:GovGAST3.ttc');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.ttc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.ttc'], 'cim:Seconds', 'cim:GovGAST3.ttc');
        }
        if ('cim:GovGAST3.tfen' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.tfen'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.tfen'], 'cim:Temperature', 'cim:GovGAST3.tfen');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.tfen'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.tfen'], 'cim:Temperature', 'cim:GovGAST3.tfen');
        }
        if ('cim:GovGAST3.td' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.td'], 'cim:Seconds', 'cim:GovGAST3.td');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.td'], 'cim:Seconds', 'cim:GovGAST3.td');
        }
        if ('cim:GovGAST3.tt' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.tt'], 'cim:Temperature', 'cim:GovGAST3.tt');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.tt'], 'cim:Temperature', 'cim:GovGAST3.tt');
        }
        if ('cim:GovGAST3.mxef' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.mxef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.mxef'], 'cim:PU', 'cim:GovGAST3.mxef');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.mxef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.mxef'], 'cim:PU', 'cim:GovGAST3.mxef');
        }
        if ('cim:GovGAST3.mnef' in object) {
          attributeEntries['filledEntries']['cim:GovGAST3.mnef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.mnef'], 'cim:PU', 'cim:GovGAST3.mnef');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST3.mnef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST3.mnef'], 'cim:PU', 'cim:GovGAST3.mnef');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovGAST3.bp", "cim:GovGAST3.tg", "cim:GovGAST3.rcmx", "cim:GovGAST3.rcmn", "cim:GovGAST3.ky", "cim:GovGAST3.ty", "cim:GovGAST3.tac", "cim:GovGAST3.kac", "cim:GovGAST3.tc", "cim:GovGAST3.bca", "cim:GovGAST3.kca", "cim:GovGAST3.dtc", "cim:GovGAST3.ka", "cim:GovGAST3.tsi", "cim:GovGAST3.ksi", "cim:GovGAST3.ttc", "cim:GovGAST3.tfen", "cim:GovGAST3.td", "cim:GovGAST3.tt", "cim:GovGAST3.mxef", "cim:GovGAST3.mnef"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovGAST3.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovGAST3: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovGAST3.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovGAST3;
  }(TurbineGovernorDynamics);
  _defineProperty(GovGAST3, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'bp': [CGMESProfile.shortNames.DY],
    'tg': [CGMESProfile.shortNames.DY],
    'rcmx': [CGMESProfile.shortNames.DY],
    'rcmn': [CGMESProfile.shortNames.DY],
    'ky': [CGMESProfile.shortNames.DY],
    'ty': [CGMESProfile.shortNames.DY],
    'tac': [CGMESProfile.shortNames.DY],
    'kac': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'bca': [CGMESProfile.shortNames.DY],
    'kca': [CGMESProfile.shortNames.DY],
    'dtc': [CGMESProfile.shortNames.DY],
    'ka': [CGMESProfile.shortNames.DY],
    'tsi': [CGMESProfile.shortNames.DY],
    'ksi': [CGMESProfile.shortNames.DY],
    'ttc': [CGMESProfile.shortNames.DY],
    'tfen': [CGMESProfile.shortNames.DY],
    'td': [CGMESProfile.shortNames.DY],
    'tt': [CGMESProfile.shortNames.DY],
    'mxef': [CGMESProfile.shortNames.DY],
    'mnef': [CGMESProfile.shortNames.DY]
  });

  var GovGAST4 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovGAST4, _TurbineGovernorDynam);
    var _super = _createSuper(GovGAST4);
    function GovGAST4() {
      _classCallCheck(this, GovGAST4);
      return _super.apply(this, arguments);
    }
    _createClass(GovGAST4, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovGAST4";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovGAST4.bp' in object) {
          attributeEntries['filledEntries']['cim:GovGAST4.bp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.bp'], 'cim:PU', 'cim:GovGAST4.bp');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST4.bp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.bp'], 'cim:PU', 'cim:GovGAST4.bp');
        }
        if ('cim:GovGAST4.tv' in object) {
          attributeEntries['filledEntries']['cim:GovGAST4.tv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.tv'], 'cim:Seconds', 'cim:GovGAST4.tv');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST4.tv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.tv'], 'cim:Seconds', 'cim:GovGAST4.tv');
        }
        if ('cim:GovGAST4.ta' in object) {
          attributeEntries['filledEntries']['cim:GovGAST4.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.ta'], 'cim:Seconds', 'cim:GovGAST4.ta');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST4.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.ta'], 'cim:Seconds', 'cim:GovGAST4.ta');
        }
        if ('cim:GovGAST4.tc' in object) {
          attributeEntries['filledEntries']['cim:GovGAST4.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.tc'], 'cim:Seconds', 'cim:GovGAST4.tc');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST4.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.tc'], 'cim:Seconds', 'cim:GovGAST4.tc');
        }
        if ('cim:GovGAST4.tcm' in object) {
          attributeEntries['filledEntries']['cim:GovGAST4.tcm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.tcm'], 'cim:Seconds', 'cim:GovGAST4.tcm');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST4.tcm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.tcm'], 'cim:Seconds', 'cim:GovGAST4.tcm');
        }
        if ('cim:GovGAST4.ktm' in object) {
          attributeEntries['filledEntries']['cim:GovGAST4.ktm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.ktm'], 'cim:PU', 'cim:GovGAST4.ktm');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST4.ktm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.ktm'], 'cim:PU', 'cim:GovGAST4.ktm');
        }
        if ('cim:GovGAST4.tm' in object) {
          attributeEntries['filledEntries']['cim:GovGAST4.tm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.tm'], 'cim:Seconds', 'cim:GovGAST4.tm');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST4.tm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.tm'], 'cim:Seconds', 'cim:GovGAST4.tm');
        }
        if ('cim:GovGAST4.rymx' in object) {
          attributeEntries['filledEntries']['cim:GovGAST4.rymx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.rymx'], 'cim:PU', 'cim:GovGAST4.rymx');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST4.rymx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.rymx'], 'cim:PU', 'cim:GovGAST4.rymx');
        }
        if ('cim:GovGAST4.rymn' in object) {
          attributeEntries['filledEntries']['cim:GovGAST4.rymn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.rymn'], 'cim:PU', 'cim:GovGAST4.rymn');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST4.rymn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.rymn'], 'cim:PU', 'cim:GovGAST4.rymn');
        }
        if ('cim:GovGAST4.mxef' in object) {
          attributeEntries['filledEntries']['cim:GovGAST4.mxef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.mxef'], 'cim:PU', 'cim:GovGAST4.mxef');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST4.mxef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.mxef'], 'cim:PU', 'cim:GovGAST4.mxef');
        }
        if ('cim:GovGAST4.mnef' in object) {
          attributeEntries['filledEntries']['cim:GovGAST4.mnef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.mnef'], 'cim:PU', 'cim:GovGAST4.mnef');
        } else {
          attributeEntries['emptyEntries']['cim:GovGAST4.mnef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGAST4.mnef'], 'cim:PU', 'cim:GovGAST4.mnef');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovGAST4.bp", "cim:GovGAST4.tv", "cim:GovGAST4.ta", "cim:GovGAST4.tc", "cim:GovGAST4.tcm", "cim:GovGAST4.ktm", "cim:GovGAST4.tm", "cim:GovGAST4.rymx", "cim:GovGAST4.rymn", "cim:GovGAST4.mxef", "cim:GovGAST4.mnef"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovGAST4.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovGAST4: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovGAST4.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovGAST4;
  }(TurbineGovernorDynamics);
  _defineProperty(GovGAST4, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'bp': [CGMESProfile.shortNames.DY],
    'tv': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'tcm': [CGMESProfile.shortNames.DY],
    'ktm': [CGMESProfile.shortNames.DY],
    'tm': [CGMESProfile.shortNames.DY],
    'rymx': [CGMESProfile.shortNames.DY],
    'rymn': [CGMESProfile.shortNames.DY],
    'mxef': [CGMESProfile.shortNames.DY],
    'mnef': [CGMESProfile.shortNames.DY]
  });

  var GovGASTWD = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovGASTWD, _TurbineGovernorDynam);
    var _super = _createSuper(GovGASTWD);
    function GovGASTWD() {
      _classCallCheck(this, GovGASTWD);
      return _super.apply(this, arguments);
    }
    _createClass(GovGASTWD, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovGASTWD";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovGASTWD.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.mwbase'], 'cim:ActivePower', 'cim:GovGASTWD.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.mwbase'], 'cim:ActivePower', 'cim:GovGASTWD.mwbase');
        }
        if ('cim:GovGASTWD.kdroop' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.kdroop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.kdroop'], 'cim:PU', 'cim:GovGASTWD.kdroop');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.kdroop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.kdroop'], 'cim:PU', 'cim:GovGASTWD.kdroop');
        }
        if ('cim:GovGASTWD.kp' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.kp'], 'cim:PU', 'cim:GovGASTWD.kp');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.kp'], 'cim:PU', 'cim:GovGASTWD.kp');
        }
        if ('cim:GovGASTWD.ki' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.ki'], 'cim:PU', 'cim:GovGASTWD.ki');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.ki'], 'cim:PU', 'cim:GovGASTWD.ki');
        }
        if ('cim:GovGASTWD.kd' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.kd'], 'cim:PU', 'cim:GovGASTWD.kd');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.kd'], 'cim:PU', 'cim:GovGASTWD.kd');
        }
        if ('cim:GovGASTWD.etd' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.etd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.etd'], 'cim:Seconds', 'cim:GovGASTWD.etd');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.etd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.etd'], 'cim:Seconds', 'cim:GovGASTWD.etd');
        }
        if ('cim:GovGASTWD.tcd' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.tcd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tcd'], 'cim:Seconds', 'cim:GovGASTWD.tcd');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.tcd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tcd'], 'cim:Seconds', 'cim:GovGASTWD.tcd');
        }
        if ('cim:GovGASTWD.trate' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.trate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.trate'], 'cim:ActivePower', 'cim:GovGASTWD.trate');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.trate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.trate'], 'cim:ActivePower', 'cim:GovGASTWD.trate');
        }
        if ('cim:GovGASTWD.t' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.t'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.t'], 'cim:Seconds', 'cim:GovGASTWD.t');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.t'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.t'], 'cim:Seconds', 'cim:GovGASTWD.t');
        }
        if ('cim:GovGASTWD.tmax' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.tmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tmax'], 'cim:PU', 'cim:GovGASTWD.tmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.tmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tmax'], 'cim:PU', 'cim:GovGASTWD.tmax');
        }
        if ('cim:GovGASTWD.tmin' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.tmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tmin'], 'cim:PU', 'cim:GovGASTWD.tmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.tmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tmin'], 'cim:PU', 'cim:GovGASTWD.tmin');
        }
        if ('cim:GovGASTWD.ecr' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.ecr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.ecr'], 'cim:Seconds', 'cim:GovGASTWD.ecr');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.ecr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.ecr'], 'cim:Seconds', 'cim:GovGASTWD.ecr');
        }
        if ('cim:GovGASTWD.k3' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.k3'], 'cim:PU', 'cim:GovGASTWD.k3');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.k3'], 'cim:PU', 'cim:GovGASTWD.k3');
        }
        if ('cim:GovGASTWD.a' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.a'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.a'], 'cim:Simple_Float', 'cim:GovGASTWD.a');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.a'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.a'], 'cim:Simple_Float', 'cim:GovGASTWD.a');
        }
        if ('cim:GovGASTWD.b' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.b'], 'cim:Simple_Float', 'cim:GovGASTWD.b');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.b'], 'cim:Simple_Float', 'cim:GovGASTWD.b');
        }
        if ('cim:GovGASTWD.c' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.c'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.c'], 'cim:Simple_Float', 'cim:GovGASTWD.c');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.c'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.c'], 'cim:Simple_Float', 'cim:GovGASTWD.c');
        }
        if ('cim:GovGASTWD.tf' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tf'], 'cim:Seconds', 'cim:GovGASTWD.tf');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tf'], 'cim:Seconds', 'cim:GovGASTWD.tf');
        }
        if ('cim:GovGASTWD.kf' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.kf'], 'cim:PU', 'cim:GovGASTWD.kf');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.kf'], 'cim:PU', 'cim:GovGASTWD.kf');
        }
        if ('cim:GovGASTWD.k5' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.k5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.k5'], 'cim:PU', 'cim:GovGASTWD.k5');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.k5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.k5'], 'cim:PU', 'cim:GovGASTWD.k5');
        }
        if ('cim:GovGASTWD.k4' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.k4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.k4'], 'cim:PU', 'cim:GovGASTWD.k4');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.k4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.k4'], 'cim:PU', 'cim:GovGASTWD.k4');
        }
        if ('cim:GovGASTWD.t3' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.t3'], 'cim:Seconds', 'cim:GovGASTWD.t3');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.t3'], 'cim:Seconds', 'cim:GovGASTWD.t3');
        }
        if ('cim:GovGASTWD.t4' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.t4'], 'cim:Seconds', 'cim:GovGASTWD.t4');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.t4'], 'cim:Seconds', 'cim:GovGASTWD.t4');
        }
        if ('cim:GovGASTWD.tt' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tt'], 'cim:Seconds', 'cim:GovGASTWD.tt');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tt'], 'cim:Seconds', 'cim:GovGASTWD.tt');
        }
        if ('cim:GovGASTWD.t5' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.t5'], 'cim:Seconds', 'cim:GovGASTWD.t5');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.t5'], 'cim:Seconds', 'cim:GovGASTWD.t5');
        }
        if ('cim:GovGASTWD.af1' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.af1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.af1'], 'cim:PU', 'cim:GovGASTWD.af1');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.af1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.af1'], 'cim:PU', 'cim:GovGASTWD.af1');
        }
        if ('cim:GovGASTWD.bf1' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.bf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.bf1'], 'cim:PU', 'cim:GovGASTWD.bf1');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.bf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.bf1'], 'cim:PU', 'cim:GovGASTWD.bf1');
        }
        if ('cim:GovGASTWD.af2' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.af2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.af2'], 'cim:PU', 'cim:GovGASTWD.af2');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.af2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.af2'], 'cim:PU', 'cim:GovGASTWD.af2');
        }
        if ('cim:GovGASTWD.bf2' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.bf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.bf2'], 'cim:PU', 'cim:GovGASTWD.bf2');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.bf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.bf2'], 'cim:PU', 'cim:GovGASTWD.bf2');
        }
        if ('cim:GovGASTWD.cf2' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.cf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.cf2'], 'cim:PU', 'cim:GovGASTWD.cf2');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.cf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.cf2'], 'cim:PU', 'cim:GovGASTWD.cf2');
        }
        if ('cim:GovGASTWD.tr' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tr'], 'cim:Temperature', 'cim:GovGASTWD.tr');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tr'], 'cim:Temperature', 'cim:GovGASTWD.tr');
        }
        if ('cim:GovGASTWD.k6' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.k6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.k6'], 'cim:PU', 'cim:GovGASTWD.k6');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.k6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.k6'], 'cim:PU', 'cim:GovGASTWD.k6');
        }
        if ('cim:GovGASTWD.tc' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tc'], 'cim:Temperature', 'cim:GovGASTWD.tc');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.tc'], 'cim:Temperature', 'cim:GovGASTWD.tc');
        }
        if ('cim:GovGASTWD.td' in object) {
          attributeEntries['filledEntries']['cim:GovGASTWD.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.td'], 'cim:Seconds', 'cim:GovGASTWD.td');
        } else {
          attributeEntries['emptyEntries']['cim:GovGASTWD.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovGASTWD.td'], 'cim:Seconds', 'cim:GovGASTWD.td');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovGASTWD.mwbase", "cim:GovGASTWD.kdroop", "cim:GovGASTWD.kp", "cim:GovGASTWD.ki", "cim:GovGASTWD.kd", "cim:GovGASTWD.etd", "cim:GovGASTWD.tcd", "cim:GovGASTWD.trate", "cim:GovGASTWD.t", "cim:GovGASTWD.tmax", "cim:GovGASTWD.tmin", "cim:GovGASTWD.ecr", "cim:GovGASTWD.k3", "cim:GovGASTWD.a", "cim:GovGASTWD.b", "cim:GovGASTWD.c", "cim:GovGASTWD.tf", "cim:GovGASTWD.kf", "cim:GovGASTWD.k5", "cim:GovGASTWD.k4", "cim:GovGASTWD.t3", "cim:GovGASTWD.t4", "cim:GovGASTWD.tt", "cim:GovGASTWD.t5", "cim:GovGASTWD.af1", "cim:GovGASTWD.bf1", "cim:GovGASTWD.af2", "cim:GovGASTWD.bf2", "cim:GovGASTWD.cf2", "cim:GovGASTWD.tr", "cim:GovGASTWD.k6", "cim:GovGASTWD.tc", "cim:GovGASTWD.td"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovGASTWD.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovGASTWD: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovGASTWD.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovGASTWD;
  }(TurbineGovernorDynamics);
  _defineProperty(GovGASTWD, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'kdroop': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'etd': [CGMESProfile.shortNames.DY],
    'tcd': [CGMESProfile.shortNames.DY],
    'trate': [CGMESProfile.shortNames.DY],
    't': [CGMESProfile.shortNames.DY],
    'tmax': [CGMESProfile.shortNames.DY],
    'tmin': [CGMESProfile.shortNames.DY],
    'ecr': [CGMESProfile.shortNames.DY],
    'k3': [CGMESProfile.shortNames.DY],
    'a': [CGMESProfile.shortNames.DY],
    'b': [CGMESProfile.shortNames.DY],
    'c': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'k5': [CGMESProfile.shortNames.DY],
    'k4': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'tt': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    'af1': [CGMESProfile.shortNames.DY],
    'bf1': [CGMESProfile.shortNames.DY],
    'af2': [CGMESProfile.shortNames.DY],
    'bf2': [CGMESProfile.shortNames.DY],
    'cf2': [CGMESProfile.shortNames.DY],
    'tr': [CGMESProfile.shortNames.DY],
    'k6': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'td': [CGMESProfile.shortNames.DY]
  });

  var GovHydro1 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydro1, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydro1);
    function GovHydro1() {
      _classCallCheck(this, GovHydro1);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydro1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydro1";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydro1.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.mwbase'], 'cim:ActivePower', 'cim:GovHydro1.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.mwbase'], 'cim:ActivePower', 'cim:GovHydro1.mwbase');
        }
        if ('cim:GovHydro1.rperm' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.rperm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.rperm'], 'cim:PU', 'cim:GovHydro1.rperm');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.rperm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.rperm'], 'cim:PU', 'cim:GovHydro1.rperm');
        }
        if ('cim:GovHydro1.rtemp' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.rtemp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.rtemp'], 'cim:PU', 'cim:GovHydro1.rtemp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.rtemp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.rtemp'], 'cim:PU', 'cim:GovHydro1.rtemp');
        }
        if ('cim:GovHydro1.tr' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.tr'], 'cim:Seconds', 'cim:GovHydro1.tr');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.tr'], 'cim:Seconds', 'cim:GovHydro1.tr');
        }
        if ('cim:GovHydro1.tf' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.tf'], 'cim:Seconds', 'cim:GovHydro1.tf');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.tf'], 'cim:Seconds', 'cim:GovHydro1.tf');
        }
        if ('cim:GovHydro1.tg' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.tg'], 'cim:Seconds', 'cim:GovHydro1.tg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.tg'], 'cim:Seconds', 'cim:GovHydro1.tg');
        }
        if ('cim:GovHydro1.velm' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.velm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.velm'], 'cim:Simple_Float', 'cim:GovHydro1.velm');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.velm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.velm'], 'cim:Simple_Float', 'cim:GovHydro1.velm');
        }
        if ('cim:GovHydro1.gmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.gmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.gmax'], 'cim:PU', 'cim:GovHydro1.gmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.gmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.gmax'], 'cim:PU', 'cim:GovHydro1.gmax');
        }
        if ('cim:GovHydro1.gmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.gmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.gmin'], 'cim:PU', 'cim:GovHydro1.gmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.gmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.gmin'], 'cim:PU', 'cim:GovHydro1.gmin');
        }
        if ('cim:GovHydro1.tw' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.tw'], 'cim:Seconds', 'cim:GovHydro1.tw');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.tw'], 'cim:Seconds', 'cim:GovHydro1.tw');
        }
        if ('cim:GovHydro1.at' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.at'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.at'], 'cim:PU', 'cim:GovHydro1.at');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.at'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.at'], 'cim:PU', 'cim:GovHydro1.at');
        }
        if ('cim:GovHydro1.dturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.dturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.dturb'], 'cim:PU', 'cim:GovHydro1.dturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.dturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.dturb'], 'cim:PU', 'cim:GovHydro1.dturb');
        }
        if ('cim:GovHydro1.qnl' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.qnl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.qnl'], 'cim:PU', 'cim:GovHydro1.qnl');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.qnl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.qnl'], 'cim:PU', 'cim:GovHydro1.qnl');
        }
        if ('cim:GovHydro1.hdam' in object) {
          attributeEntries['filledEntries']['cim:GovHydro1.hdam'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.hdam'], 'cim:PU', 'cim:GovHydro1.hdam');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro1.hdam'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro1.hdam'], 'cim:PU', 'cim:GovHydro1.hdam');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydro1.mwbase", "cim:GovHydro1.rperm", "cim:GovHydro1.rtemp", "cim:GovHydro1.tr", "cim:GovHydro1.tf", "cim:GovHydro1.tg", "cim:GovHydro1.velm", "cim:GovHydro1.gmax", "cim:GovHydro1.gmin", "cim:GovHydro1.tw", "cim:GovHydro1.at", "cim:GovHydro1.dturb", "cim:GovHydro1.qnl", "cim:GovHydro1.hdam"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydro1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydro1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydro1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydro1;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydro1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'rperm': [CGMESProfile.shortNames.DY],
    'rtemp': [CGMESProfile.shortNames.DY],
    'tr': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'tg': [CGMESProfile.shortNames.DY],
    'velm': [CGMESProfile.shortNames.DY],
    'gmax': [CGMESProfile.shortNames.DY],
    'gmin': [CGMESProfile.shortNames.DY],
    'tw': [CGMESProfile.shortNames.DY],
    'at': [CGMESProfile.shortNames.DY],
    'dturb': [CGMESProfile.shortNames.DY],
    'qnl': [CGMESProfile.shortNames.DY],
    'hdam': [CGMESProfile.shortNames.DY]
  });

  var GovHydro2 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydro2, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydro2);
    function GovHydro2() {
      _classCallCheck(this, GovHydro2);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydro2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydro2";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydro2.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.mwbase'], 'cim:ActivePower', 'cim:GovHydro2.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.mwbase'], 'cim:ActivePower', 'cim:GovHydro2.mwbase');
        }
        if ('cim:GovHydro2.tg' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.tg'], 'cim:Seconds', 'cim:GovHydro2.tg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.tg'], 'cim:Seconds', 'cim:GovHydro2.tg');
        }
        if ('cim:GovHydro2.tp' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.tp'], 'cim:Seconds', 'cim:GovHydro2.tp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.tp'], 'cim:Seconds', 'cim:GovHydro2.tp');
        }
        if ('cim:GovHydro2.uo' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.uo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.uo'], 'cim:Simple_Float', 'cim:GovHydro2.uo');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.uo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.uo'], 'cim:Simple_Float', 'cim:GovHydro2.uo');
        }
        if ('cim:GovHydro2.uc' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.uc'], 'cim:Simple_Float', 'cim:GovHydro2.uc');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.uc'], 'cim:Simple_Float', 'cim:GovHydro2.uc');
        }
        if ('cim:GovHydro2.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pmax'], 'cim:PU', 'cim:GovHydro2.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pmax'], 'cim:PU', 'cim:GovHydro2.pmax');
        }
        if ('cim:GovHydro2.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pmin'], 'cim:PU', 'cim:GovHydro2.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pmin'], 'cim:PU', 'cim:GovHydro2.pmin');
        }
        if ('cim:GovHydro2.rperm' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.rperm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.rperm'], 'cim:PU', 'cim:GovHydro2.rperm');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.rperm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.rperm'], 'cim:PU', 'cim:GovHydro2.rperm');
        }
        if ('cim:GovHydro2.rtemp' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.rtemp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.rtemp'], 'cim:PU', 'cim:GovHydro2.rtemp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.rtemp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.rtemp'], 'cim:PU', 'cim:GovHydro2.rtemp');
        }
        if ('cim:GovHydro2.tr' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.tr'], 'cim:Seconds', 'cim:GovHydro2.tr');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.tr'], 'cim:Seconds', 'cim:GovHydro2.tr');
        }
        if ('cim:GovHydro2.tw' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.tw'], 'cim:Seconds', 'cim:GovHydro2.tw');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.tw'], 'cim:Seconds', 'cim:GovHydro2.tw');
        }
        if ('cim:GovHydro2.kturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.kturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.kturb'], 'cim:PU', 'cim:GovHydro2.kturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.kturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.kturb'], 'cim:PU', 'cim:GovHydro2.kturb');
        }
        if ('cim:GovHydro2.aturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.aturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.aturb'], 'cim:PU', 'cim:GovHydro2.aturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.aturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.aturb'], 'cim:PU', 'cim:GovHydro2.aturb');
        }
        if ('cim:GovHydro2.bturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.bturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.bturb'], 'cim:PU', 'cim:GovHydro2.bturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.bturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.bturb'], 'cim:PU', 'cim:GovHydro2.bturb');
        }
        if ('cim:GovHydro2.db1' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.db1'], 'cim:Frequency', 'cim:GovHydro2.db1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.db1'], 'cim:Frequency', 'cim:GovHydro2.db1');
        }
        if ('cim:GovHydro2.eps' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.eps'], 'cim:Frequency', 'cim:GovHydro2.eps');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.eps'], 'cim:Frequency', 'cim:GovHydro2.eps');
        }
        if ('cim:GovHydro2.db2' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.db2'], 'cim:ActivePower', 'cim:GovHydro2.db2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.db2'], 'cim:ActivePower', 'cim:GovHydro2.db2');
        }
        if ('cim:GovHydro2.gv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.gv1'], 'cim:PU', 'cim:GovHydro2.gv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.gv1'], 'cim:PU', 'cim:GovHydro2.gv1');
        }
        if ('cim:GovHydro2.pgv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pgv1'], 'cim:PU', 'cim:GovHydro2.pgv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pgv1'], 'cim:PU', 'cim:GovHydro2.pgv1');
        }
        if ('cim:GovHydro2.gv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.gv2'], 'cim:PU', 'cim:GovHydro2.gv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.gv2'], 'cim:PU', 'cim:GovHydro2.gv2');
        }
        if ('cim:GovHydro2.pgv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pgv2'], 'cim:PU', 'cim:GovHydro2.pgv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pgv2'], 'cim:PU', 'cim:GovHydro2.pgv2');
        }
        if ('cim:GovHydro2.gv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.gv3'], 'cim:PU', 'cim:GovHydro2.gv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.gv3'], 'cim:PU', 'cim:GovHydro2.gv3');
        }
        if ('cim:GovHydro2.pgv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pgv3'], 'cim:PU', 'cim:GovHydro2.pgv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pgv3'], 'cim:PU', 'cim:GovHydro2.pgv3');
        }
        if ('cim:GovHydro2.gv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.gv4'], 'cim:PU', 'cim:GovHydro2.gv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.gv4'], 'cim:PU', 'cim:GovHydro2.gv4');
        }
        if ('cim:GovHydro2.pgv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pgv4'], 'cim:PU', 'cim:GovHydro2.pgv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pgv4'], 'cim:PU', 'cim:GovHydro2.pgv4');
        }
        if ('cim:GovHydro2.gv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.gv5'], 'cim:PU', 'cim:GovHydro2.gv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.gv5'], 'cim:PU', 'cim:GovHydro2.gv5');
        }
        if ('cim:GovHydro2.pgv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pgv5'], 'cim:PU', 'cim:GovHydro2.pgv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pgv5'], 'cim:PU', 'cim:GovHydro2.pgv5');
        }
        if ('cim:GovHydro2.gv6' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.gv6'], 'cim:PU', 'cim:GovHydro2.gv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.gv6'], 'cim:PU', 'cim:GovHydro2.gv6');
        }
        if ('cim:GovHydro2.pgv6' in object) {
          attributeEntries['filledEntries']['cim:GovHydro2.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pgv6'], 'cim:PU', 'cim:GovHydro2.pgv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro2.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro2.pgv6'], 'cim:PU', 'cim:GovHydro2.pgv6');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydro2.mwbase", "cim:GovHydro2.tg", "cim:GovHydro2.tp", "cim:GovHydro2.uo", "cim:GovHydro2.uc", "cim:GovHydro2.pmax", "cim:GovHydro2.pmin", "cim:GovHydro2.rperm", "cim:GovHydro2.rtemp", "cim:GovHydro2.tr", "cim:GovHydro2.tw", "cim:GovHydro2.kturb", "cim:GovHydro2.aturb", "cim:GovHydro2.bturb", "cim:GovHydro2.db1", "cim:GovHydro2.eps", "cim:GovHydro2.db2", "cim:GovHydro2.gv1", "cim:GovHydro2.pgv1", "cim:GovHydro2.gv2", "cim:GovHydro2.pgv2", "cim:GovHydro2.gv3", "cim:GovHydro2.pgv3", "cim:GovHydro2.gv4", "cim:GovHydro2.pgv4", "cim:GovHydro2.gv5", "cim:GovHydro2.pgv5", "cim:GovHydro2.gv6", "cim:GovHydro2.pgv6"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydro2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydro2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydro2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydro2;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydro2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'tg': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    'uo': [CGMESProfile.shortNames.DY],
    'uc': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    'rperm': [CGMESProfile.shortNames.DY],
    'rtemp': [CGMESProfile.shortNames.DY],
    'tr': [CGMESProfile.shortNames.DY],
    'tw': [CGMESProfile.shortNames.DY],
    'kturb': [CGMESProfile.shortNames.DY],
    'aturb': [CGMESProfile.shortNames.DY],
    'bturb': [CGMESProfile.shortNames.DY],
    'db1': [CGMESProfile.shortNames.DY],
    'eps': [CGMESProfile.shortNames.DY],
    'db2': [CGMESProfile.shortNames.DY],
    'gv1': [CGMESProfile.shortNames.DY],
    'pgv1': [CGMESProfile.shortNames.DY],
    'gv2': [CGMESProfile.shortNames.DY],
    'pgv2': [CGMESProfile.shortNames.DY],
    'gv3': [CGMESProfile.shortNames.DY],
    'pgv3': [CGMESProfile.shortNames.DY],
    'gv4': [CGMESProfile.shortNames.DY],
    'pgv4': [CGMESProfile.shortNames.DY],
    'gv5': [CGMESProfile.shortNames.DY],
    'pgv5': [CGMESProfile.shortNames.DY],
    'gv6': [CGMESProfile.shortNames.DY],
    'pgv6': [CGMESProfile.shortNames.DY]
  });

  var GovHydro3 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydro3, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydro3);
    function GovHydro3() {
      _classCallCheck(this, GovHydro3);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydro3, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydro3";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydro3.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.mwbase'], 'cim:ActivePower', 'cim:GovHydro3.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.mwbase'], 'cim:ActivePower', 'cim:GovHydro3.mwbase');
        }
        if ('cim:GovHydro3.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pmax'], 'cim:PU', 'cim:GovHydro3.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pmax'], 'cim:PU', 'cim:GovHydro3.pmax');
        }
        if ('cim:GovHydro3.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pmin'], 'cim:PU', 'cim:GovHydro3.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pmin'], 'cim:PU', 'cim:GovHydro3.pmin');
        }
        if ('cim:GovHydro3.governorControl' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.governorControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.governorControl'], 'cim:Boolean', 'cim:GovHydro3.governorControl');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.governorControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.governorControl'], 'cim:Boolean', 'cim:GovHydro3.governorControl');
        }
        if ('cim:GovHydro3.rgate' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.rgate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.rgate'], 'cim:PU', 'cim:GovHydro3.rgate');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.rgate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.rgate'], 'cim:PU', 'cim:GovHydro3.rgate');
        }
        if ('cim:GovHydro3.relec' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.relec'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.relec'], 'cim:PU', 'cim:GovHydro3.relec');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.relec'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.relec'], 'cim:PU', 'cim:GovHydro3.relec');
        }
        if ('cim:GovHydro3.td' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.td'], 'cim:Seconds', 'cim:GovHydro3.td');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.td'], 'cim:Seconds', 'cim:GovHydro3.td');
        }
        if ('cim:GovHydro3.tf' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.tf'], 'cim:Seconds', 'cim:GovHydro3.tf');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.tf'], 'cim:Seconds', 'cim:GovHydro3.tf');
        }
        if ('cim:GovHydro3.tp' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.tp'], 'cim:Seconds', 'cim:GovHydro3.tp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.tp'], 'cim:Seconds', 'cim:GovHydro3.tp');
        }
        if ('cim:GovHydro3.velop' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.velop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.velop'], 'cim:Simple_Float', 'cim:GovHydro3.velop');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.velop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.velop'], 'cim:Simple_Float', 'cim:GovHydro3.velop');
        }
        if ('cim:GovHydro3.velcl' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.velcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.velcl'], 'cim:Simple_Float', 'cim:GovHydro3.velcl');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.velcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.velcl'], 'cim:Simple_Float', 'cim:GovHydro3.velcl');
        }
        if ('cim:GovHydro3.k1' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.k1'], 'cim:PU', 'cim:GovHydro3.k1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.k1'], 'cim:PU', 'cim:GovHydro3.k1');
        }
        if ('cim:GovHydro3.k2' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.k2'], 'cim:PU', 'cim:GovHydro3.k2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.k2'], 'cim:PU', 'cim:GovHydro3.k2');
        }
        if ('cim:GovHydro3.ki' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.ki'], 'cim:PU', 'cim:GovHydro3.ki');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.ki'], 'cim:PU', 'cim:GovHydro3.ki');
        }
        if ('cim:GovHydro3.kg' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.kg'], 'cim:PU', 'cim:GovHydro3.kg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.kg'], 'cim:PU', 'cim:GovHydro3.kg');
        }
        if ('cim:GovHydro3.tt' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.tt'], 'cim:Seconds', 'cim:GovHydro3.tt');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.tt'], 'cim:Seconds', 'cim:GovHydro3.tt');
        }
        if ('cim:GovHydro3.db1' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.db1'], 'cim:Frequency', 'cim:GovHydro3.db1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.db1'], 'cim:Frequency', 'cim:GovHydro3.db1');
        }
        if ('cim:GovHydro3.eps' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.eps'], 'cim:Frequency', 'cim:GovHydro3.eps');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.eps'], 'cim:Frequency', 'cim:GovHydro3.eps');
        }
        if ('cim:GovHydro3.db2' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.db2'], 'cim:ActivePower', 'cim:GovHydro3.db2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.db2'], 'cim:ActivePower', 'cim:GovHydro3.db2');
        }
        if ('cim:GovHydro3.tw' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.tw'], 'cim:Seconds', 'cim:GovHydro3.tw');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.tw'], 'cim:Seconds', 'cim:GovHydro3.tw');
        }
        if ('cim:GovHydro3.at' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.at'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.at'], 'cim:PU', 'cim:GovHydro3.at');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.at'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.at'], 'cim:PU', 'cim:GovHydro3.at');
        }
        if ('cim:GovHydro3.dturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.dturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.dturb'], 'cim:PU', 'cim:GovHydro3.dturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.dturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.dturb'], 'cim:PU', 'cim:GovHydro3.dturb');
        }
        if ('cim:GovHydro3.qnl' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.qnl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.qnl'], 'cim:PU', 'cim:GovHydro3.qnl');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.qnl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.qnl'], 'cim:PU', 'cim:GovHydro3.qnl');
        }
        if ('cim:GovHydro3.h0' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.h0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.h0'], 'cim:PU', 'cim:GovHydro3.h0');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.h0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.h0'], 'cim:PU', 'cim:GovHydro3.h0');
        }
        if ('cim:GovHydro3.gv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.gv1'], 'cim:PU', 'cim:GovHydro3.gv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.gv1'], 'cim:PU', 'cim:GovHydro3.gv1');
        }
        if ('cim:GovHydro3.pgv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pgv1'], 'cim:PU', 'cim:GovHydro3.pgv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pgv1'], 'cim:PU', 'cim:GovHydro3.pgv1');
        }
        if ('cim:GovHydro3.gv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.gv2'], 'cim:PU', 'cim:GovHydro3.gv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.gv2'], 'cim:PU', 'cim:GovHydro3.gv2');
        }
        if ('cim:GovHydro3.pgv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pgv2'], 'cim:PU', 'cim:GovHydro3.pgv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pgv2'], 'cim:PU', 'cim:GovHydro3.pgv2');
        }
        if ('cim:GovHydro3.gv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.gv3'], 'cim:PU', 'cim:GovHydro3.gv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.gv3'], 'cim:PU', 'cim:GovHydro3.gv3');
        }
        if ('cim:GovHydro3.pgv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pgv3'], 'cim:PU', 'cim:GovHydro3.pgv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pgv3'], 'cim:PU', 'cim:GovHydro3.pgv3');
        }
        if ('cim:GovHydro3.gv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.gv4'], 'cim:PU', 'cim:GovHydro3.gv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.gv4'], 'cim:PU', 'cim:GovHydro3.gv4');
        }
        if ('cim:GovHydro3.pgv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pgv4'], 'cim:PU', 'cim:GovHydro3.pgv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pgv4'], 'cim:PU', 'cim:GovHydro3.pgv4');
        }
        if ('cim:GovHydro3.gv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.gv5'], 'cim:PU', 'cim:GovHydro3.gv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.gv5'], 'cim:PU', 'cim:GovHydro3.gv5');
        }
        if ('cim:GovHydro3.pgv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pgv5'], 'cim:PU', 'cim:GovHydro3.pgv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pgv5'], 'cim:PU', 'cim:GovHydro3.pgv5');
        }
        if ('cim:GovHydro3.gv6' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.gv6'], 'cim:PU', 'cim:GovHydro3.gv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.gv6'], 'cim:PU', 'cim:GovHydro3.gv6');
        }
        if ('cim:GovHydro3.pgv6' in object) {
          attributeEntries['filledEntries']['cim:GovHydro3.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pgv6'], 'cim:PU', 'cim:GovHydro3.pgv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro3.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro3.pgv6'], 'cim:PU', 'cim:GovHydro3.pgv6');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydro3.mwbase", "cim:GovHydro3.pmax", "cim:GovHydro3.pmin", "cim:GovHydro3.governorControl", "cim:GovHydro3.rgate", "cim:GovHydro3.relec", "cim:GovHydro3.td", "cim:GovHydro3.tf", "cim:GovHydro3.tp", "cim:GovHydro3.velop", "cim:GovHydro3.velcl", "cim:GovHydro3.k1", "cim:GovHydro3.k2", "cim:GovHydro3.ki", "cim:GovHydro3.kg", "cim:GovHydro3.tt", "cim:GovHydro3.db1", "cim:GovHydro3.eps", "cim:GovHydro3.db2", "cim:GovHydro3.tw", "cim:GovHydro3.at", "cim:GovHydro3.dturb", "cim:GovHydro3.qnl", "cim:GovHydro3.h0", "cim:GovHydro3.gv1", "cim:GovHydro3.pgv1", "cim:GovHydro3.gv2", "cim:GovHydro3.pgv2", "cim:GovHydro3.gv3", "cim:GovHydro3.pgv3", "cim:GovHydro3.gv4", "cim:GovHydro3.pgv4", "cim:GovHydro3.gv5", "cim:GovHydro3.pgv5", "cim:GovHydro3.gv6", "cim:GovHydro3.pgv6"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydro3.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydro3: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydro3.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydro3;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydro3, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    'governorControl': [CGMESProfile.shortNames.DY],
    'rgate': [CGMESProfile.shortNames.DY],
    'relec': [CGMESProfile.shortNames.DY],
    'td': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    'velop': [CGMESProfile.shortNames.DY],
    'velcl': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kg': [CGMESProfile.shortNames.DY],
    'tt': [CGMESProfile.shortNames.DY],
    'db1': [CGMESProfile.shortNames.DY],
    'eps': [CGMESProfile.shortNames.DY],
    'db2': [CGMESProfile.shortNames.DY],
    'tw': [CGMESProfile.shortNames.DY],
    'at': [CGMESProfile.shortNames.DY],
    'dturb': [CGMESProfile.shortNames.DY],
    'qnl': [CGMESProfile.shortNames.DY],
    'h0': [CGMESProfile.shortNames.DY],
    'gv1': [CGMESProfile.shortNames.DY],
    'pgv1': [CGMESProfile.shortNames.DY],
    'gv2': [CGMESProfile.shortNames.DY],
    'pgv2': [CGMESProfile.shortNames.DY],
    'gv3': [CGMESProfile.shortNames.DY],
    'pgv3': [CGMESProfile.shortNames.DY],
    'gv4': [CGMESProfile.shortNames.DY],
    'pgv4': [CGMESProfile.shortNames.DY],
    'gv5': [CGMESProfile.shortNames.DY],
    'pgv5': [CGMESProfile.shortNames.DY],
    'gv6': [CGMESProfile.shortNames.DY],
    'pgv6': [CGMESProfile.shortNames.DY]
  });

  var GovHydro4 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydro4, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydro4);
    function GovHydro4() {
      _classCallCheck(this, GovHydro4);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydro4, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydro4";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydro4.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.mwbase'], 'cim:ActivePower', 'cim:GovHydro4.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.mwbase'], 'cim:ActivePower', 'cim:GovHydro4.mwbase');
        }
        if ('cim:GovHydro4.tg' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.tg'], 'cim:Seconds', 'cim:GovHydro4.tg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.tg'], 'cim:Seconds', 'cim:GovHydro4.tg');
        }
        if ('cim:GovHydro4.tp' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.tp'], 'cim:Seconds', 'cim:GovHydro4.tp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.tp'], 'cim:Seconds', 'cim:GovHydro4.tp');
        }
        if ('cim:GovHydro4.uo' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.uo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.uo'], 'cim:Simple_Float', 'cim:GovHydro4.uo');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.uo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.uo'], 'cim:Simple_Float', 'cim:GovHydro4.uo');
        }
        if ('cim:GovHydro4.uc' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.uc'], 'cim:Simple_Float', 'cim:GovHydro4.uc');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.uc'], 'cim:Simple_Float', 'cim:GovHydro4.uc');
        }
        if ('cim:GovHydro4.gmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.gmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gmax'], 'cim:PU', 'cim:GovHydro4.gmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.gmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gmax'], 'cim:PU', 'cim:GovHydro4.gmax');
        }
        if ('cim:GovHydro4.gmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.gmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gmin'], 'cim:PU', 'cim:GovHydro4.gmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.gmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gmin'], 'cim:PU', 'cim:GovHydro4.gmin');
        }
        if ('cim:GovHydro4.rperm' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.rperm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.rperm'], 'cim:Seconds', 'cim:GovHydro4.rperm');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.rperm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.rperm'], 'cim:Seconds', 'cim:GovHydro4.rperm');
        }
        if ('cim:GovHydro4.rtemp' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.rtemp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.rtemp'], 'cim:Seconds', 'cim:GovHydro4.rtemp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.rtemp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.rtemp'], 'cim:Seconds', 'cim:GovHydro4.rtemp');
        }
        if ('cim:GovHydro4.tr' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.tr'], 'cim:Seconds', 'cim:GovHydro4.tr');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.tr'], 'cim:Seconds', 'cim:GovHydro4.tr');
        }
        if ('cim:GovHydro4.tw' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.tw'], 'cim:Seconds', 'cim:GovHydro4.tw');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.tw'], 'cim:Seconds', 'cim:GovHydro4.tw');
        }
        if ('cim:GovHydro4.at' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.at'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.at'], 'cim:PU', 'cim:GovHydro4.at');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.at'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.at'], 'cim:PU', 'cim:GovHydro4.at');
        }
        if ('cim:GovHydro4.dturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.dturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.dturb'], 'cim:PU', 'cim:GovHydro4.dturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.dturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.dturb'], 'cim:PU', 'cim:GovHydro4.dturb');
        }
        if ('cim:GovHydro4.hdam' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.hdam'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.hdam'], 'cim:PU', 'cim:GovHydro4.hdam');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.hdam'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.hdam'], 'cim:PU', 'cim:GovHydro4.hdam');
        }
        if ('cim:GovHydro4.qn1' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.qn1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.qn1'], 'cim:PU', 'cim:GovHydro4.qn1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.qn1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.qn1'], 'cim:PU', 'cim:GovHydro4.qn1');
        }
        if ('cim:GovHydro4.db1' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.db1'], 'cim:Frequency', 'cim:GovHydro4.db1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.db1'], 'cim:Frequency', 'cim:GovHydro4.db1');
        }
        if ('cim:GovHydro4.eps' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.eps'], 'cim:Frequency', 'cim:GovHydro4.eps');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.eps'], 'cim:Frequency', 'cim:GovHydro4.eps');
        }
        if ('cim:GovHydro4.db2' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.db2'], 'cim:ActivePower', 'cim:GovHydro4.db2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.db2'], 'cim:ActivePower', 'cim:GovHydro4.db2');
        }
        if ('cim:GovHydro4.gv0' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.gv0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gv0'], 'cim:PU', 'cim:GovHydro4.gv0');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.gv0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gv0'], 'cim:PU', 'cim:GovHydro4.gv0');
        }
        if ('cim:GovHydro4.pgv0' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.pgv0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.pgv0'], 'cim:PU', 'cim:GovHydro4.pgv0');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.pgv0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.pgv0'], 'cim:PU', 'cim:GovHydro4.pgv0');
        }
        if ('cim:GovHydro4.gv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gv1'], 'cim:PU', 'cim:GovHydro4.gv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gv1'], 'cim:PU', 'cim:GovHydro4.gv1');
        }
        if ('cim:GovHydro4.pgv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.pgv1'], 'cim:PU', 'cim:GovHydro4.pgv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.pgv1'], 'cim:PU', 'cim:GovHydro4.pgv1');
        }
        if ('cim:GovHydro4.gv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gv2'], 'cim:PU', 'cim:GovHydro4.gv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gv2'], 'cim:PU', 'cim:GovHydro4.gv2');
        }
        if ('cim:GovHydro4.pgv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.pgv2'], 'cim:PU', 'cim:GovHydro4.pgv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.pgv2'], 'cim:PU', 'cim:GovHydro4.pgv2');
        }
        if ('cim:GovHydro4.gv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gv3'], 'cim:PU', 'cim:GovHydro4.gv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gv3'], 'cim:PU', 'cim:GovHydro4.gv3');
        }
        if ('cim:GovHydro4.pgv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.pgv3'], 'cim:PU', 'cim:GovHydro4.pgv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.pgv3'], 'cim:PU', 'cim:GovHydro4.pgv3');
        }
        if ('cim:GovHydro4.gv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gv4'], 'cim:PU', 'cim:GovHydro4.gv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gv4'], 'cim:PU', 'cim:GovHydro4.gv4');
        }
        if ('cim:GovHydro4.pgv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.pgv4'], 'cim:PU', 'cim:GovHydro4.pgv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.pgv4'], 'cim:PU', 'cim:GovHydro4.pgv4');
        }
        if ('cim:GovHydro4.gv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gv5'], 'cim:PU', 'cim:GovHydro4.gv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.gv5'], 'cim:PU', 'cim:GovHydro4.gv5');
        }
        if ('cim:GovHydro4.pgv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.pgv5'], 'cim:PU', 'cim:GovHydro4.pgv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.pgv5'], 'cim:PU', 'cim:GovHydro4.pgv5');
        }
        if ('cim:GovHydro4.bgv0' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.bgv0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bgv0'], 'cim:PU', 'cim:GovHydro4.bgv0');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.bgv0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bgv0'], 'cim:PU', 'cim:GovHydro4.bgv0');
        }
        if ('cim:GovHydro4.bgv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.bgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bgv1'], 'cim:PU', 'cim:GovHydro4.bgv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.bgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bgv1'], 'cim:PU', 'cim:GovHydro4.bgv1');
        }
        if ('cim:GovHydro4.bgv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.bgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bgv2'], 'cim:PU', 'cim:GovHydro4.bgv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.bgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bgv2'], 'cim:PU', 'cim:GovHydro4.bgv2');
        }
        if ('cim:GovHydro4.bgv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.bgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bgv3'], 'cim:PU', 'cim:GovHydro4.bgv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.bgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bgv3'], 'cim:PU', 'cim:GovHydro4.bgv3');
        }
        if ('cim:GovHydro4.bgv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.bgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bgv4'], 'cim:PU', 'cim:GovHydro4.bgv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.bgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bgv4'], 'cim:PU', 'cim:GovHydro4.bgv4');
        }
        if ('cim:GovHydro4.bgv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.bgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bgv5'], 'cim:PU', 'cim:GovHydro4.bgv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.bgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bgv5'], 'cim:PU', 'cim:GovHydro4.bgv5');
        }
        if ('cim:GovHydro4.bmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.bmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bmax'], 'cim:Simple_Float', 'cim:GovHydro4.bmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.bmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.bmax'], 'cim:Simple_Float', 'cim:GovHydro4.bmax');
        }
        if ('cim:GovHydro4.tblade' in object) {
          attributeEntries['filledEntries']['cim:GovHydro4.tblade'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.tblade'], 'cim:Seconds', 'cim:GovHydro4.tblade');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydro4.tblade'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydro4.tblade'], 'cim:Seconds', 'cim:GovHydro4.tblade');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydro4.mwbase", "cim:GovHydro4.tg", "cim:GovHydro4.tp", "cim:GovHydro4.uo", "cim:GovHydro4.uc", "cim:GovHydro4.gmax", "cim:GovHydro4.gmin", "cim:GovHydro4.rperm", "cim:GovHydro4.rtemp", "cim:GovHydro4.tr", "cim:GovHydro4.tw", "cim:GovHydro4.at", "cim:GovHydro4.dturb", "cim:GovHydro4.hdam", "cim:GovHydro4.qn1", "cim:GovHydro4.db1", "cim:GovHydro4.eps", "cim:GovHydro4.db2", "cim:GovHydro4.gv0", "cim:GovHydro4.pgv0", "cim:GovHydro4.gv1", "cim:GovHydro4.pgv1", "cim:GovHydro4.gv2", "cim:GovHydro4.pgv2", "cim:GovHydro4.gv3", "cim:GovHydro4.pgv3", "cim:GovHydro4.gv4", "cim:GovHydro4.pgv4", "cim:GovHydro4.gv5", "cim:GovHydro4.pgv5", "cim:GovHydro4.bgv0", "cim:GovHydro4.bgv1", "cim:GovHydro4.bgv2", "cim:GovHydro4.bgv3", "cim:GovHydro4.bgv4", "cim:GovHydro4.bgv5", "cim:GovHydro4.bmax", "cim:GovHydro4.tblade"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydro4.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydro4: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydro4.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydro4;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydro4, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'tg': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    'uo': [CGMESProfile.shortNames.DY],
    'uc': [CGMESProfile.shortNames.DY],
    'gmax': [CGMESProfile.shortNames.DY],
    'gmin': [CGMESProfile.shortNames.DY],
    'rperm': [CGMESProfile.shortNames.DY],
    'rtemp': [CGMESProfile.shortNames.DY],
    'tr': [CGMESProfile.shortNames.DY],
    'tw': [CGMESProfile.shortNames.DY],
    'at': [CGMESProfile.shortNames.DY],
    'dturb': [CGMESProfile.shortNames.DY],
    'hdam': [CGMESProfile.shortNames.DY],
    'qn1': [CGMESProfile.shortNames.DY],
    'db1': [CGMESProfile.shortNames.DY],
    'eps': [CGMESProfile.shortNames.DY],
    'db2': [CGMESProfile.shortNames.DY],
    'gv0': [CGMESProfile.shortNames.DY],
    'pgv0': [CGMESProfile.shortNames.DY],
    'gv1': [CGMESProfile.shortNames.DY],
    'pgv1': [CGMESProfile.shortNames.DY],
    'gv2': [CGMESProfile.shortNames.DY],
    'pgv2': [CGMESProfile.shortNames.DY],
    'gv3': [CGMESProfile.shortNames.DY],
    'pgv3': [CGMESProfile.shortNames.DY],
    'gv4': [CGMESProfile.shortNames.DY],
    'pgv4': [CGMESProfile.shortNames.DY],
    'gv5': [CGMESProfile.shortNames.DY],
    'pgv5': [CGMESProfile.shortNames.DY],
    'bgv0': [CGMESProfile.shortNames.DY],
    'bgv1': [CGMESProfile.shortNames.DY],
    'bgv2': [CGMESProfile.shortNames.DY],
    'bgv3': [CGMESProfile.shortNames.DY],
    'bgv4': [CGMESProfile.shortNames.DY],
    'bgv5': [CGMESProfile.shortNames.DY],
    'bmax': [CGMESProfile.shortNames.DY],
    'tblade': [CGMESProfile.shortNames.DY]
  });

  var GovHydroDD = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydroDD, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydroDD);
    function GovHydroDD() {
      _classCallCheck(this, GovHydroDD);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydroDD, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydroDD";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydroDD.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.mwbase'], 'cim:ActivePower', 'cim:GovHydroDD.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.mwbase'], 'cim:ActivePower', 'cim:GovHydroDD.mwbase');
        }
        if ('cim:GovHydroDD.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pmax'], 'cim:PU', 'cim:GovHydroDD.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pmax'], 'cim:PU', 'cim:GovHydroDD.pmax');
        }
        if ('cim:GovHydroDD.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pmin'], 'cim:PU', 'cim:GovHydroDD.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pmin'], 'cim:PU', 'cim:GovHydroDD.pmin');
        }
        if ('cim:GovHydroDD.r' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.r'], 'cim:PU', 'cim:GovHydroDD.r');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.r'], 'cim:PU', 'cim:GovHydroDD.r');
        }
        if ('cim:GovHydroDD.td' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.td'], 'cim:Seconds', 'cim:GovHydroDD.td');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.td'], 'cim:Seconds', 'cim:GovHydroDD.td');
        }
        if ('cim:GovHydroDD.tf' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.tf'], 'cim:Seconds', 'cim:GovHydroDD.tf');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.tf'], 'cim:Seconds', 'cim:GovHydroDD.tf');
        }
        if ('cim:GovHydroDD.tp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.tp'], 'cim:Seconds', 'cim:GovHydroDD.tp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.tp'], 'cim:Seconds', 'cim:GovHydroDD.tp');
        }
        if ('cim:GovHydroDD.velop' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.velop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.velop'], 'cim:Simple_Float', 'cim:GovHydroDD.velop');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.velop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.velop'], 'cim:Simple_Float', 'cim:GovHydroDD.velop');
        }
        if ('cim:GovHydroDD.velcl' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.velcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.velcl'], 'cim:Simple_Float', 'cim:GovHydroDD.velcl');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.velcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.velcl'], 'cim:Simple_Float', 'cim:GovHydroDD.velcl');
        }
        if ('cim:GovHydroDD.k1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.k1'], 'cim:PU', 'cim:GovHydroDD.k1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.k1'], 'cim:PU', 'cim:GovHydroDD.k1');
        }
        if ('cim:GovHydroDD.k2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.k2'], 'cim:PU', 'cim:GovHydroDD.k2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.k2'], 'cim:PU', 'cim:GovHydroDD.k2');
        }
        if ('cim:GovHydroDD.ki' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.ki'], 'cim:PU', 'cim:GovHydroDD.ki');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.ki'], 'cim:PU', 'cim:GovHydroDD.ki');
        }
        if ('cim:GovHydroDD.kg' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.kg'], 'cim:PU', 'cim:GovHydroDD.kg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.kg'], 'cim:PU', 'cim:GovHydroDD.kg');
        }
        if ('cim:GovHydroDD.tturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.tturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.tturb'], 'cim:Seconds', 'cim:GovHydroDD.tturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.tturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.tturb'], 'cim:Seconds', 'cim:GovHydroDD.tturb');
        }
        if ('cim:GovHydroDD.aturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.aturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.aturb'], 'cim:PU', 'cim:GovHydroDD.aturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.aturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.aturb'], 'cim:PU', 'cim:GovHydroDD.aturb');
        }
        if ('cim:GovHydroDD.bturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.bturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.bturb'], 'cim:PU', 'cim:GovHydroDD.bturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.bturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.bturb'], 'cim:PU', 'cim:GovHydroDD.bturb');
        }
        if ('cim:GovHydroDD.tt' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.tt'], 'cim:Seconds', 'cim:GovHydroDD.tt');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.tt'], 'cim:Seconds', 'cim:GovHydroDD.tt');
        }
        if ('cim:GovHydroDD.db1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.db1'], 'cim:Frequency', 'cim:GovHydroDD.db1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.db1'], 'cim:Frequency', 'cim:GovHydroDD.db1');
        }
        if ('cim:GovHydroDD.eps' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.eps'], 'cim:Frequency', 'cim:GovHydroDD.eps');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.eps'], 'cim:Frequency', 'cim:GovHydroDD.eps');
        }
        if ('cim:GovHydroDD.db2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.db2'], 'cim:ActivePower', 'cim:GovHydroDD.db2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.db2'], 'cim:ActivePower', 'cim:GovHydroDD.db2');
        }
        if ('cim:GovHydroDD.gv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gv1'], 'cim:PU', 'cim:GovHydroDD.gv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gv1'], 'cim:PU', 'cim:GovHydroDD.gv1');
        }
        if ('cim:GovHydroDD.pgv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pgv1'], 'cim:PU', 'cim:GovHydroDD.pgv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pgv1'], 'cim:PU', 'cim:GovHydroDD.pgv1');
        }
        if ('cim:GovHydroDD.gv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gv2'], 'cim:PU', 'cim:GovHydroDD.gv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gv2'], 'cim:PU', 'cim:GovHydroDD.gv2');
        }
        if ('cim:GovHydroDD.pgv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pgv2'], 'cim:PU', 'cim:GovHydroDD.pgv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pgv2'], 'cim:PU', 'cim:GovHydroDD.pgv2');
        }
        if ('cim:GovHydroDD.gv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gv3'], 'cim:PU', 'cim:GovHydroDD.gv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gv3'], 'cim:PU', 'cim:GovHydroDD.gv3');
        }
        if ('cim:GovHydroDD.pgv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pgv3'], 'cim:PU', 'cim:GovHydroDD.pgv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pgv3'], 'cim:PU', 'cim:GovHydroDD.pgv3');
        }
        if ('cim:GovHydroDD.gv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gv4'], 'cim:PU', 'cim:GovHydroDD.gv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gv4'], 'cim:PU', 'cim:GovHydroDD.gv4');
        }
        if ('cim:GovHydroDD.pgv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pgv4'], 'cim:PU', 'cim:GovHydroDD.pgv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pgv4'], 'cim:PU', 'cim:GovHydroDD.pgv4');
        }
        if ('cim:GovHydroDD.gv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gv5'], 'cim:PU', 'cim:GovHydroDD.gv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gv5'], 'cim:PU', 'cim:GovHydroDD.gv5');
        }
        if ('cim:GovHydroDD.pgv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pgv5'], 'cim:PU', 'cim:GovHydroDD.pgv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pgv5'], 'cim:PU', 'cim:GovHydroDD.pgv5');
        }
        if ('cim:GovHydroDD.gv6' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gv6'], 'cim:PU', 'cim:GovHydroDD.gv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gv6'], 'cim:PU', 'cim:GovHydroDD.gv6');
        }
        if ('cim:GovHydroDD.pgv6' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pgv6'], 'cim:PU', 'cim:GovHydroDD.pgv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.pgv6'], 'cim:PU', 'cim:GovHydroDD.pgv6');
        }
        if ('cim:GovHydroDD.gmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.gmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gmax'], 'cim:PU', 'cim:GovHydroDD.gmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.gmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gmax'], 'cim:PU', 'cim:GovHydroDD.gmax');
        }
        if ('cim:GovHydroDD.gmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.gmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gmin'], 'cim:PU', 'cim:GovHydroDD.gmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.gmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.gmin'], 'cim:PU', 'cim:GovHydroDD.gmin');
        }
        if ('cim:GovHydroDD.inputSignal' in object) {
          attributeEntries['filledEntries']['cim:GovHydroDD.inputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.inputSignal'], 'cim:Boolean', 'cim:GovHydroDD.inputSignal');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroDD.inputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroDD.inputSignal'], 'cim:Boolean', 'cim:GovHydroDD.inputSignal');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydroDD.mwbase", "cim:GovHydroDD.pmax", "cim:GovHydroDD.pmin", "cim:GovHydroDD.r", "cim:GovHydroDD.td", "cim:GovHydroDD.tf", "cim:GovHydroDD.tp", "cim:GovHydroDD.velop", "cim:GovHydroDD.velcl", "cim:GovHydroDD.k1", "cim:GovHydroDD.k2", "cim:GovHydroDD.ki", "cim:GovHydroDD.kg", "cim:GovHydroDD.tturb", "cim:GovHydroDD.aturb", "cim:GovHydroDD.bturb", "cim:GovHydroDD.tt", "cim:GovHydroDD.db1", "cim:GovHydroDD.eps", "cim:GovHydroDD.db2", "cim:GovHydroDD.gv1", "cim:GovHydroDD.pgv1", "cim:GovHydroDD.gv2", "cim:GovHydroDD.pgv2", "cim:GovHydroDD.gv3", "cim:GovHydroDD.pgv3", "cim:GovHydroDD.gv4", "cim:GovHydroDD.pgv4", "cim:GovHydroDD.gv5", "cim:GovHydroDD.pgv5", "cim:GovHydroDD.gv6", "cim:GovHydroDD.pgv6", "cim:GovHydroDD.gmax", "cim:GovHydroDD.gmin", "cim:GovHydroDD.inputSignal"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydroDD.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydroDD: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydroDD.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydroDD;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydroDD, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    'r': [CGMESProfile.shortNames.DY],
    'td': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    'velop': [CGMESProfile.shortNames.DY],
    'velcl': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kg': [CGMESProfile.shortNames.DY],
    'tturb': [CGMESProfile.shortNames.DY],
    'aturb': [CGMESProfile.shortNames.DY],
    'bturb': [CGMESProfile.shortNames.DY],
    'tt': [CGMESProfile.shortNames.DY],
    'db1': [CGMESProfile.shortNames.DY],
    'eps': [CGMESProfile.shortNames.DY],
    'db2': [CGMESProfile.shortNames.DY],
    'gv1': [CGMESProfile.shortNames.DY],
    'pgv1': [CGMESProfile.shortNames.DY],
    'gv2': [CGMESProfile.shortNames.DY],
    'pgv2': [CGMESProfile.shortNames.DY],
    'gv3': [CGMESProfile.shortNames.DY],
    'pgv3': [CGMESProfile.shortNames.DY],
    'gv4': [CGMESProfile.shortNames.DY],
    'pgv4': [CGMESProfile.shortNames.DY],
    'gv5': [CGMESProfile.shortNames.DY],
    'pgv5': [CGMESProfile.shortNames.DY],
    'gv6': [CGMESProfile.shortNames.DY],
    'pgv6': [CGMESProfile.shortNames.DY],
    'gmax': [CGMESProfile.shortNames.DY],
    'gmin': [CGMESProfile.shortNames.DY],
    'inputSignal': [CGMESProfile.shortNames.DY]
  });

  var GovHydroFrancis = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydroFrancis, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydroFrancis);
    function GovHydroFrancis() {
      _classCallCheck(this, GovHydroFrancis);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydroFrancis, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydroFrancis";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydroFrancis.am' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.am'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.am'], 'cim:PU', 'cim:GovHydroFrancis.am');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.am'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.am'], 'cim:PU', 'cim:GovHydroFrancis.am');
        }
        if ('cim:GovHydroFrancis.av0' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.av0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.av0'], 'cim:Area', 'cim:GovHydroFrancis.av0');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.av0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.av0'], 'cim:Area', 'cim:GovHydroFrancis.av0');
        }
        if ('cim:GovHydroFrancis.av1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.av1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.av1'], 'cim:Area', 'cim:GovHydroFrancis.av1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.av1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.av1'], 'cim:Area', 'cim:GovHydroFrancis.av1');
        }
        if ('cim:GovHydroFrancis.bp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.bp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.bp'], 'cim:PU', 'cim:GovHydroFrancis.bp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.bp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.bp'], 'cim:PU', 'cim:GovHydroFrancis.bp');
        }
        if ('cim:GovHydroFrancis.db1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.db1'], 'cim:Frequency', 'cim:GovHydroFrancis.db1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.db1'], 'cim:Frequency', 'cim:GovHydroFrancis.db1');
        }
        if ('cim:GovHydroFrancis.etamax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.etamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.etamax'], 'cim:PU', 'cim:GovHydroFrancis.etamax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.etamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.etamax'], 'cim:PU', 'cim:GovHydroFrancis.etamax');
        }
        if ('cim:GovHydroFrancis.governorControl' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.governorControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.governorControl'], 'cim:FrancisGovernorControlKind', 'cim:GovHydroFrancis.governorControl');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.governorControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.governorControl'], 'cim:FrancisGovernorControlKind', 'cim:GovHydroFrancis.governorControl');
        }
        if ('cim:GovHydroFrancis.h1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.h1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.h1'], 'cim:Length', 'cim:GovHydroFrancis.h1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.h1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.h1'], 'cim:Length', 'cim:GovHydroFrancis.h1');
        }
        if ('cim:GovHydroFrancis.h2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.h2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.h2'], 'cim:Length', 'cim:GovHydroFrancis.h2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.h2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.h2'], 'cim:Length', 'cim:GovHydroFrancis.h2');
        }
        if ('cim:GovHydroFrancis.hn' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.hn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.hn'], 'cim:Length', 'cim:GovHydroFrancis.hn');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.hn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.hn'], 'cim:Length', 'cim:GovHydroFrancis.hn');
        }
        if ('cim:GovHydroFrancis.kc' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.kc'], 'cim:PU', 'cim:GovHydroFrancis.kc');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.kc'], 'cim:PU', 'cim:GovHydroFrancis.kc');
        }
        if ('cim:GovHydroFrancis.kg' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.kg'], 'cim:PU', 'cim:GovHydroFrancis.kg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.kg'], 'cim:PU', 'cim:GovHydroFrancis.kg');
        }
        if ('cim:GovHydroFrancis.kt' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.kt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.kt'], 'cim:PU', 'cim:GovHydroFrancis.kt');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.kt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.kt'], 'cim:PU', 'cim:GovHydroFrancis.kt');
        }
        if ('cim:GovHydroFrancis.qc0' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.qc0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.qc0'], 'cim:PU', 'cim:GovHydroFrancis.qc0');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.qc0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.qc0'], 'cim:PU', 'cim:GovHydroFrancis.qc0');
        }
        if ('cim:GovHydroFrancis.qn' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.qn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.qn'], 'cim:VolumeFlowRate', 'cim:GovHydroFrancis.qn');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.qn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.qn'], 'cim:VolumeFlowRate', 'cim:GovHydroFrancis.qn');
        }
        if ('cim:GovHydroFrancis.ta' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.ta'], 'cim:Seconds', 'cim:GovHydroFrancis.ta');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.ta'], 'cim:Seconds', 'cim:GovHydroFrancis.ta');
        }
        if ('cim:GovHydroFrancis.td' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.td'], 'cim:Seconds', 'cim:GovHydroFrancis.td');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.td'], 'cim:Seconds', 'cim:GovHydroFrancis.td');
        }
        if ('cim:GovHydroFrancis.ts' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.ts'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.ts'], 'cim:Seconds', 'cim:GovHydroFrancis.ts');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.ts'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.ts'], 'cim:Seconds', 'cim:GovHydroFrancis.ts');
        }
        if ('cim:GovHydroFrancis.twnc' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.twnc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.twnc'], 'cim:Seconds', 'cim:GovHydroFrancis.twnc');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.twnc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.twnc'], 'cim:Seconds', 'cim:GovHydroFrancis.twnc');
        }
        if ('cim:GovHydroFrancis.twng' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.twng'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.twng'], 'cim:Seconds', 'cim:GovHydroFrancis.twng');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.twng'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.twng'], 'cim:Seconds', 'cim:GovHydroFrancis.twng');
        }
        if ('cim:GovHydroFrancis.tx' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.tx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.tx'], 'cim:Seconds', 'cim:GovHydroFrancis.tx');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.tx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.tx'], 'cim:Seconds', 'cim:GovHydroFrancis.tx');
        }
        if ('cim:GovHydroFrancis.va' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.va'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.va'], 'cim:Simple_Float', 'cim:GovHydroFrancis.va');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.va'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.va'], 'cim:Simple_Float', 'cim:GovHydroFrancis.va');
        }
        if ('cim:GovHydroFrancis.valvmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.valvmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.valvmax'], 'cim:PU', 'cim:GovHydroFrancis.valvmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.valvmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.valvmax'], 'cim:PU', 'cim:GovHydroFrancis.valvmax');
        }
        if ('cim:GovHydroFrancis.valvmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.valvmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.valvmin'], 'cim:PU', 'cim:GovHydroFrancis.valvmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.valvmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.valvmin'], 'cim:PU', 'cim:GovHydroFrancis.valvmin');
        }
        if ('cim:GovHydroFrancis.vc' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.vc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.vc'], 'cim:Simple_Float', 'cim:GovHydroFrancis.vc');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.vc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.vc'], 'cim:Simple_Float', 'cim:GovHydroFrancis.vc');
        }
        if ('cim:GovHydroFrancis.waterTunnelSurgeChamberSimulation' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.waterTunnelSurgeChamberSimulation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.waterTunnelSurgeChamberSimulation'], 'cim:Boolean', 'cim:GovHydroFrancis.waterTunnelSurgeChamberSimulation');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.waterTunnelSurgeChamberSimulation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.waterTunnelSurgeChamberSimulation'], 'cim:Boolean', 'cim:GovHydroFrancis.waterTunnelSurgeChamberSimulation');
        }
        if ('cim:GovHydroFrancis.zsfc' in object) {
          attributeEntries['filledEntries']['cim:GovHydroFrancis.zsfc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.zsfc'], 'cim:Length', 'cim:GovHydroFrancis.zsfc');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroFrancis.zsfc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroFrancis.zsfc'], 'cim:Length', 'cim:GovHydroFrancis.zsfc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydroFrancis.am", "cim:GovHydroFrancis.av0", "cim:GovHydroFrancis.av1", "cim:GovHydroFrancis.bp", "cim:GovHydroFrancis.db1", "cim:GovHydroFrancis.etamax", "cim:GovHydroFrancis.governorControl", "cim:GovHydroFrancis.h1", "cim:GovHydroFrancis.h2", "cim:GovHydroFrancis.hn", "cim:GovHydroFrancis.kc", "cim:GovHydroFrancis.kg", "cim:GovHydroFrancis.kt", "cim:GovHydroFrancis.qc0", "cim:GovHydroFrancis.qn", "cim:GovHydroFrancis.ta", "cim:GovHydroFrancis.td", "cim:GovHydroFrancis.ts", "cim:GovHydroFrancis.twnc", "cim:GovHydroFrancis.twng", "cim:GovHydroFrancis.tx", "cim:GovHydroFrancis.va", "cim:GovHydroFrancis.valvmax", "cim:GovHydroFrancis.valvmin", "cim:GovHydroFrancis.vc", "cim:GovHydroFrancis.waterTunnelSurgeChamberSimulation", "cim:GovHydroFrancis.zsfc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydroFrancis.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydroFrancis: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydroFrancis.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydroFrancis;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydroFrancis, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'am': [CGMESProfile.shortNames.DY],
    'av0': [CGMESProfile.shortNames.DY],
    'av1': [CGMESProfile.shortNames.DY],
    'bp': [CGMESProfile.shortNames.DY],
    'db1': [CGMESProfile.shortNames.DY],
    'etamax': [CGMESProfile.shortNames.DY],
    'governorControl': [CGMESProfile.shortNames.DY],
    'h1': [CGMESProfile.shortNames.DY],
    'h2': [CGMESProfile.shortNames.DY],
    'hn': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kg': [CGMESProfile.shortNames.DY],
    'kt': [CGMESProfile.shortNames.DY],
    'qc0': [CGMESProfile.shortNames.DY],
    'qn': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'td': [CGMESProfile.shortNames.DY],
    'ts': [CGMESProfile.shortNames.DY],
    'twnc': [CGMESProfile.shortNames.DY],
    'twng': [CGMESProfile.shortNames.DY],
    'tx': [CGMESProfile.shortNames.DY],
    'va': [CGMESProfile.shortNames.DY],
    'valvmax': [CGMESProfile.shortNames.DY],
    'valvmin': [CGMESProfile.shortNames.DY],
    'vc': [CGMESProfile.shortNames.DY],
    'waterTunnelSurgeChamberSimulation': [CGMESProfile.shortNames.DY],
    'zsfc': [CGMESProfile.shortNames.DY]
  });

  var GovHydroIEEE0 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydroIEEE0, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydroIEEE0);
    function GovHydroIEEE0() {
      _classCallCheck(this, GovHydroIEEE0);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydroIEEE0, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydroIEEE0";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydroIEEE0.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE0.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.mwbase'], 'cim:ActivePower', 'cim:GovHydroIEEE0.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE0.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.mwbase'], 'cim:ActivePower', 'cim:GovHydroIEEE0.mwbase');
        }
        if ('cim:GovHydroIEEE0.k' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE0.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.k'], 'cim:PU', 'cim:GovHydroIEEE0.k');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE0.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.k'], 'cim:PU', 'cim:GovHydroIEEE0.k');
        }
        if ('cim:GovHydroIEEE0.t1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE0.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.t1'], 'cim:Seconds', 'cim:GovHydroIEEE0.t1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE0.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.t1'], 'cim:Seconds', 'cim:GovHydroIEEE0.t1');
        }
        if ('cim:GovHydroIEEE0.t2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE0.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.t2'], 'cim:Seconds', 'cim:GovHydroIEEE0.t2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE0.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.t2'], 'cim:Seconds', 'cim:GovHydroIEEE0.t2');
        }
        if ('cim:GovHydroIEEE0.t3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE0.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.t3'], 'cim:Seconds', 'cim:GovHydroIEEE0.t3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE0.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.t3'], 'cim:Seconds', 'cim:GovHydroIEEE0.t3');
        }
        if ('cim:GovHydroIEEE0.t4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE0.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.t4'], 'cim:Seconds', 'cim:GovHydroIEEE0.t4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE0.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.t4'], 'cim:Seconds', 'cim:GovHydroIEEE0.t4');
        }
        if ('cim:GovHydroIEEE0.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE0.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.pmax'], 'cim:PU', 'cim:GovHydroIEEE0.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE0.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.pmax'], 'cim:PU', 'cim:GovHydroIEEE0.pmax');
        }
        if ('cim:GovHydroIEEE0.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE0.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.pmin'], 'cim:PU', 'cim:GovHydroIEEE0.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE0.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE0.pmin'], 'cim:PU', 'cim:GovHydroIEEE0.pmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydroIEEE0.mwbase", "cim:GovHydroIEEE0.k", "cim:GovHydroIEEE0.t1", "cim:GovHydroIEEE0.t2", "cim:GovHydroIEEE0.t3", "cim:GovHydroIEEE0.t4", "cim:GovHydroIEEE0.pmax", "cim:GovHydroIEEE0.pmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydroIEEE0.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydroIEEE0: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydroIEEE0.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydroIEEE0;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydroIEEE0, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY]
  });

  var GovHydroIEEE2 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydroIEEE2, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydroIEEE2);
    function GovHydroIEEE2() {
      _classCallCheck(this, GovHydroIEEE2);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydroIEEE2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydroIEEE2";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydroIEEE2.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.mwbase'], 'cim:ActivePower', 'cim:GovHydroIEEE2.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.mwbase'], 'cim:ActivePower', 'cim:GovHydroIEEE2.mwbase');
        }
        if ('cim:GovHydroIEEE2.tg' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.tg'], 'cim:Seconds', 'cim:GovHydroIEEE2.tg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.tg'], 'cim:Seconds', 'cim:GovHydroIEEE2.tg');
        }
        if ('cim:GovHydroIEEE2.tp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.tp'], 'cim:Seconds', 'cim:GovHydroIEEE2.tp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.tp'], 'cim:Seconds', 'cim:GovHydroIEEE2.tp');
        }
        if ('cim:GovHydroIEEE2.uo' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.uo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.uo'], 'cim:Simple_Float', 'cim:GovHydroIEEE2.uo');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.uo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.uo'], 'cim:Simple_Float', 'cim:GovHydroIEEE2.uo');
        }
        if ('cim:GovHydroIEEE2.uc' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.uc'], 'cim:Simple_Float', 'cim:GovHydroIEEE2.uc');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.uc'], 'cim:Simple_Float', 'cim:GovHydroIEEE2.uc');
        }
        if ('cim:GovHydroIEEE2.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pmax'], 'cim:PU', 'cim:GovHydroIEEE2.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pmax'], 'cim:PU', 'cim:GovHydroIEEE2.pmax');
        }
        if ('cim:GovHydroIEEE2.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pmin'], 'cim:PU', 'cim:GovHydroIEEE2.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pmin'], 'cim:PU', 'cim:GovHydroIEEE2.pmin');
        }
        if ('cim:GovHydroIEEE2.rperm' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.rperm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.rperm'], 'cim:PU', 'cim:GovHydroIEEE2.rperm');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.rperm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.rperm'], 'cim:PU', 'cim:GovHydroIEEE2.rperm');
        }
        if ('cim:GovHydroIEEE2.rtemp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.rtemp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.rtemp'], 'cim:PU', 'cim:GovHydroIEEE2.rtemp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.rtemp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.rtemp'], 'cim:PU', 'cim:GovHydroIEEE2.rtemp');
        }
        if ('cim:GovHydroIEEE2.tr' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.tr'], 'cim:Seconds', 'cim:GovHydroIEEE2.tr');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.tr'], 'cim:Seconds', 'cim:GovHydroIEEE2.tr');
        }
        if ('cim:GovHydroIEEE2.tw' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.tw'], 'cim:Seconds', 'cim:GovHydroIEEE2.tw');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.tw'], 'cim:Seconds', 'cim:GovHydroIEEE2.tw');
        }
        if ('cim:GovHydroIEEE2.kturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.kturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.kturb'], 'cim:PU', 'cim:GovHydroIEEE2.kturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.kturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.kturb'], 'cim:PU', 'cim:GovHydroIEEE2.kturb');
        }
        if ('cim:GovHydroIEEE2.aturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.aturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.aturb'], 'cim:PU', 'cim:GovHydroIEEE2.aturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.aturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.aturb'], 'cim:PU', 'cim:GovHydroIEEE2.aturb');
        }
        if ('cim:GovHydroIEEE2.bturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.bturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.bturb'], 'cim:PU', 'cim:GovHydroIEEE2.bturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.bturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.bturb'], 'cim:PU', 'cim:GovHydroIEEE2.bturb');
        }
        if ('cim:GovHydroIEEE2.gv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.gv1'], 'cim:PU', 'cim:GovHydroIEEE2.gv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.gv1'], 'cim:PU', 'cim:GovHydroIEEE2.gv1');
        }
        if ('cim:GovHydroIEEE2.pgv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pgv1'], 'cim:PU', 'cim:GovHydroIEEE2.pgv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pgv1'], 'cim:PU', 'cim:GovHydroIEEE2.pgv1');
        }
        if ('cim:GovHydroIEEE2.gv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.gv2'], 'cim:PU', 'cim:GovHydroIEEE2.gv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.gv2'], 'cim:PU', 'cim:GovHydroIEEE2.gv2');
        }
        if ('cim:GovHydroIEEE2.pgv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pgv2'], 'cim:PU', 'cim:GovHydroIEEE2.pgv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pgv2'], 'cim:PU', 'cim:GovHydroIEEE2.pgv2');
        }
        if ('cim:GovHydroIEEE2.gv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.gv3'], 'cim:PU', 'cim:GovHydroIEEE2.gv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.gv3'], 'cim:PU', 'cim:GovHydroIEEE2.gv3');
        }
        if ('cim:GovHydroIEEE2.pgv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pgv3'], 'cim:PU', 'cim:GovHydroIEEE2.pgv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pgv3'], 'cim:PU', 'cim:GovHydroIEEE2.pgv3');
        }
        if ('cim:GovHydroIEEE2.gv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.gv4'], 'cim:PU', 'cim:GovHydroIEEE2.gv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.gv4'], 'cim:PU', 'cim:GovHydroIEEE2.gv4');
        }
        if ('cim:GovHydroIEEE2.pgv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pgv4'], 'cim:PU', 'cim:GovHydroIEEE2.pgv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pgv4'], 'cim:PU', 'cim:GovHydroIEEE2.pgv4');
        }
        if ('cim:GovHydroIEEE2.gv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.gv5'], 'cim:PU', 'cim:GovHydroIEEE2.gv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.gv5'], 'cim:PU', 'cim:GovHydroIEEE2.gv5');
        }
        if ('cim:GovHydroIEEE2.pgv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pgv5'], 'cim:PU', 'cim:GovHydroIEEE2.pgv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pgv5'], 'cim:PU', 'cim:GovHydroIEEE2.pgv5');
        }
        if ('cim:GovHydroIEEE2.gv6' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.gv6'], 'cim:PU', 'cim:GovHydroIEEE2.gv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.gv6'], 'cim:PU', 'cim:GovHydroIEEE2.gv6');
        }
        if ('cim:GovHydroIEEE2.pgv6' in object) {
          attributeEntries['filledEntries']['cim:GovHydroIEEE2.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pgv6'], 'cim:PU', 'cim:GovHydroIEEE2.pgv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroIEEE2.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroIEEE2.pgv6'], 'cim:PU', 'cim:GovHydroIEEE2.pgv6');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydroIEEE2.mwbase", "cim:GovHydroIEEE2.tg", "cim:GovHydroIEEE2.tp", "cim:GovHydroIEEE2.uo", "cim:GovHydroIEEE2.uc", "cim:GovHydroIEEE2.pmax", "cim:GovHydroIEEE2.pmin", "cim:GovHydroIEEE2.rperm", "cim:GovHydroIEEE2.rtemp", "cim:GovHydroIEEE2.tr", "cim:GovHydroIEEE2.tw", "cim:GovHydroIEEE2.kturb", "cim:GovHydroIEEE2.aturb", "cim:GovHydroIEEE2.bturb", "cim:GovHydroIEEE2.gv1", "cim:GovHydroIEEE2.pgv1", "cim:GovHydroIEEE2.gv2", "cim:GovHydroIEEE2.pgv2", "cim:GovHydroIEEE2.gv3", "cim:GovHydroIEEE2.pgv3", "cim:GovHydroIEEE2.gv4", "cim:GovHydroIEEE2.pgv4", "cim:GovHydroIEEE2.gv5", "cim:GovHydroIEEE2.pgv5", "cim:GovHydroIEEE2.gv6", "cim:GovHydroIEEE2.pgv6"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydroIEEE2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydroIEEE2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydroIEEE2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydroIEEE2;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydroIEEE2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'tg': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    'uo': [CGMESProfile.shortNames.DY],
    'uc': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    'rperm': [CGMESProfile.shortNames.DY],
    'rtemp': [CGMESProfile.shortNames.DY],
    'tr': [CGMESProfile.shortNames.DY],
    'tw': [CGMESProfile.shortNames.DY],
    'kturb': [CGMESProfile.shortNames.DY],
    'aturb': [CGMESProfile.shortNames.DY],
    'bturb': [CGMESProfile.shortNames.DY],
    'gv1': [CGMESProfile.shortNames.DY],
    'pgv1': [CGMESProfile.shortNames.DY],
    'gv2': [CGMESProfile.shortNames.DY],
    'pgv2': [CGMESProfile.shortNames.DY],
    'gv3': [CGMESProfile.shortNames.DY],
    'pgv3': [CGMESProfile.shortNames.DY],
    'gv4': [CGMESProfile.shortNames.DY],
    'pgv4': [CGMESProfile.shortNames.DY],
    'gv5': [CGMESProfile.shortNames.DY],
    'pgv5': [CGMESProfile.shortNames.DY],
    'gv6': [CGMESProfile.shortNames.DY],
    'pgv6': [CGMESProfile.shortNames.DY]
  });

  var GovHydroPID = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydroPID, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydroPID);
    function GovHydroPID() {
      _classCallCheck(this, GovHydroPID);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydroPID, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydroPID";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydroPID.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.mwbase'], 'cim:ActivePower', 'cim:GovHydroPID.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.mwbase'], 'cim:ActivePower', 'cim:GovHydroPID.mwbase');
        }
        if ('cim:GovHydroPID.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pmax'], 'cim:PU', 'cim:GovHydroPID.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pmax'], 'cim:PU', 'cim:GovHydroPID.pmax');
        }
        if ('cim:GovHydroPID.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pmin'], 'cim:PU', 'cim:GovHydroPID.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pmin'], 'cim:PU', 'cim:GovHydroPID.pmin');
        }
        if ('cim:GovHydroPID.r' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.r'], 'cim:PU', 'cim:GovHydroPID.r');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.r'], 'cim:PU', 'cim:GovHydroPID.r');
        }
        if ('cim:GovHydroPID.td' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.td'], 'cim:Seconds', 'cim:GovHydroPID.td');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.td'], 'cim:Seconds', 'cim:GovHydroPID.td');
        }
        if ('cim:GovHydroPID.tf' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.tf'], 'cim:Seconds', 'cim:GovHydroPID.tf');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.tf'], 'cim:Seconds', 'cim:GovHydroPID.tf');
        }
        if ('cim:GovHydroPID.tp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.tp'], 'cim:Seconds', 'cim:GovHydroPID.tp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.tp'], 'cim:Seconds', 'cim:GovHydroPID.tp');
        }
        if ('cim:GovHydroPID.velop' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.velop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.velop'], 'cim:Simple_Float', 'cim:GovHydroPID.velop');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.velop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.velop'], 'cim:Simple_Float', 'cim:GovHydroPID.velop');
        }
        if ('cim:GovHydroPID.velcl' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.velcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.velcl'], 'cim:Simple_Float', 'cim:GovHydroPID.velcl');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.velcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.velcl'], 'cim:Simple_Float', 'cim:GovHydroPID.velcl');
        }
        if ('cim:GovHydroPID.kd' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.kd'], 'cim:PU', 'cim:GovHydroPID.kd');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.kd'], 'cim:PU', 'cim:GovHydroPID.kd');
        }
        if ('cim:GovHydroPID.kp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.kp'], 'cim:PU', 'cim:GovHydroPID.kp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.kp'], 'cim:PU', 'cim:GovHydroPID.kp');
        }
        if ('cim:GovHydroPID.ki' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.ki'], 'cim:PU', 'cim:GovHydroPID.ki');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.ki'], 'cim:PU', 'cim:GovHydroPID.ki');
        }
        if ('cim:GovHydroPID.kg' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.kg'], 'cim:PU', 'cim:GovHydroPID.kg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.kg'], 'cim:PU', 'cim:GovHydroPID.kg');
        }
        if ('cim:GovHydroPID.tturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.tturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.tturb'], 'cim:Seconds', 'cim:GovHydroPID.tturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.tturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.tturb'], 'cim:Seconds', 'cim:GovHydroPID.tturb');
        }
        if ('cim:GovHydroPID.aturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.aturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.aturb'], 'cim:PU', 'cim:GovHydroPID.aturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.aturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.aturb'], 'cim:PU', 'cim:GovHydroPID.aturb');
        }
        if ('cim:GovHydroPID.bturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.bturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.bturb'], 'cim:PU', 'cim:GovHydroPID.bturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.bturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.bturb'], 'cim:PU', 'cim:GovHydroPID.bturb');
        }
        if ('cim:GovHydroPID.tt' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.tt'], 'cim:Seconds', 'cim:GovHydroPID.tt');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.tt'], 'cim:Seconds', 'cim:GovHydroPID.tt');
        }
        if ('cim:GovHydroPID.db1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.db1'], 'cim:Frequency', 'cim:GovHydroPID.db1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.db1'], 'cim:Frequency', 'cim:GovHydroPID.db1');
        }
        if ('cim:GovHydroPID.inputSignal' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.inputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.inputSignal'], 'cim:Boolean', 'cim:GovHydroPID.inputSignal');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.inputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.inputSignal'], 'cim:Boolean', 'cim:GovHydroPID.inputSignal');
        }
        if ('cim:GovHydroPID.eps' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.eps'], 'cim:Frequency', 'cim:GovHydroPID.eps');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.eps'], 'cim:Frequency', 'cim:GovHydroPID.eps');
        }
        if ('cim:GovHydroPID.db2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.db2'], 'cim:ActivePower', 'cim:GovHydroPID.db2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.db2'], 'cim:ActivePower', 'cim:GovHydroPID.db2');
        }
        if ('cim:GovHydroPID.gv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.gv1'], 'cim:PU', 'cim:GovHydroPID.gv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.gv1'], 'cim:PU', 'cim:GovHydroPID.gv1');
        }
        if ('cim:GovHydroPID.pgv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pgv1'], 'cim:PU', 'cim:GovHydroPID.pgv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pgv1'], 'cim:PU', 'cim:GovHydroPID.pgv1');
        }
        if ('cim:GovHydroPID.gv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.gv2'], 'cim:PU', 'cim:GovHydroPID.gv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.gv2'], 'cim:PU', 'cim:GovHydroPID.gv2');
        }
        if ('cim:GovHydroPID.pgv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pgv2'], 'cim:PU', 'cim:GovHydroPID.pgv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pgv2'], 'cim:PU', 'cim:GovHydroPID.pgv2');
        }
        if ('cim:GovHydroPID.gv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.gv3'], 'cim:PU', 'cim:GovHydroPID.gv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.gv3'], 'cim:PU', 'cim:GovHydroPID.gv3');
        }
        if ('cim:GovHydroPID.pgv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pgv3'], 'cim:PU', 'cim:GovHydroPID.pgv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pgv3'], 'cim:PU', 'cim:GovHydroPID.pgv3');
        }
        if ('cim:GovHydroPID.gv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.gv4'], 'cim:PU', 'cim:GovHydroPID.gv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.gv4'], 'cim:PU', 'cim:GovHydroPID.gv4');
        }
        if ('cim:GovHydroPID.pgv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pgv4'], 'cim:PU', 'cim:GovHydroPID.pgv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pgv4'], 'cim:PU', 'cim:GovHydroPID.pgv4');
        }
        if ('cim:GovHydroPID.gv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.gv5'], 'cim:PU', 'cim:GovHydroPID.gv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.gv5'], 'cim:PU', 'cim:GovHydroPID.gv5');
        }
        if ('cim:GovHydroPID.pgv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pgv5'], 'cim:PU', 'cim:GovHydroPID.pgv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pgv5'], 'cim:PU', 'cim:GovHydroPID.pgv5');
        }
        if ('cim:GovHydroPID.gv6' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.gv6'], 'cim:PU', 'cim:GovHydroPID.gv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.gv6'], 'cim:PU', 'cim:GovHydroPID.gv6');
        }
        if ('cim:GovHydroPID.pgv6' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pgv6'], 'cim:PU', 'cim:GovHydroPID.pgv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID.pgv6'], 'cim:PU', 'cim:GovHydroPID.pgv6');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydroPID.mwbase", "cim:GovHydroPID.pmax", "cim:GovHydroPID.pmin", "cim:GovHydroPID.r", "cim:GovHydroPID.td", "cim:GovHydroPID.tf", "cim:GovHydroPID.tp", "cim:GovHydroPID.velop", "cim:GovHydroPID.velcl", "cim:GovHydroPID.kd", "cim:GovHydroPID.kp", "cim:GovHydroPID.ki", "cim:GovHydroPID.kg", "cim:GovHydroPID.tturb", "cim:GovHydroPID.aturb", "cim:GovHydroPID.bturb", "cim:GovHydroPID.tt", "cim:GovHydroPID.db1", "cim:GovHydroPID.inputSignal", "cim:GovHydroPID.eps", "cim:GovHydroPID.db2", "cim:GovHydroPID.gv1", "cim:GovHydroPID.pgv1", "cim:GovHydroPID.gv2", "cim:GovHydroPID.pgv2", "cim:GovHydroPID.gv3", "cim:GovHydroPID.pgv3", "cim:GovHydroPID.gv4", "cim:GovHydroPID.pgv4", "cim:GovHydroPID.gv5", "cim:GovHydroPID.pgv5", "cim:GovHydroPID.gv6", "cim:GovHydroPID.pgv6"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydroPID.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydroPID: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydroPID.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydroPID;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydroPID, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    'r': [CGMESProfile.shortNames.DY],
    'td': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    'velop': [CGMESProfile.shortNames.DY],
    'velcl': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kg': [CGMESProfile.shortNames.DY],
    'tturb': [CGMESProfile.shortNames.DY],
    'aturb': [CGMESProfile.shortNames.DY],
    'bturb': [CGMESProfile.shortNames.DY],
    'tt': [CGMESProfile.shortNames.DY],
    'db1': [CGMESProfile.shortNames.DY],
    'inputSignal': [CGMESProfile.shortNames.DY],
    'eps': [CGMESProfile.shortNames.DY],
    'db2': [CGMESProfile.shortNames.DY],
    'gv1': [CGMESProfile.shortNames.DY],
    'pgv1': [CGMESProfile.shortNames.DY],
    'gv2': [CGMESProfile.shortNames.DY],
    'pgv2': [CGMESProfile.shortNames.DY],
    'gv3': [CGMESProfile.shortNames.DY],
    'pgv3': [CGMESProfile.shortNames.DY],
    'gv4': [CGMESProfile.shortNames.DY],
    'pgv4': [CGMESProfile.shortNames.DY],
    'gv5': [CGMESProfile.shortNames.DY],
    'pgv5': [CGMESProfile.shortNames.DY],
    'gv6': [CGMESProfile.shortNames.DY],
    'pgv6': [CGMESProfile.shortNames.DY]
  });

  var GovHydroPID2 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydroPID2, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydroPID2);
    function GovHydroPID2() {
      _classCallCheck(this, GovHydroPID2);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydroPID2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydroPID2";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydroPID2.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.mwbase'], 'cim:ActivePower', 'cim:GovHydroPID2.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.mwbase'], 'cim:ActivePower', 'cim:GovHydroPID2.mwbase');
        }
        if ('cim:GovHydroPID2.treg' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.treg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.treg'], 'cim:Seconds', 'cim:GovHydroPID2.treg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.treg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.treg'], 'cim:Seconds', 'cim:GovHydroPID2.treg');
        }
        if ('cim:GovHydroPID2.rperm' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.rperm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.rperm'], 'cim:PU', 'cim:GovHydroPID2.rperm');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.rperm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.rperm'], 'cim:PU', 'cim:GovHydroPID2.rperm');
        }
        if ('cim:GovHydroPID2.kp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.kp'], 'cim:PU', 'cim:GovHydroPID2.kp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.kp'], 'cim:PU', 'cim:GovHydroPID2.kp');
        }
        if ('cim:GovHydroPID2.ki' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.ki'], 'cim:Simple_Float', 'cim:GovHydroPID2.ki');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.ki'], 'cim:Simple_Float', 'cim:GovHydroPID2.ki');
        }
        if ('cim:GovHydroPID2.kd' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.kd'], 'cim:PU', 'cim:GovHydroPID2.kd');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.kd'], 'cim:PU', 'cim:GovHydroPID2.kd');
        }
        if ('cim:GovHydroPID2.ta' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.ta'], 'cim:Seconds', 'cim:GovHydroPID2.ta');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.ta'], 'cim:Seconds', 'cim:GovHydroPID2.ta');
        }
        if ('cim:GovHydroPID2.tb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.tb'], 'cim:Seconds', 'cim:GovHydroPID2.tb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.tb'], 'cim:Seconds', 'cim:GovHydroPID2.tb');
        }
        if ('cim:GovHydroPID2.velmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.velmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.velmax'], 'cim:Simple_Float', 'cim:GovHydroPID2.velmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.velmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.velmax'], 'cim:Simple_Float', 'cim:GovHydroPID2.velmax');
        }
        if ('cim:GovHydroPID2.velmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.velmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.velmin'], 'cim:Simple_Float', 'cim:GovHydroPID2.velmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.velmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.velmin'], 'cim:Simple_Float', 'cim:GovHydroPID2.velmin');
        }
        if ('cim:GovHydroPID2.gmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.gmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.gmax'], 'cim:PU', 'cim:GovHydroPID2.gmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.gmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.gmax'], 'cim:PU', 'cim:GovHydroPID2.gmax');
        }
        if ('cim:GovHydroPID2.gmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.gmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.gmin'], 'cim:PU', 'cim:GovHydroPID2.gmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.gmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.gmin'], 'cim:PU', 'cim:GovHydroPID2.gmin');
        }
        if ('cim:GovHydroPID2.tw' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.tw'], 'cim:Seconds', 'cim:GovHydroPID2.tw');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.tw'], 'cim:Seconds', 'cim:GovHydroPID2.tw');
        }
        if ('cim:GovHydroPID2.d' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.d'], 'cim:PU', 'cim:GovHydroPID2.d');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.d'], 'cim:PU', 'cim:GovHydroPID2.d');
        }
        if ('cim:GovHydroPID2.g0' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.g0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.g0'], 'cim:PU', 'cim:GovHydroPID2.g0');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.g0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.g0'], 'cim:PU', 'cim:GovHydroPID2.g0');
        }
        if ('cim:GovHydroPID2.g1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.g1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.g1'], 'cim:PU', 'cim:GovHydroPID2.g1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.g1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.g1'], 'cim:PU', 'cim:GovHydroPID2.g1');
        }
        if ('cim:GovHydroPID2.p1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.p1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.p1'], 'cim:PU', 'cim:GovHydroPID2.p1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.p1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.p1'], 'cim:PU', 'cim:GovHydroPID2.p1');
        }
        if ('cim:GovHydroPID2.g2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.g2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.g2'], 'cim:PU', 'cim:GovHydroPID2.g2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.g2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.g2'], 'cim:PU', 'cim:GovHydroPID2.g2');
        }
        if ('cim:GovHydroPID2.p2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.p2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.p2'], 'cim:PU', 'cim:GovHydroPID2.p2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.p2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.p2'], 'cim:PU', 'cim:GovHydroPID2.p2');
        }
        if ('cim:GovHydroPID2.p3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.p3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.p3'], 'cim:PU', 'cim:GovHydroPID2.p3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.p3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.p3'], 'cim:PU', 'cim:GovHydroPID2.p3');
        }
        if ('cim:GovHydroPID2.atw' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.atw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.atw'], 'cim:PU', 'cim:GovHydroPID2.atw');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.atw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.atw'], 'cim:PU', 'cim:GovHydroPID2.atw');
        }
        if ('cim:GovHydroPID2.feedbackSignal' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPID2.feedbackSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.feedbackSignal'], 'cim:Boolean', 'cim:GovHydroPID2.feedbackSignal');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPID2.feedbackSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPID2.feedbackSignal'], 'cim:Boolean', 'cim:GovHydroPID2.feedbackSignal');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydroPID2.mwbase", "cim:GovHydroPID2.treg", "cim:GovHydroPID2.rperm", "cim:GovHydroPID2.kp", "cim:GovHydroPID2.ki", "cim:GovHydroPID2.kd", "cim:GovHydroPID2.ta", "cim:GovHydroPID2.tb", "cim:GovHydroPID2.velmax", "cim:GovHydroPID2.velmin", "cim:GovHydroPID2.gmax", "cim:GovHydroPID2.gmin", "cim:GovHydroPID2.tw", "cim:GovHydroPID2.d", "cim:GovHydroPID2.g0", "cim:GovHydroPID2.g1", "cim:GovHydroPID2.p1", "cim:GovHydroPID2.g2", "cim:GovHydroPID2.p2", "cim:GovHydroPID2.p3", "cim:GovHydroPID2.atw", "cim:GovHydroPID2.feedbackSignal"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydroPID2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydroPID2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydroPID2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydroPID2;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydroPID2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'treg': [CGMESProfile.shortNames.DY],
    'rperm': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'velmax': [CGMESProfile.shortNames.DY],
    'velmin': [CGMESProfile.shortNames.DY],
    'gmax': [CGMESProfile.shortNames.DY],
    'gmin': [CGMESProfile.shortNames.DY],
    'tw': [CGMESProfile.shortNames.DY],
    'd': [CGMESProfile.shortNames.DY],
    'g0': [CGMESProfile.shortNames.DY],
    'g1': [CGMESProfile.shortNames.DY],
    'p1': [CGMESProfile.shortNames.DY],
    'g2': [CGMESProfile.shortNames.DY],
    'p2': [CGMESProfile.shortNames.DY],
    'p3': [CGMESProfile.shortNames.DY],
    'atw': [CGMESProfile.shortNames.DY],
    'feedbackSignal': [CGMESProfile.shortNames.DY]
  });

  var GovHydroPelton = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydroPelton, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydroPelton);
    function GovHydroPelton() {
      _classCallCheck(this, GovHydroPelton);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydroPelton, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydroPelton";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydroPelton.av0' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.av0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.av0'], 'cim:Area', 'cim:GovHydroPelton.av0');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.av0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.av0'], 'cim:Area', 'cim:GovHydroPelton.av0');
        }
        if ('cim:GovHydroPelton.av1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.av1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.av1'], 'cim:Area', 'cim:GovHydroPelton.av1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.av1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.av1'], 'cim:Area', 'cim:GovHydroPelton.av1');
        }
        if ('cim:GovHydroPelton.bp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.bp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.bp'], 'cim:PU', 'cim:GovHydroPelton.bp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.bp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.bp'], 'cim:PU', 'cim:GovHydroPelton.bp');
        }
        if ('cim:GovHydroPelton.db1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.db1'], 'cim:Frequency', 'cim:GovHydroPelton.db1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.db1'], 'cim:Frequency', 'cim:GovHydroPelton.db1');
        }
        if ('cim:GovHydroPelton.db2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.db2'], 'cim:Frequency', 'cim:GovHydroPelton.db2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.db2'], 'cim:Frequency', 'cim:GovHydroPelton.db2');
        }
        if ('cim:GovHydroPelton.h1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.h1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.h1'], 'cim:Length', 'cim:GovHydroPelton.h1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.h1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.h1'], 'cim:Length', 'cim:GovHydroPelton.h1');
        }
        if ('cim:GovHydroPelton.h2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.h2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.h2'], 'cim:Length', 'cim:GovHydroPelton.h2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.h2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.h2'], 'cim:Length', 'cim:GovHydroPelton.h2');
        }
        if ('cim:GovHydroPelton.hn' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.hn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.hn'], 'cim:Length', 'cim:GovHydroPelton.hn');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.hn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.hn'], 'cim:Length', 'cim:GovHydroPelton.hn');
        }
        if ('cim:GovHydroPelton.kc' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.kc'], 'cim:PU', 'cim:GovHydroPelton.kc');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.kc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.kc'], 'cim:PU', 'cim:GovHydroPelton.kc');
        }
        if ('cim:GovHydroPelton.kg' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.kg'], 'cim:PU', 'cim:GovHydroPelton.kg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.kg'], 'cim:PU', 'cim:GovHydroPelton.kg');
        }
        if ('cim:GovHydroPelton.qc0' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.qc0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.qc0'], 'cim:PU', 'cim:GovHydroPelton.qc0');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.qc0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.qc0'], 'cim:PU', 'cim:GovHydroPelton.qc0');
        }
        if ('cim:GovHydroPelton.qn' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.qn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.qn'], 'cim:VolumeFlowRate', 'cim:GovHydroPelton.qn');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.qn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.qn'], 'cim:VolumeFlowRate', 'cim:GovHydroPelton.qn');
        }
        if ('cim:GovHydroPelton.simplifiedPelton' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.simplifiedPelton'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.simplifiedPelton'], 'cim:Boolean', 'cim:GovHydroPelton.simplifiedPelton');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.simplifiedPelton'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.simplifiedPelton'], 'cim:Boolean', 'cim:GovHydroPelton.simplifiedPelton');
        }
        if ('cim:GovHydroPelton.staticCompensating' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.staticCompensating'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.staticCompensating'], 'cim:Boolean', 'cim:GovHydroPelton.staticCompensating');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.staticCompensating'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.staticCompensating'], 'cim:Boolean', 'cim:GovHydroPelton.staticCompensating');
        }
        if ('cim:GovHydroPelton.ta' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.ta'], 'cim:Seconds', 'cim:GovHydroPelton.ta');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.ta'], 'cim:Seconds', 'cim:GovHydroPelton.ta');
        }
        if ('cim:GovHydroPelton.ts' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.ts'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.ts'], 'cim:Seconds', 'cim:GovHydroPelton.ts');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.ts'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.ts'], 'cim:Seconds', 'cim:GovHydroPelton.ts');
        }
        if ('cim:GovHydroPelton.tv' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.tv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.tv'], 'cim:Seconds', 'cim:GovHydroPelton.tv');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.tv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.tv'], 'cim:Seconds', 'cim:GovHydroPelton.tv');
        }
        if ('cim:GovHydroPelton.twnc' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.twnc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.twnc'], 'cim:Seconds', 'cim:GovHydroPelton.twnc');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.twnc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.twnc'], 'cim:Seconds', 'cim:GovHydroPelton.twnc');
        }
        if ('cim:GovHydroPelton.twng' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.twng'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.twng'], 'cim:Seconds', 'cim:GovHydroPelton.twng');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.twng'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.twng'], 'cim:Seconds', 'cim:GovHydroPelton.twng');
        }
        if ('cim:GovHydroPelton.tx' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.tx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.tx'], 'cim:Seconds', 'cim:GovHydroPelton.tx');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.tx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.tx'], 'cim:Seconds', 'cim:GovHydroPelton.tx');
        }
        if ('cim:GovHydroPelton.va' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.va'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.va'], 'cim:Simple_Float', 'cim:GovHydroPelton.va');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.va'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.va'], 'cim:Simple_Float', 'cim:GovHydroPelton.va');
        }
        if ('cim:GovHydroPelton.valvmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.valvmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.valvmax'], 'cim:PU', 'cim:GovHydroPelton.valvmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.valvmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.valvmax'], 'cim:PU', 'cim:GovHydroPelton.valvmax');
        }
        if ('cim:GovHydroPelton.valvmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.valvmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.valvmin'], 'cim:PU', 'cim:GovHydroPelton.valvmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.valvmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.valvmin'], 'cim:PU', 'cim:GovHydroPelton.valvmin');
        }
        if ('cim:GovHydroPelton.vav' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.vav'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.vav'], 'cim:PU', 'cim:GovHydroPelton.vav');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.vav'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.vav'], 'cim:PU', 'cim:GovHydroPelton.vav');
        }
        if ('cim:GovHydroPelton.vc' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.vc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.vc'], 'cim:Simple_Float', 'cim:GovHydroPelton.vc');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.vc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.vc'], 'cim:Simple_Float', 'cim:GovHydroPelton.vc');
        }
        if ('cim:GovHydroPelton.vcv' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.vcv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.vcv'], 'cim:PU', 'cim:GovHydroPelton.vcv');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.vcv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.vcv'], 'cim:PU', 'cim:GovHydroPelton.vcv');
        }
        if ('cim:GovHydroPelton.waterTunnelSurgeChamberSimulation' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.waterTunnelSurgeChamberSimulation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.waterTunnelSurgeChamberSimulation'], 'cim:Boolean', 'cim:GovHydroPelton.waterTunnelSurgeChamberSimulation');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.waterTunnelSurgeChamberSimulation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.waterTunnelSurgeChamberSimulation'], 'cim:Boolean', 'cim:GovHydroPelton.waterTunnelSurgeChamberSimulation');
        }
        if ('cim:GovHydroPelton.zsfc' in object) {
          attributeEntries['filledEntries']['cim:GovHydroPelton.zsfc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.zsfc'], 'cim:Length', 'cim:GovHydroPelton.zsfc');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroPelton.zsfc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroPelton.zsfc'], 'cim:Length', 'cim:GovHydroPelton.zsfc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydroPelton.av0", "cim:GovHydroPelton.av1", "cim:GovHydroPelton.bp", "cim:GovHydroPelton.db1", "cim:GovHydroPelton.db2", "cim:GovHydroPelton.h1", "cim:GovHydroPelton.h2", "cim:GovHydroPelton.hn", "cim:GovHydroPelton.kc", "cim:GovHydroPelton.kg", "cim:GovHydroPelton.qc0", "cim:GovHydroPelton.qn", "cim:GovHydroPelton.simplifiedPelton", "cim:GovHydroPelton.staticCompensating", "cim:GovHydroPelton.ta", "cim:GovHydroPelton.ts", "cim:GovHydroPelton.tv", "cim:GovHydroPelton.twnc", "cim:GovHydroPelton.twng", "cim:GovHydroPelton.tx", "cim:GovHydroPelton.va", "cim:GovHydroPelton.valvmax", "cim:GovHydroPelton.valvmin", "cim:GovHydroPelton.vav", "cim:GovHydroPelton.vc", "cim:GovHydroPelton.vcv", "cim:GovHydroPelton.waterTunnelSurgeChamberSimulation", "cim:GovHydroPelton.zsfc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydroPelton.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydroPelton: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydroPelton.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydroPelton;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydroPelton, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'av0': [CGMESProfile.shortNames.DY],
    'av1': [CGMESProfile.shortNames.DY],
    'bp': [CGMESProfile.shortNames.DY],
    'db1': [CGMESProfile.shortNames.DY],
    'db2': [CGMESProfile.shortNames.DY],
    'h1': [CGMESProfile.shortNames.DY],
    'h2': [CGMESProfile.shortNames.DY],
    'hn': [CGMESProfile.shortNames.DY],
    'kc': [CGMESProfile.shortNames.DY],
    'kg': [CGMESProfile.shortNames.DY],
    'qc0': [CGMESProfile.shortNames.DY],
    'qn': [CGMESProfile.shortNames.DY],
    'simplifiedPelton': [CGMESProfile.shortNames.DY],
    'staticCompensating': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'ts': [CGMESProfile.shortNames.DY],
    'tv': [CGMESProfile.shortNames.DY],
    'twnc': [CGMESProfile.shortNames.DY],
    'twng': [CGMESProfile.shortNames.DY],
    'tx': [CGMESProfile.shortNames.DY],
    'va': [CGMESProfile.shortNames.DY],
    'valvmax': [CGMESProfile.shortNames.DY],
    'valvmin': [CGMESProfile.shortNames.DY],
    'vav': [CGMESProfile.shortNames.DY],
    'vc': [CGMESProfile.shortNames.DY],
    'vcv': [CGMESProfile.shortNames.DY],
    'waterTunnelSurgeChamberSimulation': [CGMESProfile.shortNames.DY],
    'zsfc': [CGMESProfile.shortNames.DY]
  });

  var GovHydroR = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydroR, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydroR);
    function GovHydroR() {
      _classCallCheck(this, GovHydroR);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydroR, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydroR";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydroR.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.mwbase'], 'cim:ActivePower', 'cim:GovHydroR.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.mwbase'], 'cim:ActivePower', 'cim:GovHydroR.mwbase');
        }
        if ('cim:GovHydroR.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pmax'], 'cim:PU', 'cim:GovHydroR.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pmax'], 'cim:PU', 'cim:GovHydroR.pmax');
        }
        if ('cim:GovHydroR.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pmin'], 'cim:PU', 'cim:GovHydroR.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pmin'], 'cim:PU', 'cim:GovHydroR.pmin');
        }
        if ('cim:GovHydroR.r' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.r'], 'cim:PU', 'cim:GovHydroR.r');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.r'], 'cim:PU', 'cim:GovHydroR.r');
        }
        if ('cim:GovHydroR.td' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.td'], 'cim:Seconds', 'cim:GovHydroR.td');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.td'], 'cim:Seconds', 'cim:GovHydroR.td');
        }
        if ('cim:GovHydroR.t1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t1'], 'cim:Seconds', 'cim:GovHydroR.t1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t1'], 'cim:Seconds', 'cim:GovHydroR.t1');
        }
        if ('cim:GovHydroR.t2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t2'], 'cim:Seconds', 'cim:GovHydroR.t2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t2'], 'cim:Seconds', 'cim:GovHydroR.t2');
        }
        if ('cim:GovHydroR.t3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t3'], 'cim:Seconds', 'cim:GovHydroR.t3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t3'], 'cim:Seconds', 'cim:GovHydroR.t3');
        }
        if ('cim:GovHydroR.t4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t4'], 'cim:Seconds', 'cim:GovHydroR.t4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t4'], 'cim:Seconds', 'cim:GovHydroR.t4');
        }
        if ('cim:GovHydroR.t5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t5'], 'cim:Seconds', 'cim:GovHydroR.t5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t5'], 'cim:Seconds', 'cim:GovHydroR.t5');
        }
        if ('cim:GovHydroR.t6' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t6'], 'cim:Seconds', 'cim:GovHydroR.t6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t6'], 'cim:Seconds', 'cim:GovHydroR.t6');
        }
        if ('cim:GovHydroR.t7' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t7'], 'cim:Seconds', 'cim:GovHydroR.t7');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t7'], 'cim:Seconds', 'cim:GovHydroR.t7');
        }
        if ('cim:GovHydroR.t8' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.t8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t8'], 'cim:Seconds', 'cim:GovHydroR.t8');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.t8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.t8'], 'cim:Seconds', 'cim:GovHydroR.t8');
        }
        if ('cim:GovHydroR.tp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.tp'], 'cim:Seconds', 'cim:GovHydroR.tp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.tp'], 'cim:Seconds', 'cim:GovHydroR.tp');
        }
        if ('cim:GovHydroR.velop' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.velop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.velop'], 'cim:Simple_Float', 'cim:GovHydroR.velop');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.velop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.velop'], 'cim:Simple_Float', 'cim:GovHydroR.velop');
        }
        if ('cim:GovHydroR.velcl' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.velcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.velcl'], 'cim:Simple_Float', 'cim:GovHydroR.velcl');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.velcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.velcl'], 'cim:Simple_Float', 'cim:GovHydroR.velcl');
        }
        if ('cim:GovHydroR.ki' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.ki'], 'cim:PU', 'cim:GovHydroR.ki');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.ki'], 'cim:PU', 'cim:GovHydroR.ki');
        }
        if ('cim:GovHydroR.kg' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.kg'], 'cim:PU', 'cim:GovHydroR.kg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.kg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.kg'], 'cim:PU', 'cim:GovHydroR.kg');
        }
        if ('cim:GovHydroR.gmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.gmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gmax'], 'cim:PU', 'cim:GovHydroR.gmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.gmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gmax'], 'cim:PU', 'cim:GovHydroR.gmax');
        }
        if ('cim:GovHydroR.gmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.gmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gmin'], 'cim:PU', 'cim:GovHydroR.gmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.gmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gmin'], 'cim:PU', 'cim:GovHydroR.gmin');
        }
        if ('cim:GovHydroR.tt' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.tt'], 'cim:Seconds', 'cim:GovHydroR.tt');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.tt'], 'cim:Seconds', 'cim:GovHydroR.tt');
        }
        if ('cim:GovHydroR.inputSignal' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.inputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.inputSignal'], 'cim:Boolean', 'cim:GovHydroR.inputSignal');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.inputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.inputSignal'], 'cim:Boolean', 'cim:GovHydroR.inputSignal');
        }
        if ('cim:GovHydroR.db1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.db1'], 'cim:Frequency', 'cim:GovHydroR.db1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.db1'], 'cim:Frequency', 'cim:GovHydroR.db1');
        }
        if ('cim:GovHydroR.eps' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.eps'], 'cim:Frequency', 'cim:GovHydroR.eps');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.eps'], 'cim:Frequency', 'cim:GovHydroR.eps');
        }
        if ('cim:GovHydroR.db2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.db2'], 'cim:ActivePower', 'cim:GovHydroR.db2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.db2'], 'cim:ActivePower', 'cim:GovHydroR.db2');
        }
        if ('cim:GovHydroR.tw' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.tw'], 'cim:Seconds', 'cim:GovHydroR.tw');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.tw'], 'cim:Seconds', 'cim:GovHydroR.tw');
        }
        if ('cim:GovHydroR.at' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.at'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.at'], 'cim:PU', 'cim:GovHydroR.at');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.at'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.at'], 'cim:PU', 'cim:GovHydroR.at');
        }
        if ('cim:GovHydroR.dturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.dturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.dturb'], 'cim:PU', 'cim:GovHydroR.dturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.dturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.dturb'], 'cim:PU', 'cim:GovHydroR.dturb');
        }
        if ('cim:GovHydroR.qnl' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.qnl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.qnl'], 'cim:PU', 'cim:GovHydroR.qnl');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.qnl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.qnl'], 'cim:PU', 'cim:GovHydroR.qnl');
        }
        if ('cim:GovHydroR.h0' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.h0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.h0'], 'cim:PU', 'cim:GovHydroR.h0');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.h0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.h0'], 'cim:PU', 'cim:GovHydroR.h0');
        }
        if ('cim:GovHydroR.gv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gv1'], 'cim:PU', 'cim:GovHydroR.gv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gv1'], 'cim:PU', 'cim:GovHydroR.gv1');
        }
        if ('cim:GovHydroR.pgv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pgv1'], 'cim:PU', 'cim:GovHydroR.pgv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pgv1'], 'cim:PU', 'cim:GovHydroR.pgv1');
        }
        if ('cim:GovHydroR.gv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gv2'], 'cim:PU', 'cim:GovHydroR.gv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gv2'], 'cim:PU', 'cim:GovHydroR.gv2');
        }
        if ('cim:GovHydroR.pgv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pgv2'], 'cim:PU', 'cim:GovHydroR.pgv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pgv2'], 'cim:PU', 'cim:GovHydroR.pgv2');
        }
        if ('cim:GovHydroR.gv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gv3'], 'cim:PU', 'cim:GovHydroR.gv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gv3'], 'cim:PU', 'cim:GovHydroR.gv3');
        }
        if ('cim:GovHydroR.pgv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pgv3'], 'cim:PU', 'cim:GovHydroR.pgv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pgv3'], 'cim:PU', 'cim:GovHydroR.pgv3');
        }
        if ('cim:GovHydroR.gv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gv4'], 'cim:PU', 'cim:GovHydroR.gv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gv4'], 'cim:PU', 'cim:GovHydroR.gv4');
        }
        if ('cim:GovHydroR.pgv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pgv4'], 'cim:PU', 'cim:GovHydroR.pgv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pgv4'], 'cim:PU', 'cim:GovHydroR.pgv4');
        }
        if ('cim:GovHydroR.gv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gv5'], 'cim:PU', 'cim:GovHydroR.gv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gv5'], 'cim:PU', 'cim:GovHydroR.gv5');
        }
        if ('cim:GovHydroR.pgv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pgv5'], 'cim:PU', 'cim:GovHydroR.pgv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pgv5'], 'cim:PU', 'cim:GovHydroR.pgv5');
        }
        if ('cim:GovHydroR.gv6' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gv6'], 'cim:PU', 'cim:GovHydroR.gv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.gv6'], 'cim:PU', 'cim:GovHydroR.gv6');
        }
        if ('cim:GovHydroR.pgv6' in object) {
          attributeEntries['filledEntries']['cim:GovHydroR.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pgv6'], 'cim:PU', 'cim:GovHydroR.pgv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroR.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroR.pgv6'], 'cim:PU', 'cim:GovHydroR.pgv6');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydroR.mwbase", "cim:GovHydroR.pmax", "cim:GovHydroR.pmin", "cim:GovHydroR.r", "cim:GovHydroR.td", "cim:GovHydroR.t1", "cim:GovHydroR.t2", "cim:GovHydroR.t3", "cim:GovHydroR.t4", "cim:GovHydroR.t5", "cim:GovHydroR.t6", "cim:GovHydroR.t7", "cim:GovHydroR.t8", "cim:GovHydroR.tp", "cim:GovHydroR.velop", "cim:GovHydroR.velcl", "cim:GovHydroR.ki", "cim:GovHydroR.kg", "cim:GovHydroR.gmax", "cim:GovHydroR.gmin", "cim:GovHydroR.tt", "cim:GovHydroR.inputSignal", "cim:GovHydroR.db1", "cim:GovHydroR.eps", "cim:GovHydroR.db2", "cim:GovHydroR.tw", "cim:GovHydroR.at", "cim:GovHydroR.dturb", "cim:GovHydroR.qnl", "cim:GovHydroR.h0", "cim:GovHydroR.gv1", "cim:GovHydroR.pgv1", "cim:GovHydroR.gv2", "cim:GovHydroR.pgv2", "cim:GovHydroR.gv3", "cim:GovHydroR.pgv3", "cim:GovHydroR.gv4", "cim:GovHydroR.pgv4", "cim:GovHydroR.gv5", "cim:GovHydroR.pgv5", "cim:GovHydroR.gv6", "cim:GovHydroR.pgv6"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydroR.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydroR: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydroR.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydroR;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydroR, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    'r': [CGMESProfile.shortNames.DY],
    'td': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    't7': [CGMESProfile.shortNames.DY],
    't8': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    'velop': [CGMESProfile.shortNames.DY],
    'velcl': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kg': [CGMESProfile.shortNames.DY],
    'gmax': [CGMESProfile.shortNames.DY],
    'gmin': [CGMESProfile.shortNames.DY],
    'tt': [CGMESProfile.shortNames.DY],
    'inputSignal': [CGMESProfile.shortNames.DY],
    'db1': [CGMESProfile.shortNames.DY],
    'eps': [CGMESProfile.shortNames.DY],
    'db2': [CGMESProfile.shortNames.DY],
    'tw': [CGMESProfile.shortNames.DY],
    'at': [CGMESProfile.shortNames.DY],
    'dturb': [CGMESProfile.shortNames.DY],
    'qnl': [CGMESProfile.shortNames.DY],
    'h0': [CGMESProfile.shortNames.DY],
    'gv1': [CGMESProfile.shortNames.DY],
    'pgv1': [CGMESProfile.shortNames.DY],
    'gv2': [CGMESProfile.shortNames.DY],
    'pgv2': [CGMESProfile.shortNames.DY],
    'gv3': [CGMESProfile.shortNames.DY],
    'pgv3': [CGMESProfile.shortNames.DY],
    'gv4': [CGMESProfile.shortNames.DY],
    'pgv4': [CGMESProfile.shortNames.DY],
    'gv5': [CGMESProfile.shortNames.DY],
    'pgv5': [CGMESProfile.shortNames.DY],
    'gv6': [CGMESProfile.shortNames.DY],
    'pgv6': [CGMESProfile.shortNames.DY]
  });

  var GovHydroWEH = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydroWEH, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydroWEH);
    function GovHydroWEH() {
      _classCallCheck(this, GovHydroWEH);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydroWEH, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydroWEH";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydroWEH.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.mwbase'], 'cim:ActivePower', 'cim:GovHydroWEH.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.mwbase'], 'cim:ActivePower', 'cim:GovHydroWEH.mwbase');
        }
        if ('cim:GovHydroWEH.rpg' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.rpg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.rpg'], 'cim:Simple_Float', 'cim:GovHydroWEH.rpg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.rpg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.rpg'], 'cim:Simple_Float', 'cim:GovHydroWEH.rpg');
        }
        if ('cim:GovHydroWEH.rpp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.rpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.rpp'], 'cim:Simple_Float', 'cim:GovHydroWEH.rpp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.rpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.rpp'], 'cim:Simple_Float', 'cim:GovHydroWEH.rpp');
        }
        if ('cim:GovHydroWEH.tpe' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.tpe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.tpe'], 'cim:Seconds', 'cim:GovHydroWEH.tpe');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.tpe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.tpe'], 'cim:Seconds', 'cim:GovHydroWEH.tpe');
        }
        if ('cim:GovHydroWEH.kp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.kp'], 'cim:PU', 'cim:GovHydroWEH.kp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.kp'], 'cim:PU', 'cim:GovHydroWEH.kp');
        }
        if ('cim:GovHydroWEH.ki' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.ki'], 'cim:PU', 'cim:GovHydroWEH.ki');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.ki'], 'cim:PU', 'cim:GovHydroWEH.ki');
        }
        if ('cim:GovHydroWEH.kd' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.kd'], 'cim:PU', 'cim:GovHydroWEH.kd');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.kd'], 'cim:PU', 'cim:GovHydroWEH.kd');
        }
        if ('cim:GovHydroWEH.td' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.td'], 'cim:Seconds', 'cim:GovHydroWEH.td');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.td'], 'cim:Seconds', 'cim:GovHydroWEH.td');
        }
        if ('cim:GovHydroWEH.tp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.tp'], 'cim:Seconds', 'cim:GovHydroWEH.tp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.tp'], 'cim:Seconds', 'cim:GovHydroWEH.tp');
        }
        if ('cim:GovHydroWEH.tdv' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.tdv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.tdv'], 'cim:Seconds', 'cim:GovHydroWEH.tdv');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.tdv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.tdv'], 'cim:Seconds', 'cim:GovHydroWEH.tdv');
        }
        if ('cim:GovHydroWEH.tg' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.tg'], 'cim:Seconds', 'cim:GovHydroWEH.tg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.tg'], 'cim:Seconds', 'cim:GovHydroWEH.tg');
        }
        if ('cim:GovHydroWEH.gtmxop' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.gtmxop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gtmxop'], 'cim:PU', 'cim:GovHydroWEH.gtmxop');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.gtmxop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gtmxop'], 'cim:PU', 'cim:GovHydroWEH.gtmxop');
        }
        if ('cim:GovHydroWEH.gtmxcl' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.gtmxcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gtmxcl'], 'cim:PU', 'cim:GovHydroWEH.gtmxcl');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.gtmxcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gtmxcl'], 'cim:PU', 'cim:GovHydroWEH.gtmxcl');
        }
        if ('cim:GovHydroWEH.gmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.gmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gmax'], 'cim:PU', 'cim:GovHydroWEH.gmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.gmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gmax'], 'cim:PU', 'cim:GovHydroWEH.gmax');
        }
        if ('cim:GovHydroWEH.gmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.gmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gmin'], 'cim:PU', 'cim:GovHydroWEH.gmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.gmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gmin'], 'cim:PU', 'cim:GovHydroWEH.gmin');
        }
        if ('cim:GovHydroWEH.dturb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.dturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.dturb'], 'cim:PU', 'cim:GovHydroWEH.dturb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.dturb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.dturb'], 'cim:PU', 'cim:GovHydroWEH.dturb');
        }
        if ('cim:GovHydroWEH.tw' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.tw'], 'cim:Seconds', 'cim:GovHydroWEH.tw');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.tw'], 'cim:Seconds', 'cim:GovHydroWEH.tw');
        }
        if ('cim:GovHydroWEH.db' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.db'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.db'], 'cim:PU', 'cim:GovHydroWEH.db');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.db'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.db'], 'cim:PU', 'cim:GovHydroWEH.db');
        }
        if ('cim:GovHydroWEH.dpv' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.dpv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.dpv'], 'cim:PU', 'cim:GovHydroWEH.dpv');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.dpv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.dpv'], 'cim:PU', 'cim:GovHydroWEH.dpv');
        }
        if ('cim:GovHydroWEH.dicn' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.dicn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.dicn'], 'cim:PU', 'cim:GovHydroWEH.dicn');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.dicn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.dicn'], 'cim:PU', 'cim:GovHydroWEH.dicn');
        }
        if ('cim:GovHydroWEH.feedbackSignal' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.feedbackSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.feedbackSignal'], 'cim:Boolean', 'cim:GovHydroWEH.feedbackSignal');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.feedbackSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.feedbackSignal'], 'cim:Boolean', 'cim:GovHydroWEH.feedbackSignal');
        }
        if ('cim:GovHydroWEH.gv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gv1'], 'cim:PU', 'cim:GovHydroWEH.gv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gv1'], 'cim:PU', 'cim:GovHydroWEH.gv1');
        }
        if ('cim:GovHydroWEH.gv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gv2'], 'cim:PU', 'cim:GovHydroWEH.gv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gv2'], 'cim:PU', 'cim:GovHydroWEH.gv2');
        }
        if ('cim:GovHydroWEH.gv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gv3'], 'cim:PU', 'cim:GovHydroWEH.gv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gv3'], 'cim:PU', 'cim:GovHydroWEH.gv3');
        }
        if ('cim:GovHydroWEH.gv4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gv4'], 'cim:PU', 'cim:GovHydroWEH.gv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gv4'], 'cim:PU', 'cim:GovHydroWEH.gv4');
        }
        if ('cim:GovHydroWEH.gv5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gv5'], 'cim:PU', 'cim:GovHydroWEH.gv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.gv5'], 'cim:PU', 'cim:GovHydroWEH.gv5');
        }
        if ('cim:GovHydroWEH.fl1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fl1'], 'cim:PU', 'cim:GovHydroWEH.fl1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fl1'], 'cim:PU', 'cim:GovHydroWEH.fl1');
        }
        if ('cim:GovHydroWEH.fl2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fl2'], 'cim:PU', 'cim:GovHydroWEH.fl2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fl2'], 'cim:PU', 'cim:GovHydroWEH.fl2');
        }
        if ('cim:GovHydroWEH.fl3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fl3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fl3'], 'cim:PU', 'cim:GovHydroWEH.fl3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fl3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fl3'], 'cim:PU', 'cim:GovHydroWEH.fl3');
        }
        if ('cim:GovHydroWEH.fl4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fl4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fl4'], 'cim:PU', 'cim:GovHydroWEH.fl4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fl4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fl4'], 'cim:PU', 'cim:GovHydroWEH.fl4');
        }
        if ('cim:GovHydroWEH.fl5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fl5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fl5'], 'cim:PU', 'cim:GovHydroWEH.fl5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fl5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fl5'], 'cim:PU', 'cim:GovHydroWEH.fl5');
        }
        if ('cim:GovHydroWEH.fp1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fp1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp1'], 'cim:PU', 'cim:GovHydroWEH.fp1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fp1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp1'], 'cim:PU', 'cim:GovHydroWEH.fp1');
        }
        if ('cim:GovHydroWEH.fp2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fp2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp2'], 'cim:PU', 'cim:GovHydroWEH.fp2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fp2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp2'], 'cim:PU', 'cim:GovHydroWEH.fp2');
        }
        if ('cim:GovHydroWEH.fp3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fp3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp3'], 'cim:PU', 'cim:GovHydroWEH.fp3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fp3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp3'], 'cim:PU', 'cim:GovHydroWEH.fp3');
        }
        if ('cim:GovHydroWEH.fp4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fp4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp4'], 'cim:PU', 'cim:GovHydroWEH.fp4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fp4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp4'], 'cim:PU', 'cim:GovHydroWEH.fp4');
        }
        if ('cim:GovHydroWEH.fp5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fp5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp5'], 'cim:PU', 'cim:GovHydroWEH.fp5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fp5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp5'], 'cim:PU', 'cim:GovHydroWEH.fp5');
        }
        if ('cim:GovHydroWEH.fp6' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fp6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp6'], 'cim:PU', 'cim:GovHydroWEH.fp6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fp6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp6'], 'cim:PU', 'cim:GovHydroWEH.fp6');
        }
        if ('cim:GovHydroWEH.fp7' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fp7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp7'], 'cim:PU', 'cim:GovHydroWEH.fp7');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fp7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp7'], 'cim:PU', 'cim:GovHydroWEH.fp7');
        }
        if ('cim:GovHydroWEH.fp8' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fp8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp8'], 'cim:PU', 'cim:GovHydroWEH.fp8');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fp8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp8'], 'cim:PU', 'cim:GovHydroWEH.fp8');
        }
        if ('cim:GovHydroWEH.fp9' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fp9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp9'], 'cim:PU', 'cim:GovHydroWEH.fp9');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fp9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp9'], 'cim:PU', 'cim:GovHydroWEH.fp9');
        }
        if ('cim:GovHydroWEH.fp10' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.fp10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp10'], 'cim:PU', 'cim:GovHydroWEH.fp10');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.fp10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.fp10'], 'cim:PU', 'cim:GovHydroWEH.fp10');
        }
        if ('cim:GovHydroWEH.pmss1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.pmss1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss1'], 'cim:PU', 'cim:GovHydroWEH.pmss1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.pmss1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss1'], 'cim:PU', 'cim:GovHydroWEH.pmss1');
        }
        if ('cim:GovHydroWEH.pmss2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.pmss2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss2'], 'cim:PU', 'cim:GovHydroWEH.pmss2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.pmss2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss2'], 'cim:PU', 'cim:GovHydroWEH.pmss2');
        }
        if ('cim:GovHydroWEH.pmss3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.pmss3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss3'], 'cim:PU', 'cim:GovHydroWEH.pmss3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.pmss3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss3'], 'cim:PU', 'cim:GovHydroWEH.pmss3');
        }
        if ('cim:GovHydroWEH.pmss4' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.pmss4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss4'], 'cim:PU', 'cim:GovHydroWEH.pmss4');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.pmss4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss4'], 'cim:PU', 'cim:GovHydroWEH.pmss4');
        }
        if ('cim:GovHydroWEH.pmss5' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.pmss5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss5'], 'cim:PU', 'cim:GovHydroWEH.pmss5');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.pmss5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss5'], 'cim:PU', 'cim:GovHydroWEH.pmss5');
        }
        if ('cim:GovHydroWEH.pmss6' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.pmss6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss6'], 'cim:PU', 'cim:GovHydroWEH.pmss6');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.pmss6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss6'], 'cim:PU', 'cim:GovHydroWEH.pmss6');
        }
        if ('cim:GovHydroWEH.pmss7' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.pmss7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss7'], 'cim:PU', 'cim:GovHydroWEH.pmss7');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.pmss7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss7'], 'cim:PU', 'cim:GovHydroWEH.pmss7');
        }
        if ('cim:GovHydroWEH.pmss8' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.pmss8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss8'], 'cim:PU', 'cim:GovHydroWEH.pmss8');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.pmss8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss8'], 'cim:PU', 'cim:GovHydroWEH.pmss8');
        }
        if ('cim:GovHydroWEH.pmss9' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.pmss9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss9'], 'cim:PU', 'cim:GovHydroWEH.pmss9');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.pmss9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss9'], 'cim:PU', 'cim:GovHydroWEH.pmss9');
        }
        if ('cim:GovHydroWEH.pmss10' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWEH.pmss10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss10'], 'cim:PU', 'cim:GovHydroWEH.pmss10');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWEH.pmss10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWEH.pmss10'], 'cim:PU', 'cim:GovHydroWEH.pmss10');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydroWEH.mwbase", "cim:GovHydroWEH.rpg", "cim:GovHydroWEH.rpp", "cim:GovHydroWEH.tpe", "cim:GovHydroWEH.kp", "cim:GovHydroWEH.ki", "cim:GovHydroWEH.kd", "cim:GovHydroWEH.td", "cim:GovHydroWEH.tp", "cim:GovHydroWEH.tdv", "cim:GovHydroWEH.tg", "cim:GovHydroWEH.gtmxop", "cim:GovHydroWEH.gtmxcl", "cim:GovHydroWEH.gmax", "cim:GovHydroWEH.gmin", "cim:GovHydroWEH.dturb", "cim:GovHydroWEH.tw", "cim:GovHydroWEH.db", "cim:GovHydroWEH.dpv", "cim:GovHydroWEH.dicn", "cim:GovHydroWEH.feedbackSignal", "cim:GovHydroWEH.gv1", "cim:GovHydroWEH.gv2", "cim:GovHydroWEH.gv3", "cim:GovHydroWEH.gv4", "cim:GovHydroWEH.gv5", "cim:GovHydroWEH.fl1", "cim:GovHydroWEH.fl2", "cim:GovHydroWEH.fl3", "cim:GovHydroWEH.fl4", "cim:GovHydroWEH.fl5", "cim:GovHydroWEH.fp1", "cim:GovHydroWEH.fp2", "cim:GovHydroWEH.fp3", "cim:GovHydroWEH.fp4", "cim:GovHydroWEH.fp5", "cim:GovHydroWEH.fp6", "cim:GovHydroWEH.fp7", "cim:GovHydroWEH.fp8", "cim:GovHydroWEH.fp9", "cim:GovHydroWEH.fp10", "cim:GovHydroWEH.pmss1", "cim:GovHydroWEH.pmss2", "cim:GovHydroWEH.pmss3", "cim:GovHydroWEH.pmss4", "cim:GovHydroWEH.pmss5", "cim:GovHydroWEH.pmss6", "cim:GovHydroWEH.pmss7", "cim:GovHydroWEH.pmss8", "cim:GovHydroWEH.pmss9", "cim:GovHydroWEH.pmss10"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydroWEH.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydroWEH: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydroWEH.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydroWEH;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydroWEH, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'rpg': [CGMESProfile.shortNames.DY],
    'rpp': [CGMESProfile.shortNames.DY],
    'tpe': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'td': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    'tdv': [CGMESProfile.shortNames.DY],
    'tg': [CGMESProfile.shortNames.DY],
    'gtmxop': [CGMESProfile.shortNames.DY],
    'gtmxcl': [CGMESProfile.shortNames.DY],
    'gmax': [CGMESProfile.shortNames.DY],
    'gmin': [CGMESProfile.shortNames.DY],
    'dturb': [CGMESProfile.shortNames.DY],
    'tw': [CGMESProfile.shortNames.DY],
    'db': [CGMESProfile.shortNames.DY],
    'dpv': [CGMESProfile.shortNames.DY],
    'dicn': [CGMESProfile.shortNames.DY],
    'feedbackSignal': [CGMESProfile.shortNames.DY],
    'gv1': [CGMESProfile.shortNames.DY],
    'gv2': [CGMESProfile.shortNames.DY],
    'gv3': [CGMESProfile.shortNames.DY],
    'gv4': [CGMESProfile.shortNames.DY],
    'gv5': [CGMESProfile.shortNames.DY],
    'fl1': [CGMESProfile.shortNames.DY],
    'fl2': [CGMESProfile.shortNames.DY],
    'fl3': [CGMESProfile.shortNames.DY],
    'fl4': [CGMESProfile.shortNames.DY],
    'fl5': [CGMESProfile.shortNames.DY],
    'fp1': [CGMESProfile.shortNames.DY],
    'fp2': [CGMESProfile.shortNames.DY],
    'fp3': [CGMESProfile.shortNames.DY],
    'fp4': [CGMESProfile.shortNames.DY],
    'fp5': [CGMESProfile.shortNames.DY],
    'fp6': [CGMESProfile.shortNames.DY],
    'fp7': [CGMESProfile.shortNames.DY],
    'fp8': [CGMESProfile.shortNames.DY],
    'fp9': [CGMESProfile.shortNames.DY],
    'fp10': [CGMESProfile.shortNames.DY],
    'pmss1': [CGMESProfile.shortNames.DY],
    'pmss2': [CGMESProfile.shortNames.DY],
    'pmss3': [CGMESProfile.shortNames.DY],
    'pmss4': [CGMESProfile.shortNames.DY],
    'pmss5': [CGMESProfile.shortNames.DY],
    'pmss6': [CGMESProfile.shortNames.DY],
    'pmss7': [CGMESProfile.shortNames.DY],
    'pmss8': [CGMESProfile.shortNames.DY],
    'pmss9': [CGMESProfile.shortNames.DY],
    'pmss10': [CGMESProfile.shortNames.DY]
  });

  var GovHydroWPID = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovHydroWPID, _TurbineGovernorDynam);
    var _super = _createSuper(GovHydroWPID);
    function GovHydroWPID() {
      _classCallCheck(this, GovHydroWPID);
      return _super.apply(this, arguments);
    }
    _createClass(GovHydroWPID, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovHydroWPID";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovHydroWPID.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.mwbase'], 'cim:ActivePower', 'cim:GovHydroWPID.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.mwbase'], 'cim:ActivePower', 'cim:GovHydroWPID.mwbase');
        }
        if ('cim:GovHydroWPID.treg' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.treg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.treg'], 'cim:Seconds', 'cim:GovHydroWPID.treg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.treg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.treg'], 'cim:Seconds', 'cim:GovHydroWPID.treg');
        }
        if ('cim:GovHydroWPID.reg' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.reg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.reg'], 'cim:PU', 'cim:GovHydroWPID.reg');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.reg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.reg'], 'cim:PU', 'cim:GovHydroWPID.reg');
        }
        if ('cim:GovHydroWPID.kp' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.kp'], 'cim:PU', 'cim:GovHydroWPID.kp');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.kp'], 'cim:PU', 'cim:GovHydroWPID.kp');
        }
        if ('cim:GovHydroWPID.ki' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.ki'], 'cim:PU', 'cim:GovHydroWPID.ki');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.ki'], 'cim:PU', 'cim:GovHydroWPID.ki');
        }
        if ('cim:GovHydroWPID.kd' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.kd'], 'cim:PU', 'cim:GovHydroWPID.kd');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.kd'], 'cim:PU', 'cim:GovHydroWPID.kd');
        }
        if ('cim:GovHydroWPID.ta' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.ta'], 'cim:Seconds', 'cim:GovHydroWPID.ta');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.ta'], 'cim:Seconds', 'cim:GovHydroWPID.ta');
        }
        if ('cim:GovHydroWPID.tb' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.tb'], 'cim:Seconds', 'cim:GovHydroWPID.tb');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.tb'], 'cim:Seconds', 'cim:GovHydroWPID.tb');
        }
        if ('cim:GovHydroWPID.velmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.velmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.velmax'], 'cim:PU', 'cim:GovHydroWPID.velmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.velmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.velmax'], 'cim:PU', 'cim:GovHydroWPID.velmax');
        }
        if ('cim:GovHydroWPID.velmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.velmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.velmin'], 'cim:PU', 'cim:GovHydroWPID.velmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.velmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.velmin'], 'cim:PU', 'cim:GovHydroWPID.velmin');
        }
        if ('cim:GovHydroWPID.gatmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.gatmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.gatmax'], 'cim:PU', 'cim:GovHydroWPID.gatmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.gatmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.gatmax'], 'cim:PU', 'cim:GovHydroWPID.gatmax');
        }
        if ('cim:GovHydroWPID.gatmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.gatmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.gatmin'], 'cim:PU', 'cim:GovHydroWPID.gatmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.gatmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.gatmin'], 'cim:PU', 'cim:GovHydroWPID.gatmin');
        }
        if ('cim:GovHydroWPID.tw' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.tw'], 'cim:Seconds', 'cim:GovHydroWPID.tw');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.tw'], 'cim:Seconds', 'cim:GovHydroWPID.tw');
        }
        if ('cim:GovHydroWPID.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.pmax'], 'cim:PU', 'cim:GovHydroWPID.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.pmax'], 'cim:PU', 'cim:GovHydroWPID.pmax');
        }
        if ('cim:GovHydroWPID.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.pmin'], 'cim:PU', 'cim:GovHydroWPID.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.pmin'], 'cim:PU', 'cim:GovHydroWPID.pmin');
        }
        if ('cim:GovHydroWPID.d' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.d'], 'cim:PU', 'cim:GovHydroWPID.d');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.d'], 'cim:PU', 'cim:GovHydroWPID.d');
        }
        if ('cim:GovHydroWPID.gv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.gv3'], 'cim:PU', 'cim:GovHydroWPID.gv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.gv3'], 'cim:PU', 'cim:GovHydroWPID.gv3');
        }
        if ('cim:GovHydroWPID.gv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.gv1'], 'cim:PU', 'cim:GovHydroWPID.gv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.gv1'], 'cim:PU', 'cim:GovHydroWPID.gv1');
        }
        if ('cim:GovHydroWPID.pgv1' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.pgv1'], 'cim:PU', 'cim:GovHydroWPID.pgv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.pgv1'], 'cim:PU', 'cim:GovHydroWPID.pgv1');
        }
        if ('cim:GovHydroWPID.gv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.gv2'], 'cim:PU', 'cim:GovHydroWPID.gv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.gv2'], 'cim:PU', 'cim:GovHydroWPID.gv2');
        }
        if ('cim:GovHydroWPID.pgv2' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.pgv2'], 'cim:PU', 'cim:GovHydroWPID.pgv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.pgv2'], 'cim:PU', 'cim:GovHydroWPID.pgv2');
        }
        if ('cim:GovHydroWPID.pgv3' in object) {
          attributeEntries['filledEntries']['cim:GovHydroWPID.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.pgv3'], 'cim:PU', 'cim:GovHydroWPID.pgv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovHydroWPID.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovHydroWPID.pgv3'], 'cim:PU', 'cim:GovHydroWPID.pgv3');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovHydroWPID.mwbase", "cim:GovHydroWPID.treg", "cim:GovHydroWPID.reg", "cim:GovHydroWPID.kp", "cim:GovHydroWPID.ki", "cim:GovHydroWPID.kd", "cim:GovHydroWPID.ta", "cim:GovHydroWPID.tb", "cim:GovHydroWPID.velmax", "cim:GovHydroWPID.velmin", "cim:GovHydroWPID.gatmax", "cim:GovHydroWPID.gatmin", "cim:GovHydroWPID.tw", "cim:GovHydroWPID.pmax", "cim:GovHydroWPID.pmin", "cim:GovHydroWPID.d", "cim:GovHydroWPID.gv3", "cim:GovHydroWPID.gv1", "cim:GovHydroWPID.pgv1", "cim:GovHydroWPID.gv2", "cim:GovHydroWPID.pgv2", "cim:GovHydroWPID.pgv3"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovHydroWPID.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovHydroWPID: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovHydroWPID.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovHydroWPID;
  }(TurbineGovernorDynamics);
  _defineProperty(GovHydroWPID, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'treg': [CGMESProfile.shortNames.DY],
    'reg': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'velmax': [CGMESProfile.shortNames.DY],
    'velmin': [CGMESProfile.shortNames.DY],
    'gatmax': [CGMESProfile.shortNames.DY],
    'gatmin': [CGMESProfile.shortNames.DY],
    'tw': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    'd': [CGMESProfile.shortNames.DY],
    'gv3': [CGMESProfile.shortNames.DY],
    'gv1': [CGMESProfile.shortNames.DY],
    'pgv1': [CGMESProfile.shortNames.DY],
    'gv2': [CGMESProfile.shortNames.DY],
    'pgv2': [CGMESProfile.shortNames.DY],
    'pgv3': [CGMESProfile.shortNames.DY]
  });

  var GovSteam0 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovSteam0, _TurbineGovernorDynam);
    var _super = _createSuper(GovSteam0);
    function GovSteam0() {
      _classCallCheck(this, GovSteam0);
      return _super.apply(this, arguments);
    }
    _createClass(GovSteam0, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovSteam0";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovSteam0.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovSteam0.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.mwbase'], 'cim:ActivePower', 'cim:GovSteam0.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam0.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.mwbase'], 'cim:ActivePower', 'cim:GovSteam0.mwbase');
        }
        if ('cim:GovSteam0.r' in object) {
          attributeEntries['filledEntries']['cim:GovSteam0.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.r'], 'cim:PU', 'cim:GovSteam0.r');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam0.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.r'], 'cim:PU', 'cim:GovSteam0.r');
        }
        if ('cim:GovSteam0.t1' in object) {
          attributeEntries['filledEntries']['cim:GovSteam0.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.t1'], 'cim:Seconds', 'cim:GovSteam0.t1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam0.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.t1'], 'cim:Seconds', 'cim:GovSteam0.t1');
        }
        if ('cim:GovSteam0.vmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteam0.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.vmax'], 'cim:PU', 'cim:GovSteam0.vmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam0.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.vmax'], 'cim:PU', 'cim:GovSteam0.vmax');
        }
        if ('cim:GovSteam0.vmin' in object) {
          attributeEntries['filledEntries']['cim:GovSteam0.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.vmin'], 'cim:PU', 'cim:GovSteam0.vmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam0.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.vmin'], 'cim:PU', 'cim:GovSteam0.vmin');
        }
        if ('cim:GovSteam0.t2' in object) {
          attributeEntries['filledEntries']['cim:GovSteam0.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.t2'], 'cim:Seconds', 'cim:GovSteam0.t2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam0.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.t2'], 'cim:Seconds', 'cim:GovSteam0.t2');
        }
        if ('cim:GovSteam0.t3' in object) {
          attributeEntries['filledEntries']['cim:GovSteam0.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.t3'], 'cim:Seconds', 'cim:GovSteam0.t3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam0.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.t3'], 'cim:Seconds', 'cim:GovSteam0.t3');
        }
        if ('cim:GovSteam0.dt' in object) {
          attributeEntries['filledEntries']['cim:GovSteam0.dt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.dt'], 'cim:PU', 'cim:GovSteam0.dt');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam0.dt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam0.dt'], 'cim:PU', 'cim:GovSteam0.dt');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovSteam0.mwbase", "cim:GovSteam0.r", "cim:GovSteam0.t1", "cim:GovSteam0.vmax", "cim:GovSteam0.vmin", "cim:GovSteam0.t2", "cim:GovSteam0.t3", "cim:GovSteam0.dt"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovSteam0.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovSteam0: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovSteam0.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovSteam0;
  }(TurbineGovernorDynamics);
  _defineProperty(GovSteam0, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'r': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    'vmax': [CGMESProfile.shortNames.DY],
    'vmin': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    'dt': [CGMESProfile.shortNames.DY]
  });

  var GovSteam1 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovSteam1, _TurbineGovernorDynam);
    var _super = _createSuper(GovSteam1);
    function GovSteam1() {
      _classCallCheck(this, GovSteam1);
      return _super.apply(this, arguments);
    }
    _createClass(GovSteam1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovSteam1";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovSteam1.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.mwbase'], 'cim:ActivePower', 'cim:GovSteam1.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.mwbase'], 'cim:ActivePower', 'cim:GovSteam1.mwbase');
        }
        if ('cim:GovSteam1.k' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k'], 'cim:PU', 'cim:GovSteam1.k');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k'], 'cim:PU', 'cim:GovSteam1.k');
        }
        if ('cim:GovSteam1.t1' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t1'], 'cim:Seconds', 'cim:GovSteam1.t1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t1'], 'cim:Seconds', 'cim:GovSteam1.t1');
        }
        if ('cim:GovSteam1.t2' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t2'], 'cim:Seconds', 'cim:GovSteam1.t2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t2'], 'cim:Seconds', 'cim:GovSteam1.t2');
        }
        if ('cim:GovSteam1.t3' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t3'], 'cim:Seconds', 'cim:GovSteam1.t3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t3'], 'cim:Seconds', 'cim:GovSteam1.t3');
        }
        if ('cim:GovSteam1.uo' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.uo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.uo'], 'cim:Simple_Float', 'cim:GovSteam1.uo');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.uo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.uo'], 'cim:Simple_Float', 'cim:GovSteam1.uo');
        }
        if ('cim:GovSteam1.uc' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.uc'], 'cim:Simple_Float', 'cim:GovSteam1.uc');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.uc'], 'cim:Simple_Float', 'cim:GovSteam1.uc');
        }
        if ('cim:GovSteam1.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pmax'], 'cim:PU', 'cim:GovSteam1.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pmax'], 'cim:PU', 'cim:GovSteam1.pmax');
        }
        if ('cim:GovSteam1.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pmin'], 'cim:PU', 'cim:GovSteam1.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pmin'], 'cim:PU', 'cim:GovSteam1.pmin');
        }
        if ('cim:GovSteam1.t4' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t4'], 'cim:Seconds', 'cim:GovSteam1.t4');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t4'], 'cim:Seconds', 'cim:GovSteam1.t4');
        }
        if ('cim:GovSteam1.k1' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k1'], 'cim:Simple_Float', 'cim:GovSteam1.k1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k1'], 'cim:Simple_Float', 'cim:GovSteam1.k1');
        }
        if ('cim:GovSteam1.k2' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k2'], 'cim:Simple_Float', 'cim:GovSteam1.k2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k2'], 'cim:Simple_Float', 'cim:GovSteam1.k2');
        }
        if ('cim:GovSteam1.t5' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t5'], 'cim:Seconds', 'cim:GovSteam1.t5');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t5'], 'cim:Seconds', 'cim:GovSteam1.t5');
        }
        if ('cim:GovSteam1.k3' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k3'], 'cim:Simple_Float', 'cim:GovSteam1.k3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k3'], 'cim:Simple_Float', 'cim:GovSteam1.k3');
        }
        if ('cim:GovSteam1.k4' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.k4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k4'], 'cim:Simple_Float', 'cim:GovSteam1.k4');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.k4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k4'], 'cim:Simple_Float', 'cim:GovSteam1.k4');
        }
        if ('cim:GovSteam1.t6' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t6'], 'cim:Seconds', 'cim:GovSteam1.t6');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t6'], 'cim:Seconds', 'cim:GovSteam1.t6');
        }
        if ('cim:GovSteam1.k5' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.k5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k5'], 'cim:Simple_Float', 'cim:GovSteam1.k5');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.k5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k5'], 'cim:Simple_Float', 'cim:GovSteam1.k5');
        }
        if ('cim:GovSteam1.k6' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.k6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k6'], 'cim:Simple_Float', 'cim:GovSteam1.k6');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.k6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k6'], 'cim:Simple_Float', 'cim:GovSteam1.k6');
        }
        if ('cim:GovSteam1.t7' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t7'], 'cim:Seconds', 'cim:GovSteam1.t7');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.t7'], 'cim:Seconds', 'cim:GovSteam1.t7');
        }
        if ('cim:GovSteam1.k7' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.k7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k7'], 'cim:Simple_Float', 'cim:GovSteam1.k7');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.k7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k7'], 'cim:Simple_Float', 'cim:GovSteam1.k7');
        }
        if ('cim:GovSteam1.k8' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.k8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k8'], 'cim:Simple_Float', 'cim:GovSteam1.k8');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.k8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.k8'], 'cim:Simple_Float', 'cim:GovSteam1.k8');
        }
        if ('cim:GovSteam1.db1' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.db1'], 'cim:Frequency', 'cim:GovSteam1.db1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.db1'], 'cim:Frequency', 'cim:GovSteam1.db1');
        }
        if ('cim:GovSteam1.eps' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.eps'], 'cim:Frequency', 'cim:GovSteam1.eps');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.eps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.eps'], 'cim:Frequency', 'cim:GovSteam1.eps');
        }
        if ('cim:GovSteam1.sdb1' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.sdb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.sdb1'], 'cim:Boolean', 'cim:GovSteam1.sdb1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.sdb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.sdb1'], 'cim:Boolean', 'cim:GovSteam1.sdb1');
        }
        if ('cim:GovSteam1.sdb2' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.sdb2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.sdb2'], 'cim:Boolean', 'cim:GovSteam1.sdb2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.sdb2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.sdb2'], 'cim:Boolean', 'cim:GovSteam1.sdb2');
        }
        if ('cim:GovSteam1.db2' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.db2'], 'cim:ActivePower', 'cim:GovSteam1.db2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.db2'], 'cim:ActivePower', 'cim:GovSteam1.db2');
        }
        if ('cim:GovSteam1.valve' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.valve'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.valve'], 'cim:Boolean', 'cim:GovSteam1.valve');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.valve'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.valve'], 'cim:Boolean', 'cim:GovSteam1.valve');
        }
        if ('cim:GovSteam1.gv1' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.gv1'], 'cim:PU', 'cim:GovSteam1.gv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.gv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.gv1'], 'cim:PU', 'cim:GovSteam1.gv1');
        }
        if ('cim:GovSteam1.pgv1' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pgv1'], 'cim:PU', 'cim:GovSteam1.pgv1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.pgv1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pgv1'], 'cim:PU', 'cim:GovSteam1.pgv1');
        }
        if ('cim:GovSteam1.gv2' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.gv2'], 'cim:PU', 'cim:GovSteam1.gv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.gv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.gv2'], 'cim:PU', 'cim:GovSteam1.gv2');
        }
        if ('cim:GovSteam1.pgv2' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pgv2'], 'cim:PU', 'cim:GovSteam1.pgv2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.pgv2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pgv2'], 'cim:PU', 'cim:GovSteam1.pgv2');
        }
        if ('cim:GovSteam1.gv3' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.gv3'], 'cim:PU', 'cim:GovSteam1.gv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.gv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.gv3'], 'cim:PU', 'cim:GovSteam1.gv3');
        }
        if ('cim:GovSteam1.pgv3' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pgv3'], 'cim:PU', 'cim:GovSteam1.pgv3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.pgv3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pgv3'], 'cim:PU', 'cim:GovSteam1.pgv3');
        }
        if ('cim:GovSteam1.gv4' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.gv4'], 'cim:PU', 'cim:GovSteam1.gv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.gv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.gv4'], 'cim:PU', 'cim:GovSteam1.gv4');
        }
        if ('cim:GovSteam1.pgv4' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pgv4'], 'cim:PU', 'cim:GovSteam1.pgv4');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.pgv4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pgv4'], 'cim:PU', 'cim:GovSteam1.pgv4');
        }
        if ('cim:GovSteam1.gv5' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.gv5'], 'cim:PU', 'cim:GovSteam1.gv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.gv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.gv5'], 'cim:PU', 'cim:GovSteam1.gv5');
        }
        if ('cim:GovSteam1.pgv5' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pgv5'], 'cim:PU', 'cim:GovSteam1.pgv5');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.pgv5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pgv5'], 'cim:PU', 'cim:GovSteam1.pgv5');
        }
        if ('cim:GovSteam1.gv6' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.gv6'], 'cim:PU', 'cim:GovSteam1.gv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.gv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.gv6'], 'cim:PU', 'cim:GovSteam1.gv6');
        }
        if ('cim:GovSteam1.pgv6' in object) {
          attributeEntries['filledEntries']['cim:GovSteam1.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pgv6'], 'cim:PU', 'cim:GovSteam1.pgv6');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam1.pgv6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam1.pgv6'], 'cim:PU', 'cim:GovSteam1.pgv6');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovSteam1.mwbase", "cim:GovSteam1.k", "cim:GovSteam1.t1", "cim:GovSteam1.t2", "cim:GovSteam1.t3", "cim:GovSteam1.uo", "cim:GovSteam1.uc", "cim:GovSteam1.pmax", "cim:GovSteam1.pmin", "cim:GovSteam1.t4", "cim:GovSteam1.k1", "cim:GovSteam1.k2", "cim:GovSteam1.t5", "cim:GovSteam1.k3", "cim:GovSteam1.k4", "cim:GovSteam1.t6", "cim:GovSteam1.k5", "cim:GovSteam1.k6", "cim:GovSteam1.t7", "cim:GovSteam1.k7", "cim:GovSteam1.k8", "cim:GovSteam1.db1", "cim:GovSteam1.eps", "cim:GovSteam1.sdb1", "cim:GovSteam1.sdb2", "cim:GovSteam1.db2", "cim:GovSteam1.valve", "cim:GovSteam1.gv1", "cim:GovSteam1.pgv1", "cim:GovSteam1.gv2", "cim:GovSteam1.pgv2", "cim:GovSteam1.gv3", "cim:GovSteam1.pgv3", "cim:GovSteam1.gv4", "cim:GovSteam1.pgv4", "cim:GovSteam1.gv5", "cim:GovSteam1.pgv5", "cim:GovSteam1.gv6", "cim:GovSteam1.pgv6"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovSteam1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovSteam1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovSteam1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovSteam1;
  }(TurbineGovernorDynamics);
  _defineProperty(GovSteam1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    'uo': [CGMESProfile.shortNames.DY],
    'uc': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    'k3': [CGMESProfile.shortNames.DY],
    'k4': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    'k5': [CGMESProfile.shortNames.DY],
    'k6': [CGMESProfile.shortNames.DY],
    't7': [CGMESProfile.shortNames.DY],
    'k7': [CGMESProfile.shortNames.DY],
    'k8': [CGMESProfile.shortNames.DY],
    'db1': [CGMESProfile.shortNames.DY],
    'eps': [CGMESProfile.shortNames.DY],
    'sdb1': [CGMESProfile.shortNames.DY],
    'sdb2': [CGMESProfile.shortNames.DY],
    'db2': [CGMESProfile.shortNames.DY],
    'valve': [CGMESProfile.shortNames.DY],
    'gv1': [CGMESProfile.shortNames.DY],
    'pgv1': [CGMESProfile.shortNames.DY],
    'gv2': [CGMESProfile.shortNames.DY],
    'pgv2': [CGMESProfile.shortNames.DY],
    'gv3': [CGMESProfile.shortNames.DY],
    'pgv3': [CGMESProfile.shortNames.DY],
    'gv4': [CGMESProfile.shortNames.DY],
    'pgv4': [CGMESProfile.shortNames.DY],
    'gv5': [CGMESProfile.shortNames.DY],
    'pgv5': [CGMESProfile.shortNames.DY],
    'gv6': [CGMESProfile.shortNames.DY],
    'pgv6': [CGMESProfile.shortNames.DY]
  });

  var GovSteam2 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovSteam2, _TurbineGovernorDynam);
    var _super = _createSuper(GovSteam2);
    function GovSteam2() {
      _classCallCheck(this, GovSteam2);
      return _super.apply(this, arguments);
    }
    _createClass(GovSteam2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovSteam2";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovSteam2.k' in object) {
          attributeEntries['filledEntries']['cim:GovSteam2.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.k'], 'cim:Simple_Float', 'cim:GovSteam2.k');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam2.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.k'], 'cim:Simple_Float', 'cim:GovSteam2.k');
        }
        if ('cim:GovSteam2.dbf' in object) {
          attributeEntries['filledEntries']['cim:GovSteam2.dbf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.dbf'], 'cim:PU', 'cim:GovSteam2.dbf');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam2.dbf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.dbf'], 'cim:PU', 'cim:GovSteam2.dbf');
        }
        if ('cim:GovSteam2.t1' in object) {
          attributeEntries['filledEntries']['cim:GovSteam2.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.t1'], 'cim:Seconds', 'cim:GovSteam2.t1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam2.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.t1'], 'cim:Seconds', 'cim:GovSteam2.t1');
        }
        if ('cim:GovSteam2.t2' in object) {
          attributeEntries['filledEntries']['cim:GovSteam2.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.t2'], 'cim:Seconds', 'cim:GovSteam2.t2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam2.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.t2'], 'cim:Seconds', 'cim:GovSteam2.t2');
        }
        if ('cim:GovSteam2.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteam2.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.pmax'], 'cim:PU', 'cim:GovSteam2.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam2.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.pmax'], 'cim:PU', 'cim:GovSteam2.pmax');
        }
        if ('cim:GovSteam2.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovSteam2.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.pmin'], 'cim:PU', 'cim:GovSteam2.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam2.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.pmin'], 'cim:PU', 'cim:GovSteam2.pmin');
        }
        if ('cim:GovSteam2.mxef' in object) {
          attributeEntries['filledEntries']['cim:GovSteam2.mxef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.mxef'], 'cim:PU', 'cim:GovSteam2.mxef');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam2.mxef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.mxef'], 'cim:PU', 'cim:GovSteam2.mxef');
        }
        if ('cim:GovSteam2.mnef' in object) {
          attributeEntries['filledEntries']['cim:GovSteam2.mnef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.mnef'], 'cim:PU', 'cim:GovSteam2.mnef');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteam2.mnef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteam2.mnef'], 'cim:PU', 'cim:GovSteam2.mnef');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovSteam2.k", "cim:GovSteam2.dbf", "cim:GovSteam2.t1", "cim:GovSteam2.t2", "cim:GovSteam2.pmax", "cim:GovSteam2.pmin", "cim:GovSteam2.mxef", "cim:GovSteam2.mnef"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovSteam2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovSteam2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovSteam2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovSteam2;
  }(TurbineGovernorDynamics);
  _defineProperty(GovSteam2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    'dbf': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    'mxef': [CGMESProfile.shortNames.DY],
    'mnef': [CGMESProfile.shortNames.DY]
  });

  var GovSteamCC = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovSteamCC, _TurbineGovernorDynam);
    var _super = _createSuper(GovSteamCC);
    function GovSteamCC() {
      _classCallCheck(this, GovSteamCC);
      return _super.apply(this, arguments);
    }
    _createClass(GovSteamCC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovSteamCC";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovSteamCC.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.mwbase'], 'cim:ActivePower', 'cim:GovSteamCC.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.mwbase'], 'cim:ActivePower', 'cim:GovSteamCC.mwbase');
        }
        if ('cim:GovSteamCC.pmaxhp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.pmaxhp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.pmaxhp'], 'cim:PU', 'cim:GovSteamCC.pmaxhp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.pmaxhp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.pmaxhp'], 'cim:PU', 'cim:GovSteamCC.pmaxhp');
        }
        if ('cim:GovSteamCC.rhp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.rhp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.rhp'], 'cim:PU', 'cim:GovSteamCC.rhp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.rhp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.rhp'], 'cim:PU', 'cim:GovSteamCC.rhp');
        }
        if ('cim:GovSteamCC.t1hp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.t1hp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t1hp'], 'cim:Seconds', 'cim:GovSteamCC.t1hp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.t1hp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t1hp'], 'cim:Seconds', 'cim:GovSteamCC.t1hp');
        }
        if ('cim:GovSteamCC.t3hp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.t3hp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t3hp'], 'cim:Seconds', 'cim:GovSteamCC.t3hp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.t3hp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t3hp'], 'cim:Seconds', 'cim:GovSteamCC.t3hp');
        }
        if ('cim:GovSteamCC.t4hp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.t4hp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t4hp'], 'cim:Seconds', 'cim:GovSteamCC.t4hp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.t4hp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t4hp'], 'cim:Seconds', 'cim:GovSteamCC.t4hp');
        }
        if ('cim:GovSteamCC.t5hp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.t5hp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t5hp'], 'cim:Seconds', 'cim:GovSteamCC.t5hp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.t5hp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t5hp'], 'cim:Seconds', 'cim:GovSteamCC.t5hp');
        }
        if ('cim:GovSteamCC.fhp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.fhp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.fhp'], 'cim:PU', 'cim:GovSteamCC.fhp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.fhp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.fhp'], 'cim:PU', 'cim:GovSteamCC.fhp');
        }
        if ('cim:GovSteamCC.dhp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.dhp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.dhp'], 'cim:PU', 'cim:GovSteamCC.dhp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.dhp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.dhp'], 'cim:PU', 'cim:GovSteamCC.dhp');
        }
        if ('cim:GovSteamCC.pmaxlp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.pmaxlp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.pmaxlp'], 'cim:PU', 'cim:GovSteamCC.pmaxlp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.pmaxlp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.pmaxlp'], 'cim:PU', 'cim:GovSteamCC.pmaxlp');
        }
        if ('cim:GovSteamCC.rlp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.rlp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.rlp'], 'cim:PU', 'cim:GovSteamCC.rlp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.rlp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.rlp'], 'cim:PU', 'cim:GovSteamCC.rlp');
        }
        if ('cim:GovSteamCC.t1lp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.t1lp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t1lp'], 'cim:Seconds', 'cim:GovSteamCC.t1lp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.t1lp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t1lp'], 'cim:Seconds', 'cim:GovSteamCC.t1lp');
        }
        if ('cim:GovSteamCC.t3lp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.t3lp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t3lp'], 'cim:Seconds', 'cim:GovSteamCC.t3lp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.t3lp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t3lp'], 'cim:Seconds', 'cim:GovSteamCC.t3lp');
        }
        if ('cim:GovSteamCC.t4lp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.t4lp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t4lp'], 'cim:Seconds', 'cim:GovSteamCC.t4lp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.t4lp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t4lp'], 'cim:Seconds', 'cim:GovSteamCC.t4lp');
        }
        if ('cim:GovSteamCC.t5lp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.t5lp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t5lp'], 'cim:Seconds', 'cim:GovSteamCC.t5lp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.t5lp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.t5lp'], 'cim:Seconds', 'cim:GovSteamCC.t5lp');
        }
        if ('cim:GovSteamCC.flp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.flp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.flp'], 'cim:PU', 'cim:GovSteamCC.flp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.flp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.flp'], 'cim:PU', 'cim:GovSteamCC.flp');
        }
        if ('cim:GovSteamCC.dlp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamCC.dlp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.dlp'], 'cim:PU', 'cim:GovSteamCC.dlp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamCC.dlp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamCC.dlp'], 'cim:PU', 'cim:GovSteamCC.dlp');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovSteamCC.mwbase", "cim:GovSteamCC.pmaxhp", "cim:GovSteamCC.rhp", "cim:GovSteamCC.t1hp", "cim:GovSteamCC.t3hp", "cim:GovSteamCC.t4hp", "cim:GovSteamCC.t5hp", "cim:GovSteamCC.fhp", "cim:GovSteamCC.dhp", "cim:GovSteamCC.pmaxlp", "cim:GovSteamCC.rlp", "cim:GovSteamCC.t1lp", "cim:GovSteamCC.t3lp", "cim:GovSteamCC.t4lp", "cim:GovSteamCC.t5lp", "cim:GovSteamCC.flp", "cim:GovSteamCC.dlp"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovSteamCC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovSteamCC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovSteamCC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovSteamCC;
  }(TurbineGovernorDynamics);
  _defineProperty(GovSteamCC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'pmaxhp': [CGMESProfile.shortNames.DY],
    'rhp': [CGMESProfile.shortNames.DY],
    't1hp': [CGMESProfile.shortNames.DY],
    't3hp': [CGMESProfile.shortNames.DY],
    't4hp': [CGMESProfile.shortNames.DY],
    't5hp': [CGMESProfile.shortNames.DY],
    'fhp': [CGMESProfile.shortNames.DY],
    'dhp': [CGMESProfile.shortNames.DY],
    'pmaxlp': [CGMESProfile.shortNames.DY],
    'rlp': [CGMESProfile.shortNames.DY],
    't1lp': [CGMESProfile.shortNames.DY],
    't3lp': [CGMESProfile.shortNames.DY],
    't4lp': [CGMESProfile.shortNames.DY],
    't5lp': [CGMESProfile.shortNames.DY],
    'flp': [CGMESProfile.shortNames.DY],
    'dlp': [CGMESProfile.shortNames.DY]
  });

  var GovSteamEU = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovSteamEU, _TurbineGovernorDynam);
    var _super = _createSuper(GovSteamEU);
    function GovSteamEU() {
      _classCallCheck(this, GovSteamEU);
      return _super.apply(this, arguments);
    }
    _createClass(GovSteamEU, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovSteamEU";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovSteamEU.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.mwbase'], 'cim:ActivePower', 'cim:GovSteamEU.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.mwbase'], 'cim:ActivePower', 'cim:GovSteamEU.mwbase');
        }
        if ('cim:GovSteamEU.tp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tp'], 'cim:Seconds', 'cim:GovSteamEU.tp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tp'], 'cim:Seconds', 'cim:GovSteamEU.tp');
        }
        if ('cim:GovSteamEU.ke' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.ke'], 'cim:PU', 'cim:GovSteamEU.ke');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.ke'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.ke'], 'cim:PU', 'cim:GovSteamEU.ke');
        }
        if ('cim:GovSteamEU.tip' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.tip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tip'], 'cim:Seconds', 'cim:GovSteamEU.tip');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.tip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tip'], 'cim:Seconds', 'cim:GovSteamEU.tip');
        }
        if ('cim:GovSteamEU.tdp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.tdp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tdp'], 'cim:Seconds', 'cim:GovSteamEU.tdp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.tdp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tdp'], 'cim:Seconds', 'cim:GovSteamEU.tdp');
        }
        if ('cim:GovSteamEU.tfp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.tfp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tfp'], 'cim:Seconds', 'cim:GovSteamEU.tfp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.tfp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tfp'], 'cim:Seconds', 'cim:GovSteamEU.tfp');
        }
        if ('cim:GovSteamEU.tf' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tf'], 'cim:Seconds', 'cim:GovSteamEU.tf');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tf'], 'cim:Seconds', 'cim:GovSteamEU.tf');
        }
        if ('cim:GovSteamEU.kfcor' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.kfcor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.kfcor'], 'cim:PU', 'cim:GovSteamEU.kfcor');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.kfcor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.kfcor'], 'cim:PU', 'cim:GovSteamEU.kfcor');
        }
        if ('cim:GovSteamEU.db1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.db1'], 'cim:PU', 'cim:GovSteamEU.db1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.db1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.db1'], 'cim:PU', 'cim:GovSteamEU.db1');
        }
        if ('cim:GovSteamEU.wfmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.wfmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.wfmax'], 'cim:PU', 'cim:GovSteamEU.wfmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.wfmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.wfmax'], 'cim:PU', 'cim:GovSteamEU.wfmax');
        }
        if ('cim:GovSteamEU.wfmin' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.wfmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.wfmin'], 'cim:PU', 'cim:GovSteamEU.wfmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.wfmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.wfmin'], 'cim:PU', 'cim:GovSteamEU.wfmin');
        }
        if ('cim:GovSteamEU.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.pmax'], 'cim:PU', 'cim:GovSteamEU.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.pmax'], 'cim:PU', 'cim:GovSteamEU.pmax');
        }
        if ('cim:GovSteamEU.ten' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.ten'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.ten'], 'cim:Seconds', 'cim:GovSteamEU.ten');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.ten'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.ten'], 'cim:Seconds', 'cim:GovSteamEU.ten');
        }
        if ('cim:GovSteamEU.tw' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tw'], 'cim:Seconds', 'cim:GovSteamEU.tw');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.tw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tw'], 'cim:Seconds', 'cim:GovSteamEU.tw');
        }
        if ('cim:GovSteamEU.kwcor' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.kwcor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.kwcor'], 'cim:PU', 'cim:GovSteamEU.kwcor');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.kwcor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.kwcor'], 'cim:PU', 'cim:GovSteamEU.kwcor');
        }
        if ('cim:GovSteamEU.db2' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.db2'], 'cim:PU', 'cim:GovSteamEU.db2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.db2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.db2'], 'cim:PU', 'cim:GovSteamEU.db2');
        }
        if ('cim:GovSteamEU.wwmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.wwmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.wwmax'], 'cim:PU', 'cim:GovSteamEU.wwmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.wwmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.wwmax'], 'cim:PU', 'cim:GovSteamEU.wwmax');
        }
        if ('cim:GovSteamEU.wwmin' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.wwmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.wwmin'], 'cim:PU', 'cim:GovSteamEU.wwmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.wwmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.wwmin'], 'cim:PU', 'cim:GovSteamEU.wwmin');
        }
        if ('cim:GovSteamEU.wmax1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.wmax1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.wmax1'], 'cim:PU', 'cim:GovSteamEU.wmax1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.wmax1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.wmax1'], 'cim:PU', 'cim:GovSteamEU.wmax1');
        }
        if ('cim:GovSteamEU.wmax2' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.wmax2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.wmax2'], 'cim:PU', 'cim:GovSteamEU.wmax2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.wmax2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.wmax2'], 'cim:PU', 'cim:GovSteamEU.wmax2');
        }
        if ('cim:GovSteamEU.tvhp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.tvhp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tvhp'], 'cim:Seconds', 'cim:GovSteamEU.tvhp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.tvhp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tvhp'], 'cim:Seconds', 'cim:GovSteamEU.tvhp');
        }
        if ('cim:GovSteamEU.cho' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.cho'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.cho'], 'cim:Simple_Float', 'cim:GovSteamEU.cho');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.cho'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.cho'], 'cim:Simple_Float', 'cim:GovSteamEU.cho');
        }
        if ('cim:GovSteamEU.chc' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.chc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.chc'], 'cim:Simple_Float', 'cim:GovSteamEU.chc');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.chc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.chc'], 'cim:Simple_Float', 'cim:GovSteamEU.chc');
        }
        if ('cim:GovSteamEU.hhpmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.hhpmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.hhpmax'], 'cim:PU', 'cim:GovSteamEU.hhpmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.hhpmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.hhpmax'], 'cim:PU', 'cim:GovSteamEU.hhpmax');
        }
        if ('cim:GovSteamEU.tvip' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.tvip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tvip'], 'cim:Seconds', 'cim:GovSteamEU.tvip');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.tvip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tvip'], 'cim:Seconds', 'cim:GovSteamEU.tvip');
        }
        if ('cim:GovSteamEU.cio' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.cio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.cio'], 'cim:PU', 'cim:GovSteamEU.cio');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.cio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.cio'], 'cim:PU', 'cim:GovSteamEU.cio');
        }
        if ('cim:GovSteamEU.cic' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.cic'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.cic'], 'cim:PU', 'cim:GovSteamEU.cic');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.cic'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.cic'], 'cim:PU', 'cim:GovSteamEU.cic');
        }
        if ('cim:GovSteamEU.simx' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.simx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.simx'], 'cim:PU', 'cim:GovSteamEU.simx');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.simx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.simx'], 'cim:PU', 'cim:GovSteamEU.simx');
        }
        if ('cim:GovSteamEU.thp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.thp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.thp'], 'cim:Seconds', 'cim:GovSteamEU.thp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.thp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.thp'], 'cim:Seconds', 'cim:GovSteamEU.thp');
        }
        if ('cim:GovSteamEU.trh' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.trh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.trh'], 'cim:Seconds', 'cim:GovSteamEU.trh');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.trh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.trh'], 'cim:Seconds', 'cim:GovSteamEU.trh');
        }
        if ('cim:GovSteamEU.tlp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.tlp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tlp'], 'cim:Seconds', 'cim:GovSteamEU.tlp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.tlp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tlp'], 'cim:Seconds', 'cim:GovSteamEU.tlp');
        }
        if ('cim:GovSteamEU.prhmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.prhmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.prhmax'], 'cim:PU', 'cim:GovSteamEU.prhmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.prhmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.prhmax'], 'cim:PU', 'cim:GovSteamEU.prhmax');
        }
        if ('cim:GovSteamEU.khp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.khp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.khp'], 'cim:PU', 'cim:GovSteamEU.khp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.khp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.khp'], 'cim:PU', 'cim:GovSteamEU.khp');
        }
        if ('cim:GovSteamEU.klp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.klp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.klp'], 'cim:PU', 'cim:GovSteamEU.klp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.klp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.klp'], 'cim:PU', 'cim:GovSteamEU.klp');
        }
        if ('cim:GovSteamEU.tb' in object) {
          attributeEntries['filledEntries']['cim:GovSteamEU.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tb'], 'cim:Seconds', 'cim:GovSteamEU.tb');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamEU.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamEU.tb'], 'cim:Seconds', 'cim:GovSteamEU.tb');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovSteamEU.mwbase", "cim:GovSteamEU.tp", "cim:GovSteamEU.ke", "cim:GovSteamEU.tip", "cim:GovSteamEU.tdp", "cim:GovSteamEU.tfp", "cim:GovSteamEU.tf", "cim:GovSteamEU.kfcor", "cim:GovSteamEU.db1", "cim:GovSteamEU.wfmax", "cim:GovSteamEU.wfmin", "cim:GovSteamEU.pmax", "cim:GovSteamEU.ten", "cim:GovSteamEU.tw", "cim:GovSteamEU.kwcor", "cim:GovSteamEU.db2", "cim:GovSteamEU.wwmax", "cim:GovSteamEU.wwmin", "cim:GovSteamEU.wmax1", "cim:GovSteamEU.wmax2", "cim:GovSteamEU.tvhp", "cim:GovSteamEU.cho", "cim:GovSteamEU.chc", "cim:GovSteamEU.hhpmax", "cim:GovSteamEU.tvip", "cim:GovSteamEU.cio", "cim:GovSteamEU.cic", "cim:GovSteamEU.simx", "cim:GovSteamEU.thp", "cim:GovSteamEU.trh", "cim:GovSteamEU.tlp", "cim:GovSteamEU.prhmax", "cim:GovSteamEU.khp", "cim:GovSteamEU.klp", "cim:GovSteamEU.tb"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovSteamEU.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovSteamEU: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovSteamEU.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovSteamEU;
  }(TurbineGovernorDynamics);
  _defineProperty(GovSteamEU, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    'ke': [CGMESProfile.shortNames.DY],
    'tip': [CGMESProfile.shortNames.DY],
    'tdp': [CGMESProfile.shortNames.DY],
    'tfp': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'kfcor': [CGMESProfile.shortNames.DY],
    'db1': [CGMESProfile.shortNames.DY],
    'wfmax': [CGMESProfile.shortNames.DY],
    'wfmin': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'ten': [CGMESProfile.shortNames.DY],
    'tw': [CGMESProfile.shortNames.DY],
    'kwcor': [CGMESProfile.shortNames.DY],
    'db2': [CGMESProfile.shortNames.DY],
    'wwmax': [CGMESProfile.shortNames.DY],
    'wwmin': [CGMESProfile.shortNames.DY],
    'wmax1': [CGMESProfile.shortNames.DY],
    'wmax2': [CGMESProfile.shortNames.DY],
    'tvhp': [CGMESProfile.shortNames.DY],
    'cho': [CGMESProfile.shortNames.DY],
    'chc': [CGMESProfile.shortNames.DY],
    'hhpmax': [CGMESProfile.shortNames.DY],
    'tvip': [CGMESProfile.shortNames.DY],
    'cio': [CGMESProfile.shortNames.DY],
    'cic': [CGMESProfile.shortNames.DY],
    'simx': [CGMESProfile.shortNames.DY],
    'thp': [CGMESProfile.shortNames.DY],
    'trh': [CGMESProfile.shortNames.DY],
    'tlp': [CGMESProfile.shortNames.DY],
    'prhmax': [CGMESProfile.shortNames.DY],
    'khp': [CGMESProfile.shortNames.DY],
    'klp': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY]
  });

  var GovSteamFV2 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovSteamFV2, _TurbineGovernorDynam);
    var _super = _createSuper(GovSteamFV2);
    function GovSteamFV2() {
      _classCallCheck(this, GovSteamFV2);
      return _super.apply(this, arguments);
    }
    _createClass(GovSteamFV2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovSteamFV2";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovSteamFV2.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.mwbase'], 'cim:ActivePower', 'cim:GovSteamFV2.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.mwbase'], 'cim:ActivePower', 'cim:GovSteamFV2.mwbase');
        }
        if ('cim:GovSteamFV2.r' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.r'], 'cim:PU', 'cim:GovSteamFV2.r');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.r'], 'cim:PU', 'cim:GovSteamFV2.r');
        }
        if ('cim:GovSteamFV2.t1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.t1'], 'cim:Seconds', 'cim:GovSteamFV2.t1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.t1'], 'cim:Seconds', 'cim:GovSteamFV2.t1');
        }
        if ('cim:GovSteamFV2.vmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.vmax'], 'cim:PU', 'cim:GovSteamFV2.vmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.vmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.vmax'], 'cim:PU', 'cim:GovSteamFV2.vmax');
        }
        if ('cim:GovSteamFV2.vmin' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.vmin'], 'cim:PU', 'cim:GovSteamFV2.vmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.vmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.vmin'], 'cim:PU', 'cim:GovSteamFV2.vmin');
        }
        if ('cim:GovSteamFV2.k' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.k'], 'cim:PU', 'cim:GovSteamFV2.k');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.k'], 'cim:PU', 'cim:GovSteamFV2.k');
        }
        if ('cim:GovSteamFV2.t3' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.t3'], 'cim:Seconds', 'cim:GovSteamFV2.t3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.t3'], 'cim:Seconds', 'cim:GovSteamFV2.t3');
        }
        if ('cim:GovSteamFV2.dt' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.dt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.dt'], 'cim:PU', 'cim:GovSteamFV2.dt');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.dt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.dt'], 'cim:PU', 'cim:GovSteamFV2.dt');
        }
        if ('cim:GovSteamFV2.tt' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.tt'], 'cim:Seconds', 'cim:GovSteamFV2.tt');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.tt'], 'cim:Seconds', 'cim:GovSteamFV2.tt');
        }
        if ('cim:GovSteamFV2.ta' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.ta'], 'cim:Seconds', 'cim:GovSteamFV2.ta');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.ta'], 'cim:Seconds', 'cim:GovSteamFV2.ta');
        }
        if ('cim:GovSteamFV2.tb' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.tb'], 'cim:Seconds', 'cim:GovSteamFV2.tb');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.tb'], 'cim:Seconds', 'cim:GovSteamFV2.tb');
        }
        if ('cim:GovSteamFV2.tc' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.tc'], 'cim:Seconds', 'cim:GovSteamFV2.tc');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.tc'], 'cim:Seconds', 'cim:GovSteamFV2.tc');
        }
        if ('cim:GovSteamFV2.ti' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV2.ti'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.ti'], 'cim:Seconds', 'cim:GovSteamFV2.ti');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV2.ti'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV2.ti'], 'cim:Seconds', 'cim:GovSteamFV2.ti');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovSteamFV2.mwbase", "cim:GovSteamFV2.r", "cim:GovSteamFV2.t1", "cim:GovSteamFV2.vmax", "cim:GovSteamFV2.vmin", "cim:GovSteamFV2.k", "cim:GovSteamFV2.t3", "cim:GovSteamFV2.dt", "cim:GovSteamFV2.tt", "cim:GovSteamFV2.ta", "cim:GovSteamFV2.tb", "cim:GovSteamFV2.tc", "cim:GovSteamFV2.ti"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovSteamFV2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovSteamFV2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovSteamFV2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovSteamFV2;
  }(TurbineGovernorDynamics);
  _defineProperty(GovSteamFV2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'r': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    'vmax': [CGMESProfile.shortNames.DY],
    'vmin': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    'dt': [CGMESProfile.shortNames.DY],
    'tt': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'ti': [CGMESProfile.shortNames.DY]
  });

  var GovSteamFV3 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovSteamFV3, _TurbineGovernorDynam);
    var _super = _createSuper(GovSteamFV3);
    function GovSteamFV3() {
      _classCallCheck(this, GovSteamFV3);
      return _super.apply(this, arguments);
    }
    _createClass(GovSteamFV3, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovSteamFV3";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovSteamFV3.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.mwbase'], 'cim:ActivePower', 'cim:GovSteamFV3.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.mwbase'], 'cim:ActivePower', 'cim:GovSteamFV3.mwbase');
        }
        if ('cim:GovSteamFV3.k' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.k'], 'cim:PU', 'cim:GovSteamFV3.k');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.k'], 'cim:PU', 'cim:GovSteamFV3.k');
        }
        if ('cim:GovSteamFV3.t1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.t1'], 'cim:Seconds', 'cim:GovSteamFV3.t1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.t1'], 'cim:Seconds', 'cim:GovSteamFV3.t1');
        }
        if ('cim:GovSteamFV3.t2' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.t2'], 'cim:Seconds', 'cim:GovSteamFV3.t2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.t2'], 'cim:Seconds', 'cim:GovSteamFV3.t2');
        }
        if ('cim:GovSteamFV3.t3' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.t3'], 'cim:Seconds', 'cim:GovSteamFV3.t3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.t3'], 'cim:Seconds', 'cim:GovSteamFV3.t3');
        }
        if ('cim:GovSteamFV3.uo' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.uo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.uo'], 'cim:Simple_Float', 'cim:GovSteamFV3.uo');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.uo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.uo'], 'cim:Simple_Float', 'cim:GovSteamFV3.uo');
        }
        if ('cim:GovSteamFV3.uc' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.uc'], 'cim:Simple_Float', 'cim:GovSteamFV3.uc');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.uc'], 'cim:Simple_Float', 'cim:GovSteamFV3.uc');
        }
        if ('cim:GovSteamFV3.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.pmax'], 'cim:PU', 'cim:GovSteamFV3.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.pmax'], 'cim:PU', 'cim:GovSteamFV3.pmax');
        }
        if ('cim:GovSteamFV3.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.pmin'], 'cim:PU', 'cim:GovSteamFV3.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.pmin'], 'cim:PU', 'cim:GovSteamFV3.pmin');
        }
        if ('cim:GovSteamFV3.t4' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.t4'], 'cim:Seconds', 'cim:GovSteamFV3.t4');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.t4'], 'cim:Seconds', 'cim:GovSteamFV3.t4');
        }
        if ('cim:GovSteamFV3.k1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.k1'], 'cim:PU', 'cim:GovSteamFV3.k1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.k1'], 'cim:PU', 'cim:GovSteamFV3.k1');
        }
        if ('cim:GovSteamFV3.t5' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.t5'], 'cim:Seconds', 'cim:GovSteamFV3.t5');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.t5'], 'cim:Seconds', 'cim:GovSteamFV3.t5');
        }
        if ('cim:GovSteamFV3.k2' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.k2'], 'cim:PU', 'cim:GovSteamFV3.k2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.k2'], 'cim:PU', 'cim:GovSteamFV3.k2');
        }
        if ('cim:GovSteamFV3.t6' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.t6'], 'cim:Seconds', 'cim:GovSteamFV3.t6');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.t6'], 'cim:Seconds', 'cim:GovSteamFV3.t6');
        }
        if ('cim:GovSteamFV3.k3' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.k3'], 'cim:PU', 'cim:GovSteamFV3.k3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.k3'], 'cim:PU', 'cim:GovSteamFV3.k3');
        }
        if ('cim:GovSteamFV3.ta' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.ta'], 'cim:Seconds', 'cim:GovSteamFV3.ta');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.ta'], 'cim:Seconds', 'cim:GovSteamFV3.ta');
        }
        if ('cim:GovSteamFV3.tb' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.tb'], 'cim:Seconds', 'cim:GovSteamFV3.tb');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.tb'], 'cim:Seconds', 'cim:GovSteamFV3.tb');
        }
        if ('cim:GovSteamFV3.tc' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.tc'], 'cim:Seconds', 'cim:GovSteamFV3.tc');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.tc'], 'cim:Seconds', 'cim:GovSteamFV3.tc');
        }
        if ('cim:GovSteamFV3.prmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV3.prmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.prmax'], 'cim:PU', 'cim:GovSteamFV3.prmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV3.prmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV3.prmax'], 'cim:PU', 'cim:GovSteamFV3.prmax');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovSteamFV3.mwbase", "cim:GovSteamFV3.k", "cim:GovSteamFV3.t1", "cim:GovSteamFV3.t2", "cim:GovSteamFV3.t3", "cim:GovSteamFV3.uo", "cim:GovSteamFV3.uc", "cim:GovSteamFV3.pmax", "cim:GovSteamFV3.pmin", "cim:GovSteamFV3.t4", "cim:GovSteamFV3.k1", "cim:GovSteamFV3.t5", "cim:GovSteamFV3.k2", "cim:GovSteamFV3.t6", "cim:GovSteamFV3.k3", "cim:GovSteamFV3.ta", "cim:GovSteamFV3.tb", "cim:GovSteamFV3.tc", "cim:GovSteamFV3.prmax"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovSteamFV3.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovSteamFV3: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovSteamFV3.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovSteamFV3;
  }(TurbineGovernorDynamics);
  _defineProperty(GovSteamFV3, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    'uo': [CGMESProfile.shortNames.DY],
    'uc': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    'k3': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'prmax': [CGMESProfile.shortNames.DY]
  });

  var GovSteamFV4 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovSteamFV4, _TurbineGovernorDynam);
    var _super = _createSuper(GovSteamFV4);
    function GovSteamFV4() {
      _classCallCheck(this, GovSteamFV4);
      return _super.apply(this, arguments);
    }
    _createClass(GovSteamFV4, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovSteamFV4";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovSteamFV4.kf1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.kf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kf1'], 'cim:PU', 'cim:GovSteamFV4.kf1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.kf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kf1'], 'cim:PU', 'cim:GovSteamFV4.kf1');
        }
        if ('cim:GovSteamFV4.kf3' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.kf3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kf3'], 'cim:PU', 'cim:GovSteamFV4.kf3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.kf3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kf3'], 'cim:PU', 'cim:GovSteamFV4.kf3');
        }
        if ('cim:GovSteamFV4.lps' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.lps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.lps'], 'cim:PU', 'cim:GovSteamFV4.lps');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.lps'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.lps'], 'cim:PU', 'cim:GovSteamFV4.lps');
        }
        if ('cim:GovSteamFV4.lpi' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.lpi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.lpi'], 'cim:PU', 'cim:GovSteamFV4.lpi');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.lpi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.lpi'], 'cim:PU', 'cim:GovSteamFV4.lpi');
        }
        if ('cim:GovSteamFV4.mxef' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.mxef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.mxef'], 'cim:PU', 'cim:GovSteamFV4.mxef');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.mxef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.mxef'], 'cim:PU', 'cim:GovSteamFV4.mxef');
        }
        if ('cim:GovSteamFV4.mnef' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.mnef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.mnef'], 'cim:PU', 'cim:GovSteamFV4.mnef');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.mnef'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.mnef'], 'cim:PU', 'cim:GovSteamFV4.mnef');
        }
        if ('cim:GovSteamFV4.crmx' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.crmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.crmx'], 'cim:PU', 'cim:GovSteamFV4.crmx');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.crmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.crmx'], 'cim:PU', 'cim:GovSteamFV4.crmx');
        }
        if ('cim:GovSteamFV4.crmn' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.crmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.crmn'], 'cim:PU', 'cim:GovSteamFV4.crmn');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.crmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.crmn'], 'cim:PU', 'cim:GovSteamFV4.crmn');
        }
        if ('cim:GovSteamFV4.kpt' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.kpt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kpt'], 'cim:PU', 'cim:GovSteamFV4.kpt');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.kpt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kpt'], 'cim:PU', 'cim:GovSteamFV4.kpt');
        }
        if ('cim:GovSteamFV4.kit' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.kit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kit'], 'cim:PU', 'cim:GovSteamFV4.kit');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.kit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kit'], 'cim:PU', 'cim:GovSteamFV4.kit');
        }
        if ('cim:GovSteamFV4.rvgmx' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.rvgmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.rvgmx'], 'cim:PU', 'cim:GovSteamFV4.rvgmx');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.rvgmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.rvgmx'], 'cim:PU', 'cim:GovSteamFV4.rvgmx');
        }
        if ('cim:GovSteamFV4.rvgmn' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.rvgmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.rvgmn'], 'cim:PU', 'cim:GovSteamFV4.rvgmn');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.rvgmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.rvgmn'], 'cim:PU', 'cim:GovSteamFV4.rvgmn');
        }
        if ('cim:GovSteamFV4.svmx' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.svmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.svmx'], 'cim:Simple_Float', 'cim:GovSteamFV4.svmx');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.svmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.svmx'], 'cim:Simple_Float', 'cim:GovSteamFV4.svmx');
        }
        if ('cim:GovSteamFV4.svmn' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.svmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.svmn'], 'cim:Simple_Float', 'cim:GovSteamFV4.svmn');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.svmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.svmn'], 'cim:Simple_Float', 'cim:GovSteamFV4.svmn');
        }
        if ('cim:GovSteamFV4.srmx' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.srmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.srmx'], 'cim:PU', 'cim:GovSteamFV4.srmx');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.srmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.srmx'], 'cim:PU', 'cim:GovSteamFV4.srmx');
        }
        if ('cim:GovSteamFV4.srmn' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.srmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.srmn'], 'cim:PU', 'cim:GovSteamFV4.srmn');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.srmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.srmn'], 'cim:PU', 'cim:GovSteamFV4.srmn');
        }
        if ('cim:GovSteamFV4.kpp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.kpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kpp'], 'cim:PU', 'cim:GovSteamFV4.kpp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.kpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kpp'], 'cim:PU', 'cim:GovSteamFV4.kpp');
        }
        if ('cim:GovSteamFV4.kip' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.kip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kip'], 'cim:PU', 'cim:GovSteamFV4.kip');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.kip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kip'], 'cim:PU', 'cim:GovSteamFV4.kip');
        }
        if ('cim:GovSteamFV4.rsmimx' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.rsmimx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.rsmimx'], 'cim:PU', 'cim:GovSteamFV4.rsmimx');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.rsmimx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.rsmimx'], 'cim:PU', 'cim:GovSteamFV4.rsmimx');
        }
        if ('cim:GovSteamFV4.rsmimn' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.rsmimn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.rsmimn'], 'cim:PU', 'cim:GovSteamFV4.rsmimn');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.rsmimn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.rsmimn'], 'cim:PU', 'cim:GovSteamFV4.rsmimn');
        }
        if ('cim:GovSteamFV4.kmp1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.kmp1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kmp1'], 'cim:PU', 'cim:GovSteamFV4.kmp1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.kmp1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kmp1'], 'cim:PU', 'cim:GovSteamFV4.kmp1');
        }
        if ('cim:GovSteamFV4.kmp2' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.kmp2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kmp2'], 'cim:PU', 'cim:GovSteamFV4.kmp2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.kmp2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kmp2'], 'cim:PU', 'cim:GovSteamFV4.kmp2');
        }
        if ('cim:GovSteamFV4.srsmp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.srsmp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.srsmp'], 'cim:PU', 'cim:GovSteamFV4.srsmp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.srsmp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.srsmp'], 'cim:PU', 'cim:GovSteamFV4.srsmp');
        }
        if ('cim:GovSteamFV4.ta' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.ta'], 'cim:Seconds', 'cim:GovSteamFV4.ta');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.ta'], 'cim:Seconds', 'cim:GovSteamFV4.ta');
        }
        if ('cim:GovSteamFV4.tc' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tc'], 'cim:Seconds', 'cim:GovSteamFV4.tc');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tc'], 'cim:Seconds', 'cim:GovSteamFV4.tc');
        }
        if ('cim:GovSteamFV4.ty' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.ty'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.ty'], 'cim:Seconds', 'cim:GovSteamFV4.ty');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.ty'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.ty'], 'cim:Seconds', 'cim:GovSteamFV4.ty');
        }
        if ('cim:GovSteamFV4.yhpmx' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.yhpmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.yhpmx'], 'cim:PU', 'cim:GovSteamFV4.yhpmx');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.yhpmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.yhpmx'], 'cim:PU', 'cim:GovSteamFV4.yhpmx');
        }
        if ('cim:GovSteamFV4.yhpmn' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.yhpmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.yhpmn'], 'cim:PU', 'cim:GovSteamFV4.yhpmn');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.yhpmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.yhpmn'], 'cim:PU', 'cim:GovSteamFV4.yhpmn');
        }
        if ('cim:GovSteamFV4.tam' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.tam'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tam'], 'cim:Seconds', 'cim:GovSteamFV4.tam');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.tam'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tam'], 'cim:Seconds', 'cim:GovSteamFV4.tam');
        }
        if ('cim:GovSteamFV4.tcm' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.tcm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tcm'], 'cim:Seconds', 'cim:GovSteamFV4.tcm');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.tcm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tcm'], 'cim:Seconds', 'cim:GovSteamFV4.tcm');
        }
        if ('cim:GovSteamFV4.ympmx' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.ympmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.ympmx'], 'cim:PU', 'cim:GovSteamFV4.ympmx');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.ympmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.ympmx'], 'cim:PU', 'cim:GovSteamFV4.ympmx');
        }
        if ('cim:GovSteamFV4.ympmn' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.ympmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.ympmn'], 'cim:PU', 'cim:GovSteamFV4.ympmn');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.ympmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.ympmn'], 'cim:PU', 'cim:GovSteamFV4.ympmn');
        }
        if ('cim:GovSteamFV4.y' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.y'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.y'], 'cim:PU', 'cim:GovSteamFV4.y');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.y'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.y'], 'cim:PU', 'cim:GovSteamFV4.y');
        }
        if ('cim:GovSteamFV4.thp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.thp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.thp'], 'cim:Seconds', 'cim:GovSteamFV4.thp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.thp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.thp'], 'cim:Seconds', 'cim:GovSteamFV4.thp');
        }
        if ('cim:GovSteamFV4.trh' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.trh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.trh'], 'cim:Seconds', 'cim:GovSteamFV4.trh');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.trh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.trh'], 'cim:Seconds', 'cim:GovSteamFV4.trh');
        }
        if ('cim:GovSteamFV4.tmp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.tmp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tmp'], 'cim:Seconds', 'cim:GovSteamFV4.tmp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.tmp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tmp'], 'cim:Seconds', 'cim:GovSteamFV4.tmp');
        }
        if ('cim:GovSteamFV4.khp' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.khp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.khp'], 'cim:PU', 'cim:GovSteamFV4.khp');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.khp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.khp'], 'cim:PU', 'cim:GovSteamFV4.khp');
        }
        if ('cim:GovSteamFV4.pr1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.pr1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.pr1'], 'cim:PU', 'cim:GovSteamFV4.pr1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.pr1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.pr1'], 'cim:PU', 'cim:GovSteamFV4.pr1');
        }
        if ('cim:GovSteamFV4.pr2' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.pr2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.pr2'], 'cim:PU', 'cim:GovSteamFV4.pr2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.pr2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.pr2'], 'cim:PU', 'cim:GovSteamFV4.pr2');
        }
        if ('cim:GovSteamFV4.psmn' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.psmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.psmn'], 'cim:PU', 'cim:GovSteamFV4.psmn');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.psmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.psmn'], 'cim:PU', 'cim:GovSteamFV4.psmn');
        }
        if ('cim:GovSteamFV4.kpc' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.kpc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kpc'], 'cim:PU', 'cim:GovSteamFV4.kpc');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.kpc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kpc'], 'cim:PU', 'cim:GovSteamFV4.kpc');
        }
        if ('cim:GovSteamFV4.kic' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.kic'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kic'], 'cim:PU', 'cim:GovSteamFV4.kic');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.kic'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kic'], 'cim:PU', 'cim:GovSteamFV4.kic');
        }
        if ('cim:GovSteamFV4.kdc' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.kdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kdc'], 'cim:PU', 'cim:GovSteamFV4.kdc');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.kdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.kdc'], 'cim:PU', 'cim:GovSteamFV4.kdc');
        }
        if ('cim:GovSteamFV4.tdc' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.tdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tdc'], 'cim:Seconds', 'cim:GovSteamFV4.tdc');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.tdc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tdc'], 'cim:Seconds', 'cim:GovSteamFV4.tdc');
        }
        if ('cim:GovSteamFV4.cpsmx' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.cpsmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.cpsmx'], 'cim:PU', 'cim:GovSteamFV4.cpsmx');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.cpsmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.cpsmx'], 'cim:PU', 'cim:GovSteamFV4.cpsmx');
        }
        if ('cim:GovSteamFV4.cpsmn' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.cpsmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.cpsmn'], 'cim:PU', 'cim:GovSteamFV4.cpsmn');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.cpsmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.cpsmn'], 'cim:PU', 'cim:GovSteamFV4.cpsmn');
        }
        if ('cim:GovSteamFV4.krc' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.krc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.krc'], 'cim:PU', 'cim:GovSteamFV4.krc');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.krc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.krc'], 'cim:PU', 'cim:GovSteamFV4.krc');
        }
        if ('cim:GovSteamFV4.tf1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tf1'], 'cim:Seconds', 'cim:GovSteamFV4.tf1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.tf1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tf1'], 'cim:Seconds', 'cim:GovSteamFV4.tf1');
        }
        if ('cim:GovSteamFV4.tf2' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tf2'], 'cim:Seconds', 'cim:GovSteamFV4.tf2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tf2'], 'cim:Seconds', 'cim:GovSteamFV4.tf2');
        }
        if ('cim:GovSteamFV4.tv' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.tv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tv'], 'cim:Seconds', 'cim:GovSteamFV4.tv');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.tv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.tv'], 'cim:Seconds', 'cim:GovSteamFV4.tv');
        }
        if ('cim:GovSteamFV4.ksh' in object) {
          attributeEntries['filledEntries']['cim:GovSteamFV4.ksh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.ksh'], 'cim:PU', 'cim:GovSteamFV4.ksh');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamFV4.ksh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamFV4.ksh'], 'cim:PU', 'cim:GovSteamFV4.ksh');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovSteamFV4.kf1", "cim:GovSteamFV4.kf3", "cim:GovSteamFV4.lps", "cim:GovSteamFV4.lpi", "cim:GovSteamFV4.mxef", "cim:GovSteamFV4.mnef", "cim:GovSteamFV4.crmx", "cim:GovSteamFV4.crmn", "cim:GovSteamFV4.kpt", "cim:GovSteamFV4.kit", "cim:GovSteamFV4.rvgmx", "cim:GovSteamFV4.rvgmn", "cim:GovSteamFV4.svmx", "cim:GovSteamFV4.svmn", "cim:GovSteamFV4.srmx", "cim:GovSteamFV4.srmn", "cim:GovSteamFV4.kpp", "cim:GovSteamFV4.kip", "cim:GovSteamFV4.rsmimx", "cim:GovSteamFV4.rsmimn", "cim:GovSteamFV4.kmp1", "cim:GovSteamFV4.kmp2", "cim:GovSteamFV4.srsmp", "cim:GovSteamFV4.ta", "cim:GovSteamFV4.tc", "cim:GovSteamFV4.ty", "cim:GovSteamFV4.yhpmx", "cim:GovSteamFV4.yhpmn", "cim:GovSteamFV4.tam", "cim:GovSteamFV4.tcm", "cim:GovSteamFV4.ympmx", "cim:GovSteamFV4.ympmn", "cim:GovSteamFV4.y", "cim:GovSteamFV4.thp", "cim:GovSteamFV4.trh", "cim:GovSteamFV4.tmp", "cim:GovSteamFV4.khp", "cim:GovSteamFV4.pr1", "cim:GovSteamFV4.pr2", "cim:GovSteamFV4.psmn", "cim:GovSteamFV4.kpc", "cim:GovSteamFV4.kic", "cim:GovSteamFV4.kdc", "cim:GovSteamFV4.tdc", "cim:GovSteamFV4.cpsmx", "cim:GovSteamFV4.cpsmn", "cim:GovSteamFV4.krc", "cim:GovSteamFV4.tf1", "cim:GovSteamFV4.tf2", "cim:GovSteamFV4.tv", "cim:GovSteamFV4.ksh"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovSteamFV4.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovSteamFV4: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovSteamFV4.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovSteamFV4;
  }(TurbineGovernorDynamics);
  _defineProperty(GovSteamFV4, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kf1': [CGMESProfile.shortNames.DY],
    'kf3': [CGMESProfile.shortNames.DY],
    'lps': [CGMESProfile.shortNames.DY],
    'lpi': [CGMESProfile.shortNames.DY],
    'mxef': [CGMESProfile.shortNames.DY],
    'mnef': [CGMESProfile.shortNames.DY],
    'crmx': [CGMESProfile.shortNames.DY],
    'crmn': [CGMESProfile.shortNames.DY],
    'kpt': [CGMESProfile.shortNames.DY],
    'kit': [CGMESProfile.shortNames.DY],
    'rvgmx': [CGMESProfile.shortNames.DY],
    'rvgmn': [CGMESProfile.shortNames.DY],
    'svmx': [CGMESProfile.shortNames.DY],
    'svmn': [CGMESProfile.shortNames.DY],
    'srmx': [CGMESProfile.shortNames.DY],
    'srmn': [CGMESProfile.shortNames.DY],
    'kpp': [CGMESProfile.shortNames.DY],
    'kip': [CGMESProfile.shortNames.DY],
    'rsmimx': [CGMESProfile.shortNames.DY],
    'rsmimn': [CGMESProfile.shortNames.DY],
    'kmp1': [CGMESProfile.shortNames.DY],
    'kmp2': [CGMESProfile.shortNames.DY],
    'srsmp': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'ty': [CGMESProfile.shortNames.DY],
    'yhpmx': [CGMESProfile.shortNames.DY],
    'yhpmn': [CGMESProfile.shortNames.DY],
    'tam': [CGMESProfile.shortNames.DY],
    'tcm': [CGMESProfile.shortNames.DY],
    'ympmx': [CGMESProfile.shortNames.DY],
    'ympmn': [CGMESProfile.shortNames.DY],
    'y': [CGMESProfile.shortNames.DY],
    'thp': [CGMESProfile.shortNames.DY],
    'trh': [CGMESProfile.shortNames.DY],
    'tmp': [CGMESProfile.shortNames.DY],
    'khp': [CGMESProfile.shortNames.DY],
    'pr1': [CGMESProfile.shortNames.DY],
    'pr2': [CGMESProfile.shortNames.DY],
    'psmn': [CGMESProfile.shortNames.DY],
    'kpc': [CGMESProfile.shortNames.DY],
    'kic': [CGMESProfile.shortNames.DY],
    'kdc': [CGMESProfile.shortNames.DY],
    'tdc': [CGMESProfile.shortNames.DY],
    'cpsmx': [CGMESProfile.shortNames.DY],
    'cpsmn': [CGMESProfile.shortNames.DY],
    'krc': [CGMESProfile.shortNames.DY],
    'tf1': [CGMESProfile.shortNames.DY],
    'tf2': [CGMESProfile.shortNames.DY],
    'tv': [CGMESProfile.shortNames.DY],
    'ksh': [CGMESProfile.shortNames.DY]
  });

  var GovSteamIEEE1 = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovSteamIEEE1, _TurbineGovernorDynam);
    var _super = _createSuper(GovSteamIEEE1);
    function GovSteamIEEE1() {
      _classCallCheck(this, GovSteamIEEE1);
      return _super.apply(this, arguments);
    }
    _createClass(GovSteamIEEE1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovSteamIEEE1";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovSteamIEEE1.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.mwbase'], 'cim:ActivePower', 'cim:GovSteamIEEE1.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.mwbase'], 'cim:ActivePower', 'cim:GovSteamIEEE1.mwbase');
        }
        if ('cim:GovSteamIEEE1.k' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k'], 'cim:PU', 'cim:GovSteamIEEE1.k');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k'], 'cim:PU', 'cim:GovSteamIEEE1.k');
        }
        if ('cim:GovSteamIEEE1.t1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t1'], 'cim:Seconds', 'cim:GovSteamIEEE1.t1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t1'], 'cim:Seconds', 'cim:GovSteamIEEE1.t1');
        }
        if ('cim:GovSteamIEEE1.t2' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t2'], 'cim:Seconds', 'cim:GovSteamIEEE1.t2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t2'], 'cim:Seconds', 'cim:GovSteamIEEE1.t2');
        }
        if ('cim:GovSteamIEEE1.t3' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t3'], 'cim:Seconds', 'cim:GovSteamIEEE1.t3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t3'], 'cim:Seconds', 'cim:GovSteamIEEE1.t3');
        }
        if ('cim:GovSteamIEEE1.uo' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.uo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.uo'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.uo');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.uo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.uo'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.uo');
        }
        if ('cim:GovSteamIEEE1.uc' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.uc'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.uc');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.uc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.uc'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.uc');
        }
        if ('cim:GovSteamIEEE1.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.pmax'], 'cim:PU', 'cim:GovSteamIEEE1.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.pmax'], 'cim:PU', 'cim:GovSteamIEEE1.pmax');
        }
        if ('cim:GovSteamIEEE1.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.pmin'], 'cim:PU', 'cim:GovSteamIEEE1.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.pmin'], 'cim:PU', 'cim:GovSteamIEEE1.pmin');
        }
        if ('cim:GovSteamIEEE1.t4' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t4'], 'cim:Seconds', 'cim:GovSteamIEEE1.t4');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t4'], 'cim:Seconds', 'cim:GovSteamIEEE1.t4');
        }
        if ('cim:GovSteamIEEE1.k1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k1'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k1'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k1');
        }
        if ('cim:GovSteamIEEE1.k2' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k2'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k2'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k2');
        }
        if ('cim:GovSteamIEEE1.t5' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t5'], 'cim:Seconds', 'cim:GovSteamIEEE1.t5');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t5'], 'cim:Seconds', 'cim:GovSteamIEEE1.t5');
        }
        if ('cim:GovSteamIEEE1.k3' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k3'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k3'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k3');
        }
        if ('cim:GovSteamIEEE1.k4' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.k4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k4'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k4');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.k4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k4'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k4');
        }
        if ('cim:GovSteamIEEE1.t6' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t6'], 'cim:Seconds', 'cim:GovSteamIEEE1.t6');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t6'], 'cim:Seconds', 'cim:GovSteamIEEE1.t6');
        }
        if ('cim:GovSteamIEEE1.k5' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.k5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k5'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k5');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.k5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k5'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k5');
        }
        if ('cim:GovSteamIEEE1.k6' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.k6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k6'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k6');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.k6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k6'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k6');
        }
        if ('cim:GovSteamIEEE1.t7' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t7'], 'cim:Seconds', 'cim:GovSteamIEEE1.t7');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.t7'], 'cim:Seconds', 'cim:GovSteamIEEE1.t7');
        }
        if ('cim:GovSteamIEEE1.k7' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.k7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k7'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k7');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.k7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k7'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k7');
        }
        if ('cim:GovSteamIEEE1.k8' in object) {
          attributeEntries['filledEntries']['cim:GovSteamIEEE1.k8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k8'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k8');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamIEEE1.k8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamIEEE1.k8'], 'cim:Simple_Float', 'cim:GovSteamIEEE1.k8');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovSteamIEEE1.mwbase", "cim:GovSteamIEEE1.k", "cim:GovSteamIEEE1.t1", "cim:GovSteamIEEE1.t2", "cim:GovSteamIEEE1.t3", "cim:GovSteamIEEE1.uo", "cim:GovSteamIEEE1.uc", "cim:GovSteamIEEE1.pmax", "cim:GovSteamIEEE1.pmin", "cim:GovSteamIEEE1.t4", "cim:GovSteamIEEE1.k1", "cim:GovSteamIEEE1.k2", "cim:GovSteamIEEE1.t5", "cim:GovSteamIEEE1.k3", "cim:GovSteamIEEE1.k4", "cim:GovSteamIEEE1.t6", "cim:GovSteamIEEE1.k5", "cim:GovSteamIEEE1.k6", "cim:GovSteamIEEE1.t7", "cim:GovSteamIEEE1.k7", "cim:GovSteamIEEE1.k8"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovSteamIEEE1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovSteamIEEE1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovSteamIEEE1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovSteamIEEE1;
  }(TurbineGovernorDynamics);
  _defineProperty(GovSteamIEEE1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    'uo': [CGMESProfile.shortNames.DY],
    'uc': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    'k3': [CGMESProfile.shortNames.DY],
    'k4': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    'k5': [CGMESProfile.shortNames.DY],
    'k6': [CGMESProfile.shortNames.DY],
    't7': [CGMESProfile.shortNames.DY],
    'k7': [CGMESProfile.shortNames.DY],
    'k8': [CGMESProfile.shortNames.DY]
  });

  var GovSteamSGO = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(GovSteamSGO, _TurbineGovernorDynam);
    var _super = _createSuper(GovSteamSGO);
    function GovSteamSGO() {
      _classCallCheck(this, GovSteamSGO);
      return _super.apply(this, arguments);
    }
    _createClass(GovSteamSGO, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GovSteamSGO";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:GovSteamSGO.mwbase' in object) {
          attributeEntries['filledEntries']['cim:GovSteamSGO.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.mwbase'], 'cim:ActivePower', 'cim:GovSteamSGO.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamSGO.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.mwbase'], 'cim:ActivePower', 'cim:GovSteamSGO.mwbase');
        }
        if ('cim:GovSteamSGO.t1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamSGO.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.t1'], 'cim:Seconds', 'cim:GovSteamSGO.t1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamSGO.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.t1'], 'cim:Seconds', 'cim:GovSteamSGO.t1');
        }
        if ('cim:GovSteamSGO.t2' in object) {
          attributeEntries['filledEntries']['cim:GovSteamSGO.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.t2'], 'cim:Seconds', 'cim:GovSteamSGO.t2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamSGO.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.t2'], 'cim:Seconds', 'cim:GovSteamSGO.t2');
        }
        if ('cim:GovSteamSGO.t3' in object) {
          attributeEntries['filledEntries']['cim:GovSteamSGO.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.t3'], 'cim:Seconds', 'cim:GovSteamSGO.t3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamSGO.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.t3'], 'cim:Seconds', 'cim:GovSteamSGO.t3');
        }
        if ('cim:GovSteamSGO.t4' in object) {
          attributeEntries['filledEntries']['cim:GovSteamSGO.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.t4'], 'cim:Seconds', 'cim:GovSteamSGO.t4');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamSGO.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.t4'], 'cim:Seconds', 'cim:GovSteamSGO.t4');
        }
        if ('cim:GovSteamSGO.t5' in object) {
          attributeEntries['filledEntries']['cim:GovSteamSGO.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.t5'], 'cim:Seconds', 'cim:GovSteamSGO.t5');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamSGO.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.t5'], 'cim:Seconds', 'cim:GovSteamSGO.t5');
        }
        if ('cim:GovSteamSGO.t6' in object) {
          attributeEntries['filledEntries']['cim:GovSteamSGO.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.t6'], 'cim:Seconds', 'cim:GovSteamSGO.t6');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamSGO.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.t6'], 'cim:Seconds', 'cim:GovSteamSGO.t6');
        }
        if ('cim:GovSteamSGO.k1' in object) {
          attributeEntries['filledEntries']['cim:GovSteamSGO.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.k1'], 'cim:PU', 'cim:GovSteamSGO.k1');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamSGO.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.k1'], 'cim:PU', 'cim:GovSteamSGO.k1');
        }
        if ('cim:GovSteamSGO.k2' in object) {
          attributeEntries['filledEntries']['cim:GovSteamSGO.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.k2'], 'cim:PU', 'cim:GovSteamSGO.k2');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamSGO.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.k2'], 'cim:PU', 'cim:GovSteamSGO.k2');
        }
        if ('cim:GovSteamSGO.k3' in object) {
          attributeEntries['filledEntries']['cim:GovSteamSGO.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.k3'], 'cim:PU', 'cim:GovSteamSGO.k3');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamSGO.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.k3'], 'cim:PU', 'cim:GovSteamSGO.k3');
        }
        if ('cim:GovSteamSGO.pmax' in object) {
          attributeEntries['filledEntries']['cim:GovSteamSGO.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.pmax'], 'cim:PU', 'cim:GovSteamSGO.pmax');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamSGO.pmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.pmax'], 'cim:PU', 'cim:GovSteamSGO.pmax');
        }
        if ('cim:GovSteamSGO.pmin' in object) {
          attributeEntries['filledEntries']['cim:GovSteamSGO.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.pmin'], 'cim:Seconds', 'cim:GovSteamSGO.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:GovSteamSGO.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GovSteamSGO.pmin'], 'cim:Seconds', 'cim:GovSteamSGO.pmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GovSteamSGO.mwbase", "cim:GovSteamSGO.t1", "cim:GovSteamSGO.t2", "cim:GovSteamSGO.t3", "cim:GovSteamSGO.t4", "cim:GovSteamSGO.t5", "cim:GovSteamSGO.t6", "cim:GovSteamSGO.k1", "cim:GovSteamSGO.k2", "cim:GovSteamSGO.k3", "cim:GovSteamSGO.pmax", "cim:GovSteamSGO.pmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GovSteamSGO.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GovSteamSGO: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GovSteamSGO.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GovSteamSGO;
  }(TurbineGovernorDynamics);
  _defineProperty(GovSteamSGO, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    'k3': [CGMESProfile.shortNames.DY],
    'pmax': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY]
  });

  var GrossToNetActivePowerCurve = /*#__PURE__*/function (_Curve) {
    _inherits(GrossToNetActivePowerCurve, _Curve);
    var _super = _createSuper(GrossToNetActivePowerCurve);
    function GrossToNetActivePowerCurve() {
      _classCallCheck(this, GrossToNetActivePowerCurve);
      return _super.apply(this, arguments);
    }
    _createClass(GrossToNetActivePowerCurve, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GrossToNetActivePowerCurve";
        var attributeEntries = Curve.attributeHTML(object, cimmenu, classType);
        if ('cim:GrossToNetActivePowerCurve.GeneratingUnit' in object) {
          attributeEntries['filledEntries']['cim:GrossToNetActivePowerCurve.GeneratingUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GrossToNetActivePowerCurve.GeneratingUnit'], 'cim:GeneratingUnit', 'cim:GrossToNetActivePowerCurve.GeneratingUnit');
        } else {
          attributeEntries['emptyEntries']['cim:GrossToNetActivePowerCurve.GeneratingUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GrossToNetActivePowerCurve.GeneratingUnit'], 'cim:GeneratingUnit', 'cim:GrossToNetActivePowerCurve.GeneratingUnit');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GrossToNetActivePowerCurve.GeneratingUnit"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Curve.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GrossToNetActivePowerCurve.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GrossToNetActivePowerCurve: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GrossToNetActivePowerCurve.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GrossToNetActivePowerCurve;
  }(Curve);
  _defineProperty(GrossToNetActivePowerCurve, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'GeneratingUnit': [CGMESProfile.shortNames.EQ]
  });

  var Ground = /*#__PURE__*/function (_ConductingEquipment) {
    _inherits(Ground, _ConductingEquipment);
    var _super = _createSuper(Ground);
    function Ground() {
      _classCallCheck(this, Ground);
      return _super.apply(this, arguments);
    }
    _createClass(Ground, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Ground";
        var attributeEntries = ConductingEquipment.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Ground.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Ground: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Ground.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Ground;
  }(ConductingEquipment);
  _defineProperty(Ground, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var GroundDisconnector = /*#__PURE__*/function (_Switch) {
    _inherits(GroundDisconnector, _Switch);
    var _super = _createSuper(GroundDisconnector);
    function GroundDisconnector() {
      _classCallCheck(this, GroundDisconnector);
      return _super.apply(this, arguments);
    }
    _createClass(GroundDisconnector, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GroundDisconnector";
        var attributeEntries = Switch.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Switch.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GroundDisconnector.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GroundDisconnector: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GroundDisconnector.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GroundDisconnector;
  }(Switch);
  _defineProperty(GroundDisconnector, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var GroundingImpedance = /*#__PURE__*/function (_EarthFaultCompensato) {
    _inherits(GroundingImpedance, _EarthFaultCompensato);
    var _super = _createSuper(GroundingImpedance);
    function GroundingImpedance() {
      _classCallCheck(this, GroundingImpedance);
      return _super.apply(this, arguments);
    }
    _createClass(GroundingImpedance, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GroundingImpedance";
        var attributeEntries = EarthFaultCompensator.attributeHTML(object, cimmenu, classType);
        if ('cim:GroundingImpedance.x' in object) {
          attributeEntries['filledEntries']['cim:GroundingImpedance.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GroundingImpedance.x'], 'cim:Reactance', 'cim:GroundingImpedance.x');
        } else {
          attributeEntries['emptyEntries']['cim:GroundingImpedance.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['GroundingImpedance.x'], 'cim:Reactance', 'cim:GroundingImpedance.x');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:GroundingImpedance.x"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EarthFaultCompensator.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!GroundingImpedance.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class GroundingImpedance: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = GroundingImpedance.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return GroundingImpedance;
  }(EarthFaultCompensator);
  _defineProperty(GroundingImpedance, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'x': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$t = [{
    "value": "--"
  }, {
    "value": "HydroEnergyConversionKind.generator",
    "label": "generator"
  }, {
    "value": "HydroEnergyConversionKind.pumpAndGenerator",
    "label": "pumpAndGenerator"
  }];
  var HydroEnergyConversionKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(HydroEnergyConversionKind, _BaseClass);
    var _super = _createSuper(HydroEnergyConversionKind);
    function HydroEnergyConversionKind() {
      _classCallCheck(this, HydroEnergyConversionKind);
      return _super.apply(this, arguments);
    }
    _createClass(HydroEnergyConversionKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "HydroEnergyConversionKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!HydroEnergyConversionKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class HydroEnergyConversionKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = HydroEnergyConversionKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$t;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return HydroEnergyConversionKind;
  }(BaseClass);
  _defineProperty(HydroEnergyConversionKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var HydroGeneratingUnit = /*#__PURE__*/function (_GeneratingUnit) {
    _inherits(HydroGeneratingUnit, _GeneratingUnit);
    var _super = _createSuper(HydroGeneratingUnit);
    function HydroGeneratingUnit() {
      _classCallCheck(this, HydroGeneratingUnit);
      return _super.apply(this, arguments);
    }
    _createClass(HydroGeneratingUnit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "HydroGeneratingUnit";
        var attributeEntries = GeneratingUnit.attributeHTML(object, cimmenu, classType);
        if ('cim:HydroGeneratingUnit.energyConversionCapability' in object) {
          attributeEntries['filledEntries']['cim:HydroGeneratingUnit.energyConversionCapability'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['HydroGeneratingUnit.energyConversionCapability'], 'cim:HydroEnergyConversionKind', 'cim:HydroGeneratingUnit.energyConversionCapability');
        } else {
          attributeEntries['emptyEntries']['cim:HydroGeneratingUnit.energyConversionCapability'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['HydroGeneratingUnit.energyConversionCapability'], 'cim:HydroEnergyConversionKind', 'cim:HydroGeneratingUnit.energyConversionCapability');
        }
        if ('cim:HydroGeneratingUnit.HydroPowerPlant' in object) {
          attributeEntries['filledEntries']['cim:HydroGeneratingUnit.HydroPowerPlant'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['HydroGeneratingUnit.HydroPowerPlant'], 'cim:HydroPowerPlant', 'cim:HydroGeneratingUnit.HydroPowerPlant');
        } else {
          attributeEntries['emptyEntries']['cim:HydroGeneratingUnit.HydroPowerPlant'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['HydroGeneratingUnit.HydroPowerPlant'], 'cim:HydroPowerPlant', 'cim:HydroGeneratingUnit.HydroPowerPlant');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:HydroGeneratingUnit.energyConversionCapability", "cim:HydroGeneratingUnit.HydroPowerPlant"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (GeneratingUnit.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!HydroGeneratingUnit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class HydroGeneratingUnit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = HydroGeneratingUnit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return HydroGeneratingUnit;
  }(GeneratingUnit);
  _defineProperty(HydroGeneratingUnit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'energyConversionCapability': [CGMESProfile.shortNames.EQ],
    'HydroPowerPlant': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$s = [{
    "value": "--"
  }, {
    "value": "HydroPlantStorageKind.runOfRiver",
    "label": "runOfRiver"
  }, {
    "value": "HydroPlantStorageKind.pumpedStorage",
    "label": "pumpedStorage"
  }, {
    "value": "HydroPlantStorageKind.storage",
    "label": "storage"
  }];
  var HydroPlantStorageKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(HydroPlantStorageKind, _BaseClass);
    var _super = _createSuper(HydroPlantStorageKind);
    function HydroPlantStorageKind() {
      _classCallCheck(this, HydroPlantStorageKind);
      return _super.apply(this, arguments);
    }
    _createClass(HydroPlantStorageKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "HydroPlantStorageKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!HydroPlantStorageKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class HydroPlantStorageKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = HydroPlantStorageKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$s;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return HydroPlantStorageKind;
  }(BaseClass);
  _defineProperty(HydroPlantStorageKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var HydroPowerPlant = /*#__PURE__*/function (_PowerSystemResource) {
    _inherits(HydroPowerPlant, _PowerSystemResource);
    var _super = _createSuper(HydroPowerPlant);
    function HydroPowerPlant() {
      _classCallCheck(this, HydroPowerPlant);
      return _super.apply(this, arguments);
    }
    _createClass(HydroPowerPlant, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "HydroPowerPlant";
        var attributeEntries = PowerSystemResource.attributeHTML(object, cimmenu, classType);
        if ('cim:HydroPowerPlant.hydroPlantStorageType' in object) {
          attributeEntries['filledEntries']['cim:HydroPowerPlant.hydroPlantStorageType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['HydroPowerPlant.hydroPlantStorageType'], 'cim:HydroPlantStorageKind', 'cim:HydroPowerPlant.hydroPlantStorageType');
        } else {
          attributeEntries['emptyEntries']['cim:HydroPowerPlant.hydroPlantStorageType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['HydroPowerPlant.hydroPlantStorageType'], 'cim:HydroPlantStorageKind', 'cim:HydroPowerPlant.hydroPlantStorageType');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:HydroPowerPlant.hydroPlantStorageType"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemResource.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!HydroPowerPlant.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class HydroPowerPlant: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = HydroPowerPlant.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return HydroPowerPlant;
  }(PowerSystemResource);
  _defineProperty(HydroPowerPlant, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'hydroPlantStorageType': [CGMESProfile.shortNames.EQ]
  });

  var HydroPump = /*#__PURE__*/function (_Equipment) {
    _inherits(HydroPump, _Equipment);
    var _super = _createSuper(HydroPump);
    function HydroPump() {
      _classCallCheck(this, HydroPump);
      return _super.apply(this, arguments);
    }
    _createClass(HydroPump, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "HydroPump";
        var attributeEntries = Equipment.attributeHTML(object, cimmenu, classType);
        if ('cim:HydroPump.HydroPowerPlant' in object) {
          attributeEntries['filledEntries']['cim:HydroPump.HydroPowerPlant'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['HydroPump.HydroPowerPlant'], 'cim:HydroPowerPlant', 'cim:HydroPump.HydroPowerPlant');
        } else {
          attributeEntries['emptyEntries']['cim:HydroPump.HydroPowerPlant'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['HydroPump.HydroPowerPlant'], 'cim:HydroPowerPlant', 'cim:HydroPump.HydroPowerPlant');
        }
        if ('cim:HydroPump.RotatingMachine' in object) {
          attributeEntries['filledEntries']['cim:HydroPump.RotatingMachine'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['HydroPump.RotatingMachine'], 'cim:RotatingMachine', 'cim:HydroPump.RotatingMachine');
        } else {
          attributeEntries['emptyEntries']['cim:HydroPump.RotatingMachine'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['HydroPump.RotatingMachine'], 'cim:RotatingMachine', 'cim:HydroPump.RotatingMachine');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:HydroPump.HydroPowerPlant", "cim:HydroPump.RotatingMachine"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Equipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!HydroPump.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class HydroPump: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = HydroPump.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return HydroPump;
  }(Equipment);
  _defineProperty(HydroPump, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'HydroPowerPlant': [CGMESProfile.shortNames.EQ],
    'RotatingMachine': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$r = [{
    "value": "--"
  }, {
    "value": "IfdBaseKind.ifag",
    "label": "ifag"
  }, {
    "value": "IfdBaseKind.ifnl",
    "label": "ifnl"
  }, {
    "value": "IfdBaseKind.iffl",
    "label": "iffl"
  }, {
    "value": "IfdBaseKind.other",
    "label": "other"
  }];
  var IfdBaseKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(IfdBaseKind, _BaseClass);
    var _super = _createSuper(IfdBaseKind);
    function IfdBaseKind() {
      _classCallCheck(this, IfdBaseKind);
      return _super.apply(this, arguments);
    }
    _createClass(IfdBaseKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "IfdBaseKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!IfdBaseKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class IfdBaseKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = IfdBaseKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$r;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return IfdBaseKind;
  }(BaseClass);
  _defineProperty(IfdBaseKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var Inductance = /*#__PURE__*/function (_BaseClass) {
    _inherits(Inductance, _BaseClass);
    var _super = _createSuper(Inductance);
    function Inductance() {
      _classCallCheck(this, Inductance);
      return _super.apply(this, arguments);
    }
    _createClass(Inductance, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Inductance";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Inductance.value' in object) {
          attributeEntries['filledEntries']['cim:Inductance.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Inductance.value'], 'cim:Float', 'cim:Inductance.value');
        } else {
          attributeEntries['emptyEntries']['cim:Inductance.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Inductance.value'], 'cim:Float', 'cim:Inductance.value');
        }
        if ('cim:Inductance.unit' in object) {
          attributeEntries['filledEntries']['cim:Inductance.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Inductance.unit'], 'cim:UnitSymbol', 'cim:Inductance.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Inductance.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Inductance.unit'], 'cim:UnitSymbol', 'cim:Inductance.unit');
        }
        if ('cim:Inductance.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Inductance.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Inductance.multiplier'], 'cim:UnitMultiplier', 'cim:Inductance.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Inductance.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Inductance.multiplier'], 'cim:UnitMultiplier', 'cim:Inductance.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Inductance.value", "cim:Inductance.unit", "cim:Inductance.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Inductance.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Inductance: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Inductance.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Inductance;
  }(BaseClass);
  _defineProperty(Inductance, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ]
  });

  var InductancePerLength = /*#__PURE__*/function (_BaseClass) {
    _inherits(InductancePerLength, _BaseClass);
    var _super = _createSuper(InductancePerLength);
    function InductancePerLength() {
      _classCallCheck(this, InductancePerLength);
      return _super.apply(this, arguments);
    }
    _createClass(InductancePerLength, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "InductancePerLength";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:InductancePerLength.value' in object) {
          attributeEntries['filledEntries']['cim:InductancePerLength.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['InductancePerLength.value'], 'cim:Float', 'cim:InductancePerLength.value');
        } else {
          attributeEntries['emptyEntries']['cim:InductancePerLength.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['InductancePerLength.value'], 'cim:Float', 'cim:InductancePerLength.value');
        }
        if ('cim:InductancePerLength.unit' in object) {
          attributeEntries['filledEntries']['cim:InductancePerLength.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['InductancePerLength.unit'], 'cim:UnitSymbol', 'cim:InductancePerLength.unit');
        } else {
          attributeEntries['emptyEntries']['cim:InductancePerLength.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['InductancePerLength.unit'], 'cim:UnitSymbol', 'cim:InductancePerLength.unit');
        }
        if ('cim:InductancePerLength.multiplier' in object) {
          attributeEntries['filledEntries']['cim:InductancePerLength.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['InductancePerLength.multiplier'], 'cim:UnitMultiplier', 'cim:InductancePerLength.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:InductancePerLength.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['InductancePerLength.multiplier'], 'cim:UnitMultiplier', 'cim:InductancePerLength.multiplier');
        }
        if ('cim:InductancePerLength.denominatorUnit' in object) {
          attributeEntries['filledEntries']['cim:InductancePerLength.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['InductancePerLength.denominatorUnit'], 'cim:UnitSymbol', 'cim:InductancePerLength.denominatorUnit');
        } else {
          attributeEntries['emptyEntries']['cim:InductancePerLength.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['InductancePerLength.denominatorUnit'], 'cim:UnitSymbol', 'cim:InductancePerLength.denominatorUnit');
        }
        if ('cim:InductancePerLength.denominatorMultiplier' in object) {
          attributeEntries['filledEntries']['cim:InductancePerLength.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['InductancePerLength.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:InductancePerLength.denominatorMultiplier');
        } else {
          attributeEntries['emptyEntries']['cim:InductancePerLength.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['InductancePerLength.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:InductancePerLength.denominatorMultiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:InductancePerLength.value", "cim:InductancePerLength.unit", "cim:InductancePerLength.multiplier", "cim:InductancePerLength.denominatorUnit", "cim:InductancePerLength.denominatorMultiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!InductancePerLength.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class InductancePerLength: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = InductancePerLength.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return InductancePerLength;
  }(BaseClass);
  _defineProperty(InductancePerLength, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ],
    'denominatorUnit': [CGMESProfile.shortNames.EQ],
    'denominatorMultiplier': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$q = [{
    "value": "--"
  }, {
    "value": "InputSignalKind.rotorSpeed",
    "label": "rotorSpeed"
  }, {
    "value": "InputSignalKind.rotorAngularFrequencyDeviation",
    "label": "rotorAngularFrequencyDeviation"
  }, {
    "value": "InputSignalKind.busFrequency",
    "label": "busFrequency"
  }, {
    "value": "InputSignalKind.busFrequencyDeviation",
    "label": "busFrequencyDeviation"
  }, {
    "value": "InputSignalKind.generatorElectricalPower",
    "label": "generatorElectricalPower"
  }, {
    "value": "InputSignalKind.generatorAcceleratingPower",
    "label": "generatorAcceleratingPower"
  }, {
    "value": "InputSignalKind.busVoltage",
    "label": "busVoltage"
  }, {
    "value": "InputSignalKind.busVoltageDerivative",
    "label": "busVoltageDerivative"
  }, {
    "value": "InputSignalKind.branchCurrent",
    "label": "branchCurrent"
  }, {
    "value": "InputSignalKind.fieldCurrent",
    "label": "fieldCurrent"
  }];
  var InputSignalKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(InputSignalKind, _BaseClass);
    var _super = _createSuper(InputSignalKind);
    function InputSignalKind() {
      _classCallCheck(this, InputSignalKind);
      return _super.apply(this, arguments);
    }
    _createClass(InputSignalKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "InputSignalKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!InputSignalKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class InputSignalKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = InputSignalKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$q;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return InputSignalKind;
  }(BaseClass);
  _defineProperty(InputSignalKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var Integer = /*#__PURE__*/function (_BaseClass) {
    _inherits(Integer, _BaseClass);
    var _super = _createSuper(Integer);
    function Integer() {
      _classCallCheck(this, Integer);
      return _super.apply(this, arguments);
    }
    _createClass(Integer, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Integer";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Integer.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Integer: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Integer.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_string(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Integer;
  }(BaseClass);
  _defineProperty(Integer, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.GL, CGMESProfile.shortNames.DY]
  });

  var Junction = /*#__PURE__*/function (_Connector) {
    _inherits(Junction, _Connector);
    var _super = _createSuper(Junction);
    function Junction() {
      _classCallCheck(this, Junction);
      return _super.apply(this, arguments);
    }
    _createClass(Junction, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Junction";
        var attributeEntries = Connector.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Connector.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Junction.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Junction: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Junction.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Junction;
  }(Connector);
  _defineProperty(Junction, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD]
  });

  var Length = /*#__PURE__*/function (_BaseClass) {
    _inherits(Length, _BaseClass);
    var _super = _createSuper(Length);
    function Length() {
      _classCallCheck(this, Length);
      return _super.apply(this, arguments);
    }
    _createClass(Length, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Length";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Length.value' in object) {
          attributeEntries['filledEntries']['cim:Length.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Length.value'], 'cim:Float', 'cim:Length.value');
        } else {
          attributeEntries['emptyEntries']['cim:Length.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Length.value'], 'cim:Float', 'cim:Length.value');
        }
        if ('cim:Length.unit' in object) {
          attributeEntries['filledEntries']['cim:Length.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Length.unit'], 'cim:UnitSymbol', 'cim:Length.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Length.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Length.unit'], 'cim:UnitSymbol', 'cim:Length.unit');
        }
        if ('cim:Length.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Length.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Length.multiplier'], 'cim:UnitMultiplier', 'cim:Length.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Length.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Length.multiplier'], 'cim:UnitMultiplier', 'cim:Length.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Length.value", "cim:Length.unit", "cim:Length.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Length.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Length: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Length.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Length;
  }(BaseClass);
  _defineProperty(Length, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'value': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'unit': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'multiplier': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY]
  });

  var possibleValues$p = [{
    "value": "--"
  }, {
    "value": "LimitTypeKind.patl",
    "label": "patl"
  }, {
    "value": "LimitTypeKind.patlt",
    "label": "patlt"
  }, {
    "value": "LimitTypeKind.tatl",
    "label": "tatl"
  }, {
    "value": "LimitTypeKind.tc",
    "label": "tc"
  }, {
    "value": "LimitTypeKind.tct",
    "label": "tct"
  }, {
    "value": "LimitTypeKind.highVoltage",
    "label": "highVoltage"
  }, {
    "value": "LimitTypeKind.lowVoltage",
    "label": "lowVoltage"
  }];
  var LimitTypeKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(LimitTypeKind, _BaseClass);
    var _super = _createSuper(LimitTypeKind);
    function LimitTypeKind() {
      _classCallCheck(this, LimitTypeKind);
      return _super.apply(this, arguments);
    }
    _createClass(LimitTypeKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LimitTypeKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LimitTypeKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LimitTypeKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LimitTypeKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$p;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return LimitTypeKind;
  }(BaseClass);
  _defineProperty(LimitTypeKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var Line = /*#__PURE__*/function (_EquipmentContainer) {
    _inherits(Line, _EquipmentContainer);
    var _super = _createSuper(Line);
    function Line() {
      _classCallCheck(this, Line);
      return _super.apply(this, arguments);
    }
    _createClass(Line, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Line";
        var attributeEntries = EquipmentContainer.attributeHTML(object, cimmenu, classType);
        if ('cim:Line.Region' in object) {
          attributeEntries['filledEntries']['cim:Line.Region'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Line.Region'], 'cim:SubGeographicalRegion', 'cim:Line.Region');
        } else {
          attributeEntries['emptyEntries']['cim:Line.Region'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Line.Region'], 'cim:SubGeographicalRegion', 'cim:Line.Region');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Line.Region"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EquipmentContainer.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Line.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Line: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Line.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Line;
  }(EquipmentContainer);
  _defineProperty(Line, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD],
    'Region': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD]
  });

  var ShuntCompensator = /*#__PURE__*/function (_RegulatingCondEq) {
    _inherits(ShuntCompensator, _RegulatingCondEq);
    var _super = _createSuper(ShuntCompensator);
    function ShuntCompensator() {
      _classCallCheck(this, ShuntCompensator);
      return _super.apply(this, arguments);
    }
    _createClass(ShuntCompensator, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ShuntCompensator";
        var attributeEntries = RegulatingCondEq.attributeHTML(object, cimmenu, classType);
        if ('cim:ShuntCompensator.aVRDelay' in object) {
          attributeEntries['filledEntries']['cim:ShuntCompensator.aVRDelay'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.aVRDelay'], 'cim:Seconds', 'cim:ShuntCompensator.aVRDelay');
        } else {
          attributeEntries['emptyEntries']['cim:ShuntCompensator.aVRDelay'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.aVRDelay'], 'cim:Seconds', 'cim:ShuntCompensator.aVRDelay');
        }
        if ('cim:ShuntCompensator.grounded' in object) {
          attributeEntries['filledEntries']['cim:ShuntCompensator.grounded'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.grounded'], 'cim:Boolean', 'cim:ShuntCompensator.grounded');
        } else {
          attributeEntries['emptyEntries']['cim:ShuntCompensator.grounded'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.grounded'], 'cim:Boolean', 'cim:ShuntCompensator.grounded');
        }
        if ('cim:ShuntCompensator.maximumSections' in object) {
          attributeEntries['filledEntries']['cim:ShuntCompensator.maximumSections'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.maximumSections'], 'cim:Integer', 'cim:ShuntCompensator.maximumSections');
        } else {
          attributeEntries['emptyEntries']['cim:ShuntCompensator.maximumSections'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.maximumSections'], 'cim:Integer', 'cim:ShuntCompensator.maximumSections');
        }
        if ('cim:ShuntCompensator.nomU' in object) {
          attributeEntries['filledEntries']['cim:ShuntCompensator.nomU'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.nomU'], 'cim:Voltage', 'cim:ShuntCompensator.nomU');
        } else {
          attributeEntries['emptyEntries']['cim:ShuntCompensator.nomU'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.nomU'], 'cim:Voltage', 'cim:ShuntCompensator.nomU');
        }
        if ('cim:ShuntCompensator.normalSections' in object) {
          attributeEntries['filledEntries']['cim:ShuntCompensator.normalSections'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.normalSections'], 'cim:Integer', 'cim:ShuntCompensator.normalSections');
        } else {
          attributeEntries['emptyEntries']['cim:ShuntCompensator.normalSections'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.normalSections'], 'cim:Integer', 'cim:ShuntCompensator.normalSections');
        }
        if ('cim:ShuntCompensator.switchOnCount' in object) {
          attributeEntries['filledEntries']['cim:ShuntCompensator.switchOnCount'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.switchOnCount'], 'cim:Integer', 'cim:ShuntCompensator.switchOnCount');
        } else {
          attributeEntries['emptyEntries']['cim:ShuntCompensator.switchOnCount'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.switchOnCount'], 'cim:Integer', 'cim:ShuntCompensator.switchOnCount');
        }
        if ('cim:ShuntCompensator.switchOnDate' in object) {
          attributeEntries['filledEntries']['cim:ShuntCompensator.switchOnDate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.switchOnDate'], 'cim:DateTime', 'cim:ShuntCompensator.switchOnDate');
        } else {
          attributeEntries['emptyEntries']['cim:ShuntCompensator.switchOnDate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.switchOnDate'], 'cim:DateTime', 'cim:ShuntCompensator.switchOnDate');
        }
        if ('cim:ShuntCompensator.voltageSensitivity' in object) {
          attributeEntries['filledEntries']['cim:ShuntCompensator.voltageSensitivity'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.voltageSensitivity'], 'cim:VoltagePerReactivePower', 'cim:ShuntCompensator.voltageSensitivity');
        } else {
          attributeEntries['emptyEntries']['cim:ShuntCompensator.voltageSensitivity'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.voltageSensitivity'], 'cim:VoltagePerReactivePower', 'cim:ShuntCompensator.voltageSensitivity');
        }
        if ('cim:ShuntCompensator.sections' in object) {
          attributeEntries['filledEntries']['cim:ShuntCompensator.sections'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.sections'], 'cim:Simple_Float', 'cim:ShuntCompensator.sections');
        } else {
          attributeEntries['emptyEntries']['cim:ShuntCompensator.sections'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ShuntCompensator.sections'], 'cim:Simple_Float', 'cim:ShuntCompensator.sections');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ShuntCompensator.aVRDelay", "cim:ShuntCompensator.grounded", "cim:ShuntCompensator.maximumSections", "cim:ShuntCompensator.nomU", "cim:ShuntCompensator.normalSections", "cim:ShuntCompensator.switchOnCount", "cim:ShuntCompensator.switchOnDate", "cim:ShuntCompensator.voltageSensitivity", "cim:ShuntCompensator.sections"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (RegulatingCondEq.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ShuntCompensator.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ShuntCompensator: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ShuntCompensator.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["LinearShuntCompensator", "NonlinearShuntCompensator"];
        return subClasses;
      }
    }]);
    return ShuntCompensator;
  }(RegulatingCondEq);
  _defineProperty(ShuntCompensator, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV],
    'aVRDelay': [CGMESProfile.shortNames.EQ],
    'grounded': [CGMESProfile.shortNames.EQ],
    'maximumSections': [CGMESProfile.shortNames.EQ],
    'nomU': [CGMESProfile.shortNames.EQ],
    'normalSections': [CGMESProfile.shortNames.EQ],
    'switchOnCount': [CGMESProfile.shortNames.EQ],
    'switchOnDate': [CGMESProfile.shortNames.EQ],
    'voltageSensitivity': [CGMESProfile.shortNames.EQ],
    'sections': [CGMESProfile.shortNames.SSH]
  });

  var LinearShuntCompensator = /*#__PURE__*/function (_ShuntCompensator) {
    _inherits(LinearShuntCompensator, _ShuntCompensator);
    var _super = _createSuper(LinearShuntCompensator);
    function LinearShuntCompensator() {
      _classCallCheck(this, LinearShuntCompensator);
      return _super.apply(this, arguments);
    }
    _createClass(LinearShuntCompensator, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LinearShuntCompensator";
        var attributeEntries = ShuntCompensator.attributeHTML(object, cimmenu, classType);
        if ('cim:LinearShuntCompensator.bPerSection' in object) {
          attributeEntries['filledEntries']['cim:LinearShuntCompensator.bPerSection'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LinearShuntCompensator.bPerSection'], 'cim:Susceptance', 'cim:LinearShuntCompensator.bPerSection');
        } else {
          attributeEntries['emptyEntries']['cim:LinearShuntCompensator.bPerSection'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LinearShuntCompensator.bPerSection'], 'cim:Susceptance', 'cim:LinearShuntCompensator.bPerSection');
        }
        if ('cim:LinearShuntCompensator.gPerSection' in object) {
          attributeEntries['filledEntries']['cim:LinearShuntCompensator.gPerSection'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LinearShuntCompensator.gPerSection'], 'cim:Conductance', 'cim:LinearShuntCompensator.gPerSection');
        } else {
          attributeEntries['emptyEntries']['cim:LinearShuntCompensator.gPerSection'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LinearShuntCompensator.gPerSection'], 'cim:Conductance', 'cim:LinearShuntCompensator.gPerSection');
        }
        if ('cim:LinearShuntCompensator.b0PerSection' in object) {
          attributeEntries['filledEntries']['cim:LinearShuntCompensator.b0PerSection'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LinearShuntCompensator.b0PerSection'], 'cim:Susceptance', 'cim:LinearShuntCompensator.b0PerSection');
        } else {
          attributeEntries['emptyEntries']['cim:LinearShuntCompensator.b0PerSection'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LinearShuntCompensator.b0PerSection'], 'cim:Susceptance', 'cim:LinearShuntCompensator.b0PerSection');
        }
        if ('cim:LinearShuntCompensator.g0PerSection' in object) {
          attributeEntries['filledEntries']['cim:LinearShuntCompensator.g0PerSection'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LinearShuntCompensator.g0PerSection'], 'cim:Conductance', 'cim:LinearShuntCompensator.g0PerSection');
        } else {
          attributeEntries['emptyEntries']['cim:LinearShuntCompensator.g0PerSection'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LinearShuntCompensator.g0PerSection'], 'cim:Conductance', 'cim:LinearShuntCompensator.g0PerSection');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:LinearShuntCompensator.bPerSection", "cim:LinearShuntCompensator.gPerSection", "cim:LinearShuntCompensator.b0PerSection", "cim:LinearShuntCompensator.g0PerSection"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ShuntCompensator.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LinearShuntCompensator.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LinearShuntCompensator: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LinearShuntCompensator.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return LinearShuntCompensator;
  }(ShuntCompensator);
  _defineProperty(LinearShuntCompensator, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'bPerSection': [CGMESProfile.shortNames.EQ],
    'gPerSection': [CGMESProfile.shortNames.EQ],
    'b0PerSection': [CGMESProfile.shortNames.EQ],
    'g0PerSection': [CGMESProfile.shortNames.EQ]
  });

  var LoadDynamics = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(LoadDynamics, _IdentifiedObject);
    var _super = _createSuper(LoadDynamics);
    function LoadDynamics() {
      _classCallCheck(this, LoadDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(LoadDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LoadDynamics";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LoadDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LoadDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LoadDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["LoadUserDefined", "LoadComposite", "LoadGenericNonLinear", "LoadAggregate"];
        return subClasses;
      }
    }]);
    return LoadDynamics;
  }(IdentifiedObject);
  _defineProperty(LoadDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var LoadAggregate = /*#__PURE__*/function (_LoadDynamics) {
    _inherits(LoadAggregate, _LoadDynamics);
    var _super = _createSuper(LoadAggregate);
    function LoadAggregate() {
      _classCallCheck(this, LoadAggregate);
      return _super.apply(this, arguments);
    }
    _createClass(LoadAggregate, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LoadAggregate";
        var attributeEntries = LoadDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:LoadAggregate.LoadMotor' in object) {
          attributeEntries['filledEntries']['cim:LoadAggregate.LoadMotor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadAggregate.LoadMotor'], 'cim:LoadMotor', 'cim:LoadAggregate.LoadMotor');
        } else {
          attributeEntries['emptyEntries']['cim:LoadAggregate.LoadMotor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadAggregate.LoadMotor'], 'cim:LoadMotor', 'cim:LoadAggregate.LoadMotor');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:LoadAggregate.LoadMotor"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (LoadDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LoadAggregate.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LoadAggregate: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LoadAggregate.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return LoadAggregate;
  }(LoadDynamics);
  _defineProperty(LoadAggregate, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'LoadMotor': [CGMESProfile.shortNames.DY]
  });

  var LoadArea = /*#__PURE__*/function (_EnergyArea) {
    _inherits(LoadArea, _EnergyArea);
    var _super = _createSuper(LoadArea);
    function LoadArea() {
      _classCallCheck(this, LoadArea);
      return _super.apply(this, arguments);
    }
    _createClass(LoadArea, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LoadArea";
        var attributeEntries = EnergyArea.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EnergyArea.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LoadArea.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LoadArea: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LoadArea.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return LoadArea;
  }(EnergyArea);
  _defineProperty(LoadArea, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var LoadBreakSwitch = /*#__PURE__*/function (_ProtectedSwitch) {
    _inherits(LoadBreakSwitch, _ProtectedSwitch);
    var _super = _createSuper(LoadBreakSwitch);
    function LoadBreakSwitch() {
      _classCallCheck(this, LoadBreakSwitch);
      return _super.apply(this, arguments);
    }
    _createClass(LoadBreakSwitch, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LoadBreakSwitch";
        var attributeEntries = ProtectedSwitch.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ProtectedSwitch.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LoadBreakSwitch.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LoadBreakSwitch: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LoadBreakSwitch.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return LoadBreakSwitch;
  }(ProtectedSwitch);
  _defineProperty(LoadBreakSwitch, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var LoadComposite = /*#__PURE__*/function (_LoadDynamics) {
    _inherits(LoadComposite, _LoadDynamics);
    var _super = _createSuper(LoadComposite);
    function LoadComposite() {
      _classCallCheck(this, LoadComposite);
      return _super.apply(this, arguments);
    }
    _createClass(LoadComposite, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LoadComposite";
        var attributeEntries = LoadDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:LoadComposite.epvs' in object) {
          attributeEntries['filledEntries']['cim:LoadComposite.epvs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.epvs'], 'cim:Simple_Float', 'cim:LoadComposite.epvs');
        } else {
          attributeEntries['emptyEntries']['cim:LoadComposite.epvs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.epvs'], 'cim:Simple_Float', 'cim:LoadComposite.epvs');
        }
        if ('cim:LoadComposite.epfs' in object) {
          attributeEntries['filledEntries']['cim:LoadComposite.epfs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.epfs'], 'cim:Simple_Float', 'cim:LoadComposite.epfs');
        } else {
          attributeEntries['emptyEntries']['cim:LoadComposite.epfs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.epfs'], 'cim:Simple_Float', 'cim:LoadComposite.epfs');
        }
        if ('cim:LoadComposite.eqvs' in object) {
          attributeEntries['filledEntries']['cim:LoadComposite.eqvs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.eqvs'], 'cim:Simple_Float', 'cim:LoadComposite.eqvs');
        } else {
          attributeEntries['emptyEntries']['cim:LoadComposite.eqvs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.eqvs'], 'cim:Simple_Float', 'cim:LoadComposite.eqvs');
        }
        if ('cim:LoadComposite.eqfs' in object) {
          attributeEntries['filledEntries']['cim:LoadComposite.eqfs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.eqfs'], 'cim:Simple_Float', 'cim:LoadComposite.eqfs');
        } else {
          attributeEntries['emptyEntries']['cim:LoadComposite.eqfs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.eqfs'], 'cim:Simple_Float', 'cim:LoadComposite.eqfs');
        }
        if ('cim:LoadComposite.epvd' in object) {
          attributeEntries['filledEntries']['cim:LoadComposite.epvd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.epvd'], 'cim:Simple_Float', 'cim:LoadComposite.epvd');
        } else {
          attributeEntries['emptyEntries']['cim:LoadComposite.epvd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.epvd'], 'cim:Simple_Float', 'cim:LoadComposite.epvd');
        }
        if ('cim:LoadComposite.epfd' in object) {
          attributeEntries['filledEntries']['cim:LoadComposite.epfd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.epfd'], 'cim:Simple_Float', 'cim:LoadComposite.epfd');
        } else {
          attributeEntries['emptyEntries']['cim:LoadComposite.epfd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.epfd'], 'cim:Simple_Float', 'cim:LoadComposite.epfd');
        }
        if ('cim:LoadComposite.eqvd' in object) {
          attributeEntries['filledEntries']['cim:LoadComposite.eqvd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.eqvd'], 'cim:Simple_Float', 'cim:LoadComposite.eqvd');
        } else {
          attributeEntries['emptyEntries']['cim:LoadComposite.eqvd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.eqvd'], 'cim:Simple_Float', 'cim:LoadComposite.eqvd');
        }
        if ('cim:LoadComposite.eqfd' in object) {
          attributeEntries['filledEntries']['cim:LoadComposite.eqfd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.eqfd'], 'cim:Simple_Float', 'cim:LoadComposite.eqfd');
        } else {
          attributeEntries['emptyEntries']['cim:LoadComposite.eqfd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.eqfd'], 'cim:Simple_Float', 'cim:LoadComposite.eqfd');
        }
        if ('cim:LoadComposite.lfrac' in object) {
          attributeEntries['filledEntries']['cim:LoadComposite.lfrac'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.lfrac'], 'cim:Simple_Float', 'cim:LoadComposite.lfrac');
        } else {
          attributeEntries['emptyEntries']['cim:LoadComposite.lfrac'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.lfrac'], 'cim:Simple_Float', 'cim:LoadComposite.lfrac');
        }
        if ('cim:LoadComposite.h' in object) {
          attributeEntries['filledEntries']['cim:LoadComposite.h'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.h'], 'cim:Seconds', 'cim:LoadComposite.h');
        } else {
          attributeEntries['emptyEntries']['cim:LoadComposite.h'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.h'], 'cim:Seconds', 'cim:LoadComposite.h');
        }
        if ('cim:LoadComposite.pfrac' in object) {
          attributeEntries['filledEntries']['cim:LoadComposite.pfrac'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.pfrac'], 'cim:Simple_Float', 'cim:LoadComposite.pfrac');
        } else {
          attributeEntries['emptyEntries']['cim:LoadComposite.pfrac'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadComposite.pfrac'], 'cim:Simple_Float', 'cim:LoadComposite.pfrac');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:LoadComposite.epvs", "cim:LoadComposite.epfs", "cim:LoadComposite.eqvs", "cim:LoadComposite.eqfs", "cim:LoadComposite.epvd", "cim:LoadComposite.epfd", "cim:LoadComposite.eqvd", "cim:LoadComposite.eqfd", "cim:LoadComposite.lfrac", "cim:LoadComposite.h", "cim:LoadComposite.pfrac"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (LoadDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LoadComposite.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LoadComposite: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LoadComposite.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return LoadComposite;
  }(LoadDynamics);
  _defineProperty(LoadComposite, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'epvs': [CGMESProfile.shortNames.DY],
    'epfs': [CGMESProfile.shortNames.DY],
    'eqvs': [CGMESProfile.shortNames.DY],
    'eqfs': [CGMESProfile.shortNames.DY],
    'epvd': [CGMESProfile.shortNames.DY],
    'epfd': [CGMESProfile.shortNames.DY],
    'eqvd': [CGMESProfile.shortNames.DY],
    'eqfd': [CGMESProfile.shortNames.DY],
    'lfrac': [CGMESProfile.shortNames.DY],
    'h': [CGMESProfile.shortNames.DY],
    'pfrac': [CGMESProfile.shortNames.DY]
  });

  var LoadGenericNonLinear = /*#__PURE__*/function (_LoadDynamics) {
    _inherits(LoadGenericNonLinear, _LoadDynamics);
    var _super = _createSuper(LoadGenericNonLinear);
    function LoadGenericNonLinear() {
      _classCallCheck(this, LoadGenericNonLinear);
      return _super.apply(this, arguments);
    }
    _createClass(LoadGenericNonLinear, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LoadGenericNonLinear";
        var attributeEntries = LoadDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:LoadGenericNonLinear.genericNonLinearLoadModelType' in object) {
          attributeEntries['filledEntries']['cim:LoadGenericNonLinear.genericNonLinearLoadModelType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.genericNonLinearLoadModelType'], 'cim:GenericNonLinearLoadModelKind', 'cim:LoadGenericNonLinear.genericNonLinearLoadModelType');
        } else {
          attributeEntries['emptyEntries']['cim:LoadGenericNonLinear.genericNonLinearLoadModelType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.genericNonLinearLoadModelType'], 'cim:GenericNonLinearLoadModelKind', 'cim:LoadGenericNonLinear.genericNonLinearLoadModelType');
        }
        if ('cim:LoadGenericNonLinear.pt' in object) {
          attributeEntries['filledEntries']['cim:LoadGenericNonLinear.pt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.pt'], 'cim:Simple_Float', 'cim:LoadGenericNonLinear.pt');
        } else {
          attributeEntries['emptyEntries']['cim:LoadGenericNonLinear.pt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.pt'], 'cim:Simple_Float', 'cim:LoadGenericNonLinear.pt');
        }
        if ('cim:LoadGenericNonLinear.qt' in object) {
          attributeEntries['filledEntries']['cim:LoadGenericNonLinear.qt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.qt'], 'cim:Simple_Float', 'cim:LoadGenericNonLinear.qt');
        } else {
          attributeEntries['emptyEntries']['cim:LoadGenericNonLinear.qt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.qt'], 'cim:Simple_Float', 'cim:LoadGenericNonLinear.qt');
        }
        if ('cim:LoadGenericNonLinear.tp' in object) {
          attributeEntries['filledEntries']['cim:LoadGenericNonLinear.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.tp'], 'cim:Seconds', 'cim:LoadGenericNonLinear.tp');
        } else {
          attributeEntries['emptyEntries']['cim:LoadGenericNonLinear.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.tp'], 'cim:Seconds', 'cim:LoadGenericNonLinear.tp');
        }
        if ('cim:LoadGenericNonLinear.tq' in object) {
          attributeEntries['filledEntries']['cim:LoadGenericNonLinear.tq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.tq'], 'cim:Seconds', 'cim:LoadGenericNonLinear.tq');
        } else {
          attributeEntries['emptyEntries']['cim:LoadGenericNonLinear.tq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.tq'], 'cim:Seconds', 'cim:LoadGenericNonLinear.tq');
        }
        if ('cim:LoadGenericNonLinear.ls' in object) {
          attributeEntries['filledEntries']['cim:LoadGenericNonLinear.ls'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.ls'], 'cim:Simple_Float', 'cim:LoadGenericNonLinear.ls');
        } else {
          attributeEntries['emptyEntries']['cim:LoadGenericNonLinear.ls'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.ls'], 'cim:Simple_Float', 'cim:LoadGenericNonLinear.ls');
        }
        if ('cim:LoadGenericNonLinear.lt' in object) {
          attributeEntries['filledEntries']['cim:LoadGenericNonLinear.lt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.lt'], 'cim:Simple_Float', 'cim:LoadGenericNonLinear.lt');
        } else {
          attributeEntries['emptyEntries']['cim:LoadGenericNonLinear.lt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.lt'], 'cim:Simple_Float', 'cim:LoadGenericNonLinear.lt');
        }
        if ('cim:LoadGenericNonLinear.bs' in object) {
          attributeEntries['filledEntries']['cim:LoadGenericNonLinear.bs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.bs'], 'cim:Simple_Float', 'cim:LoadGenericNonLinear.bs');
        } else {
          attributeEntries['emptyEntries']['cim:LoadGenericNonLinear.bs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.bs'], 'cim:Simple_Float', 'cim:LoadGenericNonLinear.bs');
        }
        if ('cim:LoadGenericNonLinear.bt' in object) {
          attributeEntries['filledEntries']['cim:LoadGenericNonLinear.bt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.bt'], 'cim:Simple_Float', 'cim:LoadGenericNonLinear.bt');
        } else {
          attributeEntries['emptyEntries']['cim:LoadGenericNonLinear.bt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadGenericNonLinear.bt'], 'cim:Simple_Float', 'cim:LoadGenericNonLinear.bt');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:LoadGenericNonLinear.genericNonLinearLoadModelType", "cim:LoadGenericNonLinear.pt", "cim:LoadGenericNonLinear.qt", "cim:LoadGenericNonLinear.tp", "cim:LoadGenericNonLinear.tq", "cim:LoadGenericNonLinear.ls", "cim:LoadGenericNonLinear.lt", "cim:LoadGenericNonLinear.bs", "cim:LoadGenericNonLinear.bt"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (LoadDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LoadGenericNonLinear.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LoadGenericNonLinear: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LoadGenericNonLinear.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return LoadGenericNonLinear;
  }(LoadDynamics);
  _defineProperty(LoadGenericNonLinear, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'genericNonLinearLoadModelType': [CGMESProfile.shortNames.DY],
    'pt': [CGMESProfile.shortNames.DY],
    'qt': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    'tq': [CGMESProfile.shortNames.DY],
    'ls': [CGMESProfile.shortNames.DY],
    'lt': [CGMESProfile.shortNames.DY],
    'bs': [CGMESProfile.shortNames.DY],
    'bt': [CGMESProfile.shortNames.DY]
  });

  var LoadMotor = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(LoadMotor, _IdentifiedObject);
    var _super = _createSuper(LoadMotor);
    function LoadMotor() {
      _classCallCheck(this, LoadMotor);
      return _super.apply(this, arguments);
    }
    _createClass(LoadMotor, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LoadMotor";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:LoadMotor.LoadAggregate' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.LoadAggregate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.LoadAggregate'], 'cim:LoadAggregate', 'cim:LoadMotor.LoadAggregate');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.LoadAggregate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.LoadAggregate'], 'cim:LoadAggregate', 'cim:LoadMotor.LoadAggregate');
        }
        if ('cim:LoadMotor.pfrac' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.pfrac'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.pfrac'], 'cim:Simple_Float', 'cim:LoadMotor.pfrac');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.pfrac'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.pfrac'], 'cim:Simple_Float', 'cim:LoadMotor.pfrac');
        }
        if ('cim:LoadMotor.lfac' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.lfac'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.lfac'], 'cim:Simple_Float', 'cim:LoadMotor.lfac');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.lfac'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.lfac'], 'cim:Simple_Float', 'cim:LoadMotor.lfac');
        }
        if ('cim:LoadMotor.ls' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.ls'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.ls'], 'cim:PU', 'cim:LoadMotor.ls');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.ls'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.ls'], 'cim:PU', 'cim:LoadMotor.ls');
        }
        if ('cim:LoadMotor.lp' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.lp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.lp'], 'cim:PU', 'cim:LoadMotor.lp');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.lp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.lp'], 'cim:PU', 'cim:LoadMotor.lp');
        }
        if ('cim:LoadMotor.lpp' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.lpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.lpp'], 'cim:PU', 'cim:LoadMotor.lpp');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.lpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.lpp'], 'cim:PU', 'cim:LoadMotor.lpp');
        }
        if ('cim:LoadMotor.ra' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.ra'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.ra'], 'cim:PU', 'cim:LoadMotor.ra');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.ra'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.ra'], 'cim:PU', 'cim:LoadMotor.ra');
        }
        if ('cim:LoadMotor.tpo' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.tpo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.tpo'], 'cim:Seconds', 'cim:LoadMotor.tpo');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.tpo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.tpo'], 'cim:Seconds', 'cim:LoadMotor.tpo');
        }
        if ('cim:LoadMotor.tppo' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.tppo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.tppo'], 'cim:Seconds', 'cim:LoadMotor.tppo');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.tppo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.tppo'], 'cim:Seconds', 'cim:LoadMotor.tppo');
        }
        if ('cim:LoadMotor.h' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.h'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.h'], 'cim:Seconds', 'cim:LoadMotor.h');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.h'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.h'], 'cim:Seconds', 'cim:LoadMotor.h');
        }
        if ('cim:LoadMotor.d' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.d'], 'cim:Simple_Float', 'cim:LoadMotor.d');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.d'], 'cim:Simple_Float', 'cim:LoadMotor.d');
        }
        if ('cim:LoadMotor.vt' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.vt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.vt'], 'cim:PU', 'cim:LoadMotor.vt');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.vt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.vt'], 'cim:PU', 'cim:LoadMotor.vt');
        }
        if ('cim:LoadMotor.tv' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.tv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.tv'], 'cim:Seconds', 'cim:LoadMotor.tv');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.tv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.tv'], 'cim:Seconds', 'cim:LoadMotor.tv');
        }
        if ('cim:LoadMotor.tbkr' in object) {
          attributeEntries['filledEntries']['cim:LoadMotor.tbkr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.tbkr'], 'cim:Seconds', 'cim:LoadMotor.tbkr');
        } else {
          attributeEntries['emptyEntries']['cim:LoadMotor.tbkr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadMotor.tbkr'], 'cim:Seconds', 'cim:LoadMotor.tbkr');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:LoadMotor.LoadAggregate", "cim:LoadMotor.pfrac", "cim:LoadMotor.lfac", "cim:LoadMotor.ls", "cim:LoadMotor.lp", "cim:LoadMotor.lpp", "cim:LoadMotor.ra", "cim:LoadMotor.tpo", "cim:LoadMotor.tppo", "cim:LoadMotor.h", "cim:LoadMotor.d", "cim:LoadMotor.vt", "cim:LoadMotor.tv", "cim:LoadMotor.tbkr"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LoadMotor.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LoadMotor: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LoadMotor.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return LoadMotor;
  }(IdentifiedObject);
  _defineProperty(LoadMotor, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'LoadAggregate': [CGMESProfile.shortNames.DY],
    'pfrac': [CGMESProfile.shortNames.DY],
    'lfac': [CGMESProfile.shortNames.DY],
    'ls': [CGMESProfile.shortNames.DY],
    'lp': [CGMESProfile.shortNames.DY],
    'lpp': [CGMESProfile.shortNames.DY],
    'ra': [CGMESProfile.shortNames.DY],
    'tpo': [CGMESProfile.shortNames.DY],
    'tppo': [CGMESProfile.shortNames.DY],
    'h': [CGMESProfile.shortNames.DY],
    'd': [CGMESProfile.shortNames.DY],
    'vt': [CGMESProfile.shortNames.DY],
    'tv': [CGMESProfile.shortNames.DY],
    'tbkr': [CGMESProfile.shortNames.DY]
  });

  var LoadResponseCharacteristic = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(LoadResponseCharacteristic, _IdentifiedObject);
    var _super = _createSuper(LoadResponseCharacteristic);
    function LoadResponseCharacteristic() {
      _classCallCheck(this, LoadResponseCharacteristic);
      return _super.apply(this, arguments);
    }
    _createClass(LoadResponseCharacteristic, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LoadResponseCharacteristic";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:LoadResponseCharacteristic.exponentModel' in object) {
          attributeEntries['filledEntries']['cim:LoadResponseCharacteristic.exponentModel'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.exponentModel'], 'cim:Boolean', 'cim:LoadResponseCharacteristic.exponentModel');
        } else {
          attributeEntries['emptyEntries']['cim:LoadResponseCharacteristic.exponentModel'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.exponentModel'], 'cim:Boolean', 'cim:LoadResponseCharacteristic.exponentModel');
        }
        if ('cim:LoadResponseCharacteristic.pConstantCurrent' in object) {
          attributeEntries['filledEntries']['cim:LoadResponseCharacteristic.pConstantCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.pConstantCurrent'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.pConstantCurrent');
        } else {
          attributeEntries['emptyEntries']['cim:LoadResponseCharacteristic.pConstantCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.pConstantCurrent'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.pConstantCurrent');
        }
        if ('cim:LoadResponseCharacteristic.pConstantImpedance' in object) {
          attributeEntries['filledEntries']['cim:LoadResponseCharacteristic.pConstantImpedance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.pConstantImpedance'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.pConstantImpedance');
        } else {
          attributeEntries['emptyEntries']['cim:LoadResponseCharacteristic.pConstantImpedance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.pConstantImpedance'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.pConstantImpedance');
        }
        if ('cim:LoadResponseCharacteristic.pConstantPower' in object) {
          attributeEntries['filledEntries']['cim:LoadResponseCharacteristic.pConstantPower'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.pConstantPower'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.pConstantPower');
        } else {
          attributeEntries['emptyEntries']['cim:LoadResponseCharacteristic.pConstantPower'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.pConstantPower'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.pConstantPower');
        }
        if ('cim:LoadResponseCharacteristic.pFrequencyExponent' in object) {
          attributeEntries['filledEntries']['cim:LoadResponseCharacteristic.pFrequencyExponent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.pFrequencyExponent'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.pFrequencyExponent');
        } else {
          attributeEntries['emptyEntries']['cim:LoadResponseCharacteristic.pFrequencyExponent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.pFrequencyExponent'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.pFrequencyExponent');
        }
        if ('cim:LoadResponseCharacteristic.pVoltageExponent' in object) {
          attributeEntries['filledEntries']['cim:LoadResponseCharacteristic.pVoltageExponent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.pVoltageExponent'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.pVoltageExponent');
        } else {
          attributeEntries['emptyEntries']['cim:LoadResponseCharacteristic.pVoltageExponent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.pVoltageExponent'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.pVoltageExponent');
        }
        if ('cim:LoadResponseCharacteristic.qConstantCurrent' in object) {
          attributeEntries['filledEntries']['cim:LoadResponseCharacteristic.qConstantCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.qConstantCurrent'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.qConstantCurrent');
        } else {
          attributeEntries['emptyEntries']['cim:LoadResponseCharacteristic.qConstantCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.qConstantCurrent'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.qConstantCurrent');
        }
        if ('cim:LoadResponseCharacteristic.qConstantImpedance' in object) {
          attributeEntries['filledEntries']['cim:LoadResponseCharacteristic.qConstantImpedance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.qConstantImpedance'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.qConstantImpedance');
        } else {
          attributeEntries['emptyEntries']['cim:LoadResponseCharacteristic.qConstantImpedance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.qConstantImpedance'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.qConstantImpedance');
        }
        if ('cim:LoadResponseCharacteristic.qConstantPower' in object) {
          attributeEntries['filledEntries']['cim:LoadResponseCharacteristic.qConstantPower'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.qConstantPower'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.qConstantPower');
        } else {
          attributeEntries['emptyEntries']['cim:LoadResponseCharacteristic.qConstantPower'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.qConstantPower'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.qConstantPower');
        }
        if ('cim:LoadResponseCharacteristic.qFrequencyExponent' in object) {
          attributeEntries['filledEntries']['cim:LoadResponseCharacteristic.qFrequencyExponent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.qFrequencyExponent'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.qFrequencyExponent');
        } else {
          attributeEntries['emptyEntries']['cim:LoadResponseCharacteristic.qFrequencyExponent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.qFrequencyExponent'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.qFrequencyExponent');
        }
        if ('cim:LoadResponseCharacteristic.qVoltageExponent' in object) {
          attributeEntries['filledEntries']['cim:LoadResponseCharacteristic.qVoltageExponent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.qVoltageExponent'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.qVoltageExponent');
        } else {
          attributeEntries['emptyEntries']['cim:LoadResponseCharacteristic.qVoltageExponent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadResponseCharacteristic.qVoltageExponent'], 'cim:Simple_Float', 'cim:LoadResponseCharacteristic.qVoltageExponent');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:LoadResponseCharacteristic.exponentModel", "cim:LoadResponseCharacteristic.pConstantCurrent", "cim:LoadResponseCharacteristic.pConstantImpedance", "cim:LoadResponseCharacteristic.pConstantPower", "cim:LoadResponseCharacteristic.pFrequencyExponent", "cim:LoadResponseCharacteristic.pVoltageExponent", "cim:LoadResponseCharacteristic.qConstantCurrent", "cim:LoadResponseCharacteristic.qConstantImpedance", "cim:LoadResponseCharacteristic.qConstantPower", "cim:LoadResponseCharacteristic.qFrequencyExponent", "cim:LoadResponseCharacteristic.qVoltageExponent"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LoadResponseCharacteristic.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LoadResponseCharacteristic: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LoadResponseCharacteristic.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return LoadResponseCharacteristic;
  }(IdentifiedObject);
  _defineProperty(LoadResponseCharacteristic, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'exponentModel': [CGMESProfile.shortNames.EQ],
    'pConstantCurrent': [CGMESProfile.shortNames.EQ],
    'pConstantImpedance': [CGMESProfile.shortNames.EQ],
    'pConstantPower': [CGMESProfile.shortNames.EQ],
    'pFrequencyExponent': [CGMESProfile.shortNames.EQ],
    'pVoltageExponent': [CGMESProfile.shortNames.EQ],
    'qConstantCurrent': [CGMESProfile.shortNames.EQ],
    'qConstantImpedance': [CGMESProfile.shortNames.EQ],
    'qConstantPower': [CGMESProfile.shortNames.EQ],
    'qFrequencyExponent': [CGMESProfile.shortNames.EQ],
    'qVoltageExponent': [CGMESProfile.shortNames.EQ]
  });

  var LoadStatic = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(LoadStatic, _IdentifiedObject);
    var _super = _createSuper(LoadStatic);
    function LoadStatic() {
      _classCallCheck(this, LoadStatic);
      return _super.apply(this, arguments);
    }
    _createClass(LoadStatic, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LoadStatic";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:LoadStatic.LoadAggregate' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.LoadAggregate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.LoadAggregate'], 'cim:LoadAggregate', 'cim:LoadStatic.LoadAggregate');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.LoadAggregate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.LoadAggregate'], 'cim:LoadAggregate', 'cim:LoadStatic.LoadAggregate');
        }
        if ('cim:LoadStatic.staticLoadModelType' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.staticLoadModelType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.staticLoadModelType'], 'cim:StaticLoadModelKind', 'cim:LoadStatic.staticLoadModelType');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.staticLoadModelType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.staticLoadModelType'], 'cim:StaticLoadModelKind', 'cim:LoadStatic.staticLoadModelType');
        }
        if ('cim:LoadStatic.kp1' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.kp1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kp1'], 'cim:Simple_Float', 'cim:LoadStatic.kp1');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.kp1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kp1'], 'cim:Simple_Float', 'cim:LoadStatic.kp1');
        }
        if ('cim:LoadStatic.kp2' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.kp2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kp2'], 'cim:Simple_Float', 'cim:LoadStatic.kp2');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.kp2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kp2'], 'cim:Simple_Float', 'cim:LoadStatic.kp2');
        }
        if ('cim:LoadStatic.kp3' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.kp3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kp3'], 'cim:Simple_Float', 'cim:LoadStatic.kp3');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.kp3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kp3'], 'cim:Simple_Float', 'cim:LoadStatic.kp3');
        }
        if ('cim:LoadStatic.kp4' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.kp4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kp4'], 'cim:Simple_Float', 'cim:LoadStatic.kp4');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.kp4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kp4'], 'cim:Simple_Float', 'cim:LoadStatic.kp4');
        }
        if ('cim:LoadStatic.ep1' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.ep1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.ep1'], 'cim:Simple_Float', 'cim:LoadStatic.ep1');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.ep1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.ep1'], 'cim:Simple_Float', 'cim:LoadStatic.ep1');
        }
        if ('cim:LoadStatic.ep2' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.ep2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.ep2'], 'cim:Simple_Float', 'cim:LoadStatic.ep2');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.ep2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.ep2'], 'cim:Simple_Float', 'cim:LoadStatic.ep2');
        }
        if ('cim:LoadStatic.ep3' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.ep3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.ep3'], 'cim:Simple_Float', 'cim:LoadStatic.ep3');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.ep3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.ep3'], 'cim:Simple_Float', 'cim:LoadStatic.ep3');
        }
        if ('cim:LoadStatic.kpf' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.kpf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kpf'], 'cim:Simple_Float', 'cim:LoadStatic.kpf');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.kpf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kpf'], 'cim:Simple_Float', 'cim:LoadStatic.kpf');
        }
        if ('cim:LoadStatic.kq1' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.kq1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kq1'], 'cim:Simple_Float', 'cim:LoadStatic.kq1');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.kq1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kq1'], 'cim:Simple_Float', 'cim:LoadStatic.kq1');
        }
        if ('cim:LoadStatic.kq2' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.kq2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kq2'], 'cim:Simple_Float', 'cim:LoadStatic.kq2');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.kq2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kq2'], 'cim:Simple_Float', 'cim:LoadStatic.kq2');
        }
        if ('cim:LoadStatic.kq3' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.kq3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kq3'], 'cim:Simple_Float', 'cim:LoadStatic.kq3');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.kq3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kq3'], 'cim:Simple_Float', 'cim:LoadStatic.kq3');
        }
        if ('cim:LoadStatic.kq4' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.kq4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kq4'], 'cim:Simple_Float', 'cim:LoadStatic.kq4');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.kq4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kq4'], 'cim:Simple_Float', 'cim:LoadStatic.kq4');
        }
        if ('cim:LoadStatic.eq1' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.eq1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.eq1'], 'cim:Simple_Float', 'cim:LoadStatic.eq1');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.eq1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.eq1'], 'cim:Simple_Float', 'cim:LoadStatic.eq1');
        }
        if ('cim:LoadStatic.eq2' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.eq2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.eq2'], 'cim:Simple_Float', 'cim:LoadStatic.eq2');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.eq2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.eq2'], 'cim:Simple_Float', 'cim:LoadStatic.eq2');
        }
        if ('cim:LoadStatic.eq3' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.eq3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.eq3'], 'cim:Simple_Float', 'cim:LoadStatic.eq3');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.eq3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.eq3'], 'cim:Simple_Float', 'cim:LoadStatic.eq3');
        }
        if ('cim:LoadStatic.kqf' in object) {
          attributeEntries['filledEntries']['cim:LoadStatic.kqf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kqf'], 'cim:Simple_Float', 'cim:LoadStatic.kqf');
        } else {
          attributeEntries['emptyEntries']['cim:LoadStatic.kqf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadStatic.kqf'], 'cim:Simple_Float', 'cim:LoadStatic.kqf');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:LoadStatic.LoadAggregate", "cim:LoadStatic.staticLoadModelType", "cim:LoadStatic.kp1", "cim:LoadStatic.kp2", "cim:LoadStatic.kp3", "cim:LoadStatic.kp4", "cim:LoadStatic.ep1", "cim:LoadStatic.ep2", "cim:LoadStatic.ep3", "cim:LoadStatic.kpf", "cim:LoadStatic.kq1", "cim:LoadStatic.kq2", "cim:LoadStatic.kq3", "cim:LoadStatic.kq4", "cim:LoadStatic.eq1", "cim:LoadStatic.eq2", "cim:LoadStatic.eq3", "cim:LoadStatic.kqf"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LoadStatic.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LoadStatic: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LoadStatic.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return LoadStatic;
  }(IdentifiedObject);
  _defineProperty(LoadStatic, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'LoadAggregate': [CGMESProfile.shortNames.DY],
    'staticLoadModelType': [CGMESProfile.shortNames.DY],
    'kp1': [CGMESProfile.shortNames.DY],
    'kp2': [CGMESProfile.shortNames.DY],
    'kp3': [CGMESProfile.shortNames.DY],
    'kp4': [CGMESProfile.shortNames.DY],
    'ep1': [CGMESProfile.shortNames.DY],
    'ep2': [CGMESProfile.shortNames.DY],
    'ep3': [CGMESProfile.shortNames.DY],
    'kpf': [CGMESProfile.shortNames.DY],
    'kq1': [CGMESProfile.shortNames.DY],
    'kq2': [CGMESProfile.shortNames.DY],
    'kq3': [CGMESProfile.shortNames.DY],
    'kq4': [CGMESProfile.shortNames.DY],
    'eq1': [CGMESProfile.shortNames.DY],
    'eq2': [CGMESProfile.shortNames.DY],
    'eq3': [CGMESProfile.shortNames.DY],
    'kqf': [CGMESProfile.shortNames.DY]
  });

  var LoadUserDefined = /*#__PURE__*/function (_LoadDynamics) {
    _inherits(LoadUserDefined, _LoadDynamics);
    var _super = _createSuper(LoadUserDefined);
    function LoadUserDefined() {
      _classCallCheck(this, LoadUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(LoadUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "LoadUserDefined";
        var attributeEntries = LoadDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:LoadUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:LoadUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadUserDefined.proprietary'], 'cim:Boolean', 'cim:LoadUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:LoadUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['LoadUserDefined.proprietary'], 'cim:Boolean', 'cim:LoadUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:LoadUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (LoadDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!LoadUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class LoadUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = LoadUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return LoadUserDefined;
  }(LoadDynamics);
  _defineProperty(LoadUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var Location = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(Location, _IdentifiedObject);
    var _super = _createSuper(Location);
    function Location() {
      _classCallCheck(this, Location);
      return _super.apply(this, arguments);
    }
    _createClass(Location, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Location";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:Location.CoordinateSystem' in object) {
          attributeEntries['filledEntries']['cim:Location.CoordinateSystem'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Location.CoordinateSystem'], 'cim:CoordinateSystem', 'cim:Location.CoordinateSystem');
        } else {
          attributeEntries['emptyEntries']['cim:Location.CoordinateSystem'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Location.CoordinateSystem'], 'cim:CoordinateSystem', 'cim:Location.CoordinateSystem');
        }
        if ('cim:Location.PowerSystemResources' in object) {
          attributeEntries['filledEntries']['cim:Location.PowerSystemResources'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Location.PowerSystemResources'], 'cim:PowerSystemResource', 'cim:Location.PowerSystemResources');
        } else {
          attributeEntries['emptyEntries']['cim:Location.PowerSystemResources'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Location.PowerSystemResources'], 'cim:PowerSystemResource', 'cim:Location.PowerSystemResources');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Location.CoordinateSystem", "cim:Location.PowerSystemResources"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Location.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Location: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Location.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Location;
  }(IdentifiedObject);
  _defineProperty(Location, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.GL],
    'CoordinateSystem': [CGMESProfile.shortNames.GL],
    'PowerSystemResources': [CGMESProfile.shortNames.GL]
  });

  var Quality61850 = /*#__PURE__*/function (_BaseClass) {
    _inherits(Quality61850, _BaseClass);
    var _super = _createSuper(Quality61850);
    function Quality61850() {
      _classCallCheck(this, Quality61850);
      return _super.apply(this, arguments);
    }
    _createClass(Quality61850, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Quality61850";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Quality61850.badReference' in object) {
          attributeEntries['filledEntries']['cim:Quality61850.badReference'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.badReference'], 'cim:Boolean', 'cim:Quality61850.badReference');
        } else {
          attributeEntries['emptyEntries']['cim:Quality61850.badReference'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.badReference'], 'cim:Boolean', 'cim:Quality61850.badReference');
        }
        if ('cim:Quality61850.estimatorReplaced' in object) {
          attributeEntries['filledEntries']['cim:Quality61850.estimatorReplaced'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.estimatorReplaced'], 'cim:Boolean', 'cim:Quality61850.estimatorReplaced');
        } else {
          attributeEntries['emptyEntries']['cim:Quality61850.estimatorReplaced'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.estimatorReplaced'], 'cim:Boolean', 'cim:Quality61850.estimatorReplaced');
        }
        if ('cim:Quality61850.failure' in object) {
          attributeEntries['filledEntries']['cim:Quality61850.failure'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.failure'], 'cim:Boolean', 'cim:Quality61850.failure');
        } else {
          attributeEntries['emptyEntries']['cim:Quality61850.failure'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.failure'], 'cim:Boolean', 'cim:Quality61850.failure');
        }
        if ('cim:Quality61850.oldData' in object) {
          attributeEntries['filledEntries']['cim:Quality61850.oldData'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.oldData'], 'cim:Boolean', 'cim:Quality61850.oldData');
        } else {
          attributeEntries['emptyEntries']['cim:Quality61850.oldData'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.oldData'], 'cim:Boolean', 'cim:Quality61850.oldData');
        }
        if ('cim:Quality61850.operatorBlocked' in object) {
          attributeEntries['filledEntries']['cim:Quality61850.operatorBlocked'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.operatorBlocked'], 'cim:Boolean', 'cim:Quality61850.operatorBlocked');
        } else {
          attributeEntries['emptyEntries']['cim:Quality61850.operatorBlocked'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.operatorBlocked'], 'cim:Boolean', 'cim:Quality61850.operatorBlocked');
        }
        if ('cim:Quality61850.oscillatory' in object) {
          attributeEntries['filledEntries']['cim:Quality61850.oscillatory'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.oscillatory'], 'cim:Boolean', 'cim:Quality61850.oscillatory');
        } else {
          attributeEntries['emptyEntries']['cim:Quality61850.oscillatory'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.oscillatory'], 'cim:Boolean', 'cim:Quality61850.oscillatory');
        }
        if ('cim:Quality61850.outOfRange' in object) {
          attributeEntries['filledEntries']['cim:Quality61850.outOfRange'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.outOfRange'], 'cim:Boolean', 'cim:Quality61850.outOfRange');
        } else {
          attributeEntries['emptyEntries']['cim:Quality61850.outOfRange'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.outOfRange'], 'cim:Boolean', 'cim:Quality61850.outOfRange');
        }
        if ('cim:Quality61850.overFlow' in object) {
          attributeEntries['filledEntries']['cim:Quality61850.overFlow'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.overFlow'], 'cim:Boolean', 'cim:Quality61850.overFlow');
        } else {
          attributeEntries['emptyEntries']['cim:Quality61850.overFlow'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.overFlow'], 'cim:Boolean', 'cim:Quality61850.overFlow');
        }
        if ('cim:Quality61850.source' in object) {
          attributeEntries['filledEntries']['cim:Quality61850.source'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.source'], 'cim:Source', 'cim:Quality61850.source');
        } else {
          attributeEntries['emptyEntries']['cim:Quality61850.source'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.source'], 'cim:Source', 'cim:Quality61850.source');
        }
        if ('cim:Quality61850.suspect' in object) {
          attributeEntries['filledEntries']['cim:Quality61850.suspect'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.suspect'], 'cim:Boolean', 'cim:Quality61850.suspect');
        } else {
          attributeEntries['emptyEntries']['cim:Quality61850.suspect'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.suspect'], 'cim:Boolean', 'cim:Quality61850.suspect');
        }
        if ('cim:Quality61850.test' in object) {
          attributeEntries['filledEntries']['cim:Quality61850.test'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.test'], 'cim:Boolean', 'cim:Quality61850.test');
        } else {
          attributeEntries['emptyEntries']['cim:Quality61850.test'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.test'], 'cim:Boolean', 'cim:Quality61850.test');
        }
        if ('cim:Quality61850.validity' in object) {
          attributeEntries['filledEntries']['cim:Quality61850.validity'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.validity'], 'cim:Validity', 'cim:Quality61850.validity');
        } else {
          attributeEntries['emptyEntries']['cim:Quality61850.validity'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Quality61850.validity'], 'cim:Validity', 'cim:Quality61850.validity');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Quality61850.badReference", "cim:Quality61850.estimatorReplaced", "cim:Quality61850.failure", "cim:Quality61850.oldData", "cim:Quality61850.operatorBlocked", "cim:Quality61850.oscillatory", "cim:Quality61850.outOfRange", "cim:Quality61850.overFlow", "cim:Quality61850.source", "cim:Quality61850.suspect", "cim:Quality61850.test", "cim:Quality61850.validity"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Quality61850.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Quality61850: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Quality61850.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["MeasurementValueQuality"];
        return subClasses;
      }
    }]);
    return Quality61850;
  }(BaseClass);
  _defineProperty(Quality61850, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'badReference': [CGMESProfile.shortNames.EQ],
    'estimatorReplaced': [CGMESProfile.shortNames.EQ],
    'failure': [CGMESProfile.shortNames.EQ],
    'oldData': [CGMESProfile.shortNames.EQ],
    'operatorBlocked': [CGMESProfile.shortNames.EQ],
    'oscillatory': [CGMESProfile.shortNames.EQ],
    'outOfRange': [CGMESProfile.shortNames.EQ],
    'overFlow': [CGMESProfile.shortNames.EQ],
    'source': [CGMESProfile.shortNames.EQ],
    'suspect': [CGMESProfile.shortNames.EQ],
    'test': [CGMESProfile.shortNames.EQ],
    'validity': [CGMESProfile.shortNames.EQ]
  });

  var MeasurementValueQuality = /*#__PURE__*/function (_Quality) {
    _inherits(MeasurementValueQuality, _Quality);
    var _super = _createSuper(MeasurementValueQuality);
    function MeasurementValueQuality() {
      _classCallCheck(this, MeasurementValueQuality);
      return _super.apply(this, arguments);
    }
    _createClass(MeasurementValueQuality, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "MeasurementValueQuality";
        var attributeEntries = Quality61850.attributeHTML(object, cimmenu, classType);
        if ('cim:MeasurementValueQuality.MeasurementValue' in object) {
          attributeEntries['filledEntries']['cim:MeasurementValueQuality.MeasurementValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MeasurementValueQuality.MeasurementValue'], 'cim:MeasurementValue', 'cim:MeasurementValueQuality.MeasurementValue');
        } else {
          attributeEntries['emptyEntries']['cim:MeasurementValueQuality.MeasurementValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MeasurementValueQuality.MeasurementValue'], 'cim:MeasurementValue', 'cim:MeasurementValueQuality.MeasurementValue');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:MeasurementValueQuality.MeasurementValue"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Quality61850.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!MeasurementValueQuality.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class MeasurementValueQuality: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = MeasurementValueQuality.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return MeasurementValueQuality;
  }(Quality61850);
  _defineProperty(MeasurementValueQuality, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'MeasurementValue': [CGMESProfile.shortNames.EQ]
  });

  var MeasurementValueSource = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(MeasurementValueSource, _IdentifiedObject);
    var _super = _createSuper(MeasurementValueSource);
    function MeasurementValueSource() {
      _classCallCheck(this, MeasurementValueSource);
      return _super.apply(this, arguments);
    }
    _createClass(MeasurementValueSource, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "MeasurementValueSource";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!MeasurementValueSource.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class MeasurementValueSource: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = MeasurementValueSource.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return MeasurementValueSource;
  }(IdentifiedObject);
  _defineProperty(MeasurementValueSource, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var MechanicalLoadDynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(MechanicalLoadDynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(MechanicalLoadDynamics);
    function MechanicalLoadDynamics() {
      _classCallCheck(this, MechanicalLoadDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(MechanicalLoadDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "MechanicalLoadDynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:MechanicalLoadDynamics.SynchronousMachineDynamics' in object) {
          attributeEntries['filledEntries']['cim:MechanicalLoadDynamics.SynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechanicalLoadDynamics.SynchronousMachineDynamics'], 'cim:SynchronousMachineDynamics', 'cim:MechanicalLoadDynamics.SynchronousMachineDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:MechanicalLoadDynamics.SynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechanicalLoadDynamics.SynchronousMachineDynamics'], 'cim:SynchronousMachineDynamics', 'cim:MechanicalLoadDynamics.SynchronousMachineDynamics');
        }
        if ('cim:MechanicalLoadDynamics.AsynchronousMachineDynamics' in object) {
          attributeEntries['filledEntries']['cim:MechanicalLoadDynamics.AsynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechanicalLoadDynamics.AsynchronousMachineDynamics'], 'cim:AsynchronousMachineDynamics', 'cim:MechanicalLoadDynamics.AsynchronousMachineDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:MechanicalLoadDynamics.AsynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechanicalLoadDynamics.AsynchronousMachineDynamics'], 'cim:AsynchronousMachineDynamics', 'cim:MechanicalLoadDynamics.AsynchronousMachineDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:MechanicalLoadDynamics.SynchronousMachineDynamics", "cim:MechanicalLoadDynamics.AsynchronousMachineDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!MechanicalLoadDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class MechanicalLoadDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = MechanicalLoadDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["MechanicalLoadUserDefined", "MechLoad1"];
        return subClasses;
      }
    }]);
    return MechanicalLoadDynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(MechanicalLoadDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'SynchronousMachineDynamics': [CGMESProfile.shortNames.DY],
    'AsynchronousMachineDynamics': [CGMESProfile.shortNames.DY]
  });

  var MechLoad1 = /*#__PURE__*/function (_MechanicalLoadDynami) {
    _inherits(MechLoad1, _MechanicalLoadDynami);
    var _super = _createSuper(MechLoad1);
    function MechLoad1() {
      _classCallCheck(this, MechLoad1);
      return _super.apply(this, arguments);
    }
    _createClass(MechLoad1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "MechLoad1";
        var attributeEntries = MechanicalLoadDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:MechLoad1.a' in object) {
          attributeEntries['filledEntries']['cim:MechLoad1.a'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechLoad1.a'], 'cim:Simple_Float', 'cim:MechLoad1.a');
        } else {
          attributeEntries['emptyEntries']['cim:MechLoad1.a'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechLoad1.a'], 'cim:Simple_Float', 'cim:MechLoad1.a');
        }
        if ('cim:MechLoad1.b' in object) {
          attributeEntries['filledEntries']['cim:MechLoad1.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechLoad1.b'], 'cim:Simple_Float', 'cim:MechLoad1.b');
        } else {
          attributeEntries['emptyEntries']['cim:MechLoad1.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechLoad1.b'], 'cim:Simple_Float', 'cim:MechLoad1.b');
        }
        if ('cim:MechLoad1.d' in object) {
          attributeEntries['filledEntries']['cim:MechLoad1.d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechLoad1.d'], 'cim:Simple_Float', 'cim:MechLoad1.d');
        } else {
          attributeEntries['emptyEntries']['cim:MechLoad1.d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechLoad1.d'], 'cim:Simple_Float', 'cim:MechLoad1.d');
        }
        if ('cim:MechLoad1.e' in object) {
          attributeEntries['filledEntries']['cim:MechLoad1.e'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechLoad1.e'], 'cim:Simple_Float', 'cim:MechLoad1.e');
        } else {
          attributeEntries['emptyEntries']['cim:MechLoad1.e'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechLoad1.e'], 'cim:Simple_Float', 'cim:MechLoad1.e');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:MechLoad1.a", "cim:MechLoad1.b", "cim:MechLoad1.d", "cim:MechLoad1.e"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (MechanicalLoadDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!MechLoad1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class MechLoad1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = MechLoad1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return MechLoad1;
  }(MechanicalLoadDynamics);
  _defineProperty(MechLoad1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'a': [CGMESProfile.shortNames.DY],
    'b': [CGMESProfile.shortNames.DY],
    'd': [CGMESProfile.shortNames.DY],
    'e': [CGMESProfile.shortNames.DY]
  });

  var MechanicalLoadUserDefined = /*#__PURE__*/function (_MechanicalLoadDynami) {
    _inherits(MechanicalLoadUserDefined, _MechanicalLoadDynami);
    var _super = _createSuper(MechanicalLoadUserDefined);
    function MechanicalLoadUserDefined() {
      _classCallCheck(this, MechanicalLoadUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(MechanicalLoadUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "MechanicalLoadUserDefined";
        var attributeEntries = MechanicalLoadDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:MechanicalLoadUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:MechanicalLoadUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechanicalLoadUserDefined.proprietary'], 'cim:Boolean', 'cim:MechanicalLoadUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:MechanicalLoadUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MechanicalLoadUserDefined.proprietary'], 'cim:Boolean', 'cim:MechanicalLoadUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:MechanicalLoadUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (MechanicalLoadDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!MechanicalLoadUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class MechanicalLoadUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = MechanicalLoadUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return MechanicalLoadUserDefined;
  }(MechanicalLoadDynamics);
  _defineProperty(MechanicalLoadUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var Money = /*#__PURE__*/function (_BaseClass) {
    _inherits(Money, _BaseClass);
    var _super = _createSuper(Money);
    function Money() {
      _classCallCheck(this, Money);
      return _super.apply(this, arguments);
    }
    _createClass(Money, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Money";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Money.unit' in object) {
          attributeEntries['filledEntries']['cim:Money.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Money.unit'], 'cim:Currency', 'cim:Money.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Money.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Money.unit'], 'cim:Currency', 'cim:Money.unit');
        }
        if ('cim:Money.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Money.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Money.multiplier'], 'cim:UnitMultiplier', 'cim:Money.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Money.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Money.multiplier'], 'cim:UnitMultiplier', 'cim:Money.multiplier');
        }
        if ('cim:Money.value' in object) {
          attributeEntries['filledEntries']['cim:Money.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Money.value'], 'cim:Decimal', 'cim:Money.value');
        } else {
          attributeEntries['emptyEntries']['cim:Money.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Money.value'], 'cim:Decimal', 'cim:Money.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Money.unit", "cim:Money.multiplier", "cim:Money.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Money.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Money: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Money.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Money;
  }(BaseClass);
  _defineProperty(Money, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var MonthDay = /*#__PURE__*/function (_BaseClass) {
    _inherits(MonthDay, _BaseClass);
    var _super = _createSuper(MonthDay);
    function MonthDay() {
      _classCallCheck(this, MonthDay);
      return _super.apply(this, arguments);
    }
    _createClass(MonthDay, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "MonthDay";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!MonthDay.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class MonthDay: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = MonthDay.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return MonthDay;
  }(BaseClass);
  _defineProperty(MonthDay, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var MutualCoupling = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(MutualCoupling, _IdentifiedObject);
    var _super = _createSuper(MutualCoupling);
    function MutualCoupling() {
      _classCallCheck(this, MutualCoupling);
      return _super.apply(this, arguments);
    }
    _createClass(MutualCoupling, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "MutualCoupling";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:MutualCoupling.First_Terminal' in object) {
          attributeEntries['filledEntries']['cim:MutualCoupling.First_Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.First_Terminal'], 'cim:Terminal', 'cim:MutualCoupling.First_Terminal');
        } else {
          attributeEntries['emptyEntries']['cim:MutualCoupling.First_Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.First_Terminal'], 'cim:Terminal', 'cim:MutualCoupling.First_Terminal');
        }
        if ('cim:MutualCoupling.Second_Terminal' in object) {
          attributeEntries['filledEntries']['cim:MutualCoupling.Second_Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.Second_Terminal'], 'cim:Terminal', 'cim:MutualCoupling.Second_Terminal');
        } else {
          attributeEntries['emptyEntries']['cim:MutualCoupling.Second_Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.Second_Terminal'], 'cim:Terminal', 'cim:MutualCoupling.Second_Terminal');
        }
        if ('cim:MutualCoupling.b0ch' in object) {
          attributeEntries['filledEntries']['cim:MutualCoupling.b0ch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.b0ch'], 'cim:Susceptance', 'cim:MutualCoupling.b0ch');
        } else {
          attributeEntries['emptyEntries']['cim:MutualCoupling.b0ch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.b0ch'], 'cim:Susceptance', 'cim:MutualCoupling.b0ch');
        }
        if ('cim:MutualCoupling.distance11' in object) {
          attributeEntries['filledEntries']['cim:MutualCoupling.distance11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.distance11'], 'cim:Length', 'cim:MutualCoupling.distance11');
        } else {
          attributeEntries['emptyEntries']['cim:MutualCoupling.distance11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.distance11'], 'cim:Length', 'cim:MutualCoupling.distance11');
        }
        if ('cim:MutualCoupling.distance12' in object) {
          attributeEntries['filledEntries']['cim:MutualCoupling.distance12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.distance12'], 'cim:Length', 'cim:MutualCoupling.distance12');
        } else {
          attributeEntries['emptyEntries']['cim:MutualCoupling.distance12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.distance12'], 'cim:Length', 'cim:MutualCoupling.distance12');
        }
        if ('cim:MutualCoupling.distance21' in object) {
          attributeEntries['filledEntries']['cim:MutualCoupling.distance21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.distance21'], 'cim:Length', 'cim:MutualCoupling.distance21');
        } else {
          attributeEntries['emptyEntries']['cim:MutualCoupling.distance21'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.distance21'], 'cim:Length', 'cim:MutualCoupling.distance21');
        }
        if ('cim:MutualCoupling.distance22' in object) {
          attributeEntries['filledEntries']['cim:MutualCoupling.distance22'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.distance22'], 'cim:Length', 'cim:MutualCoupling.distance22');
        } else {
          attributeEntries['emptyEntries']['cim:MutualCoupling.distance22'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.distance22'], 'cim:Length', 'cim:MutualCoupling.distance22');
        }
        if ('cim:MutualCoupling.g0ch' in object) {
          attributeEntries['filledEntries']['cim:MutualCoupling.g0ch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.g0ch'], 'cim:Conductance', 'cim:MutualCoupling.g0ch');
        } else {
          attributeEntries['emptyEntries']['cim:MutualCoupling.g0ch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.g0ch'], 'cim:Conductance', 'cim:MutualCoupling.g0ch');
        }
        if ('cim:MutualCoupling.r0' in object) {
          attributeEntries['filledEntries']['cim:MutualCoupling.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.r0'], 'cim:Resistance', 'cim:MutualCoupling.r0');
        } else {
          attributeEntries['emptyEntries']['cim:MutualCoupling.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.r0'], 'cim:Resistance', 'cim:MutualCoupling.r0');
        }
        if ('cim:MutualCoupling.x0' in object) {
          attributeEntries['filledEntries']['cim:MutualCoupling.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.x0'], 'cim:Reactance', 'cim:MutualCoupling.x0');
        } else {
          attributeEntries['emptyEntries']['cim:MutualCoupling.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['MutualCoupling.x0'], 'cim:Reactance', 'cim:MutualCoupling.x0');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:MutualCoupling.First_Terminal", "cim:MutualCoupling.Second_Terminal", "cim:MutualCoupling.b0ch", "cim:MutualCoupling.distance11", "cim:MutualCoupling.distance12", "cim:MutualCoupling.distance21", "cim:MutualCoupling.distance22", "cim:MutualCoupling.g0ch", "cim:MutualCoupling.r0", "cim:MutualCoupling.x0"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!MutualCoupling.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class MutualCoupling: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = MutualCoupling.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return MutualCoupling;
  }(IdentifiedObject);
  _defineProperty(MutualCoupling, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'First_Terminal': [CGMESProfile.shortNames.EQ],
    'Second_Terminal': [CGMESProfile.shortNames.EQ],
    'b0ch': [CGMESProfile.shortNames.EQ],
    'distance11': [CGMESProfile.shortNames.EQ],
    'distance12': [CGMESProfile.shortNames.EQ],
    'distance21': [CGMESProfile.shortNames.EQ],
    'distance22': [CGMESProfile.shortNames.EQ],
    'g0ch': [CGMESProfile.shortNames.EQ],
    'r0': [CGMESProfile.shortNames.EQ],
    'x0': [CGMESProfile.shortNames.EQ]
  });

  var NonConformLoad = /*#__PURE__*/function (_EnergyConsumer) {
    _inherits(NonConformLoad, _EnergyConsumer);
    var _super = _createSuper(NonConformLoad);
    function NonConformLoad() {
      _classCallCheck(this, NonConformLoad);
      return _super.apply(this, arguments);
    }
    _createClass(NonConformLoad, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "NonConformLoad";
        var attributeEntries = EnergyConsumer.attributeHTML(object, cimmenu, classType);
        if ('cim:NonConformLoad.LoadGroup' in object) {
          attributeEntries['filledEntries']['cim:NonConformLoad.LoadGroup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonConformLoad.LoadGroup'], 'cim:NonConformLoadGroup', 'cim:NonConformLoad.LoadGroup');
        } else {
          attributeEntries['emptyEntries']['cim:NonConformLoad.LoadGroup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonConformLoad.LoadGroup'], 'cim:NonConformLoadGroup', 'cim:NonConformLoad.LoadGroup');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:NonConformLoad.LoadGroup"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EnergyConsumer.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!NonConformLoad.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class NonConformLoad: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = NonConformLoad.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return NonConformLoad;
  }(EnergyConsumer);
  _defineProperty(NonConformLoad, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'LoadGroup': [CGMESProfile.shortNames.EQ]
  });

  var NonConformLoadGroup = /*#__PURE__*/function (_LoadGroup) {
    _inherits(NonConformLoadGroup, _LoadGroup);
    var _super = _createSuper(NonConformLoadGroup);
    function NonConformLoadGroup() {
      _classCallCheck(this, NonConformLoadGroup);
      return _super.apply(this, arguments);
    }
    _createClass(NonConformLoadGroup, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "NonConformLoadGroup";
        var attributeEntries = LoadGroup.attributeHTML(object, cimmenu, classType);
        if ('cim:NonConformLoadGroup.NonConformLoadSchedules' in object) {
          attributeEntries['filledEntries']['cim:NonConformLoadGroup.NonConformLoadSchedules'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonConformLoadGroup.NonConformLoadSchedules'], 'cim:NonConformLoadSchedule', 'cim:NonConformLoadGroup.NonConformLoadSchedules');
        } else {
          attributeEntries['emptyEntries']['cim:NonConformLoadGroup.NonConformLoadSchedules'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonConformLoadGroup.NonConformLoadSchedules'], 'cim:NonConformLoadSchedule', 'cim:NonConformLoadGroup.NonConformLoadSchedules');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:NonConformLoadGroup.NonConformLoadSchedules"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (LoadGroup.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!NonConformLoadGroup.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class NonConformLoadGroup: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = NonConformLoadGroup.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return NonConformLoadGroup;
  }(LoadGroup);
  _defineProperty(NonConformLoadGroup, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'NonConformLoadSchedules': [CGMESProfile.shortNames.EQ]
  });

  var NonConformLoadSchedule = /*#__PURE__*/function (_SeasonDayTypeSchedul) {
    _inherits(NonConformLoadSchedule, _SeasonDayTypeSchedul);
    var _super = _createSuper(NonConformLoadSchedule);
    function NonConformLoadSchedule() {
      _classCallCheck(this, NonConformLoadSchedule);
      return _super.apply(this, arguments);
    }
    _createClass(NonConformLoadSchedule, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "NonConformLoadSchedule";
        var attributeEntries = SeasonDayTypeSchedule.attributeHTML(object, cimmenu, classType);
        if ('cim:NonConformLoadSchedule.NonConformLoadGroup' in object) {
          attributeEntries['filledEntries']['cim:NonConformLoadSchedule.NonConformLoadGroup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonConformLoadSchedule.NonConformLoadGroup'], 'cim:NonConformLoadGroup', 'cim:NonConformLoadSchedule.NonConformLoadGroup');
        } else {
          attributeEntries['emptyEntries']['cim:NonConformLoadSchedule.NonConformLoadGroup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonConformLoadSchedule.NonConformLoadGroup'], 'cim:NonConformLoadGroup', 'cim:NonConformLoadSchedule.NonConformLoadGroup');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:NonConformLoadSchedule.NonConformLoadGroup"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (SeasonDayTypeSchedule.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!NonConformLoadSchedule.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class NonConformLoadSchedule: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = NonConformLoadSchedule.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return NonConformLoadSchedule;
  }(SeasonDayTypeSchedule);
  _defineProperty(NonConformLoadSchedule, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'NonConformLoadGroup': [CGMESProfile.shortNames.EQ]
  });

  var NonlinearShuntCompensator = /*#__PURE__*/function (_ShuntCompensator) {
    _inherits(NonlinearShuntCompensator, _ShuntCompensator);
    var _super = _createSuper(NonlinearShuntCompensator);
    function NonlinearShuntCompensator() {
      _classCallCheck(this, NonlinearShuntCompensator);
      return _super.apply(this, arguments);
    }
    _createClass(NonlinearShuntCompensator, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "NonlinearShuntCompensator";
        var attributeEntries = ShuntCompensator.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ShuntCompensator.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!NonlinearShuntCompensator.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class NonlinearShuntCompensator: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = NonlinearShuntCompensator.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return NonlinearShuntCompensator;
  }(ShuntCompensator);
  _defineProperty(NonlinearShuntCompensator, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var NonlinearShuntCompensatorPoint = /*#__PURE__*/function (_BaseClass) {
    _inherits(NonlinearShuntCompensatorPoint, _BaseClass);
    var _super = _createSuper(NonlinearShuntCompensatorPoint);
    function NonlinearShuntCompensatorPoint() {
      _classCallCheck(this, NonlinearShuntCompensatorPoint);
      return _super.apply(this, arguments);
    }
    _createClass(NonlinearShuntCompensatorPoint, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "NonlinearShuntCompensatorPoint";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:NonlinearShuntCompensatorPoint.NonlinearShuntCompensator' in object) {
          attributeEntries['filledEntries']['cim:NonlinearShuntCompensatorPoint.NonlinearShuntCompensator'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonlinearShuntCompensatorPoint.NonlinearShuntCompensator'], 'cim:NonlinearShuntCompensator', 'cim:NonlinearShuntCompensatorPoint.NonlinearShuntCompensator');
        } else {
          attributeEntries['emptyEntries']['cim:NonlinearShuntCompensatorPoint.NonlinearShuntCompensator'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonlinearShuntCompensatorPoint.NonlinearShuntCompensator'], 'cim:NonlinearShuntCompensator', 'cim:NonlinearShuntCompensatorPoint.NonlinearShuntCompensator');
        }
        if ('cim:NonlinearShuntCompensatorPoint.b' in object) {
          attributeEntries['filledEntries']['cim:NonlinearShuntCompensatorPoint.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonlinearShuntCompensatorPoint.b'], 'cim:Susceptance', 'cim:NonlinearShuntCompensatorPoint.b');
        } else {
          attributeEntries['emptyEntries']['cim:NonlinearShuntCompensatorPoint.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonlinearShuntCompensatorPoint.b'], 'cim:Susceptance', 'cim:NonlinearShuntCompensatorPoint.b');
        }
        if ('cim:NonlinearShuntCompensatorPoint.g' in object) {
          attributeEntries['filledEntries']['cim:NonlinearShuntCompensatorPoint.g'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonlinearShuntCompensatorPoint.g'], 'cim:Conductance', 'cim:NonlinearShuntCompensatorPoint.g');
        } else {
          attributeEntries['emptyEntries']['cim:NonlinearShuntCompensatorPoint.g'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonlinearShuntCompensatorPoint.g'], 'cim:Conductance', 'cim:NonlinearShuntCompensatorPoint.g');
        }
        if ('cim:NonlinearShuntCompensatorPoint.sectionNumber' in object) {
          attributeEntries['filledEntries']['cim:NonlinearShuntCompensatorPoint.sectionNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonlinearShuntCompensatorPoint.sectionNumber'], 'cim:Integer', 'cim:NonlinearShuntCompensatorPoint.sectionNumber');
        } else {
          attributeEntries['emptyEntries']['cim:NonlinearShuntCompensatorPoint.sectionNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonlinearShuntCompensatorPoint.sectionNumber'], 'cim:Integer', 'cim:NonlinearShuntCompensatorPoint.sectionNumber');
        }
        if ('cim:NonlinearShuntCompensatorPoint.b0' in object) {
          attributeEntries['filledEntries']['cim:NonlinearShuntCompensatorPoint.b0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonlinearShuntCompensatorPoint.b0'], 'cim:Susceptance', 'cim:NonlinearShuntCompensatorPoint.b0');
        } else {
          attributeEntries['emptyEntries']['cim:NonlinearShuntCompensatorPoint.b0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonlinearShuntCompensatorPoint.b0'], 'cim:Susceptance', 'cim:NonlinearShuntCompensatorPoint.b0');
        }
        if ('cim:NonlinearShuntCompensatorPoint.g0' in object) {
          attributeEntries['filledEntries']['cim:NonlinearShuntCompensatorPoint.g0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonlinearShuntCompensatorPoint.g0'], 'cim:Conductance', 'cim:NonlinearShuntCompensatorPoint.g0');
        } else {
          attributeEntries['emptyEntries']['cim:NonlinearShuntCompensatorPoint.g0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['NonlinearShuntCompensatorPoint.g0'], 'cim:Conductance', 'cim:NonlinearShuntCompensatorPoint.g0');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:NonlinearShuntCompensatorPoint.NonlinearShuntCompensator", "cim:NonlinearShuntCompensatorPoint.b", "cim:NonlinearShuntCompensatorPoint.g", "cim:NonlinearShuntCompensatorPoint.sectionNumber", "cim:NonlinearShuntCompensatorPoint.b0", "cim:NonlinearShuntCompensatorPoint.g0"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!NonlinearShuntCompensatorPoint.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class NonlinearShuntCompensatorPoint: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = NonlinearShuntCompensatorPoint.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return NonlinearShuntCompensatorPoint;
  }(BaseClass);
  _defineProperty(NonlinearShuntCompensatorPoint, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'NonlinearShuntCompensator': [CGMESProfile.shortNames.EQ],
    'b': [CGMESProfile.shortNames.EQ],
    'g': [CGMESProfile.shortNames.EQ],
    'sectionNumber': [CGMESProfile.shortNames.EQ],
    'b0': [CGMESProfile.shortNames.EQ],
    'g0': [CGMESProfile.shortNames.EQ]
  });

  var NuclearGeneratingUnit = /*#__PURE__*/function (_GeneratingUnit) {
    _inherits(NuclearGeneratingUnit, _GeneratingUnit);
    var _super = _createSuper(NuclearGeneratingUnit);
    function NuclearGeneratingUnit() {
      _classCallCheck(this, NuclearGeneratingUnit);
      return _super.apply(this, arguments);
    }
    _createClass(NuclearGeneratingUnit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "NuclearGeneratingUnit";
        var attributeEntries = GeneratingUnit.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (GeneratingUnit.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!NuclearGeneratingUnit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class NuclearGeneratingUnit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = NuclearGeneratingUnit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return NuclearGeneratingUnit;
  }(GeneratingUnit);
  _defineProperty(NuclearGeneratingUnit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var possibleValues$o = [{
    "value": "--"
  }, {
    "value": "OperationalLimitDirectionKind.high",
    "label": "high"
  }, {
    "value": "OperationalLimitDirectionKind.low",
    "label": "low"
  }, {
    "value": "OperationalLimitDirectionKind.absoluteValue",
    "label": "absoluteValue"
  }];
  var OperationalLimitDirectionKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(OperationalLimitDirectionKind, _BaseClass);
    var _super = _createSuper(OperationalLimitDirectionKind);
    function OperationalLimitDirectionKind() {
      _classCallCheck(this, OperationalLimitDirectionKind);
      return _super.apply(this, arguments);
    }
    _createClass(OperationalLimitDirectionKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "OperationalLimitDirectionKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!OperationalLimitDirectionKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class OperationalLimitDirectionKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = OperationalLimitDirectionKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$o;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return OperationalLimitDirectionKind;
  }(BaseClass);
  _defineProperty(OperationalLimitDirectionKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var OperationalLimitSet = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(OperationalLimitSet, _IdentifiedObject);
    var _super = _createSuper(OperationalLimitSet);
    function OperationalLimitSet() {
      _classCallCheck(this, OperationalLimitSet);
      return _super.apply(this, arguments);
    }
    _createClass(OperationalLimitSet, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "OperationalLimitSet";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:OperationalLimitSet.Terminal' in object) {
          attributeEntries['filledEntries']['cim:OperationalLimitSet.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimitSet.Terminal'], 'cim:ACDCTerminal', 'cim:OperationalLimitSet.Terminal');
        } else {
          attributeEntries['emptyEntries']['cim:OperationalLimitSet.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimitSet.Terminal'], 'cim:ACDCTerminal', 'cim:OperationalLimitSet.Terminal');
        }
        if ('cim:OperationalLimitSet.Equipment' in object) {
          attributeEntries['filledEntries']['cim:OperationalLimitSet.Equipment'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimitSet.Equipment'], 'cim:Equipment', 'cim:OperationalLimitSet.Equipment');
        } else {
          attributeEntries['emptyEntries']['cim:OperationalLimitSet.Equipment'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimitSet.Equipment'], 'cim:Equipment', 'cim:OperationalLimitSet.Equipment');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:OperationalLimitSet.Terminal", "cim:OperationalLimitSet.Equipment"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!OperationalLimitSet.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class OperationalLimitSet: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = OperationalLimitSet.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return OperationalLimitSet;
  }(IdentifiedObject);
  _defineProperty(OperationalLimitSet, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'Terminal': [CGMESProfile.shortNames.EQ],
    'Equipment': [CGMESProfile.shortNames.EQ]
  });

  var OperationalLimitType = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(OperationalLimitType, _IdentifiedObject);
    var _super = _createSuper(OperationalLimitType);
    function OperationalLimitType() {
      _classCallCheck(this, OperationalLimitType);
      return _super.apply(this, arguments);
    }
    _createClass(OperationalLimitType, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "OperationalLimitType";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:OperationalLimitType.acceptableDuration' in object) {
          attributeEntries['filledEntries']['cim:OperationalLimitType.acceptableDuration'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimitType.acceptableDuration'], 'cim:Seconds', 'cim:OperationalLimitType.acceptableDuration');
        } else {
          attributeEntries['emptyEntries']['cim:OperationalLimitType.acceptableDuration'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimitType.acceptableDuration'], 'cim:Seconds', 'cim:OperationalLimitType.acceptableDuration');
        }
        if ('cim:OperationalLimitType.limitType' in object) {
          attributeEntries['filledEntries']['cim:OperationalLimitType.limitType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimitType.limitType'], 'cim:LimitTypeKind', 'cim:OperationalLimitType.limitType');
        } else {
          attributeEntries['emptyEntries']['cim:OperationalLimitType.limitType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimitType.limitType'], 'cim:LimitTypeKind', 'cim:OperationalLimitType.limitType');
        }
        if ('cim:OperationalLimitType.direction' in object) {
          attributeEntries['filledEntries']['cim:OperationalLimitType.direction'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimitType.direction'], 'cim:OperationalLimitDirectionKind', 'cim:OperationalLimitType.direction');
        } else {
          attributeEntries['emptyEntries']['cim:OperationalLimitType.direction'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OperationalLimitType.direction'], 'cim:OperationalLimitDirectionKind', 'cim:OperationalLimitType.direction');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:OperationalLimitType.acceptableDuration", "cim:OperationalLimitType.limitType", "cim:OperationalLimitType.direction"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!OperationalLimitType.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class OperationalLimitType: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = OperationalLimitType.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return OperationalLimitType;
  }(IdentifiedObject);
  _defineProperty(OperationalLimitType, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'acceptableDuration': [CGMESProfile.shortNames.EQ],
    'limitType': [CGMESProfile.shortNames.EQ],
    'direction': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$n = [{
    "value": "--"
  }, {
    "value": "OrientationKind.negative",
    "label": "negative"
  }];
  var OrientationKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(OrientationKind, _BaseClass);
    var _super = _createSuper(OrientationKind);
    function OrientationKind() {
      _classCallCheck(this, OrientationKind);
      return _super.apply(this, arguments);
    }
    _createClass(OrientationKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "OrientationKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!OrientationKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class OrientationKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = OrientationKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$n;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return OrientationKind;
  }(BaseClass);
  _defineProperty(OrientationKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL]
  });

  var OverexcitationLimiterDynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(OverexcitationLimiterDynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(OverexcitationLimiterDynamics);
    function OverexcitationLimiterDynamics() {
      _classCallCheck(this, OverexcitationLimiterDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(OverexcitationLimiterDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "OverexcitationLimiterDynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:OverexcitationLimiterDynamics.ExcitationSystemDynamics' in object) {
          attributeEntries['filledEntries']['cim:OverexcitationLimiterDynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcitationLimiterDynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:OverexcitationLimiterDynamics.ExcitationSystemDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcitationLimiterDynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcitationLimiterDynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:OverexcitationLimiterDynamics.ExcitationSystemDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:OverexcitationLimiterDynamics.ExcitationSystemDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!OverexcitationLimiterDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class OverexcitationLimiterDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = OverexcitationLimiterDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["OverexcitationLimiterUserDefined", "OverexcLimIEEE", "OverexcLim2", "OverexcLimX1", "OverexcLimX2"];
        return subClasses;
      }
    }]);
    return OverexcitationLimiterDynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(OverexcitationLimiterDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ExcitationSystemDynamics': [CGMESProfile.shortNames.DY]
  });

  var OverexcLim2 = /*#__PURE__*/function (_OverexcitationLimite) {
    _inherits(OverexcLim2, _OverexcitationLimite);
    var _super = _createSuper(OverexcLim2);
    function OverexcLim2() {
      _classCallCheck(this, OverexcLim2);
      return _super.apply(this, arguments);
    }
    _createClass(OverexcLim2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "OverexcLim2";
        var attributeEntries = OverexcitationLimiterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:OverexcLim2.koi' in object) {
          attributeEntries['filledEntries']['cim:OverexcLim2.koi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLim2.koi'], 'cim:PU', 'cim:OverexcLim2.koi');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLim2.koi'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLim2.koi'], 'cim:PU', 'cim:OverexcLim2.koi');
        }
        if ('cim:OverexcLim2.voimax' in object) {
          attributeEntries['filledEntries']['cim:OverexcLim2.voimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLim2.voimax'], 'cim:PU', 'cim:OverexcLim2.voimax');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLim2.voimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLim2.voimax'], 'cim:PU', 'cim:OverexcLim2.voimax');
        }
        if ('cim:OverexcLim2.voimin' in object) {
          attributeEntries['filledEntries']['cim:OverexcLim2.voimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLim2.voimin'], 'cim:PU', 'cim:OverexcLim2.voimin');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLim2.voimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLim2.voimin'], 'cim:PU', 'cim:OverexcLim2.voimin');
        }
        if ('cim:OverexcLim2.ifdlim' in object) {
          attributeEntries['filledEntries']['cim:OverexcLim2.ifdlim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLim2.ifdlim'], 'cim:PU', 'cim:OverexcLim2.ifdlim');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLim2.ifdlim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLim2.ifdlim'], 'cim:PU', 'cim:OverexcLim2.ifdlim');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:OverexcLim2.koi", "cim:OverexcLim2.voimax", "cim:OverexcLim2.voimin", "cim:OverexcLim2.ifdlim"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (OverexcitationLimiterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!OverexcLim2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class OverexcLim2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = OverexcLim2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return OverexcLim2;
  }(OverexcitationLimiterDynamics);
  _defineProperty(OverexcLim2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'koi': [CGMESProfile.shortNames.DY],
    'voimax': [CGMESProfile.shortNames.DY],
    'voimin': [CGMESProfile.shortNames.DY],
    'ifdlim': [CGMESProfile.shortNames.DY]
  });

  var OverexcLimIEEE = /*#__PURE__*/function (_OverexcitationLimite) {
    _inherits(OverexcLimIEEE, _OverexcitationLimite);
    var _super = _createSuper(OverexcLimIEEE);
    function OverexcLimIEEE() {
      _classCallCheck(this, OverexcLimIEEE);
      return _super.apply(this, arguments);
    }
    _createClass(OverexcLimIEEE, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "OverexcLimIEEE";
        var attributeEntries = OverexcitationLimiterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:OverexcLimIEEE.itfpu' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimIEEE.itfpu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimIEEE.itfpu'], 'cim:PU', 'cim:OverexcLimIEEE.itfpu');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimIEEE.itfpu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimIEEE.itfpu'], 'cim:PU', 'cim:OverexcLimIEEE.itfpu');
        }
        if ('cim:OverexcLimIEEE.ifdmax' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimIEEE.ifdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimIEEE.ifdmax'], 'cim:PU', 'cim:OverexcLimIEEE.ifdmax');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimIEEE.ifdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimIEEE.ifdmax'], 'cim:PU', 'cim:OverexcLimIEEE.ifdmax');
        }
        if ('cim:OverexcLimIEEE.ifdlim' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimIEEE.ifdlim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimIEEE.ifdlim'], 'cim:PU', 'cim:OverexcLimIEEE.ifdlim');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimIEEE.ifdlim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimIEEE.ifdlim'], 'cim:PU', 'cim:OverexcLimIEEE.ifdlim');
        }
        if ('cim:OverexcLimIEEE.hyst' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimIEEE.hyst'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimIEEE.hyst'], 'cim:PU', 'cim:OverexcLimIEEE.hyst');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimIEEE.hyst'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimIEEE.hyst'], 'cim:PU', 'cim:OverexcLimIEEE.hyst');
        }
        if ('cim:OverexcLimIEEE.kcd' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimIEEE.kcd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimIEEE.kcd'], 'cim:PU', 'cim:OverexcLimIEEE.kcd');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimIEEE.kcd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimIEEE.kcd'], 'cim:PU', 'cim:OverexcLimIEEE.kcd');
        }
        if ('cim:OverexcLimIEEE.kramp' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimIEEE.kramp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimIEEE.kramp'], 'cim:Simple_Float', 'cim:OverexcLimIEEE.kramp');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimIEEE.kramp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimIEEE.kramp'], 'cim:Simple_Float', 'cim:OverexcLimIEEE.kramp');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:OverexcLimIEEE.itfpu", "cim:OverexcLimIEEE.ifdmax", "cim:OverexcLimIEEE.ifdlim", "cim:OverexcLimIEEE.hyst", "cim:OverexcLimIEEE.kcd", "cim:OverexcLimIEEE.kramp"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (OverexcitationLimiterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!OverexcLimIEEE.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class OverexcLimIEEE: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = OverexcLimIEEE.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return OverexcLimIEEE;
  }(OverexcitationLimiterDynamics);
  _defineProperty(OverexcLimIEEE, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'itfpu': [CGMESProfile.shortNames.DY],
    'ifdmax': [CGMESProfile.shortNames.DY],
    'ifdlim': [CGMESProfile.shortNames.DY],
    'hyst': [CGMESProfile.shortNames.DY],
    'kcd': [CGMESProfile.shortNames.DY],
    'kramp': [CGMESProfile.shortNames.DY]
  });

  var OverexcLimX1 = /*#__PURE__*/function (_OverexcitationLimite) {
    _inherits(OverexcLimX1, _OverexcitationLimite);
    var _super = _createSuper(OverexcLimX1);
    function OverexcLimX1() {
      _classCallCheck(this, OverexcLimX1);
      return _super.apply(this, arguments);
    }
    _createClass(OverexcLimX1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "OverexcLimX1";
        var attributeEntries = OverexcitationLimiterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:OverexcLimX1.efdrated' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX1.efdrated'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.efdrated'], 'cim:PU', 'cim:OverexcLimX1.efdrated');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX1.efdrated'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.efdrated'], 'cim:PU', 'cim:OverexcLimX1.efdrated');
        }
        if ('cim:OverexcLimX1.efd1' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX1.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.efd1'], 'cim:PU', 'cim:OverexcLimX1.efd1');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX1.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.efd1'], 'cim:PU', 'cim:OverexcLimX1.efd1');
        }
        if ('cim:OverexcLimX1.t1' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX1.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.t1'], 'cim:Seconds', 'cim:OverexcLimX1.t1');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX1.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.t1'], 'cim:Seconds', 'cim:OverexcLimX1.t1');
        }
        if ('cim:OverexcLimX1.efd2' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX1.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.efd2'], 'cim:PU', 'cim:OverexcLimX1.efd2');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX1.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.efd2'], 'cim:PU', 'cim:OverexcLimX1.efd2');
        }
        if ('cim:OverexcLimX1.t2' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX1.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.t2'], 'cim:Seconds', 'cim:OverexcLimX1.t2');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX1.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.t2'], 'cim:Seconds', 'cim:OverexcLimX1.t2');
        }
        if ('cim:OverexcLimX1.efd3' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX1.efd3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.efd3'], 'cim:PU', 'cim:OverexcLimX1.efd3');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX1.efd3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.efd3'], 'cim:PU', 'cim:OverexcLimX1.efd3');
        }
        if ('cim:OverexcLimX1.t3' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX1.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.t3'], 'cim:Seconds', 'cim:OverexcLimX1.t3');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX1.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.t3'], 'cim:Seconds', 'cim:OverexcLimX1.t3');
        }
        if ('cim:OverexcLimX1.efddes' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX1.efddes'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.efddes'], 'cim:PU', 'cim:OverexcLimX1.efddes');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX1.efddes'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.efddes'], 'cim:PU', 'cim:OverexcLimX1.efddes');
        }
        if ('cim:OverexcLimX1.kmx' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX1.kmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.kmx'], 'cim:PU', 'cim:OverexcLimX1.kmx');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX1.kmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.kmx'], 'cim:PU', 'cim:OverexcLimX1.kmx');
        }
        if ('cim:OverexcLimX1.vlow' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX1.vlow'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.vlow'], 'cim:PU', 'cim:OverexcLimX1.vlow');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX1.vlow'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX1.vlow'], 'cim:PU', 'cim:OverexcLimX1.vlow');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:OverexcLimX1.efdrated", "cim:OverexcLimX1.efd1", "cim:OverexcLimX1.t1", "cim:OverexcLimX1.efd2", "cim:OverexcLimX1.t2", "cim:OverexcLimX1.efd3", "cim:OverexcLimX1.t3", "cim:OverexcLimX1.efddes", "cim:OverexcLimX1.kmx", "cim:OverexcLimX1.vlow"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (OverexcitationLimiterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!OverexcLimX1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class OverexcLimX1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = OverexcLimX1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return OverexcLimX1;
  }(OverexcitationLimiterDynamics);
  _defineProperty(OverexcLimX1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'efdrated': [CGMESProfile.shortNames.DY],
    'efd1': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    'efd2': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    'efd3': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    'efddes': [CGMESProfile.shortNames.DY],
    'kmx': [CGMESProfile.shortNames.DY],
    'vlow': [CGMESProfile.shortNames.DY]
  });

  var OverexcLimX2 = /*#__PURE__*/function (_OverexcitationLimite) {
    _inherits(OverexcLimX2, _OverexcitationLimite);
    var _super = _createSuper(OverexcLimX2);
    function OverexcLimX2() {
      _classCallCheck(this, OverexcLimX2);
      return _super.apply(this, arguments);
    }
    _createClass(OverexcLimX2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "OverexcLimX2";
        var attributeEntries = OverexcitationLimiterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:OverexcLimX2.m' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX2.m'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.m'], 'cim:Boolean', 'cim:OverexcLimX2.m');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX2.m'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.m'], 'cim:Boolean', 'cim:OverexcLimX2.m');
        }
        if ('cim:OverexcLimX2.efdrated' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX2.efdrated'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.efdrated'], 'cim:PU', 'cim:OverexcLimX2.efdrated');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX2.efdrated'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.efdrated'], 'cim:PU', 'cim:OverexcLimX2.efdrated');
        }
        if ('cim:OverexcLimX2.efd1' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX2.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.efd1'], 'cim:PU', 'cim:OverexcLimX2.efd1');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX2.efd1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.efd1'], 'cim:PU', 'cim:OverexcLimX2.efd1');
        }
        if ('cim:OverexcLimX2.t1' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX2.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.t1'], 'cim:Seconds', 'cim:OverexcLimX2.t1');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX2.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.t1'], 'cim:Seconds', 'cim:OverexcLimX2.t1');
        }
        if ('cim:OverexcLimX2.efd2' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX2.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.efd2'], 'cim:PU', 'cim:OverexcLimX2.efd2');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX2.efd2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.efd2'], 'cim:PU', 'cim:OverexcLimX2.efd2');
        }
        if ('cim:OverexcLimX2.t2' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX2.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.t2'], 'cim:Seconds', 'cim:OverexcLimX2.t2');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX2.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.t2'], 'cim:Seconds', 'cim:OverexcLimX2.t2');
        }
        if ('cim:OverexcLimX2.efd3' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX2.efd3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.efd3'], 'cim:PU', 'cim:OverexcLimX2.efd3');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX2.efd3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.efd3'], 'cim:PU', 'cim:OverexcLimX2.efd3');
        }
        if ('cim:OverexcLimX2.t3' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX2.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.t3'], 'cim:Seconds', 'cim:OverexcLimX2.t3');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX2.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.t3'], 'cim:Seconds', 'cim:OverexcLimX2.t3');
        }
        if ('cim:OverexcLimX2.efddes' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX2.efddes'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.efddes'], 'cim:PU', 'cim:OverexcLimX2.efddes');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX2.efddes'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.efddes'], 'cim:PU', 'cim:OverexcLimX2.efddes');
        }
        if ('cim:OverexcLimX2.kmx' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX2.kmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.kmx'], 'cim:PU', 'cim:OverexcLimX2.kmx');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX2.kmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.kmx'], 'cim:PU', 'cim:OverexcLimX2.kmx');
        }
        if ('cim:OverexcLimX2.vlow' in object) {
          attributeEntries['filledEntries']['cim:OverexcLimX2.vlow'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.vlow'], 'cim:PU', 'cim:OverexcLimX2.vlow');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcLimX2.vlow'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcLimX2.vlow'], 'cim:PU', 'cim:OverexcLimX2.vlow');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:OverexcLimX2.m", "cim:OverexcLimX2.efdrated", "cim:OverexcLimX2.efd1", "cim:OverexcLimX2.t1", "cim:OverexcLimX2.efd2", "cim:OverexcLimX2.t2", "cim:OverexcLimX2.efd3", "cim:OverexcLimX2.t3", "cim:OverexcLimX2.efddes", "cim:OverexcLimX2.kmx", "cim:OverexcLimX2.vlow"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (OverexcitationLimiterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!OverexcLimX2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class OverexcLimX2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = OverexcLimX2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return OverexcLimX2;
  }(OverexcitationLimiterDynamics);
  _defineProperty(OverexcLimX2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'm': [CGMESProfile.shortNames.DY],
    'efdrated': [CGMESProfile.shortNames.DY],
    'efd1': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    'efd2': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    'efd3': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    'efddes': [CGMESProfile.shortNames.DY],
    'kmx': [CGMESProfile.shortNames.DY],
    'vlow': [CGMESProfile.shortNames.DY]
  });

  var OverexcitationLimiterUserDefined = /*#__PURE__*/function (_OverexcitationLimite) {
    _inherits(OverexcitationLimiterUserDefined, _OverexcitationLimite);
    var _super = _createSuper(OverexcitationLimiterUserDefined);
    function OverexcitationLimiterUserDefined() {
      _classCallCheck(this, OverexcitationLimiterUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(OverexcitationLimiterUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "OverexcitationLimiterUserDefined";
        var attributeEntries = OverexcitationLimiterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:OverexcitationLimiterUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:OverexcitationLimiterUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcitationLimiterUserDefined.proprietary'], 'cim:Boolean', 'cim:OverexcitationLimiterUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:OverexcitationLimiterUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['OverexcitationLimiterUserDefined.proprietary'], 'cim:Boolean', 'cim:OverexcitationLimiterUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:OverexcitationLimiterUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (OverexcitationLimiterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!OverexcitationLimiterUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class OverexcitationLimiterUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = OverexcitationLimiterUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return OverexcitationLimiterUserDefined;
  }(OverexcitationLimiterDynamics);
  _defineProperty(OverexcitationLimiterUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var PFVArControllerType1Dynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(PFVArControllerType1Dynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(PFVArControllerType1Dynamics);
    function PFVArControllerType1Dynamics() {
      _classCallCheck(this, PFVArControllerType1Dynamics);
      return _super.apply(this, arguments);
    }
    _createClass(PFVArControllerType1Dynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PFVArControllerType1Dynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:PFVArControllerType1Dynamics.ExcitationSystemDynamics' in object) {
          attributeEntries['filledEntries']['cim:PFVArControllerType1Dynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArControllerType1Dynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:PFVArControllerType1Dynamics.ExcitationSystemDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArControllerType1Dynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArControllerType1Dynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:PFVArControllerType1Dynamics.ExcitationSystemDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PFVArControllerType1Dynamics.ExcitationSystemDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PFVArControllerType1Dynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PFVArControllerType1Dynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PFVArControllerType1Dynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["PFVArControllerType1UserDefined", "PFVArType1IEEEPFController", "PFVArType1IEEEVArController"];
        return subClasses;
      }
    }]);
    return PFVArControllerType1Dynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(PFVArControllerType1Dynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ExcitationSystemDynamics': [CGMESProfile.shortNames.DY]
  });

  var PFVArControllerType1UserDefined = /*#__PURE__*/function (_PFVArControllerType) {
    _inherits(PFVArControllerType1UserDefined, _PFVArControllerType);
    var _super = _createSuper(PFVArControllerType1UserDefined);
    function PFVArControllerType1UserDefined() {
      _classCallCheck(this, PFVArControllerType1UserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(PFVArControllerType1UserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PFVArControllerType1UserDefined";
        var attributeEntries = PFVArControllerType1Dynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PFVArControllerType1UserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:PFVArControllerType1UserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArControllerType1UserDefined.proprietary'], 'cim:Boolean', 'cim:PFVArControllerType1UserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArControllerType1UserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArControllerType1UserDefined.proprietary'], 'cim:Boolean', 'cim:PFVArControllerType1UserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PFVArControllerType1UserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PFVArControllerType1Dynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PFVArControllerType1UserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PFVArControllerType1UserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PFVArControllerType1UserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PFVArControllerType1UserDefined;
  }(PFVArControllerType1Dynamics);
  _defineProperty(PFVArControllerType1UserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var PFVArControllerType2Dynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(PFVArControllerType2Dynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(PFVArControllerType2Dynamics);
    function PFVArControllerType2Dynamics() {
      _classCallCheck(this, PFVArControllerType2Dynamics);
      return _super.apply(this, arguments);
    }
    _createClass(PFVArControllerType2Dynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PFVArControllerType2Dynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:PFVArControllerType2Dynamics.ExcitationSystemDynamics' in object) {
          attributeEntries['filledEntries']['cim:PFVArControllerType2Dynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArControllerType2Dynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:PFVArControllerType2Dynamics.ExcitationSystemDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArControllerType2Dynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArControllerType2Dynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:PFVArControllerType2Dynamics.ExcitationSystemDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PFVArControllerType2Dynamics.ExcitationSystemDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PFVArControllerType2Dynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PFVArControllerType2Dynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PFVArControllerType2Dynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["PFVArControllerType2UserDefined", "PFVArType2IEEEPFController", "PFVArType2IEEEVArController", "PFVArType2Common1"];
        return subClasses;
      }
    }]);
    return PFVArControllerType2Dynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(PFVArControllerType2Dynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ExcitationSystemDynamics': [CGMESProfile.shortNames.DY]
  });

  var PFVArControllerType2UserDefined = /*#__PURE__*/function (_PFVArControllerType) {
    _inherits(PFVArControllerType2UserDefined, _PFVArControllerType);
    var _super = _createSuper(PFVArControllerType2UserDefined);
    function PFVArControllerType2UserDefined() {
      _classCallCheck(this, PFVArControllerType2UserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(PFVArControllerType2UserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PFVArControllerType2UserDefined";
        var attributeEntries = PFVArControllerType2Dynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PFVArControllerType2UserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:PFVArControllerType2UserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArControllerType2UserDefined.proprietary'], 'cim:Boolean', 'cim:PFVArControllerType2UserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArControllerType2UserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArControllerType2UserDefined.proprietary'], 'cim:Boolean', 'cim:PFVArControllerType2UserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PFVArControllerType2UserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PFVArControllerType2Dynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PFVArControllerType2UserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PFVArControllerType2UserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PFVArControllerType2UserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PFVArControllerType2UserDefined;
  }(PFVArControllerType2Dynamics);
  _defineProperty(PFVArControllerType2UserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var PFVArType1IEEEPFController = /*#__PURE__*/function (_PFVArControllerType) {
    _inherits(PFVArType1IEEEPFController, _PFVArControllerType);
    var _super = _createSuper(PFVArType1IEEEPFController);
    function PFVArType1IEEEPFController() {
      _classCallCheck(this, PFVArType1IEEEPFController);
      return _super.apply(this, arguments);
    }
    _createClass(PFVArType1IEEEPFController, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PFVArType1IEEEPFController";
        var attributeEntries = PFVArControllerType1Dynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PFVArType1IEEEPFController.ovex' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEPFController.ovex'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.ovex'], 'cim:Boolean', 'cim:PFVArType1IEEEPFController.ovex');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEPFController.ovex'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.ovex'], 'cim:Boolean', 'cim:PFVArType1IEEEPFController.ovex');
        }
        if ('cim:PFVArType1IEEEPFController.tpfc' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEPFController.tpfc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.tpfc'], 'cim:Seconds', 'cim:PFVArType1IEEEPFController.tpfc');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEPFController.tpfc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.tpfc'], 'cim:Seconds', 'cim:PFVArType1IEEEPFController.tpfc');
        }
        if ('cim:PFVArType1IEEEPFController.vitmin' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEPFController.vitmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.vitmin'], 'cim:PU', 'cim:PFVArType1IEEEPFController.vitmin');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEPFController.vitmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.vitmin'], 'cim:PU', 'cim:PFVArType1IEEEPFController.vitmin');
        }
        if ('cim:PFVArType1IEEEPFController.vpf' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEPFController.vpf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.vpf'], 'cim:PU', 'cim:PFVArType1IEEEPFController.vpf');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEPFController.vpf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.vpf'], 'cim:PU', 'cim:PFVArType1IEEEPFController.vpf');
        }
        if ('cim:PFVArType1IEEEPFController.vpfcbw' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEPFController.vpfcbw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.vpfcbw'], 'cim:Simple_Float', 'cim:PFVArType1IEEEPFController.vpfcbw');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEPFController.vpfcbw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.vpfcbw'], 'cim:Simple_Float', 'cim:PFVArType1IEEEPFController.vpfcbw');
        }
        if ('cim:PFVArType1IEEEPFController.vpfref' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEPFController.vpfref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.vpfref'], 'cim:PU', 'cim:PFVArType1IEEEPFController.vpfref');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEPFController.vpfref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.vpfref'], 'cim:PU', 'cim:PFVArType1IEEEPFController.vpfref');
        }
        if ('cim:PFVArType1IEEEPFController.vvtmax' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEPFController.vvtmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.vvtmax'], 'cim:PU', 'cim:PFVArType1IEEEPFController.vvtmax');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEPFController.vvtmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.vvtmax'], 'cim:PU', 'cim:PFVArType1IEEEPFController.vvtmax');
        }
        if ('cim:PFVArType1IEEEPFController.vvtmin' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEPFController.vvtmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.vvtmin'], 'cim:PU', 'cim:PFVArType1IEEEPFController.vvtmin');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEPFController.vvtmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEPFController.vvtmin'], 'cim:PU', 'cim:PFVArType1IEEEPFController.vvtmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PFVArType1IEEEPFController.ovex", "cim:PFVArType1IEEEPFController.tpfc", "cim:PFVArType1IEEEPFController.vitmin", "cim:PFVArType1IEEEPFController.vpf", "cim:PFVArType1IEEEPFController.vpfcbw", "cim:PFVArType1IEEEPFController.vpfref", "cim:PFVArType1IEEEPFController.vvtmax", "cim:PFVArType1IEEEPFController.vvtmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PFVArControllerType1Dynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PFVArType1IEEEPFController.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PFVArType1IEEEPFController: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PFVArType1IEEEPFController.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PFVArType1IEEEPFController;
  }(PFVArControllerType1Dynamics);
  _defineProperty(PFVArType1IEEEPFController, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ovex': [CGMESProfile.shortNames.DY],
    'tpfc': [CGMESProfile.shortNames.DY],
    'vitmin': [CGMESProfile.shortNames.DY],
    'vpf': [CGMESProfile.shortNames.DY],
    'vpfcbw': [CGMESProfile.shortNames.DY],
    'vpfref': [CGMESProfile.shortNames.DY],
    'vvtmax': [CGMESProfile.shortNames.DY],
    'vvtmin': [CGMESProfile.shortNames.DY]
  });

  var PFVArType1IEEEVArController = /*#__PURE__*/function (_PFVArControllerType) {
    _inherits(PFVArType1IEEEVArController, _PFVArControllerType);
    var _super = _createSuper(PFVArType1IEEEVArController);
    function PFVArType1IEEEVArController() {
      _classCallCheck(this, PFVArType1IEEEVArController);
      return _super.apply(this, arguments);
    }
    _createClass(PFVArType1IEEEVArController, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PFVArType1IEEEVArController";
        var attributeEntries = PFVArControllerType1Dynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PFVArType1IEEEVArController.tvarc' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEVArController.tvarc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEVArController.tvarc'], 'cim:Seconds', 'cim:PFVArType1IEEEVArController.tvarc');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEVArController.tvarc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEVArController.tvarc'], 'cim:Seconds', 'cim:PFVArType1IEEEVArController.tvarc');
        }
        if ('cim:PFVArType1IEEEVArController.vvar' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEVArController.vvar'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEVArController.vvar'], 'cim:PU', 'cim:PFVArType1IEEEVArController.vvar');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEVArController.vvar'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEVArController.vvar'], 'cim:PU', 'cim:PFVArType1IEEEVArController.vvar');
        }
        if ('cim:PFVArType1IEEEVArController.vvarcbw' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEVArController.vvarcbw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEVArController.vvarcbw'], 'cim:Simple_Float', 'cim:PFVArType1IEEEVArController.vvarcbw');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEVArController.vvarcbw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEVArController.vvarcbw'], 'cim:Simple_Float', 'cim:PFVArType1IEEEVArController.vvarcbw');
        }
        if ('cim:PFVArType1IEEEVArController.vvarref' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEVArController.vvarref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEVArController.vvarref'], 'cim:PU', 'cim:PFVArType1IEEEVArController.vvarref');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEVArController.vvarref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEVArController.vvarref'], 'cim:PU', 'cim:PFVArType1IEEEVArController.vvarref');
        }
        if ('cim:PFVArType1IEEEVArController.vvtmax' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEVArController.vvtmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEVArController.vvtmax'], 'cim:PU', 'cim:PFVArType1IEEEVArController.vvtmax');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEVArController.vvtmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEVArController.vvtmax'], 'cim:PU', 'cim:PFVArType1IEEEVArController.vvtmax');
        }
        if ('cim:PFVArType1IEEEVArController.vvtmin' in object) {
          attributeEntries['filledEntries']['cim:PFVArType1IEEEVArController.vvtmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEVArController.vvtmin'], 'cim:PU', 'cim:PFVArType1IEEEVArController.vvtmin');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType1IEEEVArController.vvtmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType1IEEEVArController.vvtmin'], 'cim:PU', 'cim:PFVArType1IEEEVArController.vvtmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PFVArType1IEEEVArController.tvarc", "cim:PFVArType1IEEEVArController.vvar", "cim:PFVArType1IEEEVArController.vvarcbw", "cim:PFVArType1IEEEVArController.vvarref", "cim:PFVArType1IEEEVArController.vvtmax", "cim:PFVArType1IEEEVArController.vvtmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PFVArControllerType1Dynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PFVArType1IEEEVArController.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PFVArType1IEEEVArController: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PFVArType1IEEEVArController.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PFVArType1IEEEVArController;
  }(PFVArControllerType1Dynamics);
  _defineProperty(PFVArType1IEEEVArController, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tvarc': [CGMESProfile.shortNames.DY],
    'vvar': [CGMESProfile.shortNames.DY],
    'vvarcbw': [CGMESProfile.shortNames.DY],
    'vvarref': [CGMESProfile.shortNames.DY],
    'vvtmax': [CGMESProfile.shortNames.DY],
    'vvtmin': [CGMESProfile.shortNames.DY]
  });

  var PFVArType2Common1 = /*#__PURE__*/function (_PFVArControllerType) {
    _inherits(PFVArType2Common1, _PFVArControllerType);
    var _super = _createSuper(PFVArType2Common1);
    function PFVArType2Common1() {
      _classCallCheck(this, PFVArType2Common1);
      return _super.apply(this, arguments);
    }
    _createClass(PFVArType2Common1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PFVArType2Common1";
        var attributeEntries = PFVArControllerType2Dynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PFVArType2Common1.j' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2Common1.j'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2Common1.j'], 'cim:Boolean', 'cim:PFVArType2Common1.j');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2Common1.j'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2Common1.j'], 'cim:Boolean', 'cim:PFVArType2Common1.j');
        }
        if ('cim:PFVArType2Common1.kp' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2Common1.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2Common1.kp'], 'cim:PU', 'cim:PFVArType2Common1.kp');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2Common1.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2Common1.kp'], 'cim:PU', 'cim:PFVArType2Common1.kp');
        }
        if ('cim:PFVArType2Common1.ki' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2Common1.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2Common1.ki'], 'cim:PU', 'cim:PFVArType2Common1.ki');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2Common1.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2Common1.ki'], 'cim:PU', 'cim:PFVArType2Common1.ki');
        }
        if ('cim:PFVArType2Common1.max' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2Common1.max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2Common1.max'], 'cim:PU', 'cim:PFVArType2Common1.max');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2Common1.max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2Common1.max'], 'cim:PU', 'cim:PFVArType2Common1.max');
        }
        if ('cim:PFVArType2Common1.ref' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2Common1.ref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2Common1.ref'], 'cim:PU', 'cim:PFVArType2Common1.ref');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2Common1.ref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2Common1.ref'], 'cim:PU', 'cim:PFVArType2Common1.ref');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PFVArType2Common1.j", "cim:PFVArType2Common1.kp", "cim:PFVArType2Common1.ki", "cim:PFVArType2Common1.max", "cim:PFVArType2Common1.ref"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PFVArControllerType2Dynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PFVArType2Common1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PFVArType2Common1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PFVArType2Common1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PFVArType2Common1;
  }(PFVArControllerType2Dynamics);
  _defineProperty(PFVArType2Common1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'j': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'max': [CGMESProfile.shortNames.DY],
    'ref': [CGMESProfile.shortNames.DY]
  });

  var PFVArType2IEEEPFController = /*#__PURE__*/function (_PFVArControllerType) {
    _inherits(PFVArType2IEEEPFController, _PFVArControllerType);
    var _super = _createSuper(PFVArType2IEEEPFController);
    function PFVArType2IEEEPFController() {
      _classCallCheck(this, PFVArType2IEEEPFController);
      return _super.apply(this, arguments);
    }
    _createClass(PFVArType2IEEEPFController, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PFVArType2IEEEPFController";
        var attributeEntries = PFVArControllerType2Dynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PFVArType2IEEEPFController.pfref' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEPFController.pfref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.pfref'], 'cim:PU', 'cim:PFVArType2IEEEPFController.pfref');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEPFController.pfref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.pfref'], 'cim:PU', 'cim:PFVArType2IEEEPFController.pfref');
        }
        if ('cim:PFVArType2IEEEPFController.vref' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEPFController.vref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.vref'], 'cim:PU', 'cim:PFVArType2IEEEPFController.vref');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEPFController.vref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.vref'], 'cim:PU', 'cim:PFVArType2IEEEPFController.vref');
        }
        if ('cim:PFVArType2IEEEPFController.vclmt' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEPFController.vclmt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.vclmt'], 'cim:PU', 'cim:PFVArType2IEEEPFController.vclmt');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEPFController.vclmt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.vclmt'], 'cim:PU', 'cim:PFVArType2IEEEPFController.vclmt');
        }
        if ('cim:PFVArType2IEEEPFController.kp' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEPFController.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.kp'], 'cim:PU', 'cim:PFVArType2IEEEPFController.kp');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEPFController.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.kp'], 'cim:PU', 'cim:PFVArType2IEEEPFController.kp');
        }
        if ('cim:PFVArType2IEEEPFController.ki' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEPFController.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.ki'], 'cim:PU', 'cim:PFVArType2IEEEPFController.ki');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEPFController.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.ki'], 'cim:PU', 'cim:PFVArType2IEEEPFController.ki');
        }
        if ('cim:PFVArType2IEEEPFController.vs' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEPFController.vs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.vs'], 'cim:Simple_Float', 'cim:PFVArType2IEEEPFController.vs');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEPFController.vs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.vs'], 'cim:Simple_Float', 'cim:PFVArType2IEEEPFController.vs');
        }
        if ('cim:PFVArType2IEEEPFController.exlon' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEPFController.exlon'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.exlon'], 'cim:Boolean', 'cim:PFVArType2IEEEPFController.exlon');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEPFController.exlon'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEPFController.exlon'], 'cim:Boolean', 'cim:PFVArType2IEEEPFController.exlon');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PFVArType2IEEEPFController.pfref", "cim:PFVArType2IEEEPFController.vref", "cim:PFVArType2IEEEPFController.vclmt", "cim:PFVArType2IEEEPFController.kp", "cim:PFVArType2IEEEPFController.ki", "cim:PFVArType2IEEEPFController.vs", "cim:PFVArType2IEEEPFController.exlon"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PFVArControllerType2Dynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PFVArType2IEEEPFController.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PFVArType2IEEEPFController: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PFVArType2IEEEPFController.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PFVArType2IEEEPFController;
  }(PFVArControllerType2Dynamics);
  _defineProperty(PFVArType2IEEEPFController, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'pfref': [CGMESProfile.shortNames.DY],
    'vref': [CGMESProfile.shortNames.DY],
    'vclmt': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'vs': [CGMESProfile.shortNames.DY],
    'exlon': [CGMESProfile.shortNames.DY]
  });

  var PFVArType2IEEEVArController = /*#__PURE__*/function (_PFVArControllerType) {
    _inherits(PFVArType2IEEEVArController, _PFVArControllerType);
    var _super = _createSuper(PFVArType2IEEEVArController);
    function PFVArType2IEEEVArController() {
      _classCallCheck(this, PFVArType2IEEEVArController);
      return _super.apply(this, arguments);
    }
    _createClass(PFVArType2IEEEVArController, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PFVArType2IEEEVArController";
        var attributeEntries = PFVArControllerType2Dynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PFVArType2IEEEVArController.qref' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEVArController.qref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.qref'], 'cim:PU', 'cim:PFVArType2IEEEVArController.qref');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEVArController.qref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.qref'], 'cim:PU', 'cim:PFVArType2IEEEVArController.qref');
        }
        if ('cim:PFVArType2IEEEVArController.vref' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEVArController.vref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.vref'], 'cim:PU', 'cim:PFVArType2IEEEVArController.vref');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEVArController.vref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.vref'], 'cim:PU', 'cim:PFVArType2IEEEVArController.vref');
        }
        if ('cim:PFVArType2IEEEVArController.vclmt' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEVArController.vclmt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.vclmt'], 'cim:PU', 'cim:PFVArType2IEEEVArController.vclmt');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEVArController.vclmt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.vclmt'], 'cim:PU', 'cim:PFVArType2IEEEVArController.vclmt');
        }
        if ('cim:PFVArType2IEEEVArController.kp' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEVArController.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.kp'], 'cim:PU', 'cim:PFVArType2IEEEVArController.kp');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEVArController.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.kp'], 'cim:PU', 'cim:PFVArType2IEEEVArController.kp');
        }
        if ('cim:PFVArType2IEEEVArController.ki' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEVArController.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.ki'], 'cim:PU', 'cim:PFVArType2IEEEVArController.ki');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEVArController.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.ki'], 'cim:PU', 'cim:PFVArType2IEEEVArController.ki');
        }
        if ('cim:PFVArType2IEEEVArController.vs' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEVArController.vs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.vs'], 'cim:Simple_Float', 'cim:PFVArType2IEEEVArController.vs');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEVArController.vs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.vs'], 'cim:Simple_Float', 'cim:PFVArType2IEEEVArController.vs');
        }
        if ('cim:PFVArType2IEEEVArController.exlon' in object) {
          attributeEntries['filledEntries']['cim:PFVArType2IEEEVArController.exlon'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.exlon'], 'cim:Boolean', 'cim:PFVArType2IEEEVArController.exlon');
        } else {
          attributeEntries['emptyEntries']['cim:PFVArType2IEEEVArController.exlon'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PFVArType2IEEEVArController.exlon'], 'cim:Boolean', 'cim:PFVArType2IEEEVArController.exlon');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PFVArType2IEEEVArController.qref", "cim:PFVArType2IEEEVArController.vref", "cim:PFVArType2IEEEVArController.vclmt", "cim:PFVArType2IEEEVArController.kp", "cim:PFVArType2IEEEVArController.ki", "cim:PFVArType2IEEEVArController.vs", "cim:PFVArType2IEEEVArController.exlon"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PFVArControllerType2Dynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PFVArType2IEEEVArController.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PFVArType2IEEEVArController: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PFVArType2IEEEVArController.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PFVArType2IEEEVArController;
  }(PFVArControllerType2Dynamics);
  _defineProperty(PFVArType2IEEEVArController, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'qref': [CGMESProfile.shortNames.DY],
    'vref': [CGMESProfile.shortNames.DY],
    'vclmt': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'vs': [CGMESProfile.shortNames.DY],
    'exlon': [CGMESProfile.shortNames.DY]
  });

  var PU = /*#__PURE__*/function (_BaseClass) {
    _inherits(PU, _BaseClass);
    var _super = _createSuper(PU);
    function PU() {
      _classCallCheck(this, PU);
      return _super.apply(this, arguments);
    }
    _createClass(PU, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PU";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:PU.value' in object) {
          attributeEntries['filledEntries']['cim:PU.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PU.value'], 'cim:Float', 'cim:PU.value');
        } else {
          attributeEntries['emptyEntries']['cim:PU.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PU.value'], 'cim:Float', 'cim:PU.value');
        }
        if ('cim:PU.unit' in object) {
          attributeEntries['filledEntries']['cim:PU.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PU.unit'], 'cim:UnitSymbol', 'cim:PU.unit');
        } else {
          attributeEntries['emptyEntries']['cim:PU.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PU.unit'], 'cim:UnitSymbol', 'cim:PU.unit');
        }
        if ('cim:PU.multiplier' in object) {
          attributeEntries['filledEntries']['cim:PU.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PU.multiplier'], 'cim:UnitMultiplier', 'cim:PU.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:PU.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PU.multiplier'], 'cim:UnitMultiplier', 'cim:PU.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PU.value", "cim:PU.unit", "cim:PU.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PU.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PU: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PU.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PU;
  }(BaseClass);
  _defineProperty(PU, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.DY],
    'value': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.DY],
    'unit': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.DY],
    'multiplier': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.DY]
  });

  var PerCent = /*#__PURE__*/function (_BaseClass) {
    _inherits(PerCent, _BaseClass);
    var _super = _createSuper(PerCent);
    function PerCent() {
      _classCallCheck(this, PerCent);
      return _super.apply(this, arguments);
    }
    _createClass(PerCent, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PerCent";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:PerCent.value' in object) {
          attributeEntries['filledEntries']['cim:PerCent.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PerCent.value'], 'cim:Float', 'cim:PerCent.value');
        } else {
          attributeEntries['emptyEntries']['cim:PerCent.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PerCent.value'], 'cim:Float', 'cim:PerCent.value');
        }
        if ('cim:PerCent.unit' in object) {
          attributeEntries['filledEntries']['cim:PerCent.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PerCent.unit'], 'cim:UnitSymbol', 'cim:PerCent.unit');
        } else {
          attributeEntries['emptyEntries']['cim:PerCent.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PerCent.unit'], 'cim:UnitSymbol', 'cim:PerCent.unit');
        }
        if ('cim:PerCent.multiplier' in object) {
          attributeEntries['filledEntries']['cim:PerCent.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PerCent.multiplier'], 'cim:UnitMultiplier', 'cim:PerCent.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:PerCent.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PerCent.multiplier'], 'cim:UnitMultiplier', 'cim:PerCent.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PerCent.value", "cim:PerCent.unit", "cim:PerCent.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PerCent.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PerCent: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PerCent.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PerCent;
  }(BaseClass);
  _defineProperty(PerCent, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'value': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'unit': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'multiplier': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var PerLengthDCLineParameter = /*#__PURE__*/function (_BaseClass) {
    _inherits(PerLengthDCLineParameter, _BaseClass);
    var _super = _createSuper(PerLengthDCLineParameter);
    function PerLengthDCLineParameter() {
      _classCallCheck(this, PerLengthDCLineParameter);
      return _super.apply(this, arguments);
    }
    _createClass(PerLengthDCLineParameter, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PerLengthDCLineParameter";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:PerLengthDCLineParameter.capacitance' in object) {
          attributeEntries['filledEntries']['cim:PerLengthDCLineParameter.capacitance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PerLengthDCLineParameter.capacitance'], 'cim:CapacitancePerLength', 'cim:PerLengthDCLineParameter.capacitance');
        } else {
          attributeEntries['emptyEntries']['cim:PerLengthDCLineParameter.capacitance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PerLengthDCLineParameter.capacitance'], 'cim:CapacitancePerLength', 'cim:PerLengthDCLineParameter.capacitance');
        }
        if ('cim:PerLengthDCLineParameter.inductance' in object) {
          attributeEntries['filledEntries']['cim:PerLengthDCLineParameter.inductance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PerLengthDCLineParameter.inductance'], 'cim:InductancePerLength', 'cim:PerLengthDCLineParameter.inductance');
        } else {
          attributeEntries['emptyEntries']['cim:PerLengthDCLineParameter.inductance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PerLengthDCLineParameter.inductance'], 'cim:InductancePerLength', 'cim:PerLengthDCLineParameter.inductance');
        }
        if ('cim:PerLengthDCLineParameter.resistance' in object) {
          attributeEntries['filledEntries']['cim:PerLengthDCLineParameter.resistance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PerLengthDCLineParameter.resistance'], 'cim:ResistancePerLength', 'cim:PerLengthDCLineParameter.resistance');
        } else {
          attributeEntries['emptyEntries']['cim:PerLengthDCLineParameter.resistance'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PerLengthDCLineParameter.resistance'], 'cim:ResistancePerLength', 'cim:PerLengthDCLineParameter.resistance');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PerLengthDCLineParameter.capacitance", "cim:PerLengthDCLineParameter.inductance", "cim:PerLengthDCLineParameter.resistance"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PerLengthDCLineParameter.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PerLengthDCLineParameter: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PerLengthDCLineParameter.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PerLengthDCLineParameter;
  }(BaseClass);
  _defineProperty(PerLengthDCLineParameter, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'capacitance': [CGMESProfile.shortNames.EQ],
    'inductance': [CGMESProfile.shortNames.EQ],
    'resistance': [CGMESProfile.shortNames.EQ]
  });

  var PetersenCoil = /*#__PURE__*/function (_EarthFaultCompensato) {
    _inherits(PetersenCoil, _EarthFaultCompensato);
    var _super = _createSuper(PetersenCoil);
    function PetersenCoil() {
      _classCallCheck(this, PetersenCoil);
      return _super.apply(this, arguments);
    }
    _createClass(PetersenCoil, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PetersenCoil";
        var attributeEntries = EarthFaultCompensator.attributeHTML(object, cimmenu, classType);
        if ('cim:PetersenCoil.mode' in object) {
          attributeEntries['filledEntries']['cim:PetersenCoil.mode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.mode'], 'cim:PetersenCoilModeKind', 'cim:PetersenCoil.mode');
        } else {
          attributeEntries['emptyEntries']['cim:PetersenCoil.mode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.mode'], 'cim:PetersenCoilModeKind', 'cim:PetersenCoil.mode');
        }
        if ('cim:PetersenCoil.nominalU' in object) {
          attributeEntries['filledEntries']['cim:PetersenCoil.nominalU'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.nominalU'], 'cim:Voltage', 'cim:PetersenCoil.nominalU');
        } else {
          attributeEntries['emptyEntries']['cim:PetersenCoil.nominalU'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.nominalU'], 'cim:Voltage', 'cim:PetersenCoil.nominalU');
        }
        if ('cim:PetersenCoil.offsetCurrent' in object) {
          attributeEntries['filledEntries']['cim:PetersenCoil.offsetCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.offsetCurrent'], 'cim:CurrentFlow', 'cim:PetersenCoil.offsetCurrent');
        } else {
          attributeEntries['emptyEntries']['cim:PetersenCoil.offsetCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.offsetCurrent'], 'cim:CurrentFlow', 'cim:PetersenCoil.offsetCurrent');
        }
        if ('cim:PetersenCoil.positionCurrent' in object) {
          attributeEntries['filledEntries']['cim:PetersenCoil.positionCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.positionCurrent'], 'cim:CurrentFlow', 'cim:PetersenCoil.positionCurrent');
        } else {
          attributeEntries['emptyEntries']['cim:PetersenCoil.positionCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.positionCurrent'], 'cim:CurrentFlow', 'cim:PetersenCoil.positionCurrent');
        }
        if ('cim:PetersenCoil.xGroundMax' in object) {
          attributeEntries['filledEntries']['cim:PetersenCoil.xGroundMax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.xGroundMax'], 'cim:Reactance', 'cim:PetersenCoil.xGroundMax');
        } else {
          attributeEntries['emptyEntries']['cim:PetersenCoil.xGroundMax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.xGroundMax'], 'cim:Reactance', 'cim:PetersenCoil.xGroundMax');
        }
        if ('cim:PetersenCoil.xGroundMin' in object) {
          attributeEntries['filledEntries']['cim:PetersenCoil.xGroundMin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.xGroundMin'], 'cim:Reactance', 'cim:PetersenCoil.xGroundMin');
        } else {
          attributeEntries['emptyEntries']['cim:PetersenCoil.xGroundMin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.xGroundMin'], 'cim:Reactance', 'cim:PetersenCoil.xGroundMin');
        }
        if ('cim:PetersenCoil.xGroundNominal' in object) {
          attributeEntries['filledEntries']['cim:PetersenCoil.xGroundNominal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.xGroundNominal'], 'cim:Reactance', 'cim:PetersenCoil.xGroundNominal');
        } else {
          attributeEntries['emptyEntries']['cim:PetersenCoil.xGroundNominal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PetersenCoil.xGroundNominal'], 'cim:Reactance', 'cim:PetersenCoil.xGroundNominal');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PetersenCoil.mode", "cim:PetersenCoil.nominalU", "cim:PetersenCoil.offsetCurrent", "cim:PetersenCoil.positionCurrent", "cim:PetersenCoil.xGroundMax", "cim:PetersenCoil.xGroundMin", "cim:PetersenCoil.xGroundNominal"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EarthFaultCompensator.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PetersenCoil.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PetersenCoil: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PetersenCoil.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PetersenCoil;
  }(EarthFaultCompensator);
  _defineProperty(PetersenCoil, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'mode': [CGMESProfile.shortNames.EQ],
    'nominalU': [CGMESProfile.shortNames.EQ],
    'offsetCurrent': [CGMESProfile.shortNames.EQ],
    'positionCurrent': [CGMESProfile.shortNames.EQ],
    'xGroundMax': [CGMESProfile.shortNames.EQ],
    'xGroundMin': [CGMESProfile.shortNames.EQ],
    'xGroundNominal': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$m = [{
    "value": "--"
  }, {
    "value": "PetersenCoilModeKind.fixed",
    "label": "fixed"
  }, {
    "value": "PetersenCoilModeKind.manual",
    "label": "manual"
  }, {
    "value": "PetersenCoilModeKind.automaticPositioning",
    "label": "automaticPositioning"
  }];
  var PetersenCoilModeKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(PetersenCoilModeKind, _BaseClass);
    var _super = _createSuper(PetersenCoilModeKind);
    function PetersenCoilModeKind() {
      _classCallCheck(this, PetersenCoilModeKind);
      return _super.apply(this, arguments);
    }
    _createClass(PetersenCoilModeKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PetersenCoilModeKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PetersenCoilModeKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PetersenCoilModeKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PetersenCoilModeKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$m;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PetersenCoilModeKind;
  }(BaseClass);
  _defineProperty(PetersenCoilModeKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$l = [{
    "value": "--"
  }, {
    "value": "PhaseCode.ABCN",
    "label": "ABCN"
  }, {
    "value": "PhaseCode.ABC",
    "label": "ABC"
  }, {
    "value": "PhaseCode.ABN",
    "label": "ABN"
  }, {
    "value": "PhaseCode.ACN",
    "label": "ACN"
  }, {
    "value": "PhaseCode.BCN",
    "label": "BCN"
  }, {
    "value": "PhaseCode.AB",
    "label": "AB"
  }, {
    "value": "PhaseCode.AC",
    "label": "AC"
  }, {
    "value": "PhaseCode.BC",
    "label": "BC"
  }, {
    "value": "PhaseCode.AN",
    "label": "AN"
  }, {
    "value": "PhaseCode.BN",
    "label": "BN"
  }, {
    "value": "PhaseCode.CN",
    "label": "CN"
  }, {
    "value": "PhaseCode.A",
    "label": "A"
  }, {
    "value": "PhaseCode.B",
    "label": "B"
  }, {
    "value": "PhaseCode.C",
    "label": "C"
  }, {
    "value": "PhaseCode.N",
    "label": "N"
  }, {
    "value": "PhaseCode.s1N",
    "label": "s1N"
  }, {
    "value": "PhaseCode.s2N",
    "label": "s2N"
  }, {
    "value": "PhaseCode.s12N",
    "label": "s12N"
  }, {
    "value": "PhaseCode.s1",
    "label": "s1"
  }, {
    "value": "PhaseCode.s2",
    "label": "s2"
  }, {
    "value": "PhaseCode.s12",
    "label": "s12"
  }];
  var PhaseCode = /*#__PURE__*/function (_BaseClass) {
    _inherits(PhaseCode, _BaseClass);
    var _super = _createSuper(PhaseCode);
    function PhaseCode() {
      _classCallCheck(this, PhaseCode);
      return _super.apply(this, arguments);
    }
    _createClass(PhaseCode, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PhaseCode";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PhaseCode.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PhaseCode: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PhaseCode.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$l;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PhaseCode;
  }(BaseClass);
  _defineProperty(PhaseCode, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var TapChanger = /*#__PURE__*/function (_PowerSystemResource) {
    _inherits(TapChanger, _PowerSystemResource);
    var _super = _createSuper(TapChanger);
    function TapChanger() {
      _classCallCheck(this, TapChanger);
      return _super.apply(this, arguments);
    }
    _createClass(TapChanger, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TapChanger";
        var attributeEntries = PowerSystemResource.attributeHTML(object, cimmenu, classType);
        if ('cim:TapChanger.highStep' in object) {
          attributeEntries['filledEntries']['cim:TapChanger.highStep'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.highStep'], 'cim:Integer', 'cim:TapChanger.highStep');
        } else {
          attributeEntries['emptyEntries']['cim:TapChanger.highStep'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.highStep'], 'cim:Integer', 'cim:TapChanger.highStep');
        }
        if ('cim:TapChanger.lowStep' in object) {
          attributeEntries['filledEntries']['cim:TapChanger.lowStep'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.lowStep'], 'cim:Integer', 'cim:TapChanger.lowStep');
        } else {
          attributeEntries['emptyEntries']['cim:TapChanger.lowStep'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.lowStep'], 'cim:Integer', 'cim:TapChanger.lowStep');
        }
        if ('cim:TapChanger.ltcFlag' in object) {
          attributeEntries['filledEntries']['cim:TapChanger.ltcFlag'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.ltcFlag'], 'cim:Boolean', 'cim:TapChanger.ltcFlag');
        } else {
          attributeEntries['emptyEntries']['cim:TapChanger.ltcFlag'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.ltcFlag'], 'cim:Boolean', 'cim:TapChanger.ltcFlag');
        }
        if ('cim:TapChanger.neutralStep' in object) {
          attributeEntries['filledEntries']['cim:TapChanger.neutralStep'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.neutralStep'], 'cim:Integer', 'cim:TapChanger.neutralStep');
        } else {
          attributeEntries['emptyEntries']['cim:TapChanger.neutralStep'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.neutralStep'], 'cim:Integer', 'cim:TapChanger.neutralStep');
        }
        if ('cim:TapChanger.neutralU' in object) {
          attributeEntries['filledEntries']['cim:TapChanger.neutralU'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.neutralU'], 'cim:Voltage', 'cim:TapChanger.neutralU');
        } else {
          attributeEntries['emptyEntries']['cim:TapChanger.neutralU'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.neutralU'], 'cim:Voltage', 'cim:TapChanger.neutralU');
        }
        if ('cim:TapChanger.normalStep' in object) {
          attributeEntries['filledEntries']['cim:TapChanger.normalStep'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.normalStep'], 'cim:Integer', 'cim:TapChanger.normalStep');
        } else {
          attributeEntries['emptyEntries']['cim:TapChanger.normalStep'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.normalStep'], 'cim:Integer', 'cim:TapChanger.normalStep');
        }
        if ('cim:TapChanger.TapChangerControl' in object) {
          attributeEntries['filledEntries']['cim:TapChanger.TapChangerControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.TapChangerControl'], 'cim:TapChangerControl', 'cim:TapChanger.TapChangerControl');
        } else {
          attributeEntries['emptyEntries']['cim:TapChanger.TapChangerControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.TapChangerControl'], 'cim:TapChangerControl', 'cim:TapChanger.TapChangerControl');
        }
        if ('cim:TapChanger.controlEnabled' in object) {
          attributeEntries['filledEntries']['cim:TapChanger.controlEnabled'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.controlEnabled'], 'cim:Boolean', 'cim:TapChanger.controlEnabled');
        } else {
          attributeEntries['emptyEntries']['cim:TapChanger.controlEnabled'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.controlEnabled'], 'cim:Boolean', 'cim:TapChanger.controlEnabled');
        }
        if ('cim:TapChanger.step' in object) {
          attributeEntries['filledEntries']['cim:TapChanger.step'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.step'], 'cim:Simple_Float', 'cim:TapChanger.step');
        } else {
          attributeEntries['emptyEntries']['cim:TapChanger.step'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChanger.step'], 'cim:Simple_Float', 'cim:TapChanger.step');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TapChanger.highStep", "cim:TapChanger.lowStep", "cim:TapChanger.ltcFlag", "cim:TapChanger.neutralStep", "cim:TapChanger.neutralU", "cim:TapChanger.normalStep", "cim:TapChanger.TapChangerControl", "cim:TapChanger.controlEnabled", "cim:TapChanger.step"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemResource.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TapChanger.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TapChanger: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TapChanger.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["PhaseTapChanger", "PhaseTapChangerLinear", "PhaseTapChangerNonLinear", "PhaseTapChangerAsymmetrical", "PhaseTapChangerSymmetrical", "PhaseTapChangerAsymmetrical", "PhaseTapChangerSymmetrical", "PhaseTapChangerTabular", "RatioTapChanger"];
        return subClasses;
      }
    }]);
    return TapChanger;
  }(PowerSystemResource);
  _defineProperty(TapChanger, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV],
    'highStep': [CGMESProfile.shortNames.EQ],
    'lowStep': [CGMESProfile.shortNames.EQ],
    'ltcFlag': [CGMESProfile.shortNames.EQ],
    'neutralStep': [CGMESProfile.shortNames.EQ],
    'neutralU': [CGMESProfile.shortNames.EQ],
    'normalStep': [CGMESProfile.shortNames.EQ],
    'TapChangerControl': [CGMESProfile.shortNames.EQ],
    'controlEnabled': [CGMESProfile.shortNames.SSH],
    'step': [CGMESProfile.shortNames.SSH]
  });

  var PhaseTapChanger = /*#__PURE__*/function (_TapChanger) {
    _inherits(PhaseTapChanger, _TapChanger);
    var _super = _createSuper(PhaseTapChanger);
    function PhaseTapChanger() {
      _classCallCheck(this, PhaseTapChanger);
      return _super.apply(this, arguments);
    }
    _createClass(PhaseTapChanger, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PhaseTapChanger";
        var attributeEntries = TapChanger.attributeHTML(object, cimmenu, classType);
        if ('cim:PhaseTapChanger.TransformerEnd' in object) {
          attributeEntries['filledEntries']['cim:PhaseTapChanger.TransformerEnd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChanger.TransformerEnd'], 'cim:TransformerEnd', 'cim:PhaseTapChanger.TransformerEnd');
        } else {
          attributeEntries['emptyEntries']['cim:PhaseTapChanger.TransformerEnd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChanger.TransformerEnd'], 'cim:TransformerEnd', 'cim:PhaseTapChanger.TransformerEnd');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PhaseTapChanger.TransformerEnd"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TapChanger.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PhaseTapChanger.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PhaseTapChanger: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PhaseTapChanger.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["PhaseTapChangerLinear", "PhaseTapChangerNonLinear", "PhaseTapChangerAsymmetrical", "PhaseTapChangerSymmetrical", "PhaseTapChangerTabular"];
        return subClasses;
      }
    }]);
    return PhaseTapChanger;
  }(TapChanger);
  _defineProperty(PhaseTapChanger, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'TransformerEnd': [CGMESProfile.shortNames.EQ]
  });

  var PhaseTapChangerNonLinear = /*#__PURE__*/function (_PhaseTapChanger) {
    _inherits(PhaseTapChangerNonLinear, _PhaseTapChanger);
    var _super = _createSuper(PhaseTapChangerNonLinear);
    function PhaseTapChangerNonLinear() {
      _classCallCheck(this, PhaseTapChangerNonLinear);
      return _super.apply(this, arguments);
    }
    _createClass(PhaseTapChangerNonLinear, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PhaseTapChangerNonLinear";
        var attributeEntries = PhaseTapChanger.attributeHTML(object, cimmenu, classType);
        if ('cim:PhaseTapChangerNonLinear.voltageStepIncrement' in object) {
          attributeEntries['filledEntries']['cim:PhaseTapChangerNonLinear.voltageStepIncrement'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerNonLinear.voltageStepIncrement'], 'cim:PerCent', 'cim:PhaseTapChangerNonLinear.voltageStepIncrement');
        } else {
          attributeEntries['emptyEntries']['cim:PhaseTapChangerNonLinear.voltageStepIncrement'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerNonLinear.voltageStepIncrement'], 'cim:PerCent', 'cim:PhaseTapChangerNonLinear.voltageStepIncrement');
        }
        if ('cim:PhaseTapChangerNonLinear.xMax' in object) {
          attributeEntries['filledEntries']['cim:PhaseTapChangerNonLinear.xMax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerNonLinear.xMax'], 'cim:Reactance', 'cim:PhaseTapChangerNonLinear.xMax');
        } else {
          attributeEntries['emptyEntries']['cim:PhaseTapChangerNonLinear.xMax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerNonLinear.xMax'], 'cim:Reactance', 'cim:PhaseTapChangerNonLinear.xMax');
        }
        if ('cim:PhaseTapChangerNonLinear.xMin' in object) {
          attributeEntries['filledEntries']['cim:PhaseTapChangerNonLinear.xMin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerNonLinear.xMin'], 'cim:Reactance', 'cim:PhaseTapChangerNonLinear.xMin');
        } else {
          attributeEntries['emptyEntries']['cim:PhaseTapChangerNonLinear.xMin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerNonLinear.xMin'], 'cim:Reactance', 'cim:PhaseTapChangerNonLinear.xMin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PhaseTapChangerNonLinear.voltageStepIncrement", "cim:PhaseTapChangerNonLinear.xMax", "cim:PhaseTapChangerNonLinear.xMin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PhaseTapChanger.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PhaseTapChangerNonLinear.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PhaseTapChangerNonLinear: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PhaseTapChangerNonLinear.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["PhaseTapChangerAsymmetrical", "PhaseTapChangerSymmetrical"];
        return subClasses;
      }
    }]);
    return PhaseTapChangerNonLinear;
  }(PhaseTapChanger);
  _defineProperty(PhaseTapChangerNonLinear, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'voltageStepIncrement': [CGMESProfile.shortNames.EQ],
    'xMax': [CGMESProfile.shortNames.EQ],
    'xMin': [CGMESProfile.shortNames.EQ]
  });

  var PhaseTapChangerAsymmetrical = /*#__PURE__*/function (_PhaseTapChangerNonLi) {
    _inherits(PhaseTapChangerAsymmetrical, _PhaseTapChangerNonLi);
    var _super = _createSuper(PhaseTapChangerAsymmetrical);
    function PhaseTapChangerAsymmetrical() {
      _classCallCheck(this, PhaseTapChangerAsymmetrical);
      return _super.apply(this, arguments);
    }
    _createClass(PhaseTapChangerAsymmetrical, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PhaseTapChangerAsymmetrical";
        var attributeEntries = PhaseTapChangerNonLinear.attributeHTML(object, cimmenu, classType);
        if ('cim:PhaseTapChangerAsymmetrical.windingConnectionAngle' in object) {
          attributeEntries['filledEntries']['cim:PhaseTapChangerAsymmetrical.windingConnectionAngle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerAsymmetrical.windingConnectionAngle'], 'cim:AngleDegrees', 'cim:PhaseTapChangerAsymmetrical.windingConnectionAngle');
        } else {
          attributeEntries['emptyEntries']['cim:PhaseTapChangerAsymmetrical.windingConnectionAngle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerAsymmetrical.windingConnectionAngle'], 'cim:AngleDegrees', 'cim:PhaseTapChangerAsymmetrical.windingConnectionAngle');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PhaseTapChangerAsymmetrical.windingConnectionAngle"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PhaseTapChangerNonLinear.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PhaseTapChangerAsymmetrical.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PhaseTapChangerAsymmetrical: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PhaseTapChangerAsymmetrical.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PhaseTapChangerAsymmetrical;
  }(PhaseTapChangerNonLinear);
  _defineProperty(PhaseTapChangerAsymmetrical, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'windingConnectionAngle': [CGMESProfile.shortNames.EQ]
  });

  var PhaseTapChangerLinear = /*#__PURE__*/function (_PhaseTapChanger) {
    _inherits(PhaseTapChangerLinear, _PhaseTapChanger);
    var _super = _createSuper(PhaseTapChangerLinear);
    function PhaseTapChangerLinear() {
      _classCallCheck(this, PhaseTapChangerLinear);
      return _super.apply(this, arguments);
    }
    _createClass(PhaseTapChangerLinear, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PhaseTapChangerLinear";
        var attributeEntries = PhaseTapChanger.attributeHTML(object, cimmenu, classType);
        if ('cim:PhaseTapChangerLinear.stepPhaseShiftIncrement' in object) {
          attributeEntries['filledEntries']['cim:PhaseTapChangerLinear.stepPhaseShiftIncrement'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerLinear.stepPhaseShiftIncrement'], 'cim:AngleDegrees', 'cim:PhaseTapChangerLinear.stepPhaseShiftIncrement');
        } else {
          attributeEntries['emptyEntries']['cim:PhaseTapChangerLinear.stepPhaseShiftIncrement'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerLinear.stepPhaseShiftIncrement'], 'cim:AngleDegrees', 'cim:PhaseTapChangerLinear.stepPhaseShiftIncrement');
        }
        if ('cim:PhaseTapChangerLinear.xMax' in object) {
          attributeEntries['filledEntries']['cim:PhaseTapChangerLinear.xMax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerLinear.xMax'], 'cim:Reactance', 'cim:PhaseTapChangerLinear.xMax');
        } else {
          attributeEntries['emptyEntries']['cim:PhaseTapChangerLinear.xMax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerLinear.xMax'], 'cim:Reactance', 'cim:PhaseTapChangerLinear.xMax');
        }
        if ('cim:PhaseTapChangerLinear.xMin' in object) {
          attributeEntries['filledEntries']['cim:PhaseTapChangerLinear.xMin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerLinear.xMin'], 'cim:Reactance', 'cim:PhaseTapChangerLinear.xMin');
        } else {
          attributeEntries['emptyEntries']['cim:PhaseTapChangerLinear.xMin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerLinear.xMin'], 'cim:Reactance', 'cim:PhaseTapChangerLinear.xMin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PhaseTapChangerLinear.stepPhaseShiftIncrement", "cim:PhaseTapChangerLinear.xMax", "cim:PhaseTapChangerLinear.xMin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PhaseTapChanger.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PhaseTapChangerLinear.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PhaseTapChangerLinear: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PhaseTapChangerLinear.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PhaseTapChangerLinear;
  }(PhaseTapChanger);
  _defineProperty(PhaseTapChangerLinear, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'stepPhaseShiftIncrement': [CGMESProfile.shortNames.EQ],
    'xMax': [CGMESProfile.shortNames.EQ],
    'xMin': [CGMESProfile.shortNames.EQ]
  });

  var PhaseTapChangerSymmetrical = /*#__PURE__*/function (_PhaseTapChangerNonLi) {
    _inherits(PhaseTapChangerSymmetrical, _PhaseTapChangerNonLi);
    var _super = _createSuper(PhaseTapChangerSymmetrical);
    function PhaseTapChangerSymmetrical() {
      _classCallCheck(this, PhaseTapChangerSymmetrical);
      return _super.apply(this, arguments);
    }
    _createClass(PhaseTapChangerSymmetrical, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PhaseTapChangerSymmetrical";
        var attributeEntries = PhaseTapChangerNonLinear.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PhaseTapChangerNonLinear.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PhaseTapChangerSymmetrical.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PhaseTapChangerSymmetrical: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PhaseTapChangerSymmetrical.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PhaseTapChangerSymmetrical;
  }(PhaseTapChangerNonLinear);
  _defineProperty(PhaseTapChangerSymmetrical, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var PhaseTapChangerTable = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(PhaseTapChangerTable, _IdentifiedObject);
    var _super = _createSuper(PhaseTapChangerTable);
    function PhaseTapChangerTable() {
      _classCallCheck(this, PhaseTapChangerTable);
      return _super.apply(this, arguments);
    }
    _createClass(PhaseTapChangerTable, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PhaseTapChangerTable";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:PhaseTapChangerTable.PhaseTapChangerTabular' in object) {
          attributeEntries['filledEntries']['cim:PhaseTapChangerTable.PhaseTapChangerTabular'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerTable.PhaseTapChangerTabular'], 'cim:PhaseTapChangerTabular', 'cim:PhaseTapChangerTable.PhaseTapChangerTabular');
        } else {
          attributeEntries['emptyEntries']['cim:PhaseTapChangerTable.PhaseTapChangerTabular'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerTable.PhaseTapChangerTabular'], 'cim:PhaseTapChangerTabular', 'cim:PhaseTapChangerTable.PhaseTapChangerTabular');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PhaseTapChangerTable.PhaseTapChangerTabular"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PhaseTapChangerTable.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PhaseTapChangerTable: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PhaseTapChangerTable.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PhaseTapChangerTable;
  }(IdentifiedObject);
  _defineProperty(PhaseTapChangerTable, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'PhaseTapChangerTabular': [CGMESProfile.shortNames.EQ]
  });

  var TapChangerTablePoint = /*#__PURE__*/function (_BaseClass) {
    _inherits(TapChangerTablePoint, _BaseClass);
    var _super = _createSuper(TapChangerTablePoint);
    function TapChangerTablePoint() {
      _classCallCheck(this, TapChangerTablePoint);
      return _super.apply(this, arguments);
    }
    _createClass(TapChangerTablePoint, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TapChangerTablePoint";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:TapChangerTablePoint.b' in object) {
          attributeEntries['filledEntries']['cim:TapChangerTablePoint.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChangerTablePoint.b'], 'cim:PerCent', 'cim:TapChangerTablePoint.b');
        } else {
          attributeEntries['emptyEntries']['cim:TapChangerTablePoint.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChangerTablePoint.b'], 'cim:PerCent', 'cim:TapChangerTablePoint.b');
        }
        if ('cim:TapChangerTablePoint.g' in object) {
          attributeEntries['filledEntries']['cim:TapChangerTablePoint.g'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChangerTablePoint.g'], 'cim:PerCent', 'cim:TapChangerTablePoint.g');
        } else {
          attributeEntries['emptyEntries']['cim:TapChangerTablePoint.g'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChangerTablePoint.g'], 'cim:PerCent', 'cim:TapChangerTablePoint.g');
        }
        if ('cim:TapChangerTablePoint.r' in object) {
          attributeEntries['filledEntries']['cim:TapChangerTablePoint.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChangerTablePoint.r'], 'cim:PerCent', 'cim:TapChangerTablePoint.r');
        } else {
          attributeEntries['emptyEntries']['cim:TapChangerTablePoint.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChangerTablePoint.r'], 'cim:PerCent', 'cim:TapChangerTablePoint.r');
        }
        if ('cim:TapChangerTablePoint.ratio' in object) {
          attributeEntries['filledEntries']['cim:TapChangerTablePoint.ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChangerTablePoint.ratio'], 'cim:Simple_Float', 'cim:TapChangerTablePoint.ratio');
        } else {
          attributeEntries['emptyEntries']['cim:TapChangerTablePoint.ratio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChangerTablePoint.ratio'], 'cim:Simple_Float', 'cim:TapChangerTablePoint.ratio');
        }
        if ('cim:TapChangerTablePoint.step' in object) {
          attributeEntries['filledEntries']['cim:TapChangerTablePoint.step'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChangerTablePoint.step'], 'cim:Integer', 'cim:TapChangerTablePoint.step');
        } else {
          attributeEntries['emptyEntries']['cim:TapChangerTablePoint.step'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChangerTablePoint.step'], 'cim:Integer', 'cim:TapChangerTablePoint.step');
        }
        if ('cim:TapChangerTablePoint.x' in object) {
          attributeEntries['filledEntries']['cim:TapChangerTablePoint.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChangerTablePoint.x'], 'cim:PerCent', 'cim:TapChangerTablePoint.x');
        } else {
          attributeEntries['emptyEntries']['cim:TapChangerTablePoint.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapChangerTablePoint.x'], 'cim:PerCent', 'cim:TapChangerTablePoint.x');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TapChangerTablePoint.b", "cim:TapChangerTablePoint.g", "cim:TapChangerTablePoint.r", "cim:TapChangerTablePoint.ratio", "cim:TapChangerTablePoint.step", "cim:TapChangerTablePoint.x"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TapChangerTablePoint.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TapChangerTablePoint: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TapChangerTablePoint.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["PhaseTapChangerTablePoint", "RatioTapChangerTablePoint"];
        return subClasses;
      }
    }]);
    return TapChangerTablePoint;
  }(BaseClass);
  _defineProperty(TapChangerTablePoint, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'b': [CGMESProfile.shortNames.EQ],
    'g': [CGMESProfile.shortNames.EQ],
    'r': [CGMESProfile.shortNames.EQ],
    'ratio': [CGMESProfile.shortNames.EQ],
    'step': [CGMESProfile.shortNames.EQ],
    'x': [CGMESProfile.shortNames.EQ]
  });

  var PhaseTapChangerTablePoint = /*#__PURE__*/function (_TapChangerTablePoint) {
    _inherits(PhaseTapChangerTablePoint, _TapChangerTablePoint);
    var _super = _createSuper(PhaseTapChangerTablePoint);
    function PhaseTapChangerTablePoint() {
      _classCallCheck(this, PhaseTapChangerTablePoint);
      return _super.apply(this, arguments);
    }
    _createClass(PhaseTapChangerTablePoint, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PhaseTapChangerTablePoint";
        var attributeEntries = TapChangerTablePoint.attributeHTML(object, cimmenu, classType);
        if ('cim:PhaseTapChangerTablePoint.PhaseTapChangerTable' in object) {
          attributeEntries['filledEntries']['cim:PhaseTapChangerTablePoint.PhaseTapChangerTable'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerTablePoint.PhaseTapChangerTable'], 'cim:PhaseTapChangerTable', 'cim:PhaseTapChangerTablePoint.PhaseTapChangerTable');
        } else {
          attributeEntries['emptyEntries']['cim:PhaseTapChangerTablePoint.PhaseTapChangerTable'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerTablePoint.PhaseTapChangerTable'], 'cim:PhaseTapChangerTable', 'cim:PhaseTapChangerTablePoint.PhaseTapChangerTable');
        }
        if ('cim:PhaseTapChangerTablePoint.angle' in object) {
          attributeEntries['filledEntries']['cim:PhaseTapChangerTablePoint.angle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerTablePoint.angle'], 'cim:AngleDegrees', 'cim:PhaseTapChangerTablePoint.angle');
        } else {
          attributeEntries['emptyEntries']['cim:PhaseTapChangerTablePoint.angle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerTablePoint.angle'], 'cim:AngleDegrees', 'cim:PhaseTapChangerTablePoint.angle');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PhaseTapChangerTablePoint.PhaseTapChangerTable", "cim:PhaseTapChangerTablePoint.angle"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TapChangerTablePoint.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PhaseTapChangerTablePoint.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PhaseTapChangerTablePoint: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PhaseTapChangerTablePoint.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PhaseTapChangerTablePoint;
  }(TapChangerTablePoint);
  _defineProperty(PhaseTapChangerTablePoint, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'PhaseTapChangerTable': [CGMESProfile.shortNames.EQ],
    'angle': [CGMESProfile.shortNames.EQ]
  });

  var PhaseTapChangerTabular = /*#__PURE__*/function (_PhaseTapChanger) {
    _inherits(PhaseTapChangerTabular, _PhaseTapChanger);
    var _super = _createSuper(PhaseTapChangerTabular);
    function PhaseTapChangerTabular() {
      _classCallCheck(this, PhaseTapChangerTabular);
      return _super.apply(this, arguments);
    }
    _createClass(PhaseTapChangerTabular, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PhaseTapChangerTabular";
        var attributeEntries = PhaseTapChanger.attributeHTML(object, cimmenu, classType);
        if ('cim:PhaseTapChangerTabular.PhaseTapChangerTable' in object) {
          attributeEntries['filledEntries']['cim:PhaseTapChangerTabular.PhaseTapChangerTable'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerTabular.PhaseTapChangerTable'], 'cim:PhaseTapChangerTable', 'cim:PhaseTapChangerTabular.PhaseTapChangerTable');
        } else {
          attributeEntries['emptyEntries']['cim:PhaseTapChangerTabular.PhaseTapChangerTable'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PhaseTapChangerTabular.PhaseTapChangerTable'], 'cim:PhaseTapChangerTable', 'cim:PhaseTapChangerTabular.PhaseTapChangerTable');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PhaseTapChangerTabular.PhaseTapChangerTable"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PhaseTapChanger.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PhaseTapChangerTabular.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PhaseTapChangerTabular: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PhaseTapChangerTabular.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PhaseTapChangerTabular;
  }(PhaseTapChanger);
  _defineProperty(PhaseTapChangerTabular, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'PhaseTapChangerTable': [CGMESProfile.shortNames.EQ]
  });

  var PositionPoint = /*#__PURE__*/function (_BaseClass) {
    _inherits(PositionPoint, _BaseClass);
    var _super = _createSuper(PositionPoint);
    function PositionPoint() {
      _classCallCheck(this, PositionPoint);
      return _super.apply(this, arguments);
    }
    _createClass(PositionPoint, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PositionPoint";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:PositionPoint.Location' in object) {
          attributeEntries['filledEntries']['cim:PositionPoint.Location'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PositionPoint.Location'], 'cim:Location', 'cim:PositionPoint.Location');
        } else {
          attributeEntries['emptyEntries']['cim:PositionPoint.Location'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PositionPoint.Location'], 'cim:Location', 'cim:PositionPoint.Location');
        }
        if ('cim:PositionPoint.sequenceNumber' in object) {
          attributeEntries['filledEntries']['cim:PositionPoint.sequenceNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PositionPoint.sequenceNumber'], 'cim:Integer', 'cim:PositionPoint.sequenceNumber');
        } else {
          attributeEntries['emptyEntries']['cim:PositionPoint.sequenceNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PositionPoint.sequenceNumber'], 'cim:Integer', 'cim:PositionPoint.sequenceNumber');
        }
        if ('cim:PositionPoint.xPosition' in object) {
          attributeEntries['filledEntries']['cim:PositionPoint.xPosition'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PositionPoint.xPosition'], 'cim:String', 'cim:PositionPoint.xPosition');
        } else {
          attributeEntries['emptyEntries']['cim:PositionPoint.xPosition'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PositionPoint.xPosition'], 'cim:String', 'cim:PositionPoint.xPosition');
        }
        if ('cim:PositionPoint.yPosition' in object) {
          attributeEntries['filledEntries']['cim:PositionPoint.yPosition'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PositionPoint.yPosition'], 'cim:String', 'cim:PositionPoint.yPosition');
        } else {
          attributeEntries['emptyEntries']['cim:PositionPoint.yPosition'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PositionPoint.yPosition'], 'cim:String', 'cim:PositionPoint.yPosition');
        }
        if ('cim:PositionPoint.zPosition' in object) {
          attributeEntries['filledEntries']['cim:PositionPoint.zPosition'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PositionPoint.zPosition'], 'cim:String', 'cim:PositionPoint.zPosition');
        } else {
          attributeEntries['emptyEntries']['cim:PositionPoint.zPosition'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PositionPoint.zPosition'], 'cim:String', 'cim:PositionPoint.zPosition');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PositionPoint.Location", "cim:PositionPoint.sequenceNumber", "cim:PositionPoint.xPosition", "cim:PositionPoint.yPosition", "cim:PositionPoint.zPosition"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PositionPoint.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PositionPoint: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PositionPoint.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PositionPoint;
  }(BaseClass);
  _defineProperty(PositionPoint, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.GL],
    'Location': [CGMESProfile.shortNames.GL],
    'sequenceNumber': [CGMESProfile.shortNames.GL],
    'xPosition': [CGMESProfile.shortNames.GL],
    'yPosition': [CGMESProfile.shortNames.GL],
    'zPosition': [CGMESProfile.shortNames.GL]
  });

  var PowerSystemStabilizerDynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(PowerSystemStabilizerDynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(PowerSystemStabilizerDynamics);
    function PowerSystemStabilizerDynamics() {
      _classCallCheck(this, PowerSystemStabilizerDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(PowerSystemStabilizerDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PowerSystemStabilizerDynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:PowerSystemStabilizerDynamics.ExcitationSystemDynamics' in object) {
          attributeEntries['filledEntries']['cim:PowerSystemStabilizerDynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerSystemStabilizerDynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:PowerSystemStabilizerDynamics.ExcitationSystemDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:PowerSystemStabilizerDynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerSystemStabilizerDynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:PowerSystemStabilizerDynamics.ExcitationSystemDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PowerSystemStabilizerDynamics.ExcitationSystemDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PowerSystemStabilizerDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PowerSystemStabilizerDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["PowerSystemStabilizerUserDefined", "PssIEEE1A", "PssIEEE2B", "PssIEEE3B", "PssIEEE4B", "Pss1", "Pss1A", "Pss2B", "Pss2ST", "Pss5", "PssELIN2", "PssPTIST1", "PssPTIST3", "PssSB4", "PssSH", "PssSK", "PssWECC"];
        return subClasses;
      }
    }]);
    return PowerSystemStabilizerDynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(PowerSystemStabilizerDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ExcitationSystemDynamics': [CGMESProfile.shortNames.DY]
  });

  var PowerSystemStabilizerUserDefined = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(PowerSystemStabilizerUserDefined, _PowerSystemStabilize);
    var _super = _createSuper(PowerSystemStabilizerUserDefined);
    function PowerSystemStabilizerUserDefined() {
      _classCallCheck(this, PowerSystemStabilizerUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(PowerSystemStabilizerUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PowerSystemStabilizerUserDefined";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PowerSystemStabilizerUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:PowerSystemStabilizerUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerSystemStabilizerUserDefined.proprietary'], 'cim:Boolean', 'cim:PowerSystemStabilizerUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:PowerSystemStabilizerUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerSystemStabilizerUserDefined.proprietary'], 'cim:Boolean', 'cim:PowerSystemStabilizerUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PowerSystemStabilizerUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PowerSystemStabilizerUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PowerSystemStabilizerUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PowerSystemStabilizerUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PowerSystemStabilizerUserDefined;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(PowerSystemStabilizerUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var PowerTransformer = /*#__PURE__*/function (_ConductingEquipment) {
    _inherits(PowerTransformer, _ConductingEquipment);
    var _super = _createSuper(PowerTransformer);
    function PowerTransformer() {
      _classCallCheck(this, PowerTransformer);
      return _super.apply(this, arguments);
    }
    _createClass(PowerTransformer, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PowerTransformer";
        var attributeEntries = ConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:PowerTransformer.beforeShCircuitHighestOperatingCurrent' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformer.beforeShCircuitHighestOperatingCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformer.beforeShCircuitHighestOperatingCurrent'], 'cim:CurrentFlow', 'cim:PowerTransformer.beforeShCircuitHighestOperatingCurrent');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformer.beforeShCircuitHighestOperatingCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformer.beforeShCircuitHighestOperatingCurrent'], 'cim:CurrentFlow', 'cim:PowerTransformer.beforeShCircuitHighestOperatingCurrent');
        }
        if ('cim:PowerTransformer.beforeShCircuitHighestOperatingVoltage' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformer.beforeShCircuitHighestOperatingVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformer.beforeShCircuitHighestOperatingVoltage'], 'cim:Voltage', 'cim:PowerTransformer.beforeShCircuitHighestOperatingVoltage');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformer.beforeShCircuitHighestOperatingVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformer.beforeShCircuitHighestOperatingVoltage'], 'cim:Voltage', 'cim:PowerTransformer.beforeShCircuitHighestOperatingVoltage');
        }
        if ('cim:PowerTransformer.beforeShortCircuitAnglePf' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformer.beforeShortCircuitAnglePf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformer.beforeShortCircuitAnglePf'], 'cim:AngleDegrees', 'cim:PowerTransformer.beforeShortCircuitAnglePf');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformer.beforeShortCircuitAnglePf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformer.beforeShortCircuitAnglePf'], 'cim:AngleDegrees', 'cim:PowerTransformer.beforeShortCircuitAnglePf');
        }
        if ('cim:PowerTransformer.highSideMinOperatingU' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformer.highSideMinOperatingU'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformer.highSideMinOperatingU'], 'cim:Voltage', 'cim:PowerTransformer.highSideMinOperatingU');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformer.highSideMinOperatingU'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformer.highSideMinOperatingU'], 'cim:Voltage', 'cim:PowerTransformer.highSideMinOperatingU');
        }
        if ('cim:PowerTransformer.isPartOfGeneratorUnit' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformer.isPartOfGeneratorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformer.isPartOfGeneratorUnit'], 'cim:Boolean', 'cim:PowerTransformer.isPartOfGeneratorUnit');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformer.isPartOfGeneratorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformer.isPartOfGeneratorUnit'], 'cim:Boolean', 'cim:PowerTransformer.isPartOfGeneratorUnit');
        }
        if ('cim:PowerTransformer.operationalValuesConsidered' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformer.operationalValuesConsidered'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformer.operationalValuesConsidered'], 'cim:Boolean', 'cim:PowerTransformer.operationalValuesConsidered');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformer.operationalValuesConsidered'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformer.operationalValuesConsidered'], 'cim:Boolean', 'cim:PowerTransformer.operationalValuesConsidered');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PowerTransformer.beforeShCircuitHighestOperatingCurrent", "cim:PowerTransformer.beforeShCircuitHighestOperatingVoltage", "cim:PowerTransformer.beforeShortCircuitAnglePf", "cim:PowerTransformer.highSideMinOperatingU", "cim:PowerTransformer.isPartOfGeneratorUnit", "cim:PowerTransformer.operationalValuesConsidered"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PowerTransformer.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PowerTransformer: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PowerTransformer.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PowerTransformer;
  }(ConductingEquipment);
  _defineProperty(PowerTransformer, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'beforeShCircuitHighestOperatingCurrent': [CGMESProfile.shortNames.EQ],
    'beforeShCircuitHighestOperatingVoltage': [CGMESProfile.shortNames.EQ],
    'beforeShortCircuitAnglePf': [CGMESProfile.shortNames.EQ],
    'highSideMinOperatingU': [CGMESProfile.shortNames.EQ],
    'isPartOfGeneratorUnit': [CGMESProfile.shortNames.EQ],
    'operationalValuesConsidered': [CGMESProfile.shortNames.EQ]
  });

  var TransformerEnd = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(TransformerEnd, _IdentifiedObject);
    var _super = _createSuper(TransformerEnd);
    function TransformerEnd() {
      _classCallCheck(this, TransformerEnd);
      return _super.apply(this, arguments);
    }
    _createClass(TransformerEnd, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TransformerEnd";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:TransformerEnd.BaseVoltage' in object) {
          attributeEntries['filledEntries']['cim:TransformerEnd.BaseVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.BaseVoltage'], 'cim:BaseVoltage', 'cim:TransformerEnd.BaseVoltage');
        } else {
          attributeEntries['emptyEntries']['cim:TransformerEnd.BaseVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.BaseVoltage'], 'cim:BaseVoltage', 'cim:TransformerEnd.BaseVoltage');
        }
        if ('cim:TransformerEnd.Terminal' in object) {
          attributeEntries['filledEntries']['cim:TransformerEnd.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.Terminal'], 'cim:Terminal', 'cim:TransformerEnd.Terminal');
        } else {
          attributeEntries['emptyEntries']['cim:TransformerEnd.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.Terminal'], 'cim:Terminal', 'cim:TransformerEnd.Terminal');
        }
        if ('cim:TransformerEnd.RatioTapChanger' in object) {
          attributeEntries['filledEntries']['cim:TransformerEnd.RatioTapChanger'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.RatioTapChanger'], 'cim:RatioTapChanger', 'cim:TransformerEnd.RatioTapChanger');
        } else {
          attributeEntries['emptyEntries']['cim:TransformerEnd.RatioTapChanger'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.RatioTapChanger'], 'cim:RatioTapChanger', 'cim:TransformerEnd.RatioTapChanger');
        }
        if ('cim:TransformerEnd.endNumber' in object) {
          attributeEntries['filledEntries']['cim:TransformerEnd.endNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.endNumber'], 'cim:Integer', 'cim:TransformerEnd.endNumber');
        } else {
          attributeEntries['emptyEntries']['cim:TransformerEnd.endNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.endNumber'], 'cim:Integer', 'cim:TransformerEnd.endNumber');
        }
        if ('cim:TransformerEnd.rground' in object) {
          attributeEntries['filledEntries']['cim:TransformerEnd.rground'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.rground'], 'cim:Resistance', 'cim:TransformerEnd.rground');
        } else {
          attributeEntries['emptyEntries']['cim:TransformerEnd.rground'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.rground'], 'cim:Resistance', 'cim:TransformerEnd.rground');
        }
        if ('cim:TransformerEnd.grounded' in object) {
          attributeEntries['filledEntries']['cim:TransformerEnd.grounded'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.grounded'], 'cim:Boolean', 'cim:TransformerEnd.grounded');
        } else {
          attributeEntries['emptyEntries']['cim:TransformerEnd.grounded'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.grounded'], 'cim:Boolean', 'cim:TransformerEnd.grounded');
        }
        if ('cim:TransformerEnd.xground' in object) {
          attributeEntries['filledEntries']['cim:TransformerEnd.xground'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.xground'], 'cim:Reactance', 'cim:TransformerEnd.xground');
        } else {
          attributeEntries['emptyEntries']['cim:TransformerEnd.xground'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TransformerEnd.xground'], 'cim:Reactance', 'cim:TransformerEnd.xground');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TransformerEnd.BaseVoltage", "cim:TransformerEnd.Terminal", "cim:TransformerEnd.RatioTapChanger", "cim:TransformerEnd.endNumber", "cim:TransformerEnd.rground", "cim:TransformerEnd.grounded", "cim:TransformerEnd.xground"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TransformerEnd.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TransformerEnd: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TransformerEnd.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["PowerTransformerEnd"];
        return subClasses;
      }
    }]);
    return TransformerEnd;
  }(IdentifiedObject);
  _defineProperty(TransformerEnd, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'BaseVoltage': [CGMESProfile.shortNames.EQ],
    'Terminal': [CGMESProfile.shortNames.EQ],
    'RatioTapChanger': [CGMESProfile.shortNames.EQ],
    'endNumber': [CGMESProfile.shortNames.EQ],
    'rground': [CGMESProfile.shortNames.EQ],
    'grounded': [CGMESProfile.shortNames.EQ],
    'xground': [CGMESProfile.shortNames.EQ]
  });

  var PowerTransformerEnd = /*#__PURE__*/function (_TransformerEnd) {
    _inherits(PowerTransformerEnd, _TransformerEnd);
    var _super = _createSuper(PowerTransformerEnd);
    function PowerTransformerEnd() {
      _classCallCheck(this, PowerTransformerEnd);
      return _super.apply(this, arguments);
    }
    _createClass(PowerTransformerEnd, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PowerTransformerEnd";
        var attributeEntries = TransformerEnd.attributeHTML(object, cimmenu, classType);
        if ('cim:PowerTransformerEnd.PowerTransformer' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.PowerTransformer'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.PowerTransformer'], 'cim:PowerTransformer', 'cim:PowerTransformerEnd.PowerTransformer');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.PowerTransformer'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.PowerTransformer'], 'cim:PowerTransformer', 'cim:PowerTransformerEnd.PowerTransformer');
        }
        if ('cim:PowerTransformerEnd.b' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.b'], 'cim:Susceptance', 'cim:PowerTransformerEnd.b');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.b'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.b'], 'cim:Susceptance', 'cim:PowerTransformerEnd.b');
        }
        if ('cim:PowerTransformerEnd.connectionKind' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.connectionKind'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.connectionKind'], 'cim:WindingConnection', 'cim:PowerTransformerEnd.connectionKind');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.connectionKind'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.connectionKind'], 'cim:WindingConnection', 'cim:PowerTransformerEnd.connectionKind');
        }
        if ('cim:PowerTransformerEnd.ratedS' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.ratedS'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.ratedS'], 'cim:ApparentPower', 'cim:PowerTransformerEnd.ratedS');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.ratedS'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.ratedS'], 'cim:ApparentPower', 'cim:PowerTransformerEnd.ratedS');
        }
        if ('cim:PowerTransformerEnd.g' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.g'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.g'], 'cim:Conductance', 'cim:PowerTransformerEnd.g');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.g'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.g'], 'cim:Conductance', 'cim:PowerTransformerEnd.g');
        }
        if ('cim:PowerTransformerEnd.ratedU' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.ratedU'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.ratedU'], 'cim:Voltage', 'cim:PowerTransformerEnd.ratedU');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.ratedU'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.ratedU'], 'cim:Voltage', 'cim:PowerTransformerEnd.ratedU');
        }
        if ('cim:PowerTransformerEnd.r' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.r'], 'cim:Resistance', 'cim:PowerTransformerEnd.r');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.r'], 'cim:Resistance', 'cim:PowerTransformerEnd.r');
        }
        if ('cim:PowerTransformerEnd.x' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.x'], 'cim:Reactance', 'cim:PowerTransformerEnd.x');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.x'], 'cim:Reactance', 'cim:PowerTransformerEnd.x');
        }
        if ('cim:PowerTransformerEnd.b0' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.b0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.b0'], 'cim:Susceptance', 'cim:PowerTransformerEnd.b0');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.b0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.b0'], 'cim:Susceptance', 'cim:PowerTransformerEnd.b0');
        }
        if ('cim:PowerTransformerEnd.phaseAngleClock' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.phaseAngleClock'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.phaseAngleClock'], 'cim:Integer', 'cim:PowerTransformerEnd.phaseAngleClock');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.phaseAngleClock'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.phaseAngleClock'], 'cim:Integer', 'cim:PowerTransformerEnd.phaseAngleClock');
        }
        if ('cim:PowerTransformerEnd.g0' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.g0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.g0'], 'cim:Conductance', 'cim:PowerTransformerEnd.g0');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.g0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.g0'], 'cim:Conductance', 'cim:PowerTransformerEnd.g0');
        }
        if ('cim:PowerTransformerEnd.r0' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.r0'], 'cim:Resistance', 'cim:PowerTransformerEnd.r0');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.r0'], 'cim:Resistance', 'cim:PowerTransformerEnd.r0');
        }
        if ('cim:PowerTransformerEnd.x0' in object) {
          attributeEntries['filledEntries']['cim:PowerTransformerEnd.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.x0'], 'cim:Reactance', 'cim:PowerTransformerEnd.x0');
        } else {
          attributeEntries['emptyEntries']['cim:PowerTransformerEnd.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PowerTransformerEnd.x0'], 'cim:Reactance', 'cim:PowerTransformerEnd.x0');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PowerTransformerEnd.PowerTransformer", "cim:PowerTransformerEnd.b", "cim:PowerTransformerEnd.connectionKind", "cim:PowerTransformerEnd.ratedS", "cim:PowerTransformerEnd.g", "cim:PowerTransformerEnd.ratedU", "cim:PowerTransformerEnd.r", "cim:PowerTransformerEnd.x", "cim:PowerTransformerEnd.b0", "cim:PowerTransformerEnd.phaseAngleClock", "cim:PowerTransformerEnd.g0", "cim:PowerTransformerEnd.r0", "cim:PowerTransformerEnd.x0"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TransformerEnd.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PowerTransformerEnd.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PowerTransformerEnd: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PowerTransformerEnd.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PowerTransformerEnd;
  }(TransformerEnd);
  _defineProperty(PowerTransformerEnd, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'PowerTransformer': [CGMESProfile.shortNames.EQ],
    'b': [CGMESProfile.shortNames.EQ],
    'connectionKind': [CGMESProfile.shortNames.EQ],
    'ratedS': [CGMESProfile.shortNames.EQ],
    'g': [CGMESProfile.shortNames.EQ],
    'ratedU': [CGMESProfile.shortNames.EQ],
    'r': [CGMESProfile.shortNames.EQ],
    'x': [CGMESProfile.shortNames.EQ],
    'b0': [CGMESProfile.shortNames.EQ],
    'phaseAngleClock': [CGMESProfile.shortNames.EQ],
    'g0': [CGMESProfile.shortNames.EQ],
    'r0': [CGMESProfile.shortNames.EQ],
    'x0': [CGMESProfile.shortNames.EQ]
  });

  var ProprietaryParameterDynamics = /*#__PURE__*/function (_BaseClass) {
    _inherits(ProprietaryParameterDynamics, _BaseClass);
    var _super = _createSuper(ProprietaryParameterDynamics);
    function ProprietaryParameterDynamics() {
      _classCallCheck(this, ProprietaryParameterDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(ProprietaryParameterDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ProprietaryParameterDynamics";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:ProprietaryParameterDynamics.WindPlantUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.WindPlantUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.WindPlantUserDefined'], 'cim:WindPlantUserDefined', 'cim:ProprietaryParameterDynamics.WindPlantUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.WindPlantUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.WindPlantUserDefined'], 'cim:WindPlantUserDefined', 'cim:ProprietaryParameterDynamics.WindPlantUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.WindType1or2UserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.WindType1or2UserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.WindType1or2UserDefined'], 'cim:WindType1or2UserDefined', 'cim:ProprietaryParameterDynamics.WindType1or2UserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.WindType1or2UserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.WindType1or2UserDefined'], 'cim:WindType1or2UserDefined', 'cim:ProprietaryParameterDynamics.WindType1or2UserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.WindType3or4UserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.WindType3or4UserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.WindType3or4UserDefined'], 'cim:WindType3or4UserDefined', 'cim:ProprietaryParameterDynamics.WindType3or4UserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.WindType3or4UserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.WindType3or4UserDefined'], 'cim:WindType3or4UserDefined', 'cim:ProprietaryParameterDynamics.WindType3or4UserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.SynchronousMachineUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.SynchronousMachineUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.SynchronousMachineUserDefined'], 'cim:SynchronousMachineUserDefined', 'cim:ProprietaryParameterDynamics.SynchronousMachineUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.SynchronousMachineUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.SynchronousMachineUserDefined'], 'cim:SynchronousMachineUserDefined', 'cim:ProprietaryParameterDynamics.SynchronousMachineUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.AsynchronousMachineUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.AsynchronousMachineUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.AsynchronousMachineUserDefined'], 'cim:AsynchronousMachineUserDefined', 'cim:ProprietaryParameterDynamics.AsynchronousMachineUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.AsynchronousMachineUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.AsynchronousMachineUserDefined'], 'cim:AsynchronousMachineUserDefined', 'cim:ProprietaryParameterDynamics.AsynchronousMachineUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.TurbineGovernorUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.TurbineGovernorUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.TurbineGovernorUserDefined'], 'cim:TurbineGovernorUserDefined', 'cim:ProprietaryParameterDynamics.TurbineGovernorUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.TurbineGovernorUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.TurbineGovernorUserDefined'], 'cim:TurbineGovernorUserDefined', 'cim:ProprietaryParameterDynamics.TurbineGovernorUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.TurbineLoadControllerUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.TurbineLoadControllerUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.TurbineLoadControllerUserDefined'], 'cim:TurbineLoadControllerUserDefined', 'cim:ProprietaryParameterDynamics.TurbineLoadControllerUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.TurbineLoadControllerUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.TurbineLoadControllerUserDefined'], 'cim:TurbineLoadControllerUserDefined', 'cim:ProprietaryParameterDynamics.TurbineLoadControllerUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.MechanicalLoadUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.MechanicalLoadUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.MechanicalLoadUserDefined'], 'cim:MechanicalLoadUserDefined', 'cim:ProprietaryParameterDynamics.MechanicalLoadUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.MechanicalLoadUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.MechanicalLoadUserDefined'], 'cim:MechanicalLoadUserDefined', 'cim:ProprietaryParameterDynamics.MechanicalLoadUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.ExcitationSystemUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.ExcitationSystemUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.ExcitationSystemUserDefined'], 'cim:ExcitationSystemUserDefined', 'cim:ProprietaryParameterDynamics.ExcitationSystemUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.ExcitationSystemUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.ExcitationSystemUserDefined'], 'cim:ExcitationSystemUserDefined', 'cim:ProprietaryParameterDynamics.ExcitationSystemUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.OverexcitationLimiterUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.OverexcitationLimiterUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.OverexcitationLimiterUserDefined'], 'cim:OverexcitationLimiterUserDefined', 'cim:ProprietaryParameterDynamics.OverexcitationLimiterUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.OverexcitationLimiterUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.OverexcitationLimiterUserDefined'], 'cim:OverexcitationLimiterUserDefined', 'cim:ProprietaryParameterDynamics.OverexcitationLimiterUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.UnderexcitationLimiterUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.UnderexcitationLimiterUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.UnderexcitationLimiterUserDefined'], 'cim:UnderexcitationLimiterUserDefined', 'cim:ProprietaryParameterDynamics.UnderexcitationLimiterUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.UnderexcitationLimiterUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.UnderexcitationLimiterUserDefined'], 'cim:UnderexcitationLimiterUserDefined', 'cim:ProprietaryParameterDynamics.UnderexcitationLimiterUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.PowerSystemStabilizerUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.PowerSystemStabilizerUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.PowerSystemStabilizerUserDefined'], 'cim:PowerSystemStabilizerUserDefined', 'cim:ProprietaryParameterDynamics.PowerSystemStabilizerUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.PowerSystemStabilizerUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.PowerSystemStabilizerUserDefined'], 'cim:PowerSystemStabilizerUserDefined', 'cim:ProprietaryParameterDynamics.PowerSystemStabilizerUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.DiscontinuousExcitationControlUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.DiscontinuousExcitationControlUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.DiscontinuousExcitationControlUserDefined'], 'cim:DiscontinuousExcitationControlUserDefined', 'cim:ProprietaryParameterDynamics.DiscontinuousExcitationControlUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.DiscontinuousExcitationControlUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.DiscontinuousExcitationControlUserDefined'], 'cim:DiscontinuousExcitationControlUserDefined', 'cim:ProprietaryParameterDynamics.DiscontinuousExcitationControlUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.PFVArControllerType1UserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.PFVArControllerType1UserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.PFVArControllerType1UserDefined'], 'cim:PFVArControllerType1UserDefined', 'cim:ProprietaryParameterDynamics.PFVArControllerType1UserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.PFVArControllerType1UserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.PFVArControllerType1UserDefined'], 'cim:PFVArControllerType1UserDefined', 'cim:ProprietaryParameterDynamics.PFVArControllerType1UserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.VoltageAdjusterUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.VoltageAdjusterUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.VoltageAdjusterUserDefined'], 'cim:VoltageAdjusterUserDefined', 'cim:ProprietaryParameterDynamics.VoltageAdjusterUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.VoltageAdjusterUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.VoltageAdjusterUserDefined'], 'cim:VoltageAdjusterUserDefined', 'cim:ProprietaryParameterDynamics.VoltageAdjusterUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.PFVArControllerType2UserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.PFVArControllerType2UserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.PFVArControllerType2UserDefined'], 'cim:PFVArControllerType2UserDefined', 'cim:ProprietaryParameterDynamics.PFVArControllerType2UserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.PFVArControllerType2UserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.PFVArControllerType2UserDefined'], 'cim:PFVArControllerType2UserDefined', 'cim:ProprietaryParameterDynamics.PFVArControllerType2UserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.VoltageCompensatorUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.VoltageCompensatorUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.VoltageCompensatorUserDefined'], 'cim:VoltageCompensatorUserDefined', 'cim:ProprietaryParameterDynamics.VoltageCompensatorUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.VoltageCompensatorUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.VoltageCompensatorUserDefined'], 'cim:VoltageCompensatorUserDefined', 'cim:ProprietaryParameterDynamics.VoltageCompensatorUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.LoadUserDefined' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.LoadUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.LoadUserDefined'], 'cim:LoadUserDefined', 'cim:ProprietaryParameterDynamics.LoadUserDefined');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.LoadUserDefined'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.LoadUserDefined'], 'cim:LoadUserDefined', 'cim:ProprietaryParameterDynamics.LoadUserDefined');
        }
        if ('cim:ProprietaryParameterDynamics.parameterNumber' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.parameterNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.parameterNumber'], 'cim:Integer', 'cim:ProprietaryParameterDynamics.parameterNumber');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.parameterNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.parameterNumber'], 'cim:Integer', 'cim:ProprietaryParameterDynamics.parameterNumber');
        }
        if ('cim:ProprietaryParameterDynamics.booleanParameterValue' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.booleanParameterValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.booleanParameterValue'], 'cim:Boolean', 'cim:ProprietaryParameterDynamics.booleanParameterValue');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.booleanParameterValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.booleanParameterValue'], 'cim:Boolean', 'cim:ProprietaryParameterDynamics.booleanParameterValue');
        }
        if ('cim:ProprietaryParameterDynamics.integerParameterValue' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.integerParameterValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.integerParameterValue'], 'cim:Integer', 'cim:ProprietaryParameterDynamics.integerParameterValue');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.integerParameterValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.integerParameterValue'], 'cim:Integer', 'cim:ProprietaryParameterDynamics.integerParameterValue');
        }
        if ('cim:ProprietaryParameterDynamics.floatParameterValue' in object) {
          attributeEntries['filledEntries']['cim:ProprietaryParameterDynamics.floatParameterValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.floatParameterValue'], 'cim:Simple_Float', 'cim:ProprietaryParameterDynamics.floatParameterValue');
        } else {
          attributeEntries['emptyEntries']['cim:ProprietaryParameterDynamics.floatParameterValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ProprietaryParameterDynamics.floatParameterValue'], 'cim:Simple_Float', 'cim:ProprietaryParameterDynamics.floatParameterValue');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ProprietaryParameterDynamics.WindPlantUserDefined", "cim:ProprietaryParameterDynamics.WindType1or2UserDefined", "cim:ProprietaryParameterDynamics.WindType3or4UserDefined", "cim:ProprietaryParameterDynamics.SynchronousMachineUserDefined", "cim:ProprietaryParameterDynamics.AsynchronousMachineUserDefined", "cim:ProprietaryParameterDynamics.TurbineGovernorUserDefined", "cim:ProprietaryParameterDynamics.TurbineLoadControllerUserDefined", "cim:ProprietaryParameterDynamics.MechanicalLoadUserDefined", "cim:ProprietaryParameterDynamics.ExcitationSystemUserDefined", "cim:ProprietaryParameterDynamics.OverexcitationLimiterUserDefined", "cim:ProprietaryParameterDynamics.UnderexcitationLimiterUserDefined", "cim:ProprietaryParameterDynamics.PowerSystemStabilizerUserDefined", "cim:ProprietaryParameterDynamics.DiscontinuousExcitationControlUserDefined", "cim:ProprietaryParameterDynamics.PFVArControllerType1UserDefined", "cim:ProprietaryParameterDynamics.VoltageAdjusterUserDefined", "cim:ProprietaryParameterDynamics.PFVArControllerType2UserDefined", "cim:ProprietaryParameterDynamics.VoltageCompensatorUserDefined", "cim:ProprietaryParameterDynamics.LoadUserDefined", "cim:ProprietaryParameterDynamics.parameterNumber", "cim:ProprietaryParameterDynamics.booleanParameterValue", "cim:ProprietaryParameterDynamics.integerParameterValue", "cim:ProprietaryParameterDynamics.floatParameterValue"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ProprietaryParameterDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ProprietaryParameterDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ProprietaryParameterDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ProprietaryParameterDynamics;
  }(BaseClass);
  _defineProperty(ProprietaryParameterDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'WindPlantUserDefined': [CGMESProfile.shortNames.DY],
    'WindType1or2UserDefined': [CGMESProfile.shortNames.DY],
    'WindType3or4UserDefined': [CGMESProfile.shortNames.DY],
    'SynchronousMachineUserDefined': [CGMESProfile.shortNames.DY],
    'AsynchronousMachineUserDefined': [CGMESProfile.shortNames.DY],
    'TurbineGovernorUserDefined': [CGMESProfile.shortNames.DY],
    'TurbineLoadControllerUserDefined': [CGMESProfile.shortNames.DY],
    'MechanicalLoadUserDefined': [CGMESProfile.shortNames.DY],
    'ExcitationSystemUserDefined': [CGMESProfile.shortNames.DY],
    'OverexcitationLimiterUserDefined': [CGMESProfile.shortNames.DY],
    'UnderexcitationLimiterUserDefined': [CGMESProfile.shortNames.DY],
    'PowerSystemStabilizerUserDefined': [CGMESProfile.shortNames.DY],
    'DiscontinuousExcitationControlUserDefined': [CGMESProfile.shortNames.DY],
    'PFVArControllerType1UserDefined': [CGMESProfile.shortNames.DY],
    'VoltageAdjusterUserDefined': [CGMESProfile.shortNames.DY],
    'PFVArControllerType2UserDefined': [CGMESProfile.shortNames.DY],
    'VoltageCompensatorUserDefined': [CGMESProfile.shortNames.DY],
    'LoadUserDefined': [CGMESProfile.shortNames.DY],
    'parameterNumber': [CGMESProfile.shortNames.DY],
    'booleanParameterValue': [CGMESProfile.shortNames.DY],
    'integerParameterValue': [CGMESProfile.shortNames.DY],
    'floatParameterValue': [CGMESProfile.shortNames.DY]
  });

  var Pss1 = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(Pss1, _PowerSystemStabilize);
    var _super = _createSuper(Pss1);
    function Pss1() {
      _classCallCheck(this, Pss1);
      return _super.apply(this, arguments);
    }
    _createClass(Pss1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Pss1";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:Pss1.kw' in object) {
          attributeEntries['filledEntries']['cim:Pss1.kw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.kw'], 'cim:Simple_Float', 'cim:Pss1.kw');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.kw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.kw'], 'cim:Simple_Float', 'cim:Pss1.kw');
        }
        if ('cim:Pss1.kf' in object) {
          attributeEntries['filledEntries']['cim:Pss1.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.kf'], 'cim:Simple_Float', 'cim:Pss1.kf');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.kf'], 'cim:Simple_Float', 'cim:Pss1.kf');
        }
        if ('cim:Pss1.kpe' in object) {
          attributeEntries['filledEntries']['cim:Pss1.kpe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.kpe'], 'cim:Simple_Float', 'cim:Pss1.kpe');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.kpe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.kpe'], 'cim:Simple_Float', 'cim:Pss1.kpe');
        }
        if ('cim:Pss1.pmin' in object) {
          attributeEntries['filledEntries']['cim:Pss1.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.pmin'], 'cim:PU', 'cim:Pss1.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.pmin'], 'cim:PU', 'cim:Pss1.pmin');
        }
        if ('cim:Pss1.ks' in object) {
          attributeEntries['filledEntries']['cim:Pss1.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.ks'], 'cim:Simple_Float', 'cim:Pss1.ks');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.ks'], 'cim:Simple_Float', 'cim:Pss1.ks');
        }
        if ('cim:Pss1.vsmn' in object) {
          attributeEntries['filledEntries']['cim:Pss1.vsmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.vsmn'], 'cim:PU', 'cim:Pss1.vsmn');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.vsmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.vsmn'], 'cim:PU', 'cim:Pss1.vsmn');
        }
        if ('cim:Pss1.vsmx' in object) {
          attributeEntries['filledEntries']['cim:Pss1.vsmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.vsmx'], 'cim:PU', 'cim:Pss1.vsmx');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.vsmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.vsmx'], 'cim:PU', 'cim:Pss1.vsmx');
        }
        if ('cim:Pss1.tpe' in object) {
          attributeEntries['filledEntries']['cim:Pss1.tpe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.tpe'], 'cim:Seconds', 'cim:Pss1.tpe');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.tpe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.tpe'], 'cim:Seconds', 'cim:Pss1.tpe');
        }
        if ('cim:Pss1.t5' in object) {
          attributeEntries['filledEntries']['cim:Pss1.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.t5'], 'cim:Seconds', 'cim:Pss1.t5');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.t5'], 'cim:Seconds', 'cim:Pss1.t5');
        }
        if ('cim:Pss1.t6' in object) {
          attributeEntries['filledEntries']['cim:Pss1.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.t6'], 'cim:Seconds', 'cim:Pss1.t6');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.t6'], 'cim:Seconds', 'cim:Pss1.t6');
        }
        if ('cim:Pss1.t7' in object) {
          attributeEntries['filledEntries']['cim:Pss1.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.t7'], 'cim:Seconds', 'cim:Pss1.t7');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.t7'], 'cim:Seconds', 'cim:Pss1.t7');
        }
        if ('cim:Pss1.t8' in object) {
          attributeEntries['filledEntries']['cim:Pss1.t8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.t8'], 'cim:Seconds', 'cim:Pss1.t8');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.t8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.t8'], 'cim:Seconds', 'cim:Pss1.t8');
        }
        if ('cim:Pss1.t9' in object) {
          attributeEntries['filledEntries']['cim:Pss1.t9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.t9'], 'cim:Seconds', 'cim:Pss1.t9');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.t9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.t9'], 'cim:Seconds', 'cim:Pss1.t9');
        }
        if ('cim:Pss1.t10' in object) {
          attributeEntries['filledEntries']['cim:Pss1.t10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.t10'], 'cim:Seconds', 'cim:Pss1.t10');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.t10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.t10'], 'cim:Seconds', 'cim:Pss1.t10');
        }
        if ('cim:Pss1.vadat' in object) {
          attributeEntries['filledEntries']['cim:Pss1.vadat'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.vadat'], 'cim:Boolean', 'cim:Pss1.vadat');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1.vadat'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1.vadat'], 'cim:Boolean', 'cim:Pss1.vadat');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Pss1.kw", "cim:Pss1.kf", "cim:Pss1.kpe", "cim:Pss1.pmin", "cim:Pss1.ks", "cim:Pss1.vsmn", "cim:Pss1.vsmx", "cim:Pss1.tpe", "cim:Pss1.t5", "cim:Pss1.t6", "cim:Pss1.t7", "cim:Pss1.t8", "cim:Pss1.t9", "cim:Pss1.t10", "cim:Pss1.vadat"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Pss1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Pss1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Pss1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Pss1;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(Pss1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kw': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'kpe': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'vsmn': [CGMESProfile.shortNames.DY],
    'vsmx': [CGMESProfile.shortNames.DY],
    'tpe': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    't7': [CGMESProfile.shortNames.DY],
    't8': [CGMESProfile.shortNames.DY],
    't9': [CGMESProfile.shortNames.DY],
    't10': [CGMESProfile.shortNames.DY],
    'vadat': [CGMESProfile.shortNames.DY]
  });

  var Pss1A = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(Pss1A, _PowerSystemStabilize);
    var _super = _createSuper(Pss1A);
    function Pss1A() {
      _classCallCheck(this, Pss1A);
      return _super.apply(this, arguments);
    }
    _createClass(Pss1A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Pss1A";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:Pss1A.inputSignalType' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.inputSignalType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.inputSignalType'], 'cim:InputSignalKind', 'cim:Pss1A.inputSignalType');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.inputSignalType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.inputSignalType'], 'cim:InputSignalKind', 'cim:Pss1A.inputSignalType');
        }
        if ('cim:Pss1A.a1' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.a1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a1'], 'cim:PU', 'cim:Pss1A.a1');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.a1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a1'], 'cim:PU', 'cim:Pss1A.a1');
        }
        if ('cim:Pss1A.a2' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.a2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a2'], 'cim:PU', 'cim:Pss1A.a2');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.a2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a2'], 'cim:PU', 'cim:Pss1A.a2');
        }
        if ('cim:Pss1A.t1' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.t1'], 'cim:Seconds', 'cim:Pss1A.t1');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.t1'], 'cim:Seconds', 'cim:Pss1A.t1');
        }
        if ('cim:Pss1A.t2' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.t2'], 'cim:Seconds', 'cim:Pss1A.t2');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.t2'], 'cim:Seconds', 'cim:Pss1A.t2');
        }
        if ('cim:Pss1A.t3' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.t3'], 'cim:Seconds', 'cim:Pss1A.t3');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.t3'], 'cim:Seconds', 'cim:Pss1A.t3');
        }
        if ('cim:Pss1A.t4' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.t4'], 'cim:Seconds', 'cim:Pss1A.t4');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.t4'], 'cim:Seconds', 'cim:Pss1A.t4');
        }
        if ('cim:Pss1A.t5' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.t5'], 'cim:Seconds', 'cim:Pss1A.t5');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.t5'], 'cim:Seconds', 'cim:Pss1A.t5');
        }
        if ('cim:Pss1A.t6' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.t6'], 'cim:Seconds', 'cim:Pss1A.t6');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.t6'], 'cim:Seconds', 'cim:Pss1A.t6');
        }
        if ('cim:Pss1A.ks' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.ks'], 'cim:PU', 'cim:Pss1A.ks');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.ks'], 'cim:PU', 'cim:Pss1A.ks');
        }
        if ('cim:Pss1A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.vrmax'], 'cim:PU', 'cim:Pss1A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.vrmax'], 'cim:PU', 'cim:Pss1A.vrmax');
        }
        if ('cim:Pss1A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.vrmin'], 'cim:PU', 'cim:Pss1A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.vrmin'], 'cim:PU', 'cim:Pss1A.vrmin');
        }
        if ('cim:Pss1A.vcu' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.vcu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.vcu'], 'cim:PU', 'cim:Pss1A.vcu');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.vcu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.vcu'], 'cim:PU', 'cim:Pss1A.vcu');
        }
        if ('cim:Pss1A.vcl' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.vcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.vcl'], 'cim:PU', 'cim:Pss1A.vcl');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.vcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.vcl'], 'cim:PU', 'cim:Pss1A.vcl');
        }
        if ('cim:Pss1A.a3' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.a3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a3'], 'cim:PU', 'cim:Pss1A.a3');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.a3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a3'], 'cim:PU', 'cim:Pss1A.a3');
        }
        if ('cim:Pss1A.a4' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.a4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a4'], 'cim:PU', 'cim:Pss1A.a4');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.a4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a4'], 'cim:PU', 'cim:Pss1A.a4');
        }
        if ('cim:Pss1A.a5' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.a5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a5'], 'cim:PU', 'cim:Pss1A.a5');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.a5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a5'], 'cim:PU', 'cim:Pss1A.a5');
        }
        if ('cim:Pss1A.a6' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.a6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a6'], 'cim:PU', 'cim:Pss1A.a6');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.a6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a6'], 'cim:PU', 'cim:Pss1A.a6');
        }
        if ('cim:Pss1A.a7' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.a7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a7'], 'cim:PU', 'cim:Pss1A.a7');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.a7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a7'], 'cim:PU', 'cim:Pss1A.a7');
        }
        if ('cim:Pss1A.a8' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.a8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a8'], 'cim:PU', 'cim:Pss1A.a8');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.a8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.a8'], 'cim:PU', 'cim:Pss1A.a8');
        }
        if ('cim:Pss1A.kd' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.kd'], 'cim:Boolean', 'cim:Pss1A.kd');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.kd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.kd'], 'cim:Boolean', 'cim:Pss1A.kd');
        }
        if ('cim:Pss1A.tdelay' in object) {
          attributeEntries['filledEntries']['cim:Pss1A.tdelay'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.tdelay'], 'cim:Seconds', 'cim:Pss1A.tdelay');
        } else {
          attributeEntries['emptyEntries']['cim:Pss1A.tdelay'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss1A.tdelay'], 'cim:Seconds', 'cim:Pss1A.tdelay');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Pss1A.inputSignalType", "cim:Pss1A.a1", "cim:Pss1A.a2", "cim:Pss1A.t1", "cim:Pss1A.t2", "cim:Pss1A.t3", "cim:Pss1A.t4", "cim:Pss1A.t5", "cim:Pss1A.t6", "cim:Pss1A.ks", "cim:Pss1A.vrmax", "cim:Pss1A.vrmin", "cim:Pss1A.vcu", "cim:Pss1A.vcl", "cim:Pss1A.a3", "cim:Pss1A.a4", "cim:Pss1A.a5", "cim:Pss1A.a6", "cim:Pss1A.a7", "cim:Pss1A.a8", "cim:Pss1A.kd", "cim:Pss1A.tdelay"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Pss1A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Pss1A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Pss1A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Pss1A;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(Pss1A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'inputSignalType': [CGMESProfile.shortNames.DY],
    'a1': [CGMESProfile.shortNames.DY],
    'a2': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY],
    'vcu': [CGMESProfile.shortNames.DY],
    'vcl': [CGMESProfile.shortNames.DY],
    'a3': [CGMESProfile.shortNames.DY],
    'a4': [CGMESProfile.shortNames.DY],
    'a5': [CGMESProfile.shortNames.DY],
    'a6': [CGMESProfile.shortNames.DY],
    'a7': [CGMESProfile.shortNames.DY],
    'a8': [CGMESProfile.shortNames.DY],
    'kd': [CGMESProfile.shortNames.DY],
    'tdelay': [CGMESProfile.shortNames.DY]
  });

  var Pss2B = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(Pss2B, _PowerSystemStabilize);
    var _super = _createSuper(Pss2B);
    function Pss2B() {
      _classCallCheck(this, Pss2B);
      return _super.apply(this, arguments);
    }
    _createClass(Pss2B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Pss2B";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:Pss2B.inputSignal1Type' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.inputSignal1Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.inputSignal1Type'], 'cim:InputSignalKind', 'cim:Pss2B.inputSignal1Type');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.inputSignal1Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.inputSignal1Type'], 'cim:InputSignalKind', 'cim:Pss2B.inputSignal1Type');
        }
        if ('cim:Pss2B.inputSignal2Type' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.inputSignal2Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.inputSignal2Type'], 'cim:InputSignalKind', 'cim:Pss2B.inputSignal2Type');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.inputSignal2Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.inputSignal2Type'], 'cim:InputSignalKind', 'cim:Pss2B.inputSignal2Type');
        }
        if ('cim:Pss2B.vsi1max' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.vsi1max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.vsi1max'], 'cim:PU', 'cim:Pss2B.vsi1max');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.vsi1max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.vsi1max'], 'cim:PU', 'cim:Pss2B.vsi1max');
        }
        if ('cim:Pss2B.vsi1min' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.vsi1min'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.vsi1min'], 'cim:PU', 'cim:Pss2B.vsi1min');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.vsi1min'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.vsi1min'], 'cim:PU', 'cim:Pss2B.vsi1min');
        }
        if ('cim:Pss2B.tw1' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.tw1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.tw1'], 'cim:Seconds', 'cim:Pss2B.tw1');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.tw1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.tw1'], 'cim:Seconds', 'cim:Pss2B.tw1');
        }
        if ('cim:Pss2B.tw2' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.tw2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.tw2'], 'cim:Seconds', 'cim:Pss2B.tw2');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.tw2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.tw2'], 'cim:Seconds', 'cim:Pss2B.tw2');
        }
        if ('cim:Pss2B.vsi2max' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.vsi2max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.vsi2max'], 'cim:PU', 'cim:Pss2B.vsi2max');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.vsi2max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.vsi2max'], 'cim:PU', 'cim:Pss2B.vsi2max');
        }
        if ('cim:Pss2B.vsi2min' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.vsi2min'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.vsi2min'], 'cim:PU', 'cim:Pss2B.vsi2min');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.vsi2min'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.vsi2min'], 'cim:PU', 'cim:Pss2B.vsi2min');
        }
        if ('cim:Pss2B.tw3' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.tw3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.tw3'], 'cim:Seconds', 'cim:Pss2B.tw3');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.tw3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.tw3'], 'cim:Seconds', 'cim:Pss2B.tw3');
        }
        if ('cim:Pss2B.tw4' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.tw4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.tw4'], 'cim:Seconds', 'cim:Pss2B.tw4');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.tw4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.tw4'], 'cim:Seconds', 'cim:Pss2B.tw4');
        }
        if ('cim:Pss2B.t1' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t1'], 'cim:Seconds', 'cim:Pss2B.t1');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t1'], 'cim:Seconds', 'cim:Pss2B.t1');
        }
        if ('cim:Pss2B.t2' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t2'], 'cim:Seconds', 'cim:Pss2B.t2');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t2'], 'cim:Seconds', 'cim:Pss2B.t2');
        }
        if ('cim:Pss2B.t3' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t3'], 'cim:Seconds', 'cim:Pss2B.t3');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t3'], 'cim:Seconds', 'cim:Pss2B.t3');
        }
        if ('cim:Pss2B.t4' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t4'], 'cim:Seconds', 'cim:Pss2B.t4');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t4'], 'cim:Seconds', 'cim:Pss2B.t4');
        }
        if ('cim:Pss2B.t6' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t6'], 'cim:Seconds', 'cim:Pss2B.t6');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t6'], 'cim:Seconds', 'cim:Pss2B.t6');
        }
        if ('cim:Pss2B.t7' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t7'], 'cim:Seconds', 'cim:Pss2B.t7');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t7'], 'cim:Seconds', 'cim:Pss2B.t7');
        }
        if ('cim:Pss2B.t8' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.t8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t8'], 'cim:Seconds', 'cim:Pss2B.t8');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.t8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t8'], 'cim:Seconds', 'cim:Pss2B.t8');
        }
        if ('cim:Pss2B.t9' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.t9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t9'], 'cim:Seconds', 'cim:Pss2B.t9');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.t9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t9'], 'cim:Seconds', 'cim:Pss2B.t9');
        }
        if ('cim:Pss2B.t10' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.t10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t10'], 'cim:Seconds', 'cim:Pss2B.t10');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.t10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t10'], 'cim:Seconds', 'cim:Pss2B.t10');
        }
        if ('cim:Pss2B.t11' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.t11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t11'], 'cim:Seconds', 'cim:Pss2B.t11');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.t11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.t11'], 'cim:Seconds', 'cim:Pss2B.t11');
        }
        if ('cim:Pss2B.ks1' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.ks1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.ks1'], 'cim:PU', 'cim:Pss2B.ks1');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.ks1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.ks1'], 'cim:PU', 'cim:Pss2B.ks1');
        }
        if ('cim:Pss2B.ks2' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.ks2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.ks2'], 'cim:PU', 'cim:Pss2B.ks2');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.ks2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.ks2'], 'cim:PU', 'cim:Pss2B.ks2');
        }
        if ('cim:Pss2B.ks3' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.ks3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.ks3'], 'cim:PU', 'cim:Pss2B.ks3');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.ks3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.ks3'], 'cim:PU', 'cim:Pss2B.ks3');
        }
        if ('cim:Pss2B.ks4' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.ks4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.ks4'], 'cim:PU', 'cim:Pss2B.ks4');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.ks4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.ks4'], 'cim:PU', 'cim:Pss2B.ks4');
        }
        if ('cim:Pss2B.n' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.n'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.n'], 'cim:Integer', 'cim:Pss2B.n');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.n'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.n'], 'cim:Integer', 'cim:Pss2B.n');
        }
        if ('cim:Pss2B.m' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.m'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.m'], 'cim:Integer', 'cim:Pss2B.m');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.m'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.m'], 'cim:Integer', 'cim:Pss2B.m');
        }
        if ('cim:Pss2B.vstmax' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.vstmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.vstmax'], 'cim:PU', 'cim:Pss2B.vstmax');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.vstmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.vstmax'], 'cim:PU', 'cim:Pss2B.vstmax');
        }
        if ('cim:Pss2B.vstmin' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.vstmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.vstmin'], 'cim:PU', 'cim:Pss2B.vstmin');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.vstmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.vstmin'], 'cim:PU', 'cim:Pss2B.vstmin');
        }
        if ('cim:Pss2B.a' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.a'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.a'], 'cim:Simple_Float', 'cim:Pss2B.a');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.a'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.a'], 'cim:Simple_Float', 'cim:Pss2B.a');
        }
        if ('cim:Pss2B.ta' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.ta'], 'cim:Seconds', 'cim:Pss2B.ta');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.ta'], 'cim:Seconds', 'cim:Pss2B.ta');
        }
        if ('cim:Pss2B.tb' in object) {
          attributeEntries['filledEntries']['cim:Pss2B.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.tb'], 'cim:Seconds', 'cim:Pss2B.tb');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2B.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2B.tb'], 'cim:Seconds', 'cim:Pss2B.tb');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Pss2B.inputSignal1Type", "cim:Pss2B.inputSignal2Type", "cim:Pss2B.vsi1max", "cim:Pss2B.vsi1min", "cim:Pss2B.tw1", "cim:Pss2B.tw2", "cim:Pss2B.vsi2max", "cim:Pss2B.vsi2min", "cim:Pss2B.tw3", "cim:Pss2B.tw4", "cim:Pss2B.t1", "cim:Pss2B.t2", "cim:Pss2B.t3", "cim:Pss2B.t4", "cim:Pss2B.t6", "cim:Pss2B.t7", "cim:Pss2B.t8", "cim:Pss2B.t9", "cim:Pss2B.t10", "cim:Pss2B.t11", "cim:Pss2B.ks1", "cim:Pss2B.ks2", "cim:Pss2B.ks3", "cim:Pss2B.ks4", "cim:Pss2B.n", "cim:Pss2B.m", "cim:Pss2B.vstmax", "cim:Pss2B.vstmin", "cim:Pss2B.a", "cim:Pss2B.ta", "cim:Pss2B.tb"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Pss2B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Pss2B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Pss2B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Pss2B;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(Pss2B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'inputSignal1Type': [CGMESProfile.shortNames.DY],
    'inputSignal2Type': [CGMESProfile.shortNames.DY],
    'vsi1max': [CGMESProfile.shortNames.DY],
    'vsi1min': [CGMESProfile.shortNames.DY],
    'tw1': [CGMESProfile.shortNames.DY],
    'tw2': [CGMESProfile.shortNames.DY],
    'vsi2max': [CGMESProfile.shortNames.DY],
    'vsi2min': [CGMESProfile.shortNames.DY],
    'tw3': [CGMESProfile.shortNames.DY],
    'tw4': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    't7': [CGMESProfile.shortNames.DY],
    't8': [CGMESProfile.shortNames.DY],
    't9': [CGMESProfile.shortNames.DY],
    't10': [CGMESProfile.shortNames.DY],
    't11': [CGMESProfile.shortNames.DY],
    'ks1': [CGMESProfile.shortNames.DY],
    'ks2': [CGMESProfile.shortNames.DY],
    'ks3': [CGMESProfile.shortNames.DY],
    'ks4': [CGMESProfile.shortNames.DY],
    'n': [CGMESProfile.shortNames.DY],
    'm': [CGMESProfile.shortNames.DY],
    'vstmax': [CGMESProfile.shortNames.DY],
    'vstmin': [CGMESProfile.shortNames.DY],
    'a': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY]
  });

  var Pss2ST = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(Pss2ST, _PowerSystemStabilize);
    var _super = _createSuper(Pss2ST);
    function Pss2ST() {
      _classCallCheck(this, Pss2ST);
      return _super.apply(this, arguments);
    }
    _createClass(Pss2ST, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Pss2ST";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:Pss2ST.inputSignal1Type' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.inputSignal1Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.inputSignal1Type'], 'cim:InputSignalKind', 'cim:Pss2ST.inputSignal1Type');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.inputSignal1Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.inputSignal1Type'], 'cim:InputSignalKind', 'cim:Pss2ST.inputSignal1Type');
        }
        if ('cim:Pss2ST.inputSignal2Type' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.inputSignal2Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.inputSignal2Type'], 'cim:InputSignalKind', 'cim:Pss2ST.inputSignal2Type');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.inputSignal2Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.inputSignal2Type'], 'cim:InputSignalKind', 'cim:Pss2ST.inputSignal2Type');
        }
        if ('cim:Pss2ST.k1' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.k1'], 'cim:PU', 'cim:Pss2ST.k1');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.k1'], 'cim:PU', 'cim:Pss2ST.k1');
        }
        if ('cim:Pss2ST.k2' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.k2'], 'cim:PU', 'cim:Pss2ST.k2');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.k2'], 'cim:PU', 'cim:Pss2ST.k2');
        }
        if ('cim:Pss2ST.t1' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t1'], 'cim:Seconds', 'cim:Pss2ST.t1');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t1'], 'cim:Seconds', 'cim:Pss2ST.t1');
        }
        if ('cim:Pss2ST.t2' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t2'], 'cim:Seconds', 'cim:Pss2ST.t2');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t2'], 'cim:Seconds', 'cim:Pss2ST.t2');
        }
        if ('cim:Pss2ST.t3' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t3'], 'cim:Seconds', 'cim:Pss2ST.t3');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t3'], 'cim:Seconds', 'cim:Pss2ST.t3');
        }
        if ('cim:Pss2ST.t4' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t4'], 'cim:Seconds', 'cim:Pss2ST.t4');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t4'], 'cim:Seconds', 'cim:Pss2ST.t4');
        }
        if ('cim:Pss2ST.t5' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t5'], 'cim:Seconds', 'cim:Pss2ST.t5');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t5'], 'cim:Seconds', 'cim:Pss2ST.t5');
        }
        if ('cim:Pss2ST.t6' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t6'], 'cim:Seconds', 'cim:Pss2ST.t6');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t6'], 'cim:Seconds', 'cim:Pss2ST.t6');
        }
        if ('cim:Pss2ST.t7' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t7'], 'cim:Seconds', 'cim:Pss2ST.t7');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t7'], 'cim:Seconds', 'cim:Pss2ST.t7');
        }
        if ('cim:Pss2ST.t8' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.t8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t8'], 'cim:Seconds', 'cim:Pss2ST.t8');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.t8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t8'], 'cim:Seconds', 'cim:Pss2ST.t8');
        }
        if ('cim:Pss2ST.t9' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.t9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t9'], 'cim:Seconds', 'cim:Pss2ST.t9');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.t9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t9'], 'cim:Seconds', 'cim:Pss2ST.t9');
        }
        if ('cim:Pss2ST.t10' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.t10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t10'], 'cim:Seconds', 'cim:Pss2ST.t10');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.t10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.t10'], 'cim:Seconds', 'cim:Pss2ST.t10');
        }
        if ('cim:Pss2ST.lsmax' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.lsmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.lsmax'], 'cim:PU', 'cim:Pss2ST.lsmax');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.lsmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.lsmax'], 'cim:PU', 'cim:Pss2ST.lsmax');
        }
        if ('cim:Pss2ST.lsmin' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.lsmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.lsmin'], 'cim:PU', 'cim:Pss2ST.lsmin');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.lsmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.lsmin'], 'cim:PU', 'cim:Pss2ST.lsmin');
        }
        if ('cim:Pss2ST.vcu' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.vcu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.vcu'], 'cim:PU', 'cim:Pss2ST.vcu');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.vcu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.vcu'], 'cim:PU', 'cim:Pss2ST.vcu');
        }
        if ('cim:Pss2ST.vcl' in object) {
          attributeEntries['filledEntries']['cim:Pss2ST.vcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.vcl'], 'cim:PU', 'cim:Pss2ST.vcl');
        } else {
          attributeEntries['emptyEntries']['cim:Pss2ST.vcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss2ST.vcl'], 'cim:PU', 'cim:Pss2ST.vcl');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Pss2ST.inputSignal1Type", "cim:Pss2ST.inputSignal2Type", "cim:Pss2ST.k1", "cim:Pss2ST.k2", "cim:Pss2ST.t1", "cim:Pss2ST.t2", "cim:Pss2ST.t3", "cim:Pss2ST.t4", "cim:Pss2ST.t5", "cim:Pss2ST.t6", "cim:Pss2ST.t7", "cim:Pss2ST.t8", "cim:Pss2ST.t9", "cim:Pss2ST.t10", "cim:Pss2ST.lsmax", "cim:Pss2ST.lsmin", "cim:Pss2ST.vcu", "cim:Pss2ST.vcl"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Pss2ST.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Pss2ST: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Pss2ST.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Pss2ST;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(Pss2ST, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'inputSignal1Type': [CGMESProfile.shortNames.DY],
    'inputSignal2Type': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    't7': [CGMESProfile.shortNames.DY],
    't8': [CGMESProfile.shortNames.DY],
    't9': [CGMESProfile.shortNames.DY],
    't10': [CGMESProfile.shortNames.DY],
    'lsmax': [CGMESProfile.shortNames.DY],
    'lsmin': [CGMESProfile.shortNames.DY],
    'vcu': [CGMESProfile.shortNames.DY],
    'vcl': [CGMESProfile.shortNames.DY]
  });

  var Pss5 = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(Pss5, _PowerSystemStabilize);
    var _super = _createSuper(Pss5);
    function Pss5() {
      _classCallCheck(this, Pss5);
      return _super.apply(this, arguments);
    }
    _createClass(Pss5, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Pss5";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:Pss5.kpe' in object) {
          attributeEntries['filledEntries']['cim:Pss5.kpe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.kpe'], 'cim:Simple_Float', 'cim:Pss5.kpe');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.kpe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.kpe'], 'cim:Simple_Float', 'cim:Pss5.kpe');
        }
        if ('cim:Pss5.kf' in object) {
          attributeEntries['filledEntries']['cim:Pss5.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.kf'], 'cim:Simple_Float', 'cim:Pss5.kf');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.kf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.kf'], 'cim:Simple_Float', 'cim:Pss5.kf');
        }
        if ('cim:Pss5.isfreq' in object) {
          attributeEntries['filledEntries']['cim:Pss5.isfreq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.isfreq'], 'cim:Boolean', 'cim:Pss5.isfreq');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.isfreq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.isfreq'], 'cim:Boolean', 'cim:Pss5.isfreq');
        }
        if ('cim:Pss5.kpss' in object) {
          attributeEntries['filledEntries']['cim:Pss5.kpss'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.kpss'], 'cim:Simple_Float', 'cim:Pss5.kpss');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.kpss'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.kpss'], 'cim:Simple_Float', 'cim:Pss5.kpss');
        }
        if ('cim:Pss5.ctw2' in object) {
          attributeEntries['filledEntries']['cim:Pss5.ctw2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.ctw2'], 'cim:Boolean', 'cim:Pss5.ctw2');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.ctw2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.ctw2'], 'cim:Boolean', 'cim:Pss5.ctw2');
        }
        if ('cim:Pss5.tw1' in object) {
          attributeEntries['filledEntries']['cim:Pss5.tw1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tw1'], 'cim:Seconds', 'cim:Pss5.tw1');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.tw1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tw1'], 'cim:Seconds', 'cim:Pss5.tw1');
        }
        if ('cim:Pss5.tw2' in object) {
          attributeEntries['filledEntries']['cim:Pss5.tw2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tw2'], 'cim:Seconds', 'cim:Pss5.tw2');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.tw2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tw2'], 'cim:Seconds', 'cim:Pss5.tw2');
        }
        if ('cim:Pss5.tl1' in object) {
          attributeEntries['filledEntries']['cim:Pss5.tl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tl1'], 'cim:Seconds', 'cim:Pss5.tl1');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.tl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tl1'], 'cim:Seconds', 'cim:Pss5.tl1');
        }
        if ('cim:Pss5.tl2' in object) {
          attributeEntries['filledEntries']['cim:Pss5.tl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tl2'], 'cim:Seconds', 'cim:Pss5.tl2');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.tl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tl2'], 'cim:Seconds', 'cim:Pss5.tl2');
        }
        if ('cim:Pss5.tl3' in object) {
          attributeEntries['filledEntries']['cim:Pss5.tl3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tl3'], 'cim:Seconds', 'cim:Pss5.tl3');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.tl3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tl3'], 'cim:Seconds', 'cim:Pss5.tl3');
        }
        if ('cim:Pss5.tl4' in object) {
          attributeEntries['filledEntries']['cim:Pss5.tl4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tl4'], 'cim:Seconds', 'cim:Pss5.tl4');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.tl4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tl4'], 'cim:Seconds', 'cim:Pss5.tl4');
        }
        if ('cim:Pss5.vsmn' in object) {
          attributeEntries['filledEntries']['cim:Pss5.vsmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.vsmn'], 'cim:PU', 'cim:Pss5.vsmn');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.vsmn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.vsmn'], 'cim:PU', 'cim:Pss5.vsmn');
        }
        if ('cim:Pss5.vsmx' in object) {
          attributeEntries['filledEntries']['cim:Pss5.vsmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.vsmx'], 'cim:PU', 'cim:Pss5.vsmx');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.vsmx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.vsmx'], 'cim:PU', 'cim:Pss5.vsmx');
        }
        if ('cim:Pss5.tpe' in object) {
          attributeEntries['filledEntries']['cim:Pss5.tpe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tpe'], 'cim:Seconds', 'cim:Pss5.tpe');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.tpe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.tpe'], 'cim:Seconds', 'cim:Pss5.tpe');
        }
        if ('cim:Pss5.pmm' in object) {
          attributeEntries['filledEntries']['cim:Pss5.pmm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.pmm'], 'cim:PU', 'cim:Pss5.pmm');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.pmm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.pmm'], 'cim:PU', 'cim:Pss5.pmm');
        }
        if ('cim:Pss5.deadband' in object) {
          attributeEntries['filledEntries']['cim:Pss5.deadband'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.deadband'], 'cim:PU', 'cim:Pss5.deadband');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.deadband'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.deadband'], 'cim:PU', 'cim:Pss5.deadband');
        }
        if ('cim:Pss5.vadat' in object) {
          attributeEntries['filledEntries']['cim:Pss5.vadat'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.vadat'], 'cim:Boolean', 'cim:Pss5.vadat');
        } else {
          attributeEntries['emptyEntries']['cim:Pss5.vadat'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Pss5.vadat'], 'cim:Boolean', 'cim:Pss5.vadat');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Pss5.kpe", "cim:Pss5.kf", "cim:Pss5.isfreq", "cim:Pss5.kpss", "cim:Pss5.ctw2", "cim:Pss5.tw1", "cim:Pss5.tw2", "cim:Pss5.tl1", "cim:Pss5.tl2", "cim:Pss5.tl3", "cim:Pss5.tl4", "cim:Pss5.vsmn", "cim:Pss5.vsmx", "cim:Pss5.tpe", "cim:Pss5.pmm", "cim:Pss5.deadband", "cim:Pss5.vadat"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Pss5.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Pss5: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Pss5.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Pss5;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(Pss5, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kpe': [CGMESProfile.shortNames.DY],
    'kf': [CGMESProfile.shortNames.DY],
    'isfreq': [CGMESProfile.shortNames.DY],
    'kpss': [CGMESProfile.shortNames.DY],
    'ctw2': [CGMESProfile.shortNames.DY],
    'tw1': [CGMESProfile.shortNames.DY],
    'tw2': [CGMESProfile.shortNames.DY],
    'tl1': [CGMESProfile.shortNames.DY],
    'tl2': [CGMESProfile.shortNames.DY],
    'tl3': [CGMESProfile.shortNames.DY],
    'tl4': [CGMESProfile.shortNames.DY],
    'vsmn': [CGMESProfile.shortNames.DY],
    'vsmx': [CGMESProfile.shortNames.DY],
    'tpe': [CGMESProfile.shortNames.DY],
    'pmm': [CGMESProfile.shortNames.DY],
    'deadband': [CGMESProfile.shortNames.DY],
    'vadat': [CGMESProfile.shortNames.DY]
  });

  var PssELIN2 = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(PssELIN2, _PowerSystemStabilize);
    var _super = _createSuper(PssELIN2);
    function PssELIN2() {
      _classCallCheck(this, PssELIN2);
      return _super.apply(this, arguments);
    }
    _createClass(PssELIN2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PssELIN2";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PssELIN2.ts1' in object) {
          attributeEntries['filledEntries']['cim:PssELIN2.ts1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ts1'], 'cim:Seconds', 'cim:PssELIN2.ts1');
        } else {
          attributeEntries['emptyEntries']['cim:PssELIN2.ts1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ts1'], 'cim:Seconds', 'cim:PssELIN2.ts1');
        }
        if ('cim:PssELIN2.ts2' in object) {
          attributeEntries['filledEntries']['cim:PssELIN2.ts2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ts2'], 'cim:Seconds', 'cim:PssELIN2.ts2');
        } else {
          attributeEntries['emptyEntries']['cim:PssELIN2.ts2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ts2'], 'cim:Seconds', 'cim:PssELIN2.ts2');
        }
        if ('cim:PssELIN2.ts3' in object) {
          attributeEntries['filledEntries']['cim:PssELIN2.ts3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ts3'], 'cim:Seconds', 'cim:PssELIN2.ts3');
        } else {
          attributeEntries['emptyEntries']['cim:PssELIN2.ts3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ts3'], 'cim:Seconds', 'cim:PssELIN2.ts3');
        }
        if ('cim:PssELIN2.ts4' in object) {
          attributeEntries['filledEntries']['cim:PssELIN2.ts4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ts4'], 'cim:Seconds', 'cim:PssELIN2.ts4');
        } else {
          attributeEntries['emptyEntries']['cim:PssELIN2.ts4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ts4'], 'cim:Seconds', 'cim:PssELIN2.ts4');
        }
        if ('cim:PssELIN2.ts5' in object) {
          attributeEntries['filledEntries']['cim:PssELIN2.ts5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ts5'], 'cim:Seconds', 'cim:PssELIN2.ts5');
        } else {
          attributeEntries['emptyEntries']['cim:PssELIN2.ts5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ts5'], 'cim:Seconds', 'cim:PssELIN2.ts5');
        }
        if ('cim:PssELIN2.ts6' in object) {
          attributeEntries['filledEntries']['cim:PssELIN2.ts6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ts6'], 'cim:Seconds', 'cim:PssELIN2.ts6');
        } else {
          attributeEntries['emptyEntries']['cim:PssELIN2.ts6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ts6'], 'cim:Seconds', 'cim:PssELIN2.ts6');
        }
        if ('cim:PssELIN2.ks1' in object) {
          attributeEntries['filledEntries']['cim:PssELIN2.ks1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ks1'], 'cim:PU', 'cim:PssELIN2.ks1');
        } else {
          attributeEntries['emptyEntries']['cim:PssELIN2.ks1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ks1'], 'cim:PU', 'cim:PssELIN2.ks1');
        }
        if ('cim:PssELIN2.ks2' in object) {
          attributeEntries['filledEntries']['cim:PssELIN2.ks2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ks2'], 'cim:PU', 'cim:PssELIN2.ks2');
        } else {
          attributeEntries['emptyEntries']['cim:PssELIN2.ks2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ks2'], 'cim:PU', 'cim:PssELIN2.ks2');
        }
        if ('cim:PssELIN2.ppss' in object) {
          attributeEntries['filledEntries']['cim:PssELIN2.ppss'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ppss'], 'cim:PU', 'cim:PssELIN2.ppss');
        } else {
          attributeEntries['emptyEntries']['cim:PssELIN2.ppss'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.ppss'], 'cim:PU', 'cim:PssELIN2.ppss');
        }
        if ('cim:PssELIN2.apss' in object) {
          attributeEntries['filledEntries']['cim:PssELIN2.apss'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.apss'], 'cim:PU', 'cim:PssELIN2.apss');
        } else {
          attributeEntries['emptyEntries']['cim:PssELIN2.apss'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.apss'], 'cim:PU', 'cim:PssELIN2.apss');
        }
        if ('cim:PssELIN2.psslim' in object) {
          attributeEntries['filledEntries']['cim:PssELIN2.psslim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.psslim'], 'cim:PU', 'cim:PssELIN2.psslim');
        } else {
          attributeEntries['emptyEntries']['cim:PssELIN2.psslim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssELIN2.psslim'], 'cim:PU', 'cim:PssELIN2.psslim');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PssELIN2.ts1", "cim:PssELIN2.ts2", "cim:PssELIN2.ts3", "cim:PssELIN2.ts4", "cim:PssELIN2.ts5", "cim:PssELIN2.ts6", "cim:PssELIN2.ks1", "cim:PssELIN2.ks2", "cim:PssELIN2.ppss", "cim:PssELIN2.apss", "cim:PssELIN2.psslim"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PssELIN2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PssELIN2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PssELIN2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PssELIN2;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(PssELIN2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ts1': [CGMESProfile.shortNames.DY],
    'ts2': [CGMESProfile.shortNames.DY],
    'ts3': [CGMESProfile.shortNames.DY],
    'ts4': [CGMESProfile.shortNames.DY],
    'ts5': [CGMESProfile.shortNames.DY],
    'ts6': [CGMESProfile.shortNames.DY],
    'ks1': [CGMESProfile.shortNames.DY],
    'ks2': [CGMESProfile.shortNames.DY],
    'ppss': [CGMESProfile.shortNames.DY],
    'apss': [CGMESProfile.shortNames.DY],
    'psslim': [CGMESProfile.shortNames.DY]
  });

  var PssIEEE1A = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(PssIEEE1A, _PowerSystemStabilize);
    var _super = _createSuper(PssIEEE1A);
    function PssIEEE1A() {
      _classCallCheck(this, PssIEEE1A);
      return _super.apply(this, arguments);
    }
    _createClass(PssIEEE1A, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PssIEEE1A";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PssIEEE1A.inputSignalType' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE1A.inputSignalType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.inputSignalType'], 'cim:InputSignalKind', 'cim:PssIEEE1A.inputSignalType');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE1A.inputSignalType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.inputSignalType'], 'cim:InputSignalKind', 'cim:PssIEEE1A.inputSignalType');
        }
        if ('cim:PssIEEE1A.a1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE1A.a1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.a1'], 'cim:PU', 'cim:PssIEEE1A.a1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE1A.a1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.a1'], 'cim:PU', 'cim:PssIEEE1A.a1');
        }
        if ('cim:PssIEEE1A.a2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE1A.a2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.a2'], 'cim:PU', 'cim:PssIEEE1A.a2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE1A.a2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.a2'], 'cim:PU', 'cim:PssIEEE1A.a2');
        }
        if ('cim:PssIEEE1A.t1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE1A.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.t1'], 'cim:Seconds', 'cim:PssIEEE1A.t1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE1A.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.t1'], 'cim:Seconds', 'cim:PssIEEE1A.t1');
        }
        if ('cim:PssIEEE1A.t2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE1A.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.t2'], 'cim:Seconds', 'cim:PssIEEE1A.t2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE1A.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.t2'], 'cim:Seconds', 'cim:PssIEEE1A.t2');
        }
        if ('cim:PssIEEE1A.t3' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE1A.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.t3'], 'cim:Seconds', 'cim:PssIEEE1A.t3');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE1A.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.t3'], 'cim:Seconds', 'cim:PssIEEE1A.t3');
        }
        if ('cim:PssIEEE1A.t4' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE1A.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.t4'], 'cim:Seconds', 'cim:PssIEEE1A.t4');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE1A.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.t4'], 'cim:Seconds', 'cim:PssIEEE1A.t4');
        }
        if ('cim:PssIEEE1A.t5' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE1A.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.t5'], 'cim:Seconds', 'cim:PssIEEE1A.t5');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE1A.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.t5'], 'cim:Seconds', 'cim:PssIEEE1A.t5');
        }
        if ('cim:PssIEEE1A.t6' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE1A.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.t6'], 'cim:Seconds', 'cim:PssIEEE1A.t6');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE1A.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.t6'], 'cim:Seconds', 'cim:PssIEEE1A.t6');
        }
        if ('cim:PssIEEE1A.ks' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE1A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.ks'], 'cim:PU', 'cim:PssIEEE1A.ks');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE1A.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.ks'], 'cim:PU', 'cim:PssIEEE1A.ks');
        }
        if ('cim:PssIEEE1A.vrmax' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.vrmax'], 'cim:PU', 'cim:PssIEEE1A.vrmax');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE1A.vrmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.vrmax'], 'cim:PU', 'cim:PssIEEE1A.vrmax');
        }
        if ('cim:PssIEEE1A.vrmin' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.vrmin'], 'cim:PU', 'cim:PssIEEE1A.vrmin');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE1A.vrmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE1A.vrmin'], 'cim:PU', 'cim:PssIEEE1A.vrmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PssIEEE1A.inputSignalType", "cim:PssIEEE1A.a1", "cim:PssIEEE1A.a2", "cim:PssIEEE1A.t1", "cim:PssIEEE1A.t2", "cim:PssIEEE1A.t3", "cim:PssIEEE1A.t4", "cim:PssIEEE1A.t5", "cim:PssIEEE1A.t6", "cim:PssIEEE1A.ks", "cim:PssIEEE1A.vrmax", "cim:PssIEEE1A.vrmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PssIEEE1A.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PssIEEE1A: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PssIEEE1A.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PssIEEE1A;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(PssIEEE1A, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'inputSignalType': [CGMESProfile.shortNames.DY],
    'a1': [CGMESProfile.shortNames.DY],
    'a2': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'vrmax': [CGMESProfile.shortNames.DY],
    'vrmin': [CGMESProfile.shortNames.DY]
  });

  var PssIEEE2B = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(PssIEEE2B, _PowerSystemStabilize);
    var _super = _createSuper(PssIEEE2B);
    function PssIEEE2B() {
      _classCallCheck(this, PssIEEE2B);
      return _super.apply(this, arguments);
    }
    _createClass(PssIEEE2B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PssIEEE2B";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PssIEEE2B.inputSignal1Type' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.inputSignal1Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.inputSignal1Type'], 'cim:InputSignalKind', 'cim:PssIEEE2B.inputSignal1Type');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.inputSignal1Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.inputSignal1Type'], 'cim:InputSignalKind', 'cim:PssIEEE2B.inputSignal1Type');
        }
        if ('cim:PssIEEE2B.inputSignal2Type' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.inputSignal2Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.inputSignal2Type'], 'cim:InputSignalKind', 'cim:PssIEEE2B.inputSignal2Type');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.inputSignal2Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.inputSignal2Type'], 'cim:InputSignalKind', 'cim:PssIEEE2B.inputSignal2Type');
        }
        if ('cim:PssIEEE2B.vsi1max' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.vsi1max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.vsi1max'], 'cim:PU', 'cim:PssIEEE2B.vsi1max');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.vsi1max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.vsi1max'], 'cim:PU', 'cim:PssIEEE2B.vsi1max');
        }
        if ('cim:PssIEEE2B.vsi1min' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.vsi1min'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.vsi1min'], 'cim:PU', 'cim:PssIEEE2B.vsi1min');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.vsi1min'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.vsi1min'], 'cim:PU', 'cim:PssIEEE2B.vsi1min');
        }
        if ('cim:PssIEEE2B.tw1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.tw1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.tw1'], 'cim:Seconds', 'cim:PssIEEE2B.tw1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.tw1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.tw1'], 'cim:Seconds', 'cim:PssIEEE2B.tw1');
        }
        if ('cim:PssIEEE2B.tw2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.tw2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.tw2'], 'cim:Seconds', 'cim:PssIEEE2B.tw2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.tw2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.tw2'], 'cim:Seconds', 'cim:PssIEEE2B.tw2');
        }
        if ('cim:PssIEEE2B.vsi2max' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.vsi2max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.vsi2max'], 'cim:PU', 'cim:PssIEEE2B.vsi2max');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.vsi2max'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.vsi2max'], 'cim:PU', 'cim:PssIEEE2B.vsi2max');
        }
        if ('cim:PssIEEE2B.vsi2min' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.vsi2min'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.vsi2min'], 'cim:PU', 'cim:PssIEEE2B.vsi2min');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.vsi2min'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.vsi2min'], 'cim:PU', 'cim:PssIEEE2B.vsi2min');
        }
        if ('cim:PssIEEE2B.tw3' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.tw3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.tw3'], 'cim:Seconds', 'cim:PssIEEE2B.tw3');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.tw3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.tw3'], 'cim:Seconds', 'cim:PssIEEE2B.tw3');
        }
        if ('cim:PssIEEE2B.tw4' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.tw4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.tw4'], 'cim:Seconds', 'cim:PssIEEE2B.tw4');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.tw4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.tw4'], 'cim:Seconds', 'cim:PssIEEE2B.tw4');
        }
        if ('cim:PssIEEE2B.t1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t1'], 'cim:Seconds', 'cim:PssIEEE2B.t1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t1'], 'cim:Seconds', 'cim:PssIEEE2B.t1');
        }
        if ('cim:PssIEEE2B.t2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t2'], 'cim:Seconds', 'cim:PssIEEE2B.t2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t2'], 'cim:Seconds', 'cim:PssIEEE2B.t2');
        }
        if ('cim:PssIEEE2B.t3' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t3'], 'cim:Seconds', 'cim:PssIEEE2B.t3');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t3'], 'cim:Seconds', 'cim:PssIEEE2B.t3');
        }
        if ('cim:PssIEEE2B.t4' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t4'], 'cim:Seconds', 'cim:PssIEEE2B.t4');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t4'], 'cim:Seconds', 'cim:PssIEEE2B.t4');
        }
        if ('cim:PssIEEE2B.t6' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t6'], 'cim:Seconds', 'cim:PssIEEE2B.t6');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t6'], 'cim:Seconds', 'cim:PssIEEE2B.t6');
        }
        if ('cim:PssIEEE2B.t7' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t7'], 'cim:Seconds', 'cim:PssIEEE2B.t7');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t7'], 'cim:Seconds', 'cim:PssIEEE2B.t7');
        }
        if ('cim:PssIEEE2B.t8' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.t8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t8'], 'cim:Seconds', 'cim:PssIEEE2B.t8');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.t8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t8'], 'cim:Seconds', 'cim:PssIEEE2B.t8');
        }
        if ('cim:PssIEEE2B.t9' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.t9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t9'], 'cim:Seconds', 'cim:PssIEEE2B.t9');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.t9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t9'], 'cim:Seconds', 'cim:PssIEEE2B.t9');
        }
        if ('cim:PssIEEE2B.t10' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.t10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t10'], 'cim:Seconds', 'cim:PssIEEE2B.t10');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.t10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t10'], 'cim:Seconds', 'cim:PssIEEE2B.t10');
        }
        if ('cim:PssIEEE2B.t11' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.t11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t11'], 'cim:Seconds', 'cim:PssIEEE2B.t11');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.t11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.t11'], 'cim:Seconds', 'cim:PssIEEE2B.t11');
        }
        if ('cim:PssIEEE2B.ks1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.ks1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.ks1'], 'cim:PU', 'cim:PssIEEE2B.ks1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.ks1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.ks1'], 'cim:PU', 'cim:PssIEEE2B.ks1');
        }
        if ('cim:PssIEEE2B.ks2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.ks2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.ks2'], 'cim:PU', 'cim:PssIEEE2B.ks2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.ks2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.ks2'], 'cim:PU', 'cim:PssIEEE2B.ks2');
        }
        if ('cim:PssIEEE2B.ks3' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.ks3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.ks3'], 'cim:PU', 'cim:PssIEEE2B.ks3');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.ks3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.ks3'], 'cim:PU', 'cim:PssIEEE2B.ks3');
        }
        if ('cim:PssIEEE2B.n' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.n'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.n'], 'cim:Integer', 'cim:PssIEEE2B.n');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.n'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.n'], 'cim:Integer', 'cim:PssIEEE2B.n');
        }
        if ('cim:PssIEEE2B.m' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.m'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.m'], 'cim:Integer', 'cim:PssIEEE2B.m');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.m'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.m'], 'cim:Integer', 'cim:PssIEEE2B.m');
        }
        if ('cim:PssIEEE2B.vstmax' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.vstmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.vstmax'], 'cim:PU', 'cim:PssIEEE2B.vstmax');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.vstmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.vstmax'], 'cim:PU', 'cim:PssIEEE2B.vstmax');
        }
        if ('cim:PssIEEE2B.vstmin' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE2B.vstmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.vstmin'], 'cim:PU', 'cim:PssIEEE2B.vstmin');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE2B.vstmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE2B.vstmin'], 'cim:PU', 'cim:PssIEEE2B.vstmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PssIEEE2B.inputSignal1Type", "cim:PssIEEE2B.inputSignal2Type", "cim:PssIEEE2B.vsi1max", "cim:PssIEEE2B.vsi1min", "cim:PssIEEE2B.tw1", "cim:PssIEEE2B.tw2", "cim:PssIEEE2B.vsi2max", "cim:PssIEEE2B.vsi2min", "cim:PssIEEE2B.tw3", "cim:PssIEEE2B.tw4", "cim:PssIEEE2B.t1", "cim:PssIEEE2B.t2", "cim:PssIEEE2B.t3", "cim:PssIEEE2B.t4", "cim:PssIEEE2B.t6", "cim:PssIEEE2B.t7", "cim:PssIEEE2B.t8", "cim:PssIEEE2B.t9", "cim:PssIEEE2B.t10", "cim:PssIEEE2B.t11", "cim:PssIEEE2B.ks1", "cim:PssIEEE2B.ks2", "cim:PssIEEE2B.ks3", "cim:PssIEEE2B.n", "cim:PssIEEE2B.m", "cim:PssIEEE2B.vstmax", "cim:PssIEEE2B.vstmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PssIEEE2B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PssIEEE2B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PssIEEE2B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PssIEEE2B;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(PssIEEE2B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'inputSignal1Type': [CGMESProfile.shortNames.DY],
    'inputSignal2Type': [CGMESProfile.shortNames.DY],
    'vsi1max': [CGMESProfile.shortNames.DY],
    'vsi1min': [CGMESProfile.shortNames.DY],
    'tw1': [CGMESProfile.shortNames.DY],
    'tw2': [CGMESProfile.shortNames.DY],
    'vsi2max': [CGMESProfile.shortNames.DY],
    'vsi2min': [CGMESProfile.shortNames.DY],
    'tw3': [CGMESProfile.shortNames.DY],
    'tw4': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    't7': [CGMESProfile.shortNames.DY],
    't8': [CGMESProfile.shortNames.DY],
    't9': [CGMESProfile.shortNames.DY],
    't10': [CGMESProfile.shortNames.DY],
    't11': [CGMESProfile.shortNames.DY],
    'ks1': [CGMESProfile.shortNames.DY],
    'ks2': [CGMESProfile.shortNames.DY],
    'ks3': [CGMESProfile.shortNames.DY],
    'n': [CGMESProfile.shortNames.DY],
    'm': [CGMESProfile.shortNames.DY],
    'vstmax': [CGMESProfile.shortNames.DY],
    'vstmin': [CGMESProfile.shortNames.DY]
  });

  var PssIEEE3B = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(PssIEEE3B, _PowerSystemStabilize);
    var _super = _createSuper(PssIEEE3B);
    function PssIEEE3B() {
      _classCallCheck(this, PssIEEE3B);
      return _super.apply(this, arguments);
    }
    _createClass(PssIEEE3B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PssIEEE3B";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PssIEEE3B.inputSignal1Type' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.inputSignal1Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.inputSignal1Type'], 'cim:InputSignalKind', 'cim:PssIEEE3B.inputSignal1Type');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.inputSignal1Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.inputSignal1Type'], 'cim:InputSignalKind', 'cim:PssIEEE3B.inputSignal1Type');
        }
        if ('cim:PssIEEE3B.inputSignal2Type' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.inputSignal2Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.inputSignal2Type'], 'cim:InputSignalKind', 'cim:PssIEEE3B.inputSignal2Type');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.inputSignal2Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.inputSignal2Type'], 'cim:InputSignalKind', 'cim:PssIEEE3B.inputSignal2Type');
        }
        if ('cim:PssIEEE3B.t1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.t1'], 'cim:Seconds', 'cim:PssIEEE3B.t1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.t1'], 'cim:Seconds', 'cim:PssIEEE3B.t1');
        }
        if ('cim:PssIEEE3B.t2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.t2'], 'cim:Seconds', 'cim:PssIEEE3B.t2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.t2'], 'cim:Seconds', 'cim:PssIEEE3B.t2');
        }
        if ('cim:PssIEEE3B.tw1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.tw1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.tw1'], 'cim:Seconds', 'cim:PssIEEE3B.tw1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.tw1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.tw1'], 'cim:Seconds', 'cim:PssIEEE3B.tw1');
        }
        if ('cim:PssIEEE3B.tw2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.tw2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.tw2'], 'cim:Seconds', 'cim:PssIEEE3B.tw2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.tw2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.tw2'], 'cim:Seconds', 'cim:PssIEEE3B.tw2');
        }
        if ('cim:PssIEEE3B.tw3' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.tw3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.tw3'], 'cim:Seconds', 'cim:PssIEEE3B.tw3');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.tw3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.tw3'], 'cim:Seconds', 'cim:PssIEEE3B.tw3');
        }
        if ('cim:PssIEEE3B.ks1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.ks1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.ks1'], 'cim:PU', 'cim:PssIEEE3B.ks1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.ks1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.ks1'], 'cim:PU', 'cim:PssIEEE3B.ks1');
        }
        if ('cim:PssIEEE3B.ks2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.ks2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.ks2'], 'cim:PU', 'cim:PssIEEE3B.ks2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.ks2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.ks2'], 'cim:PU', 'cim:PssIEEE3B.ks2');
        }
        if ('cim:PssIEEE3B.a1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.a1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a1'], 'cim:PU', 'cim:PssIEEE3B.a1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.a1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a1'], 'cim:PU', 'cim:PssIEEE3B.a1');
        }
        if ('cim:PssIEEE3B.a2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.a2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a2'], 'cim:PU', 'cim:PssIEEE3B.a2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.a2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a2'], 'cim:PU', 'cim:PssIEEE3B.a2');
        }
        if ('cim:PssIEEE3B.a3' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.a3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a3'], 'cim:PU', 'cim:PssIEEE3B.a3');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.a3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a3'], 'cim:PU', 'cim:PssIEEE3B.a3');
        }
        if ('cim:PssIEEE3B.a4' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.a4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a4'], 'cim:PU', 'cim:PssIEEE3B.a4');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.a4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a4'], 'cim:PU', 'cim:PssIEEE3B.a4');
        }
        if ('cim:PssIEEE3B.a5' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.a5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a5'], 'cim:PU', 'cim:PssIEEE3B.a5');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.a5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a5'], 'cim:PU', 'cim:PssIEEE3B.a5');
        }
        if ('cim:PssIEEE3B.a6' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.a6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a6'], 'cim:PU', 'cim:PssIEEE3B.a6');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.a6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a6'], 'cim:PU', 'cim:PssIEEE3B.a6');
        }
        if ('cim:PssIEEE3B.a7' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.a7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a7'], 'cim:PU', 'cim:PssIEEE3B.a7');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.a7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a7'], 'cim:PU', 'cim:PssIEEE3B.a7');
        }
        if ('cim:PssIEEE3B.a8' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.a8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a8'], 'cim:PU', 'cim:PssIEEE3B.a8');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.a8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.a8'], 'cim:PU', 'cim:PssIEEE3B.a8');
        }
        if ('cim:PssIEEE3B.vstmax' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.vstmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.vstmax'], 'cim:PU', 'cim:PssIEEE3B.vstmax');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.vstmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.vstmax'], 'cim:PU', 'cim:PssIEEE3B.vstmax');
        }
        if ('cim:PssIEEE3B.vstmin' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE3B.vstmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.vstmin'], 'cim:PU', 'cim:PssIEEE3B.vstmin');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE3B.vstmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE3B.vstmin'], 'cim:PU', 'cim:PssIEEE3B.vstmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PssIEEE3B.inputSignal1Type", "cim:PssIEEE3B.inputSignal2Type", "cim:PssIEEE3B.t1", "cim:PssIEEE3B.t2", "cim:PssIEEE3B.tw1", "cim:PssIEEE3B.tw2", "cim:PssIEEE3B.tw3", "cim:PssIEEE3B.ks1", "cim:PssIEEE3B.ks2", "cim:PssIEEE3B.a1", "cim:PssIEEE3B.a2", "cim:PssIEEE3B.a3", "cim:PssIEEE3B.a4", "cim:PssIEEE3B.a5", "cim:PssIEEE3B.a6", "cim:PssIEEE3B.a7", "cim:PssIEEE3B.a8", "cim:PssIEEE3B.vstmax", "cim:PssIEEE3B.vstmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PssIEEE3B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PssIEEE3B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PssIEEE3B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PssIEEE3B;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(PssIEEE3B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'inputSignal1Type': [CGMESProfile.shortNames.DY],
    'inputSignal2Type': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    'tw1': [CGMESProfile.shortNames.DY],
    'tw2': [CGMESProfile.shortNames.DY],
    'tw3': [CGMESProfile.shortNames.DY],
    'ks1': [CGMESProfile.shortNames.DY],
    'ks2': [CGMESProfile.shortNames.DY],
    'a1': [CGMESProfile.shortNames.DY],
    'a2': [CGMESProfile.shortNames.DY],
    'a3': [CGMESProfile.shortNames.DY],
    'a4': [CGMESProfile.shortNames.DY],
    'a5': [CGMESProfile.shortNames.DY],
    'a6': [CGMESProfile.shortNames.DY],
    'a7': [CGMESProfile.shortNames.DY],
    'a8': [CGMESProfile.shortNames.DY],
    'vstmax': [CGMESProfile.shortNames.DY],
    'vstmin': [CGMESProfile.shortNames.DY]
  });

  var PssIEEE4B = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(PssIEEE4B, _PowerSystemStabilize);
    var _super = _createSuper(PssIEEE4B);
    function PssIEEE4B() {
      _classCallCheck(this, PssIEEE4B);
      return _super.apply(this, arguments);
    }
    _createClass(PssIEEE4B, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PssIEEE4B";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PssIEEE4B.bwh1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.bwh1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.bwh1'], 'cim:Simple_Float', 'cim:PssIEEE4B.bwh1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.bwh1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.bwh1'], 'cim:Simple_Float', 'cim:PssIEEE4B.bwh1');
        }
        if ('cim:PssIEEE4B.bwh2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.bwh2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.bwh2'], 'cim:Simple_Float', 'cim:PssIEEE4B.bwh2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.bwh2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.bwh2'], 'cim:Simple_Float', 'cim:PssIEEE4B.bwh2');
        }
        if ('cim:PssIEEE4B.bwl1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.bwl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.bwl1'], 'cim:Simple_Float', 'cim:PssIEEE4B.bwl1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.bwl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.bwl1'], 'cim:Simple_Float', 'cim:PssIEEE4B.bwl1');
        }
        if ('cim:PssIEEE4B.bwl2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.bwl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.bwl2'], 'cim:Simple_Float', 'cim:PssIEEE4B.bwl2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.bwl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.bwl2'], 'cim:Simple_Float', 'cim:PssIEEE4B.bwl2');
        }
        if ('cim:PssIEEE4B.kh' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kh'], 'cim:PU', 'cim:PssIEEE4B.kh');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.kh'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kh'], 'cim:PU', 'cim:PssIEEE4B.kh');
        }
        if ('cim:PssIEEE4B.kh1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.kh1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kh1'], 'cim:PU', 'cim:PssIEEE4B.kh1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.kh1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kh1'], 'cim:PU', 'cim:PssIEEE4B.kh1');
        }
        if ('cim:PssIEEE4B.kh11' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.kh11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kh11'], 'cim:PU', 'cim:PssIEEE4B.kh11');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.kh11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kh11'], 'cim:PU', 'cim:PssIEEE4B.kh11');
        }
        if ('cim:PssIEEE4B.kh17' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.kh17'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kh17'], 'cim:PU', 'cim:PssIEEE4B.kh17');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.kh17'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kh17'], 'cim:PU', 'cim:PssIEEE4B.kh17');
        }
        if ('cim:PssIEEE4B.kh2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.kh2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kh2'], 'cim:PU', 'cim:PssIEEE4B.kh2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.kh2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kh2'], 'cim:PU', 'cim:PssIEEE4B.kh2');
        }
        if ('cim:PssIEEE4B.ki' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ki'], 'cim:PU', 'cim:PssIEEE4B.ki');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ki'], 'cim:PU', 'cim:PssIEEE4B.ki');
        }
        if ('cim:PssIEEE4B.ki1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ki1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ki1'], 'cim:PU', 'cim:PssIEEE4B.ki1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ki1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ki1'], 'cim:PU', 'cim:PssIEEE4B.ki1');
        }
        if ('cim:PssIEEE4B.ki11' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ki11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ki11'], 'cim:PU', 'cim:PssIEEE4B.ki11');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ki11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ki11'], 'cim:PU', 'cim:PssIEEE4B.ki11');
        }
        if ('cim:PssIEEE4B.ki17' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ki17'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ki17'], 'cim:PU', 'cim:PssIEEE4B.ki17');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ki17'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ki17'], 'cim:PU', 'cim:PssIEEE4B.ki17');
        }
        if ('cim:PssIEEE4B.ki2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ki2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ki2'], 'cim:PU', 'cim:PssIEEE4B.ki2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ki2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ki2'], 'cim:PU', 'cim:PssIEEE4B.ki2');
        }
        if ('cim:PssIEEE4B.kl' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.kl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kl'], 'cim:PU', 'cim:PssIEEE4B.kl');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.kl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kl'], 'cim:PU', 'cim:PssIEEE4B.kl');
        }
        if ('cim:PssIEEE4B.kl1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.kl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kl1'], 'cim:PU', 'cim:PssIEEE4B.kl1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.kl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kl1'], 'cim:PU', 'cim:PssIEEE4B.kl1');
        }
        if ('cim:PssIEEE4B.kl11' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.kl11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kl11'], 'cim:PU', 'cim:PssIEEE4B.kl11');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.kl11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kl11'], 'cim:PU', 'cim:PssIEEE4B.kl11');
        }
        if ('cim:PssIEEE4B.kl17' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.kl17'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kl17'], 'cim:PU', 'cim:PssIEEE4B.kl17');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.kl17'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kl17'], 'cim:PU', 'cim:PssIEEE4B.kl17');
        }
        if ('cim:PssIEEE4B.kl2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.kl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kl2'], 'cim:PU', 'cim:PssIEEE4B.kl2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.kl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.kl2'], 'cim:PU', 'cim:PssIEEE4B.kl2');
        }
        if ('cim:PssIEEE4B.omeganh1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.omeganh1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.omeganh1'], 'cim:Simple_Float', 'cim:PssIEEE4B.omeganh1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.omeganh1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.omeganh1'], 'cim:Simple_Float', 'cim:PssIEEE4B.omeganh1');
        }
        if ('cim:PssIEEE4B.omeganh2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.omeganh2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.omeganh2'], 'cim:Simple_Float', 'cim:PssIEEE4B.omeganh2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.omeganh2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.omeganh2'], 'cim:Simple_Float', 'cim:PssIEEE4B.omeganh2');
        }
        if ('cim:PssIEEE4B.omeganl1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.omeganl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.omeganl1'], 'cim:Simple_Float', 'cim:PssIEEE4B.omeganl1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.omeganl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.omeganl1'], 'cim:Simple_Float', 'cim:PssIEEE4B.omeganl1');
        }
        if ('cim:PssIEEE4B.omeganl2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.omeganl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.omeganl2'], 'cim:Simple_Float', 'cim:PssIEEE4B.omeganl2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.omeganl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.omeganl2'], 'cim:Simple_Float', 'cim:PssIEEE4B.omeganl2');
        }
        if ('cim:PssIEEE4B.th1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.th1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th1'], 'cim:Seconds', 'cim:PssIEEE4B.th1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.th1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th1'], 'cim:Seconds', 'cim:PssIEEE4B.th1');
        }
        if ('cim:PssIEEE4B.th10' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.th10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th10'], 'cim:Seconds', 'cim:PssIEEE4B.th10');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.th10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th10'], 'cim:Seconds', 'cim:PssIEEE4B.th10');
        }
        if ('cim:PssIEEE4B.th11' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.th11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th11'], 'cim:Seconds', 'cim:PssIEEE4B.th11');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.th11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th11'], 'cim:Seconds', 'cim:PssIEEE4B.th11');
        }
        if ('cim:PssIEEE4B.th12' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.th12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th12'], 'cim:Seconds', 'cim:PssIEEE4B.th12');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.th12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th12'], 'cim:Seconds', 'cim:PssIEEE4B.th12');
        }
        if ('cim:PssIEEE4B.th2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.th2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th2'], 'cim:Seconds', 'cim:PssIEEE4B.th2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.th2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th2'], 'cim:Seconds', 'cim:PssIEEE4B.th2');
        }
        if ('cim:PssIEEE4B.th3' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.th3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th3'], 'cim:Seconds', 'cim:PssIEEE4B.th3');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.th3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th3'], 'cim:Seconds', 'cim:PssIEEE4B.th3');
        }
        if ('cim:PssIEEE4B.th4' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.th4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th4'], 'cim:Seconds', 'cim:PssIEEE4B.th4');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.th4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th4'], 'cim:Seconds', 'cim:PssIEEE4B.th4');
        }
        if ('cim:PssIEEE4B.th5' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.th5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th5'], 'cim:Seconds', 'cim:PssIEEE4B.th5');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.th5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th5'], 'cim:Seconds', 'cim:PssIEEE4B.th5');
        }
        if ('cim:PssIEEE4B.th6' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.th6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th6'], 'cim:Seconds', 'cim:PssIEEE4B.th6');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.th6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th6'], 'cim:Seconds', 'cim:PssIEEE4B.th6');
        }
        if ('cim:PssIEEE4B.th7' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.th7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th7'], 'cim:Seconds', 'cim:PssIEEE4B.th7');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.th7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th7'], 'cim:Seconds', 'cim:PssIEEE4B.th7');
        }
        if ('cim:PssIEEE4B.th8' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.th8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th8'], 'cim:Seconds', 'cim:PssIEEE4B.th8');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.th8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th8'], 'cim:Seconds', 'cim:PssIEEE4B.th8');
        }
        if ('cim:PssIEEE4B.th9' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.th9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th9'], 'cim:Seconds', 'cim:PssIEEE4B.th9');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.th9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.th9'], 'cim:Seconds', 'cim:PssIEEE4B.th9');
        }
        if ('cim:PssIEEE4B.ti1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ti1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti1'], 'cim:Seconds', 'cim:PssIEEE4B.ti1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ti1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti1'], 'cim:Seconds', 'cim:PssIEEE4B.ti1');
        }
        if ('cim:PssIEEE4B.ti10' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ti10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti10'], 'cim:Seconds', 'cim:PssIEEE4B.ti10');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ti10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti10'], 'cim:Seconds', 'cim:PssIEEE4B.ti10');
        }
        if ('cim:PssIEEE4B.ti11' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ti11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti11'], 'cim:Seconds', 'cim:PssIEEE4B.ti11');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ti11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti11'], 'cim:Seconds', 'cim:PssIEEE4B.ti11');
        }
        if ('cim:PssIEEE4B.ti12' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ti12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti12'], 'cim:Seconds', 'cim:PssIEEE4B.ti12');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ti12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti12'], 'cim:Seconds', 'cim:PssIEEE4B.ti12');
        }
        if ('cim:PssIEEE4B.ti2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ti2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti2'], 'cim:Seconds', 'cim:PssIEEE4B.ti2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ti2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti2'], 'cim:Seconds', 'cim:PssIEEE4B.ti2');
        }
        if ('cim:PssIEEE4B.ti3' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ti3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti3'], 'cim:Seconds', 'cim:PssIEEE4B.ti3');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ti3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti3'], 'cim:Seconds', 'cim:PssIEEE4B.ti3');
        }
        if ('cim:PssIEEE4B.ti4' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ti4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti4'], 'cim:Seconds', 'cim:PssIEEE4B.ti4');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ti4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti4'], 'cim:Seconds', 'cim:PssIEEE4B.ti4');
        }
        if ('cim:PssIEEE4B.ti5' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ti5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti5'], 'cim:Seconds', 'cim:PssIEEE4B.ti5');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ti5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti5'], 'cim:Seconds', 'cim:PssIEEE4B.ti5');
        }
        if ('cim:PssIEEE4B.ti6' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ti6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti6'], 'cim:Seconds', 'cim:PssIEEE4B.ti6');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ti6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti6'], 'cim:Seconds', 'cim:PssIEEE4B.ti6');
        }
        if ('cim:PssIEEE4B.ti7' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ti7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti7'], 'cim:Seconds', 'cim:PssIEEE4B.ti7');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ti7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti7'], 'cim:Seconds', 'cim:PssIEEE4B.ti7');
        }
        if ('cim:PssIEEE4B.ti8' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ti8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti8'], 'cim:Seconds', 'cim:PssIEEE4B.ti8');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ti8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti8'], 'cim:Seconds', 'cim:PssIEEE4B.ti8');
        }
        if ('cim:PssIEEE4B.ti9' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.ti9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti9'], 'cim:Seconds', 'cim:PssIEEE4B.ti9');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.ti9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.ti9'], 'cim:Seconds', 'cim:PssIEEE4B.ti9');
        }
        if ('cim:PssIEEE4B.tl1' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.tl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl1'], 'cim:Seconds', 'cim:PssIEEE4B.tl1');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.tl1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl1'], 'cim:Seconds', 'cim:PssIEEE4B.tl1');
        }
        if ('cim:PssIEEE4B.tl10' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.tl10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl10'], 'cim:Seconds', 'cim:PssIEEE4B.tl10');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.tl10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl10'], 'cim:Seconds', 'cim:PssIEEE4B.tl10');
        }
        if ('cim:PssIEEE4B.tl11' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.tl11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl11'], 'cim:Seconds', 'cim:PssIEEE4B.tl11');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.tl11'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl11'], 'cim:Seconds', 'cim:PssIEEE4B.tl11');
        }
        if ('cim:PssIEEE4B.tl12' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.tl12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl12'], 'cim:Seconds', 'cim:PssIEEE4B.tl12');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.tl12'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl12'], 'cim:Seconds', 'cim:PssIEEE4B.tl12');
        }
        if ('cim:PssIEEE4B.tl2' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.tl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl2'], 'cim:Seconds', 'cim:PssIEEE4B.tl2');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.tl2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl2'], 'cim:Seconds', 'cim:PssIEEE4B.tl2');
        }
        if ('cim:PssIEEE4B.tl3' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.tl3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl3'], 'cim:Seconds', 'cim:PssIEEE4B.tl3');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.tl3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl3'], 'cim:Seconds', 'cim:PssIEEE4B.tl3');
        }
        if ('cim:PssIEEE4B.tl4' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.tl4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl4'], 'cim:Seconds', 'cim:PssIEEE4B.tl4');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.tl4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl4'], 'cim:Seconds', 'cim:PssIEEE4B.tl4');
        }
        if ('cim:PssIEEE4B.tl5' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.tl5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl5'], 'cim:Seconds', 'cim:PssIEEE4B.tl5');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.tl5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl5'], 'cim:Seconds', 'cim:PssIEEE4B.tl5');
        }
        if ('cim:PssIEEE4B.tl6' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.tl6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl6'], 'cim:Seconds', 'cim:PssIEEE4B.tl6');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.tl6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl6'], 'cim:Seconds', 'cim:PssIEEE4B.tl6');
        }
        if ('cim:PssIEEE4B.tl7' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.tl7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl7'], 'cim:Seconds', 'cim:PssIEEE4B.tl7');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.tl7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl7'], 'cim:Seconds', 'cim:PssIEEE4B.tl7');
        }
        if ('cim:PssIEEE4B.tl8' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.tl8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl8'], 'cim:Seconds', 'cim:PssIEEE4B.tl8');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.tl8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl8'], 'cim:Seconds', 'cim:PssIEEE4B.tl8');
        }
        if ('cim:PssIEEE4B.tl9' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.tl9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl9'], 'cim:Seconds', 'cim:PssIEEE4B.tl9');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.tl9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.tl9'], 'cim:Seconds', 'cim:PssIEEE4B.tl9');
        }
        if ('cim:PssIEEE4B.vhmax' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.vhmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vhmax'], 'cim:PU', 'cim:PssIEEE4B.vhmax');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.vhmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vhmax'], 'cim:PU', 'cim:PssIEEE4B.vhmax');
        }
        if ('cim:PssIEEE4B.vhmin' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.vhmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vhmin'], 'cim:PU', 'cim:PssIEEE4B.vhmin');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.vhmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vhmin'], 'cim:PU', 'cim:PssIEEE4B.vhmin');
        }
        if ('cim:PssIEEE4B.vimax' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vimax'], 'cim:PU', 'cim:PssIEEE4B.vimax');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.vimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vimax'], 'cim:PU', 'cim:PssIEEE4B.vimax');
        }
        if ('cim:PssIEEE4B.vimin' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vimin'], 'cim:PU', 'cim:PssIEEE4B.vimin');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.vimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vimin'], 'cim:PU', 'cim:PssIEEE4B.vimin');
        }
        if ('cim:PssIEEE4B.vlmax' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.vlmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vlmax'], 'cim:PU', 'cim:PssIEEE4B.vlmax');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.vlmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vlmax'], 'cim:PU', 'cim:PssIEEE4B.vlmax');
        }
        if ('cim:PssIEEE4B.vlmin' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.vlmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vlmin'], 'cim:PU', 'cim:PssIEEE4B.vlmin');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.vlmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vlmin'], 'cim:PU', 'cim:PssIEEE4B.vlmin');
        }
        if ('cim:PssIEEE4B.vstmax' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.vstmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vstmax'], 'cim:PU', 'cim:PssIEEE4B.vstmax');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.vstmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vstmax'], 'cim:PU', 'cim:PssIEEE4B.vstmax');
        }
        if ('cim:PssIEEE4B.vstmin' in object) {
          attributeEntries['filledEntries']['cim:PssIEEE4B.vstmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vstmin'], 'cim:PU', 'cim:PssIEEE4B.vstmin');
        } else {
          attributeEntries['emptyEntries']['cim:PssIEEE4B.vstmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssIEEE4B.vstmin'], 'cim:PU', 'cim:PssIEEE4B.vstmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PssIEEE4B.bwh1", "cim:PssIEEE4B.bwh2", "cim:PssIEEE4B.bwl1", "cim:PssIEEE4B.bwl2", "cim:PssIEEE4B.kh", "cim:PssIEEE4B.kh1", "cim:PssIEEE4B.kh11", "cim:PssIEEE4B.kh17", "cim:PssIEEE4B.kh2", "cim:PssIEEE4B.ki", "cim:PssIEEE4B.ki1", "cim:PssIEEE4B.ki11", "cim:PssIEEE4B.ki17", "cim:PssIEEE4B.ki2", "cim:PssIEEE4B.kl", "cim:PssIEEE4B.kl1", "cim:PssIEEE4B.kl11", "cim:PssIEEE4B.kl17", "cim:PssIEEE4B.kl2", "cim:PssIEEE4B.omeganh1", "cim:PssIEEE4B.omeganh2", "cim:PssIEEE4B.omeganl1", "cim:PssIEEE4B.omeganl2", "cim:PssIEEE4B.th1", "cim:PssIEEE4B.th10", "cim:PssIEEE4B.th11", "cim:PssIEEE4B.th12", "cim:PssIEEE4B.th2", "cim:PssIEEE4B.th3", "cim:PssIEEE4B.th4", "cim:PssIEEE4B.th5", "cim:PssIEEE4B.th6", "cim:PssIEEE4B.th7", "cim:PssIEEE4B.th8", "cim:PssIEEE4B.th9", "cim:PssIEEE4B.ti1", "cim:PssIEEE4B.ti10", "cim:PssIEEE4B.ti11", "cim:PssIEEE4B.ti12", "cim:PssIEEE4B.ti2", "cim:PssIEEE4B.ti3", "cim:PssIEEE4B.ti4", "cim:PssIEEE4B.ti5", "cim:PssIEEE4B.ti6", "cim:PssIEEE4B.ti7", "cim:PssIEEE4B.ti8", "cim:PssIEEE4B.ti9", "cim:PssIEEE4B.tl1", "cim:PssIEEE4B.tl10", "cim:PssIEEE4B.tl11", "cim:PssIEEE4B.tl12", "cim:PssIEEE4B.tl2", "cim:PssIEEE4B.tl3", "cim:PssIEEE4B.tl4", "cim:PssIEEE4B.tl5", "cim:PssIEEE4B.tl6", "cim:PssIEEE4B.tl7", "cim:PssIEEE4B.tl8", "cim:PssIEEE4B.tl9", "cim:PssIEEE4B.vhmax", "cim:PssIEEE4B.vhmin", "cim:PssIEEE4B.vimax", "cim:PssIEEE4B.vimin", "cim:PssIEEE4B.vlmax", "cim:PssIEEE4B.vlmin", "cim:PssIEEE4B.vstmax", "cim:PssIEEE4B.vstmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PssIEEE4B.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PssIEEE4B: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PssIEEE4B.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PssIEEE4B;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(PssIEEE4B, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'bwh1': [CGMESProfile.shortNames.DY],
    'bwh2': [CGMESProfile.shortNames.DY],
    'bwl1': [CGMESProfile.shortNames.DY],
    'bwl2': [CGMESProfile.shortNames.DY],
    'kh': [CGMESProfile.shortNames.DY],
    'kh1': [CGMESProfile.shortNames.DY],
    'kh11': [CGMESProfile.shortNames.DY],
    'kh17': [CGMESProfile.shortNames.DY],
    'kh2': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'ki1': [CGMESProfile.shortNames.DY],
    'ki11': [CGMESProfile.shortNames.DY],
    'ki17': [CGMESProfile.shortNames.DY],
    'ki2': [CGMESProfile.shortNames.DY],
    'kl': [CGMESProfile.shortNames.DY],
    'kl1': [CGMESProfile.shortNames.DY],
    'kl11': [CGMESProfile.shortNames.DY],
    'kl17': [CGMESProfile.shortNames.DY],
    'kl2': [CGMESProfile.shortNames.DY],
    'omeganh1': [CGMESProfile.shortNames.DY],
    'omeganh2': [CGMESProfile.shortNames.DY],
    'omeganl1': [CGMESProfile.shortNames.DY],
    'omeganl2': [CGMESProfile.shortNames.DY],
    'th1': [CGMESProfile.shortNames.DY],
    'th10': [CGMESProfile.shortNames.DY],
    'th11': [CGMESProfile.shortNames.DY],
    'th12': [CGMESProfile.shortNames.DY],
    'th2': [CGMESProfile.shortNames.DY],
    'th3': [CGMESProfile.shortNames.DY],
    'th4': [CGMESProfile.shortNames.DY],
    'th5': [CGMESProfile.shortNames.DY],
    'th6': [CGMESProfile.shortNames.DY],
    'th7': [CGMESProfile.shortNames.DY],
    'th8': [CGMESProfile.shortNames.DY],
    'th9': [CGMESProfile.shortNames.DY],
    'ti1': [CGMESProfile.shortNames.DY],
    'ti10': [CGMESProfile.shortNames.DY],
    'ti11': [CGMESProfile.shortNames.DY],
    'ti12': [CGMESProfile.shortNames.DY],
    'ti2': [CGMESProfile.shortNames.DY],
    'ti3': [CGMESProfile.shortNames.DY],
    'ti4': [CGMESProfile.shortNames.DY],
    'ti5': [CGMESProfile.shortNames.DY],
    'ti6': [CGMESProfile.shortNames.DY],
    'ti7': [CGMESProfile.shortNames.DY],
    'ti8': [CGMESProfile.shortNames.DY],
    'ti9': [CGMESProfile.shortNames.DY],
    'tl1': [CGMESProfile.shortNames.DY],
    'tl10': [CGMESProfile.shortNames.DY],
    'tl11': [CGMESProfile.shortNames.DY],
    'tl12': [CGMESProfile.shortNames.DY],
    'tl2': [CGMESProfile.shortNames.DY],
    'tl3': [CGMESProfile.shortNames.DY],
    'tl4': [CGMESProfile.shortNames.DY],
    'tl5': [CGMESProfile.shortNames.DY],
    'tl6': [CGMESProfile.shortNames.DY],
    'tl7': [CGMESProfile.shortNames.DY],
    'tl8': [CGMESProfile.shortNames.DY],
    'tl9': [CGMESProfile.shortNames.DY],
    'vhmax': [CGMESProfile.shortNames.DY],
    'vhmin': [CGMESProfile.shortNames.DY],
    'vimax': [CGMESProfile.shortNames.DY],
    'vimin': [CGMESProfile.shortNames.DY],
    'vlmax': [CGMESProfile.shortNames.DY],
    'vlmin': [CGMESProfile.shortNames.DY],
    'vstmax': [CGMESProfile.shortNames.DY],
    'vstmin': [CGMESProfile.shortNames.DY]
  });

  var PssPTIST1 = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(PssPTIST1, _PowerSystemStabilize);
    var _super = _createSuper(PssPTIST1);
    function PssPTIST1() {
      _classCallCheck(this, PssPTIST1);
      return _super.apply(this, arguments);
    }
    _createClass(PssPTIST1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PssPTIST1";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PssPTIST1.m' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST1.m'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.m'], 'cim:PU', 'cim:PssPTIST1.m');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST1.m'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.m'], 'cim:PU', 'cim:PssPTIST1.m');
        }
        if ('cim:PssPTIST1.tf' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST1.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.tf'], 'cim:Seconds', 'cim:PssPTIST1.tf');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST1.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.tf'], 'cim:Seconds', 'cim:PssPTIST1.tf');
        }
        if ('cim:PssPTIST1.tp' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST1.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.tp'], 'cim:Seconds', 'cim:PssPTIST1.tp');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST1.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.tp'], 'cim:Seconds', 'cim:PssPTIST1.tp');
        }
        if ('cim:PssPTIST1.t1' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST1.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.t1'], 'cim:Seconds', 'cim:PssPTIST1.t1');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST1.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.t1'], 'cim:Seconds', 'cim:PssPTIST1.t1');
        }
        if ('cim:PssPTIST1.t2' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST1.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.t2'], 'cim:Seconds', 'cim:PssPTIST1.t2');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST1.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.t2'], 'cim:Seconds', 'cim:PssPTIST1.t2');
        }
        if ('cim:PssPTIST1.t3' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST1.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.t3'], 'cim:Seconds', 'cim:PssPTIST1.t3');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST1.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.t3'], 'cim:Seconds', 'cim:PssPTIST1.t3');
        }
        if ('cim:PssPTIST1.t4' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST1.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.t4'], 'cim:Seconds', 'cim:PssPTIST1.t4');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST1.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.t4'], 'cim:Seconds', 'cim:PssPTIST1.t4');
        }
        if ('cim:PssPTIST1.k' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST1.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.k'], 'cim:PU', 'cim:PssPTIST1.k');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST1.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.k'], 'cim:PU', 'cim:PssPTIST1.k');
        }
        if ('cim:PssPTIST1.dtf' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST1.dtf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.dtf'], 'cim:Seconds', 'cim:PssPTIST1.dtf');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST1.dtf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.dtf'], 'cim:Seconds', 'cim:PssPTIST1.dtf');
        }
        if ('cim:PssPTIST1.dtc' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST1.dtc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.dtc'], 'cim:Seconds', 'cim:PssPTIST1.dtc');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST1.dtc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.dtc'], 'cim:Seconds', 'cim:PssPTIST1.dtc');
        }
        if ('cim:PssPTIST1.dtp' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST1.dtp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.dtp'], 'cim:Seconds', 'cim:PssPTIST1.dtp');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST1.dtp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST1.dtp'], 'cim:Seconds', 'cim:PssPTIST1.dtp');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PssPTIST1.m", "cim:PssPTIST1.tf", "cim:PssPTIST1.tp", "cim:PssPTIST1.t1", "cim:PssPTIST1.t2", "cim:PssPTIST1.t3", "cim:PssPTIST1.t4", "cim:PssPTIST1.k", "cim:PssPTIST1.dtf", "cim:PssPTIST1.dtc", "cim:PssPTIST1.dtp"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PssPTIST1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PssPTIST1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PssPTIST1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PssPTIST1;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(PssPTIST1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'm': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    'dtf': [CGMESProfile.shortNames.DY],
    'dtc': [CGMESProfile.shortNames.DY],
    'dtp': [CGMESProfile.shortNames.DY]
  });

  var PssPTIST3 = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(PssPTIST3, _PowerSystemStabilize);
    var _super = _createSuper(PssPTIST3);
    function PssPTIST3() {
      _classCallCheck(this, PssPTIST3);
      return _super.apply(this, arguments);
    }
    _createClass(PssPTIST3, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PssPTIST3";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PssPTIST3.m' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.m'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.m'], 'cim:PU', 'cim:PssPTIST3.m');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.m'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.m'], 'cim:PU', 'cim:PssPTIST3.m');
        }
        if ('cim:PssPTIST3.tf' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.tf'], 'cim:Seconds', 'cim:PssPTIST3.tf');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.tf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.tf'], 'cim:Seconds', 'cim:PssPTIST3.tf');
        }
        if ('cim:PssPTIST3.tp' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.tp'], 'cim:Seconds', 'cim:PssPTIST3.tp');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.tp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.tp'], 'cim:Seconds', 'cim:PssPTIST3.tp');
        }
        if ('cim:PssPTIST3.t1' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.t1'], 'cim:Seconds', 'cim:PssPTIST3.t1');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.t1'], 'cim:Seconds', 'cim:PssPTIST3.t1');
        }
        if ('cim:PssPTIST3.t2' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.t2'], 'cim:Seconds', 'cim:PssPTIST3.t2');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.t2'], 'cim:Seconds', 'cim:PssPTIST3.t2');
        }
        if ('cim:PssPTIST3.t3' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.t3'], 'cim:Seconds', 'cim:PssPTIST3.t3');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.t3'], 'cim:Seconds', 'cim:PssPTIST3.t3');
        }
        if ('cim:PssPTIST3.t4' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.t4'], 'cim:Seconds', 'cim:PssPTIST3.t4');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.t4'], 'cim:Seconds', 'cim:PssPTIST3.t4');
        }
        if ('cim:PssPTIST3.k' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.k'], 'cim:PU', 'cim:PssPTIST3.k');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.k'], 'cim:PU', 'cim:PssPTIST3.k');
        }
        if ('cim:PssPTIST3.dtf' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.dtf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.dtf'], 'cim:Seconds', 'cim:PssPTIST3.dtf');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.dtf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.dtf'], 'cim:Seconds', 'cim:PssPTIST3.dtf');
        }
        if ('cim:PssPTIST3.dtc' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.dtc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.dtc'], 'cim:Seconds', 'cim:PssPTIST3.dtc');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.dtc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.dtc'], 'cim:Seconds', 'cim:PssPTIST3.dtc');
        }
        if ('cim:PssPTIST3.dtp' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.dtp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.dtp'], 'cim:Seconds', 'cim:PssPTIST3.dtp');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.dtp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.dtp'], 'cim:Seconds', 'cim:PssPTIST3.dtp');
        }
        if ('cim:PssPTIST3.t5' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.t5'], 'cim:Seconds', 'cim:PssPTIST3.t5');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.t5'], 'cim:Seconds', 'cim:PssPTIST3.t5');
        }
        if ('cim:PssPTIST3.t6' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.t6'], 'cim:Seconds', 'cim:PssPTIST3.t6');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.t6'], 'cim:Seconds', 'cim:PssPTIST3.t6');
        }
        if ('cim:PssPTIST3.a0' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.a0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.a0'], 'cim:PU', 'cim:PssPTIST3.a0');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.a0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.a0'], 'cim:PU', 'cim:PssPTIST3.a0');
        }
        if ('cim:PssPTIST3.a1' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.a1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.a1'], 'cim:PU', 'cim:PssPTIST3.a1');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.a1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.a1'], 'cim:PU', 'cim:PssPTIST3.a1');
        }
        if ('cim:PssPTIST3.a2' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.a2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.a2'], 'cim:PU', 'cim:PssPTIST3.a2');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.a2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.a2'], 'cim:PU', 'cim:PssPTIST3.a2');
        }
        if ('cim:PssPTIST3.b0' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.b0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.b0'], 'cim:PU', 'cim:PssPTIST3.b0');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.b0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.b0'], 'cim:PU', 'cim:PssPTIST3.b0');
        }
        if ('cim:PssPTIST3.b1' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.b1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.b1'], 'cim:PU', 'cim:PssPTIST3.b1');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.b1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.b1'], 'cim:PU', 'cim:PssPTIST3.b1');
        }
        if ('cim:PssPTIST3.b2' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.b2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.b2'], 'cim:PU', 'cim:PssPTIST3.b2');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.b2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.b2'], 'cim:PU', 'cim:PssPTIST3.b2');
        }
        if ('cim:PssPTIST3.a3' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.a3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.a3'], 'cim:PU', 'cim:PssPTIST3.a3');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.a3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.a3'], 'cim:PU', 'cim:PssPTIST3.a3');
        }
        if ('cim:PssPTIST3.a4' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.a4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.a4'], 'cim:PU', 'cim:PssPTIST3.a4');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.a4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.a4'], 'cim:PU', 'cim:PssPTIST3.a4');
        }
        if ('cim:PssPTIST3.a5' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.a5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.a5'], 'cim:PU', 'cim:PssPTIST3.a5');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.a5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.a5'], 'cim:PU', 'cim:PssPTIST3.a5');
        }
        if ('cim:PssPTIST3.b3' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.b3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.b3'], 'cim:PU', 'cim:PssPTIST3.b3');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.b3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.b3'], 'cim:PU', 'cim:PssPTIST3.b3');
        }
        if ('cim:PssPTIST3.b4' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.b4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.b4'], 'cim:PU', 'cim:PssPTIST3.b4');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.b4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.b4'], 'cim:PU', 'cim:PssPTIST3.b4');
        }
        if ('cim:PssPTIST3.b5' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.b5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.b5'], 'cim:PU', 'cim:PssPTIST3.b5');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.b5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.b5'], 'cim:PU', 'cim:PssPTIST3.b5');
        }
        if ('cim:PssPTIST3.athres' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.athres'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.athres'], 'cim:PU', 'cim:PssPTIST3.athres');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.athres'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.athres'], 'cim:PU', 'cim:PssPTIST3.athres');
        }
        if ('cim:PssPTIST3.dl' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.dl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.dl'], 'cim:PU', 'cim:PssPTIST3.dl');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.dl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.dl'], 'cim:PU', 'cim:PssPTIST3.dl');
        }
        if ('cim:PssPTIST3.al' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.al'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.al'], 'cim:PU', 'cim:PssPTIST3.al');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.al'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.al'], 'cim:PU', 'cim:PssPTIST3.al');
        }
        if ('cim:PssPTIST3.lthres' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.lthres'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.lthres'], 'cim:PU', 'cim:PssPTIST3.lthres');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.lthres'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.lthres'], 'cim:PU', 'cim:PssPTIST3.lthres');
        }
        if ('cim:PssPTIST3.pmin' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.pmin'], 'cim:PU', 'cim:PssPTIST3.pmin');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.pmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.pmin'], 'cim:PU', 'cim:PssPTIST3.pmin');
        }
        if ('cim:PssPTIST3.isw' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.isw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.isw'], 'cim:Boolean', 'cim:PssPTIST3.isw');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.isw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.isw'], 'cim:Boolean', 'cim:PssPTIST3.isw');
        }
        if ('cim:PssPTIST3.nav' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.nav'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.nav'], 'cim:Simple_Float', 'cim:PssPTIST3.nav');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.nav'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.nav'], 'cim:Simple_Float', 'cim:PssPTIST3.nav');
        }
        if ('cim:PssPTIST3.ncl' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.ncl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.ncl'], 'cim:Simple_Float', 'cim:PssPTIST3.ncl');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.ncl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.ncl'], 'cim:Simple_Float', 'cim:PssPTIST3.ncl');
        }
        if ('cim:PssPTIST3.ncr' in object) {
          attributeEntries['filledEntries']['cim:PssPTIST3.ncr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.ncr'], 'cim:Simple_Float', 'cim:PssPTIST3.ncr');
        } else {
          attributeEntries['emptyEntries']['cim:PssPTIST3.ncr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssPTIST3.ncr'], 'cim:Simple_Float', 'cim:PssPTIST3.ncr');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PssPTIST3.m", "cim:PssPTIST3.tf", "cim:PssPTIST3.tp", "cim:PssPTIST3.t1", "cim:PssPTIST3.t2", "cim:PssPTIST3.t3", "cim:PssPTIST3.t4", "cim:PssPTIST3.k", "cim:PssPTIST3.dtf", "cim:PssPTIST3.dtc", "cim:PssPTIST3.dtp", "cim:PssPTIST3.t5", "cim:PssPTIST3.t6", "cim:PssPTIST3.a0", "cim:PssPTIST3.a1", "cim:PssPTIST3.a2", "cim:PssPTIST3.b0", "cim:PssPTIST3.b1", "cim:PssPTIST3.b2", "cim:PssPTIST3.a3", "cim:PssPTIST3.a4", "cim:PssPTIST3.a5", "cim:PssPTIST3.b3", "cim:PssPTIST3.b4", "cim:PssPTIST3.b5", "cim:PssPTIST3.athres", "cim:PssPTIST3.dl", "cim:PssPTIST3.al", "cim:PssPTIST3.lthres", "cim:PssPTIST3.pmin", "cim:PssPTIST3.isw", "cim:PssPTIST3.nav", "cim:PssPTIST3.ncl", "cim:PssPTIST3.ncr"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PssPTIST3.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PssPTIST3: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PssPTIST3.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PssPTIST3;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(PssPTIST3, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'm': [CGMESProfile.shortNames.DY],
    'tf': [CGMESProfile.shortNames.DY],
    'tp': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    'dtf': [CGMESProfile.shortNames.DY],
    'dtc': [CGMESProfile.shortNames.DY],
    'dtp': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    'a0': [CGMESProfile.shortNames.DY],
    'a1': [CGMESProfile.shortNames.DY],
    'a2': [CGMESProfile.shortNames.DY],
    'b0': [CGMESProfile.shortNames.DY],
    'b1': [CGMESProfile.shortNames.DY],
    'b2': [CGMESProfile.shortNames.DY],
    'a3': [CGMESProfile.shortNames.DY],
    'a4': [CGMESProfile.shortNames.DY],
    'a5': [CGMESProfile.shortNames.DY],
    'b3': [CGMESProfile.shortNames.DY],
    'b4': [CGMESProfile.shortNames.DY],
    'b5': [CGMESProfile.shortNames.DY],
    'athres': [CGMESProfile.shortNames.DY],
    'dl': [CGMESProfile.shortNames.DY],
    'al': [CGMESProfile.shortNames.DY],
    'lthres': [CGMESProfile.shortNames.DY],
    'pmin': [CGMESProfile.shortNames.DY],
    'isw': [CGMESProfile.shortNames.DY],
    'nav': [CGMESProfile.shortNames.DY],
    'ncl': [CGMESProfile.shortNames.DY],
    'ncr': [CGMESProfile.shortNames.DY]
  });

  var PssSB4 = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(PssSB4, _PowerSystemStabilize);
    var _super = _createSuper(PssSB4);
    function PssSB4() {
      _classCallCheck(this, PssSB4);
      return _super.apply(this, arguments);
    }
    _createClass(PssSB4, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PssSB4";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PssSB4.tt' in object) {
          attributeEntries['filledEntries']['cim:PssSB4.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.tt'], 'cim:Seconds', 'cim:PssSB4.tt');
        } else {
          attributeEntries['emptyEntries']['cim:PssSB4.tt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.tt'], 'cim:Seconds', 'cim:PssSB4.tt');
        }
        if ('cim:PssSB4.kx' in object) {
          attributeEntries['filledEntries']['cim:PssSB4.kx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.kx'], 'cim:PU', 'cim:PssSB4.kx');
        } else {
          attributeEntries['emptyEntries']['cim:PssSB4.kx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.kx'], 'cim:PU', 'cim:PssSB4.kx');
        }
        if ('cim:PssSB4.tx2' in object) {
          attributeEntries['filledEntries']['cim:PssSB4.tx2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.tx2'], 'cim:Seconds', 'cim:PssSB4.tx2');
        } else {
          attributeEntries['emptyEntries']['cim:PssSB4.tx2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.tx2'], 'cim:Seconds', 'cim:PssSB4.tx2');
        }
        if ('cim:PssSB4.ta' in object) {
          attributeEntries['filledEntries']['cim:PssSB4.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.ta'], 'cim:Seconds', 'cim:PssSB4.ta');
        } else {
          attributeEntries['emptyEntries']['cim:PssSB4.ta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.ta'], 'cim:Seconds', 'cim:PssSB4.ta');
        }
        if ('cim:PssSB4.tx1' in object) {
          attributeEntries['filledEntries']['cim:PssSB4.tx1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.tx1'], 'cim:Seconds', 'cim:PssSB4.tx1');
        } else {
          attributeEntries['emptyEntries']['cim:PssSB4.tx1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.tx1'], 'cim:Seconds', 'cim:PssSB4.tx1');
        }
        if ('cim:PssSB4.tb' in object) {
          attributeEntries['filledEntries']['cim:PssSB4.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.tb'], 'cim:Seconds', 'cim:PssSB4.tb');
        } else {
          attributeEntries['emptyEntries']['cim:PssSB4.tb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.tb'], 'cim:Seconds', 'cim:PssSB4.tb');
        }
        if ('cim:PssSB4.tc' in object) {
          attributeEntries['filledEntries']['cim:PssSB4.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.tc'], 'cim:Seconds', 'cim:PssSB4.tc');
        } else {
          attributeEntries['emptyEntries']['cim:PssSB4.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.tc'], 'cim:Seconds', 'cim:PssSB4.tc');
        }
        if ('cim:PssSB4.td' in object) {
          attributeEntries['filledEntries']['cim:PssSB4.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.td'], 'cim:Seconds', 'cim:PssSB4.td');
        } else {
          attributeEntries['emptyEntries']['cim:PssSB4.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.td'], 'cim:Seconds', 'cim:PssSB4.td');
        }
        if ('cim:PssSB4.te' in object) {
          attributeEntries['filledEntries']['cim:PssSB4.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.te'], 'cim:Seconds', 'cim:PssSB4.te');
        } else {
          attributeEntries['emptyEntries']['cim:PssSB4.te'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.te'], 'cim:Seconds', 'cim:PssSB4.te');
        }
        if ('cim:PssSB4.vsmax' in object) {
          attributeEntries['filledEntries']['cim:PssSB4.vsmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.vsmax'], 'cim:PU', 'cim:PssSB4.vsmax');
        } else {
          attributeEntries['emptyEntries']['cim:PssSB4.vsmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.vsmax'], 'cim:PU', 'cim:PssSB4.vsmax');
        }
        if ('cim:PssSB4.vsmin' in object) {
          attributeEntries['filledEntries']['cim:PssSB4.vsmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.vsmin'], 'cim:PU', 'cim:PssSB4.vsmin');
        } else {
          attributeEntries['emptyEntries']['cim:PssSB4.vsmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSB4.vsmin'], 'cim:PU', 'cim:PssSB4.vsmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PssSB4.tt", "cim:PssSB4.kx", "cim:PssSB4.tx2", "cim:PssSB4.ta", "cim:PssSB4.tx1", "cim:PssSB4.tb", "cim:PssSB4.tc", "cim:PssSB4.td", "cim:PssSB4.te", "cim:PssSB4.vsmax", "cim:PssSB4.vsmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PssSB4.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PssSB4: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PssSB4.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PssSB4;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(PssSB4, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tt': [CGMESProfile.shortNames.DY],
    'kx': [CGMESProfile.shortNames.DY],
    'tx2': [CGMESProfile.shortNames.DY],
    'ta': [CGMESProfile.shortNames.DY],
    'tx1': [CGMESProfile.shortNames.DY],
    'tb': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY],
    'td': [CGMESProfile.shortNames.DY],
    'te': [CGMESProfile.shortNames.DY],
    'vsmax': [CGMESProfile.shortNames.DY],
    'vsmin': [CGMESProfile.shortNames.DY]
  });

  var PssSH = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(PssSH, _PowerSystemStabilize);
    var _super = _createSuper(PssSH);
    function PssSH() {
      _classCallCheck(this, PssSH);
      return _super.apply(this, arguments);
    }
    _createClass(PssSH, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PssSH";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PssSH.k' in object) {
          attributeEntries['filledEntries']['cim:PssSH.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.k'], 'cim:PU', 'cim:PssSH.k');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.k'], 'cim:PU', 'cim:PssSH.k');
        }
        if ('cim:PssSH.k0' in object) {
          attributeEntries['filledEntries']['cim:PssSH.k0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.k0'], 'cim:PU', 'cim:PssSH.k0');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.k0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.k0'], 'cim:PU', 'cim:PssSH.k0');
        }
        if ('cim:PssSH.k1' in object) {
          attributeEntries['filledEntries']['cim:PssSH.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.k1'], 'cim:PU', 'cim:PssSH.k1');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.k1'], 'cim:PU', 'cim:PssSH.k1');
        }
        if ('cim:PssSH.k2' in object) {
          attributeEntries['filledEntries']['cim:PssSH.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.k2'], 'cim:PU', 'cim:PssSH.k2');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.k2'], 'cim:PU', 'cim:PssSH.k2');
        }
        if ('cim:PssSH.k3' in object) {
          attributeEntries['filledEntries']['cim:PssSH.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.k3'], 'cim:PU', 'cim:PssSH.k3');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.k3'], 'cim:PU', 'cim:PssSH.k3');
        }
        if ('cim:PssSH.k4' in object) {
          attributeEntries['filledEntries']['cim:PssSH.k4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.k4'], 'cim:PU', 'cim:PssSH.k4');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.k4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.k4'], 'cim:PU', 'cim:PssSH.k4');
        }
        if ('cim:PssSH.td' in object) {
          attributeEntries['filledEntries']['cim:PssSH.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.td'], 'cim:Seconds', 'cim:PssSH.td');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.td'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.td'], 'cim:Seconds', 'cim:PssSH.td');
        }
        if ('cim:PssSH.t1' in object) {
          attributeEntries['filledEntries']['cim:PssSH.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.t1'], 'cim:Seconds', 'cim:PssSH.t1');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.t1'], 'cim:Seconds', 'cim:PssSH.t1');
        }
        if ('cim:PssSH.t2' in object) {
          attributeEntries['filledEntries']['cim:PssSH.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.t2'], 'cim:Seconds', 'cim:PssSH.t2');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.t2'], 'cim:Seconds', 'cim:PssSH.t2');
        }
        if ('cim:PssSH.t3' in object) {
          attributeEntries['filledEntries']['cim:PssSH.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.t3'], 'cim:Seconds', 'cim:PssSH.t3');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.t3'], 'cim:Seconds', 'cim:PssSH.t3');
        }
        if ('cim:PssSH.t4' in object) {
          attributeEntries['filledEntries']['cim:PssSH.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.t4'], 'cim:Seconds', 'cim:PssSH.t4');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.t4'], 'cim:Seconds', 'cim:PssSH.t4');
        }
        if ('cim:PssSH.vsmax' in object) {
          attributeEntries['filledEntries']['cim:PssSH.vsmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.vsmax'], 'cim:PU', 'cim:PssSH.vsmax');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.vsmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.vsmax'], 'cim:PU', 'cim:PssSH.vsmax');
        }
        if ('cim:PssSH.vsmin' in object) {
          attributeEntries['filledEntries']['cim:PssSH.vsmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.vsmin'], 'cim:PU', 'cim:PssSH.vsmin');
        } else {
          attributeEntries['emptyEntries']['cim:PssSH.vsmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSH.vsmin'], 'cim:PU', 'cim:PssSH.vsmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PssSH.k", "cim:PssSH.k0", "cim:PssSH.k1", "cim:PssSH.k2", "cim:PssSH.k3", "cim:PssSH.k4", "cim:PssSH.td", "cim:PssSH.t1", "cim:PssSH.t2", "cim:PssSH.t3", "cim:PssSH.t4", "cim:PssSH.vsmax", "cim:PssSH.vsmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PssSH.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PssSH: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PssSH.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PssSH;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(PssSH, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY],
    'k0': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    'k3': [CGMESProfile.shortNames.DY],
    'k4': [CGMESProfile.shortNames.DY],
    'td': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    'vsmax': [CGMESProfile.shortNames.DY],
    'vsmin': [CGMESProfile.shortNames.DY]
  });

  var PssSK = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(PssSK, _PowerSystemStabilize);
    var _super = _createSuper(PssSK);
    function PssSK() {
      _classCallCheck(this, PssSK);
      return _super.apply(this, arguments);
    }
    _createClass(PssSK, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PssSK";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PssSK.k1' in object) {
          attributeEntries['filledEntries']['cim:PssSK.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.k1'], 'cim:PU', 'cim:PssSK.k1');
        } else {
          attributeEntries['emptyEntries']['cim:PssSK.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.k1'], 'cim:PU', 'cim:PssSK.k1');
        }
        if ('cim:PssSK.k2' in object) {
          attributeEntries['filledEntries']['cim:PssSK.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.k2'], 'cim:PU', 'cim:PssSK.k2');
        } else {
          attributeEntries['emptyEntries']['cim:PssSK.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.k2'], 'cim:PU', 'cim:PssSK.k2');
        }
        if ('cim:PssSK.k3' in object) {
          attributeEntries['filledEntries']['cim:PssSK.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.k3'], 'cim:PU', 'cim:PssSK.k3');
        } else {
          attributeEntries['emptyEntries']['cim:PssSK.k3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.k3'], 'cim:PU', 'cim:PssSK.k3');
        }
        if ('cim:PssSK.t1' in object) {
          attributeEntries['filledEntries']['cim:PssSK.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.t1'], 'cim:Seconds', 'cim:PssSK.t1');
        } else {
          attributeEntries['emptyEntries']['cim:PssSK.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.t1'], 'cim:Seconds', 'cim:PssSK.t1');
        }
        if ('cim:PssSK.t2' in object) {
          attributeEntries['filledEntries']['cim:PssSK.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.t2'], 'cim:Seconds', 'cim:PssSK.t2');
        } else {
          attributeEntries['emptyEntries']['cim:PssSK.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.t2'], 'cim:Seconds', 'cim:PssSK.t2');
        }
        if ('cim:PssSK.t3' in object) {
          attributeEntries['filledEntries']['cim:PssSK.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.t3'], 'cim:Seconds', 'cim:PssSK.t3');
        } else {
          attributeEntries['emptyEntries']['cim:PssSK.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.t3'], 'cim:Seconds', 'cim:PssSK.t3');
        }
        if ('cim:PssSK.t4' in object) {
          attributeEntries['filledEntries']['cim:PssSK.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.t4'], 'cim:Seconds', 'cim:PssSK.t4');
        } else {
          attributeEntries['emptyEntries']['cim:PssSK.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.t4'], 'cim:Seconds', 'cim:PssSK.t4');
        }
        if ('cim:PssSK.t5' in object) {
          attributeEntries['filledEntries']['cim:PssSK.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.t5'], 'cim:Seconds', 'cim:PssSK.t5');
        } else {
          attributeEntries['emptyEntries']['cim:PssSK.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.t5'], 'cim:Seconds', 'cim:PssSK.t5');
        }
        if ('cim:PssSK.t6' in object) {
          attributeEntries['filledEntries']['cim:PssSK.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.t6'], 'cim:Seconds', 'cim:PssSK.t6');
        } else {
          attributeEntries['emptyEntries']['cim:PssSK.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.t6'], 'cim:Seconds', 'cim:PssSK.t6');
        }
        if ('cim:PssSK.vsmax' in object) {
          attributeEntries['filledEntries']['cim:PssSK.vsmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.vsmax'], 'cim:PU', 'cim:PssSK.vsmax');
        } else {
          attributeEntries['emptyEntries']['cim:PssSK.vsmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.vsmax'], 'cim:PU', 'cim:PssSK.vsmax');
        }
        if ('cim:PssSK.vsmin' in object) {
          attributeEntries['filledEntries']['cim:PssSK.vsmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.vsmin'], 'cim:PU', 'cim:PssSK.vsmin');
        } else {
          attributeEntries['emptyEntries']['cim:PssSK.vsmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssSK.vsmin'], 'cim:PU', 'cim:PssSK.vsmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PssSK.k1", "cim:PssSK.k2", "cim:PssSK.k3", "cim:PssSK.t1", "cim:PssSK.t2", "cim:PssSK.t3", "cim:PssSK.t4", "cim:PssSK.t5", "cim:PssSK.t6", "cim:PssSK.vsmax", "cim:PssSK.vsmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PssSK.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PssSK: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PssSK.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PssSK;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(PssSK, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    'k3': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    'vsmax': [CGMESProfile.shortNames.DY],
    'vsmin': [CGMESProfile.shortNames.DY]
  });

  var PssWECC = /*#__PURE__*/function (_PowerSystemStabilize) {
    _inherits(PssWECC, _PowerSystemStabilize);
    var _super = _createSuper(PssWECC);
    function PssWECC() {
      _classCallCheck(this, PssWECC);
      return _super.apply(this, arguments);
    }
    _createClass(PssWECC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "PssWECC";
        var attributeEntries = PowerSystemStabilizerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:PssWECC.inputSignal1Type' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.inputSignal1Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.inputSignal1Type'], 'cim:InputSignalKind', 'cim:PssWECC.inputSignal1Type');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.inputSignal1Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.inputSignal1Type'], 'cim:InputSignalKind', 'cim:PssWECC.inputSignal1Type');
        }
        if ('cim:PssWECC.inputSignal2Type' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.inputSignal2Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.inputSignal2Type'], 'cim:InputSignalKind', 'cim:PssWECC.inputSignal2Type');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.inputSignal2Type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.inputSignal2Type'], 'cim:InputSignalKind', 'cim:PssWECC.inputSignal2Type');
        }
        if ('cim:PssWECC.k1' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.k1'], 'cim:PU', 'cim:PssWECC.k1');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.k1'], 'cim:PU', 'cim:PssWECC.k1');
        }
        if ('cim:PssWECC.t1' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t1'], 'cim:Seconds', 'cim:PssWECC.t1');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t1'], 'cim:Seconds', 'cim:PssWECC.t1');
        }
        if ('cim:PssWECC.k2' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.k2'], 'cim:PU', 'cim:PssWECC.k2');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.k2'], 'cim:PU', 'cim:PssWECC.k2');
        }
        if ('cim:PssWECC.t2' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t2'], 'cim:Seconds', 'cim:PssWECC.t2');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t2'], 'cim:Seconds', 'cim:PssWECC.t2');
        }
        if ('cim:PssWECC.t3' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t3'], 'cim:Seconds', 'cim:PssWECC.t3');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.t3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t3'], 'cim:Seconds', 'cim:PssWECC.t3');
        }
        if ('cim:PssWECC.t4' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t4'], 'cim:Seconds', 'cim:PssWECC.t4');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.t4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t4'], 'cim:Seconds', 'cim:PssWECC.t4');
        }
        if ('cim:PssWECC.t5' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t5'], 'cim:Seconds', 'cim:PssWECC.t5');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.t5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t5'], 'cim:Seconds', 'cim:PssWECC.t5');
        }
        if ('cim:PssWECC.t6' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t6'], 'cim:Seconds', 'cim:PssWECC.t6');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.t6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t6'], 'cim:Seconds', 'cim:PssWECC.t6');
        }
        if ('cim:PssWECC.t7' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t7'], 'cim:Seconds', 'cim:PssWECC.t7');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.t7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t7'], 'cim:Seconds', 'cim:PssWECC.t7');
        }
        if ('cim:PssWECC.t8' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.t8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t8'], 'cim:Seconds', 'cim:PssWECC.t8');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.t8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t8'], 'cim:Seconds', 'cim:PssWECC.t8');
        }
        if ('cim:PssWECC.t10' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.t10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t10'], 'cim:Seconds', 'cim:PssWECC.t10');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.t10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t10'], 'cim:Seconds', 'cim:PssWECC.t10');
        }
        if ('cim:PssWECC.t9' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.t9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t9'], 'cim:Seconds', 'cim:PssWECC.t9');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.t9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.t9'], 'cim:Seconds', 'cim:PssWECC.t9');
        }
        if ('cim:PssWECC.vsmax' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.vsmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.vsmax'], 'cim:PU', 'cim:PssWECC.vsmax');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.vsmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.vsmax'], 'cim:PU', 'cim:PssWECC.vsmax');
        }
        if ('cim:PssWECC.vsmin' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.vsmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.vsmin'], 'cim:PU', 'cim:PssWECC.vsmin');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.vsmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.vsmin'], 'cim:PU', 'cim:PssWECC.vsmin');
        }
        if ('cim:PssWECC.vcu' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.vcu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.vcu'], 'cim:PU', 'cim:PssWECC.vcu');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.vcu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.vcu'], 'cim:PU', 'cim:PssWECC.vcu');
        }
        if ('cim:PssWECC.vcl' in object) {
          attributeEntries['filledEntries']['cim:PssWECC.vcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.vcl'], 'cim:PU', 'cim:PssWECC.vcl');
        } else {
          attributeEntries['emptyEntries']['cim:PssWECC.vcl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['PssWECC.vcl'], 'cim:PU', 'cim:PssWECC.vcl');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:PssWECC.inputSignal1Type", "cim:PssWECC.inputSignal2Type", "cim:PssWECC.k1", "cim:PssWECC.t1", "cim:PssWECC.k2", "cim:PssWECC.t2", "cim:PssWECC.t3", "cim:PssWECC.t4", "cim:PssWECC.t5", "cim:PssWECC.t6", "cim:PssWECC.t7", "cim:PssWECC.t8", "cim:PssWECC.t10", "cim:PssWECC.t9", "cim:PssWECC.vsmax", "cim:PssWECC.vsmin", "cim:PssWECC.vcu", "cim:PssWECC.vcl"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemStabilizerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!PssWECC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class PssWECC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = PssWECC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return PssWECC;
  }(PowerSystemStabilizerDynamics);
  _defineProperty(PssWECC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'inputSignal1Type': [CGMESProfile.shortNames.DY],
    'inputSignal2Type': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    't3': [CGMESProfile.shortNames.DY],
    't4': [CGMESProfile.shortNames.DY],
    't5': [CGMESProfile.shortNames.DY],
    't6': [CGMESProfile.shortNames.DY],
    't7': [CGMESProfile.shortNames.DY],
    't8': [CGMESProfile.shortNames.DY],
    't10': [CGMESProfile.shortNames.DY],
    't9': [CGMESProfile.shortNames.DY],
    'vsmax': [CGMESProfile.shortNames.DY],
    'vsmin': [CGMESProfile.shortNames.DY],
    'vcu': [CGMESProfile.shortNames.DY],
    'vcl': [CGMESProfile.shortNames.DY]
  });

  var RaiseLowerCommand = /*#__PURE__*/function (_AnalogControl) {
    _inherits(RaiseLowerCommand, _AnalogControl);
    var _super = _createSuper(RaiseLowerCommand);
    function RaiseLowerCommand() {
      _classCallCheck(this, RaiseLowerCommand);
      return _super.apply(this, arguments);
    }
    _createClass(RaiseLowerCommand, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RaiseLowerCommand";
        var attributeEntries = AnalogControl.attributeHTML(object, cimmenu, classType);
        if ('cim:RaiseLowerCommand.ValueAliasSet' in object) {
          attributeEntries['filledEntries']['cim:RaiseLowerCommand.ValueAliasSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RaiseLowerCommand.ValueAliasSet'], 'cim:ValueAliasSet', 'cim:RaiseLowerCommand.ValueAliasSet');
        } else {
          attributeEntries['emptyEntries']['cim:RaiseLowerCommand.ValueAliasSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RaiseLowerCommand.ValueAliasSet'], 'cim:ValueAliasSet', 'cim:RaiseLowerCommand.ValueAliasSet');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RaiseLowerCommand.ValueAliasSet"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (AnalogControl.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RaiseLowerCommand.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RaiseLowerCommand: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RaiseLowerCommand.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return RaiseLowerCommand;
  }(AnalogControl);
  _defineProperty(RaiseLowerCommand, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'ValueAliasSet': [CGMESProfile.shortNames.EQ]
  });

  var RatioTapChanger = /*#__PURE__*/function (_TapChanger) {
    _inherits(RatioTapChanger, _TapChanger);
    var _super = _createSuper(RatioTapChanger);
    function RatioTapChanger() {
      _classCallCheck(this, RatioTapChanger);
      return _super.apply(this, arguments);
    }
    _createClass(RatioTapChanger, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RatioTapChanger";
        var attributeEntries = TapChanger.attributeHTML(object, cimmenu, classType);
        if ('cim:RatioTapChanger.tculControlMode' in object) {
          attributeEntries['filledEntries']['cim:RatioTapChanger.tculControlMode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RatioTapChanger.tculControlMode'], 'cim:TransformerControlMode', 'cim:RatioTapChanger.tculControlMode');
        } else {
          attributeEntries['emptyEntries']['cim:RatioTapChanger.tculControlMode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RatioTapChanger.tculControlMode'], 'cim:TransformerControlMode', 'cim:RatioTapChanger.tculControlMode');
        }
        if ('cim:RatioTapChanger.stepVoltageIncrement' in object) {
          attributeEntries['filledEntries']['cim:RatioTapChanger.stepVoltageIncrement'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RatioTapChanger.stepVoltageIncrement'], 'cim:PerCent', 'cim:RatioTapChanger.stepVoltageIncrement');
        } else {
          attributeEntries['emptyEntries']['cim:RatioTapChanger.stepVoltageIncrement'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RatioTapChanger.stepVoltageIncrement'], 'cim:PerCent', 'cim:RatioTapChanger.stepVoltageIncrement');
        }
        if ('cim:RatioTapChanger.RatioTapChangerTable' in object) {
          attributeEntries['filledEntries']['cim:RatioTapChanger.RatioTapChangerTable'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RatioTapChanger.RatioTapChangerTable'], 'cim:RatioTapChangerTable', 'cim:RatioTapChanger.RatioTapChangerTable');
        } else {
          attributeEntries['emptyEntries']['cim:RatioTapChanger.RatioTapChangerTable'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RatioTapChanger.RatioTapChangerTable'], 'cim:RatioTapChangerTable', 'cim:RatioTapChanger.RatioTapChangerTable');
        }
        if ('cim:RatioTapChanger.TransformerEnd' in object) {
          attributeEntries['filledEntries']['cim:RatioTapChanger.TransformerEnd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RatioTapChanger.TransformerEnd'], 'cim:TransformerEnd', 'cim:RatioTapChanger.TransformerEnd');
        } else {
          attributeEntries['emptyEntries']['cim:RatioTapChanger.TransformerEnd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RatioTapChanger.TransformerEnd'], 'cim:TransformerEnd', 'cim:RatioTapChanger.TransformerEnd');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RatioTapChanger.tculControlMode", "cim:RatioTapChanger.stepVoltageIncrement", "cim:RatioTapChanger.RatioTapChangerTable", "cim:RatioTapChanger.TransformerEnd"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TapChanger.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RatioTapChanger.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RatioTapChanger: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RatioTapChanger.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return RatioTapChanger;
  }(TapChanger);
  _defineProperty(RatioTapChanger, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'tculControlMode': [CGMESProfile.shortNames.EQ],
    'stepVoltageIncrement': [CGMESProfile.shortNames.EQ],
    'RatioTapChangerTable': [CGMESProfile.shortNames.EQ],
    'TransformerEnd': [CGMESProfile.shortNames.EQ]
  });

  var RatioTapChangerTable = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(RatioTapChangerTable, _IdentifiedObject);
    var _super = _createSuper(RatioTapChangerTable);
    function RatioTapChangerTable() {
      _classCallCheck(this, RatioTapChangerTable);
      return _super.apply(this, arguments);
    }
    _createClass(RatioTapChangerTable, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RatioTapChangerTable";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:RatioTapChangerTable.RatioTapChangerTablePoint' in object) {
          attributeEntries['filledEntries']['cim:RatioTapChangerTable.RatioTapChangerTablePoint'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RatioTapChangerTable.RatioTapChangerTablePoint'], 'cim:RatioTapChangerTablePoint', 'cim:RatioTapChangerTable.RatioTapChangerTablePoint');
        } else {
          attributeEntries['emptyEntries']['cim:RatioTapChangerTable.RatioTapChangerTablePoint'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RatioTapChangerTable.RatioTapChangerTablePoint'], 'cim:RatioTapChangerTablePoint', 'cim:RatioTapChangerTable.RatioTapChangerTablePoint');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RatioTapChangerTable.RatioTapChangerTablePoint"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RatioTapChangerTable.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RatioTapChangerTable: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RatioTapChangerTable.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return RatioTapChangerTable;
  }(IdentifiedObject);
  _defineProperty(RatioTapChangerTable, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'RatioTapChangerTablePoint': [CGMESProfile.shortNames.EQ]
  });

  var RatioTapChangerTablePoint = /*#__PURE__*/function (_TapChangerTablePoint) {
    _inherits(RatioTapChangerTablePoint, _TapChangerTablePoint);
    var _super = _createSuper(RatioTapChangerTablePoint);
    function RatioTapChangerTablePoint() {
      _classCallCheck(this, RatioTapChangerTablePoint);
      return _super.apply(this, arguments);
    }
    _createClass(RatioTapChangerTablePoint, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RatioTapChangerTablePoint";
        var attributeEntries = TapChangerTablePoint.attributeHTML(object, cimmenu, classType);
        if ('cim:RatioTapChangerTablePoint.RatioTapChangerTable' in object) {
          attributeEntries['filledEntries']['cim:RatioTapChangerTablePoint.RatioTapChangerTable'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RatioTapChangerTablePoint.RatioTapChangerTable'], 'cim:RatioTapChangerTable', 'cim:RatioTapChangerTablePoint.RatioTapChangerTable');
        } else {
          attributeEntries['emptyEntries']['cim:RatioTapChangerTablePoint.RatioTapChangerTable'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RatioTapChangerTablePoint.RatioTapChangerTable'], 'cim:RatioTapChangerTable', 'cim:RatioTapChangerTablePoint.RatioTapChangerTable');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RatioTapChangerTablePoint.RatioTapChangerTable"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TapChangerTablePoint.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RatioTapChangerTablePoint.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RatioTapChangerTablePoint: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RatioTapChangerTablePoint.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return RatioTapChangerTablePoint;
  }(TapChangerTablePoint);
  _defineProperty(RatioTapChangerTablePoint, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'RatioTapChangerTable': [CGMESProfile.shortNames.EQ]
  });

  var Reactance = /*#__PURE__*/function (_BaseClass) {
    _inherits(Reactance, _BaseClass);
    var _super = _createSuper(Reactance);
    function Reactance() {
      _classCallCheck(this, Reactance);
      return _super.apply(this, arguments);
    }
    _createClass(Reactance, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Reactance";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Reactance.value' in object) {
          attributeEntries['filledEntries']['cim:Reactance.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Reactance.value'], 'cim:Float', 'cim:Reactance.value');
        } else {
          attributeEntries['emptyEntries']['cim:Reactance.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Reactance.value'], 'cim:Float', 'cim:Reactance.value');
        }
        if ('cim:Reactance.unit' in object) {
          attributeEntries['filledEntries']['cim:Reactance.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Reactance.unit'], 'cim:UnitSymbol', 'cim:Reactance.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Reactance.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Reactance.unit'], 'cim:UnitSymbol', 'cim:Reactance.unit');
        }
        if ('cim:Reactance.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Reactance.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Reactance.multiplier'], 'cim:UnitMultiplier', 'cim:Reactance.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Reactance.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Reactance.multiplier'], 'cim:UnitMultiplier', 'cim:Reactance.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Reactance.value", "cim:Reactance.unit", "cim:Reactance.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Reactance.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Reactance: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Reactance.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Reactance;
  }(BaseClass);
  _defineProperty(Reactance, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ]
  });

  var ReactiveCapabilityCurve = /*#__PURE__*/function (_Curve) {
    _inherits(ReactiveCapabilityCurve, _Curve);
    var _super = _createSuper(ReactiveCapabilityCurve);
    function ReactiveCapabilityCurve() {
      _classCallCheck(this, ReactiveCapabilityCurve);
      return _super.apply(this, arguments);
    }
    _createClass(ReactiveCapabilityCurve, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ReactiveCapabilityCurve";
        var attributeEntries = Curve.attributeHTML(object, cimmenu, classType);
        if ('cim:ReactiveCapabilityCurve.InitiallyUsedBySynchronousMachines' in object) {
          attributeEntries['filledEntries']['cim:ReactiveCapabilityCurve.InitiallyUsedBySynchronousMachines'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ReactiveCapabilityCurve.InitiallyUsedBySynchronousMachines'], 'cim:SynchronousMachine', 'cim:ReactiveCapabilityCurve.InitiallyUsedBySynchronousMachines');
        } else {
          attributeEntries['emptyEntries']['cim:ReactiveCapabilityCurve.InitiallyUsedBySynchronousMachines'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ReactiveCapabilityCurve.InitiallyUsedBySynchronousMachines'], 'cim:SynchronousMachine', 'cim:ReactiveCapabilityCurve.InitiallyUsedBySynchronousMachines');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ReactiveCapabilityCurve.InitiallyUsedBySynchronousMachines"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Curve.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ReactiveCapabilityCurve.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ReactiveCapabilityCurve: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ReactiveCapabilityCurve.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ReactiveCapabilityCurve;
  }(Curve);
  _defineProperty(ReactiveCapabilityCurve, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'InitiallyUsedBySynchronousMachines': [CGMESProfile.shortNames.EQ]
  });

  var ReactivePower = /*#__PURE__*/function (_BaseClass) {
    _inherits(ReactivePower, _BaseClass);
    var _super = _createSuper(ReactivePower);
    function ReactivePower() {
      _classCallCheck(this, ReactivePower);
      return _super.apply(this, arguments);
    }
    _createClass(ReactivePower, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ReactivePower";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:ReactivePower.value' in object) {
          attributeEntries['filledEntries']['cim:ReactivePower.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ReactivePower.value'], 'cim:Float', 'cim:ReactivePower.value');
        } else {
          attributeEntries['emptyEntries']['cim:ReactivePower.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ReactivePower.value'], 'cim:Float', 'cim:ReactivePower.value');
        }
        if ('cim:ReactivePower.unit' in object) {
          attributeEntries['filledEntries']['cim:ReactivePower.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ReactivePower.unit'], 'cim:UnitSymbol', 'cim:ReactivePower.unit');
        } else {
          attributeEntries['emptyEntries']['cim:ReactivePower.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ReactivePower.unit'], 'cim:UnitSymbol', 'cim:ReactivePower.unit');
        }
        if ('cim:ReactivePower.multiplier' in object) {
          attributeEntries['filledEntries']['cim:ReactivePower.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ReactivePower.multiplier'], 'cim:UnitMultiplier', 'cim:ReactivePower.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:ReactivePower.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ReactivePower.multiplier'], 'cim:UnitMultiplier', 'cim:ReactivePower.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ReactivePower.value", "cim:ReactivePower.unit", "cim:ReactivePower.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ReactivePower.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ReactivePower: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ReactivePower.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ReactivePower;
  }(BaseClass);
  _defineProperty(ReactivePower, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV],
    'value': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV],
    'unit': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV],
    'multiplier': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV]
  });

  var RegularTimePoint = /*#__PURE__*/function (_BaseClass) {
    _inherits(RegularTimePoint, _BaseClass);
    var _super = _createSuper(RegularTimePoint);
    function RegularTimePoint() {
      _classCallCheck(this, RegularTimePoint);
      return _super.apply(this, arguments);
    }
    _createClass(RegularTimePoint, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RegularTimePoint";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:RegularTimePoint.IntervalSchedule' in object) {
          attributeEntries['filledEntries']['cim:RegularTimePoint.IntervalSchedule'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegularTimePoint.IntervalSchedule'], 'cim:RegularIntervalSchedule', 'cim:RegularTimePoint.IntervalSchedule');
        } else {
          attributeEntries['emptyEntries']['cim:RegularTimePoint.IntervalSchedule'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegularTimePoint.IntervalSchedule'], 'cim:RegularIntervalSchedule', 'cim:RegularTimePoint.IntervalSchedule');
        }
        if ('cim:RegularTimePoint.sequenceNumber' in object) {
          attributeEntries['filledEntries']['cim:RegularTimePoint.sequenceNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegularTimePoint.sequenceNumber'], 'cim:Integer', 'cim:RegularTimePoint.sequenceNumber');
        } else {
          attributeEntries['emptyEntries']['cim:RegularTimePoint.sequenceNumber'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegularTimePoint.sequenceNumber'], 'cim:Integer', 'cim:RegularTimePoint.sequenceNumber');
        }
        if ('cim:RegularTimePoint.value1' in object) {
          attributeEntries['filledEntries']['cim:RegularTimePoint.value1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegularTimePoint.value1'], 'cim:Simple_Float', 'cim:RegularTimePoint.value1');
        } else {
          attributeEntries['emptyEntries']['cim:RegularTimePoint.value1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegularTimePoint.value1'], 'cim:Simple_Float', 'cim:RegularTimePoint.value1');
        }
        if ('cim:RegularTimePoint.value2' in object) {
          attributeEntries['filledEntries']['cim:RegularTimePoint.value2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegularTimePoint.value2'], 'cim:Simple_Float', 'cim:RegularTimePoint.value2');
        } else {
          attributeEntries['emptyEntries']['cim:RegularTimePoint.value2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegularTimePoint.value2'], 'cim:Simple_Float', 'cim:RegularTimePoint.value2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RegularTimePoint.IntervalSchedule", "cim:RegularTimePoint.sequenceNumber", "cim:RegularTimePoint.value1", "cim:RegularTimePoint.value2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RegularTimePoint.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RegularTimePoint: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RegularTimePoint.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return RegularTimePoint;
  }(BaseClass);
  _defineProperty(RegularTimePoint, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'IntervalSchedule': [CGMESProfile.shortNames.EQ],
    'sequenceNumber': [CGMESProfile.shortNames.EQ],
    'value1': [CGMESProfile.shortNames.EQ],
    'value2': [CGMESProfile.shortNames.EQ]
  });

  var RegulatingControl = /*#__PURE__*/function (_PowerSystemResource) {
    _inherits(RegulatingControl, _PowerSystemResource);
    var _super = _createSuper(RegulatingControl);
    function RegulatingControl() {
      _classCallCheck(this, RegulatingControl);
      return _super.apply(this, arguments);
    }
    _createClass(RegulatingControl, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RegulatingControl";
        var attributeEntries = PowerSystemResource.attributeHTML(object, cimmenu, classType);
        if ('cim:RegulatingControl.Terminal' in object) {
          attributeEntries['filledEntries']['cim:RegulatingControl.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.Terminal'], 'cim:Terminal', 'cim:RegulatingControl.Terminal');
        } else {
          attributeEntries['emptyEntries']['cim:RegulatingControl.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.Terminal'], 'cim:Terminal', 'cim:RegulatingControl.Terminal');
        }
        if ('cim:RegulatingControl.mode' in object) {
          attributeEntries['filledEntries']['cim:RegulatingControl.mode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.mode'], 'cim:RegulatingControlModeKind', 'cim:RegulatingControl.mode');
        } else {
          attributeEntries['emptyEntries']['cim:RegulatingControl.mode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.mode'], 'cim:RegulatingControlModeKind', 'cim:RegulatingControl.mode');
        }
        if ('cim:RegulatingControl.discrete' in object) {
          attributeEntries['filledEntries']['cim:RegulatingControl.discrete'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.discrete'], 'cim:Boolean', 'cim:RegulatingControl.discrete');
        } else {
          attributeEntries['emptyEntries']['cim:RegulatingControl.discrete'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.discrete'], 'cim:Boolean', 'cim:RegulatingControl.discrete');
        }
        if ('cim:RegulatingControl.enabled' in object) {
          attributeEntries['filledEntries']['cim:RegulatingControl.enabled'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.enabled'], 'cim:Boolean', 'cim:RegulatingControl.enabled');
        } else {
          attributeEntries['emptyEntries']['cim:RegulatingControl.enabled'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.enabled'], 'cim:Boolean', 'cim:RegulatingControl.enabled');
        }
        if ('cim:RegulatingControl.targetDeadband' in object) {
          attributeEntries['filledEntries']['cim:RegulatingControl.targetDeadband'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.targetDeadband'], 'cim:Simple_Float', 'cim:RegulatingControl.targetDeadband');
        } else {
          attributeEntries['emptyEntries']['cim:RegulatingControl.targetDeadband'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.targetDeadband'], 'cim:Simple_Float', 'cim:RegulatingControl.targetDeadband');
        }
        if ('cim:RegulatingControl.targetValue' in object) {
          attributeEntries['filledEntries']['cim:RegulatingControl.targetValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.targetValue'], 'cim:Simple_Float', 'cim:RegulatingControl.targetValue');
        } else {
          attributeEntries['emptyEntries']['cim:RegulatingControl.targetValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.targetValue'], 'cim:Simple_Float', 'cim:RegulatingControl.targetValue');
        }
        if ('cim:RegulatingControl.targetValueUnitMultiplier' in object) {
          attributeEntries['filledEntries']['cim:RegulatingControl.targetValueUnitMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.targetValueUnitMultiplier'], 'cim:UnitMultiplier', 'cim:RegulatingControl.targetValueUnitMultiplier');
        } else {
          attributeEntries['emptyEntries']['cim:RegulatingControl.targetValueUnitMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulatingControl.targetValueUnitMultiplier'], 'cim:UnitMultiplier', 'cim:RegulatingControl.targetValueUnitMultiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RegulatingControl.Terminal", "cim:RegulatingControl.mode", "cim:RegulatingControl.discrete", "cim:RegulatingControl.enabled", "cim:RegulatingControl.targetDeadband", "cim:RegulatingControl.targetValue", "cim:RegulatingControl.targetValueUnitMultiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (PowerSystemResource.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RegulatingControl.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RegulatingControl: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RegulatingControl.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["TapChangerControl"];
        return subClasses;
      }
    }]);
    return RegulatingControl;
  }(PowerSystemResource);
  _defineProperty(RegulatingControl, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'Terminal': [CGMESProfile.shortNames.EQ],
    'mode': [CGMESProfile.shortNames.EQ],
    'discrete': [CGMESProfile.shortNames.SSH],
    'enabled': [CGMESProfile.shortNames.SSH],
    'targetDeadband': [CGMESProfile.shortNames.SSH],
    'targetValue': [CGMESProfile.shortNames.SSH],
    'targetValueUnitMultiplier': [CGMESProfile.shortNames.SSH]
  });

  var possibleValues$k = [{
    "value": "--"
  }, {
    "value": "RegulatingControlModeKind.voltage",
    "label": "voltage"
  }, {
    "value": "RegulatingControlModeKind.activePower",
    "label": "activePower"
  }, {
    "value": "RegulatingControlModeKind.reactivePower",
    "label": "reactivePower"
  }, {
    "value": "RegulatingControlModeKind.currentFlow",
    "label": "currentFlow"
  }, {
    "value": "RegulatingControlModeKind.admittance",
    "label": "admittance"
  }, {
    "value": "RegulatingControlModeKind.timeScheduled",
    "label": "timeScheduled"
  }, {
    "value": "RegulatingControlModeKind.temperature",
    "label": "temperature"
  }, {
    "value": "RegulatingControlModeKind.powerFactor",
    "label": "powerFactor"
  }];
  var RegulatingControlModeKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(RegulatingControlModeKind, _BaseClass);
    var _super = _createSuper(RegulatingControlModeKind);
    function RegulatingControlModeKind() {
      _classCallCheck(this, RegulatingControlModeKind);
      return _super.apply(this, arguments);
    }
    _createClass(RegulatingControlModeKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RegulatingControlModeKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RegulatingControlModeKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RegulatingControlModeKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RegulatingControlModeKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$k;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return RegulatingControlModeKind;
  }(BaseClass);
  _defineProperty(RegulatingControlModeKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var RegulationSchedule = /*#__PURE__*/function (_SeasonDayTypeSchedul) {
    _inherits(RegulationSchedule, _SeasonDayTypeSchedul);
    var _super = _createSuper(RegulationSchedule);
    function RegulationSchedule() {
      _classCallCheck(this, RegulationSchedule);
      return _super.apply(this, arguments);
    }
    _createClass(RegulationSchedule, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RegulationSchedule";
        var attributeEntries = SeasonDayTypeSchedule.attributeHTML(object, cimmenu, classType);
        if ('cim:RegulationSchedule.RegulatingControl' in object) {
          attributeEntries['filledEntries']['cim:RegulationSchedule.RegulatingControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulationSchedule.RegulatingControl'], 'cim:RegulatingControl', 'cim:RegulationSchedule.RegulatingControl');
        } else {
          attributeEntries['emptyEntries']['cim:RegulationSchedule.RegulatingControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RegulationSchedule.RegulatingControl'], 'cim:RegulatingControl', 'cim:RegulationSchedule.RegulatingControl');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RegulationSchedule.RegulatingControl"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (SeasonDayTypeSchedule.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RegulationSchedule.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RegulationSchedule: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RegulationSchedule.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return RegulationSchedule;
  }(SeasonDayTypeSchedule);
  _defineProperty(RegulationSchedule, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'RegulatingControl': [CGMESProfile.shortNames.EQ]
  });

  var RemoteInputSignal = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(RemoteInputSignal, _IdentifiedObject);
    var _super = _createSuper(RemoteInputSignal);
    function RemoteInputSignal() {
      _classCallCheck(this, RemoteInputSignal);
      return _super.apply(this, arguments);
    }
    _createClass(RemoteInputSignal, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RemoteInputSignal";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:RemoteInputSignal.Terminal' in object) {
          attributeEntries['filledEntries']['cim:RemoteInputSignal.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.Terminal'], 'cim:Terminal', 'cim:RemoteInputSignal.Terminal');
        } else {
          attributeEntries['emptyEntries']['cim:RemoteInputSignal.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.Terminal'], 'cim:Terminal', 'cim:RemoteInputSignal.Terminal');
        }
        if ('cim:RemoteInputSignal.remoteSignalType' in object) {
          attributeEntries['filledEntries']['cim:RemoteInputSignal.remoteSignalType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.remoteSignalType'], 'cim:RemoteSignalKind', 'cim:RemoteInputSignal.remoteSignalType');
        } else {
          attributeEntries['emptyEntries']['cim:RemoteInputSignal.remoteSignalType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.remoteSignalType'], 'cim:RemoteSignalKind', 'cim:RemoteInputSignal.remoteSignalType');
        }
        if ('cim:RemoteInputSignal.PFVArControllerType1Dynamics' in object) {
          attributeEntries['filledEntries']['cim:RemoteInputSignal.PFVArControllerType1Dynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.PFVArControllerType1Dynamics'], 'cim:PFVArControllerType1Dynamics', 'cim:RemoteInputSignal.PFVArControllerType1Dynamics');
        } else {
          attributeEntries['emptyEntries']['cim:RemoteInputSignal.PFVArControllerType1Dynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.PFVArControllerType1Dynamics'], 'cim:PFVArControllerType1Dynamics', 'cim:RemoteInputSignal.PFVArControllerType1Dynamics');
        }
        if ('cim:RemoteInputSignal.UnderexcitationLimiterDynamics' in object) {
          attributeEntries['filledEntries']['cim:RemoteInputSignal.UnderexcitationLimiterDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.UnderexcitationLimiterDynamics'], 'cim:UnderexcitationLimiterDynamics', 'cim:RemoteInputSignal.UnderexcitationLimiterDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:RemoteInputSignal.UnderexcitationLimiterDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.UnderexcitationLimiterDynamics'], 'cim:UnderexcitationLimiterDynamics', 'cim:RemoteInputSignal.UnderexcitationLimiterDynamics');
        }
        if ('cim:RemoteInputSignal.VoltageCompensatorDynamics' in object) {
          attributeEntries['filledEntries']['cim:RemoteInputSignal.VoltageCompensatorDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.VoltageCompensatorDynamics'], 'cim:VoltageCompensatorDynamics', 'cim:RemoteInputSignal.VoltageCompensatorDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:RemoteInputSignal.VoltageCompensatorDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.VoltageCompensatorDynamics'], 'cim:VoltageCompensatorDynamics', 'cim:RemoteInputSignal.VoltageCompensatorDynamics');
        }
        if ('cim:RemoteInputSignal.PowerSystemStabilizerDynamics' in object) {
          attributeEntries['filledEntries']['cim:RemoteInputSignal.PowerSystemStabilizerDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.PowerSystemStabilizerDynamics'], 'cim:PowerSystemStabilizerDynamics', 'cim:RemoteInputSignal.PowerSystemStabilizerDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:RemoteInputSignal.PowerSystemStabilizerDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.PowerSystemStabilizerDynamics'], 'cim:PowerSystemStabilizerDynamics', 'cim:RemoteInputSignal.PowerSystemStabilizerDynamics');
        }
        if ('cim:RemoteInputSignal.DiscontinuousExcitationControlDynamics' in object) {
          attributeEntries['filledEntries']['cim:RemoteInputSignal.DiscontinuousExcitationControlDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.DiscontinuousExcitationControlDynamics'], 'cim:DiscontinuousExcitationControlDynamics', 'cim:RemoteInputSignal.DiscontinuousExcitationControlDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:RemoteInputSignal.DiscontinuousExcitationControlDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.DiscontinuousExcitationControlDynamics'], 'cim:DiscontinuousExcitationControlDynamics', 'cim:RemoteInputSignal.DiscontinuousExcitationControlDynamics');
        }
        if ('cim:RemoteInputSignal.WindPlantDynamics' in object) {
          attributeEntries['filledEntries']['cim:RemoteInputSignal.WindPlantDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.WindPlantDynamics'], 'cim:WindPlantDynamics', 'cim:RemoteInputSignal.WindPlantDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:RemoteInputSignal.WindPlantDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RemoteInputSignal.WindPlantDynamics'], 'cim:WindPlantDynamics', 'cim:RemoteInputSignal.WindPlantDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RemoteInputSignal.Terminal", "cim:RemoteInputSignal.remoteSignalType", "cim:RemoteInputSignal.PFVArControllerType1Dynamics", "cim:RemoteInputSignal.UnderexcitationLimiterDynamics", "cim:RemoteInputSignal.VoltageCompensatorDynamics", "cim:RemoteInputSignal.PowerSystemStabilizerDynamics", "cim:RemoteInputSignal.DiscontinuousExcitationControlDynamics", "cim:RemoteInputSignal.WindPlantDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RemoteInputSignal.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RemoteInputSignal: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RemoteInputSignal.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return RemoteInputSignal;
  }(IdentifiedObject);
  _defineProperty(RemoteInputSignal, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'Terminal': [CGMESProfile.shortNames.DY],
    'remoteSignalType': [CGMESProfile.shortNames.DY],
    'PFVArControllerType1Dynamics': [CGMESProfile.shortNames.DY],
    'UnderexcitationLimiterDynamics': [CGMESProfile.shortNames.DY],
    'VoltageCompensatorDynamics': [CGMESProfile.shortNames.DY],
    'PowerSystemStabilizerDynamics': [CGMESProfile.shortNames.DY],
    'DiscontinuousExcitationControlDynamics': [CGMESProfile.shortNames.DY],
    'WindPlantDynamics': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$j = [{
    "value": "--"
  }, {
    "value": "RemoteSignalKind.remoteBusVoltageFrequency",
    "label": "remoteBusVoltageFrequency"
  }, {
    "value": "RemoteSignalKind.remoteBusVoltageFrequencyDeviation",
    "label": "remoteBusVoltageFrequencyDeviation"
  }, {
    "value": "RemoteSignalKind.remoteBusFrequency",
    "label": "remoteBusFrequency"
  }, {
    "value": "RemoteSignalKind.remoteBusFrequencyDeviation",
    "label": "remoteBusFrequencyDeviation"
  }, {
    "value": "RemoteSignalKind.remoteBusVoltageAmplitude",
    "label": "remoteBusVoltageAmplitude"
  }, {
    "value": "RemoteSignalKind.remoteBusVoltage",
    "label": "remoteBusVoltage"
  }, {
    "value": "RemoteSignalKind.remoteBranchCurrentAmplitude",
    "label": "remoteBranchCurrentAmplitude"
  }, {
    "value": "RemoteSignalKind.remoteBusVoltageAmplitudeDerivative",
    "label": "remoteBusVoltageAmplitudeDerivative"
  }, {
    "value": "RemoteSignalKind.remotePuBusVoltageDerivative",
    "label": "remotePuBusVoltageDerivative"
  }];
  var RemoteSignalKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(RemoteSignalKind, _BaseClass);
    var _super = _createSuper(RemoteSignalKind);
    function RemoteSignalKind() {
      _classCallCheck(this, RemoteSignalKind);
      return _super.apply(this, arguments);
    }
    _createClass(RemoteSignalKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RemoteSignalKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RemoteSignalKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RemoteSignalKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RemoteSignalKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$j;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return RemoteSignalKind;
  }(BaseClass);
  _defineProperty(RemoteSignalKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var ReportingGroup = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(ReportingGroup, _IdentifiedObject);
    var _super = _createSuper(ReportingGroup);
    function ReportingGroup() {
      _classCallCheck(this, ReportingGroup);
      return _super.apply(this, arguments);
    }
    _createClass(ReportingGroup, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ReportingGroup";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:ReportingGroup.TopologicalNode' in object) {
          attributeEntries['filledEntries']['cim:ReportingGroup.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ReportingGroup.TopologicalNode'], 'cim:TopologicalNode', 'cim:ReportingGroup.TopologicalNode');
        } else {
          attributeEntries['emptyEntries']['cim:ReportingGroup.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ReportingGroup.TopologicalNode'], 'cim:TopologicalNode', 'cim:ReportingGroup.TopologicalNode');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ReportingGroup.TopologicalNode"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ReportingGroup.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ReportingGroup: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ReportingGroup.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ReportingGroup;
  }(IdentifiedObject);
  _defineProperty(ReportingGroup, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.TP],
    'TopologicalNode': [CGMESProfile.shortNames.TP]
  });

  var Resistance = /*#__PURE__*/function (_BaseClass) {
    _inherits(Resistance, _BaseClass);
    var _super = _createSuper(Resistance);
    function Resistance() {
      _classCallCheck(this, Resistance);
      return _super.apply(this, arguments);
    }
    _createClass(Resistance, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Resistance";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Resistance.value' in object) {
          attributeEntries['filledEntries']['cim:Resistance.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Resistance.value'], 'cim:Float', 'cim:Resistance.value');
        } else {
          attributeEntries['emptyEntries']['cim:Resistance.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Resistance.value'], 'cim:Float', 'cim:Resistance.value');
        }
        if ('cim:Resistance.unit' in object) {
          attributeEntries['filledEntries']['cim:Resistance.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Resistance.unit'], 'cim:UnitSymbol', 'cim:Resistance.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Resistance.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Resistance.unit'], 'cim:UnitSymbol', 'cim:Resistance.unit');
        }
        if ('cim:Resistance.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Resistance.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Resistance.multiplier'], 'cim:UnitMultiplier', 'cim:Resistance.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Resistance.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Resistance.multiplier'], 'cim:UnitMultiplier', 'cim:Resistance.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Resistance.value", "cim:Resistance.unit", "cim:Resistance.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Resistance.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Resistance: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Resistance.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Resistance;
  }(BaseClass);
  _defineProperty(Resistance, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'value': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'unit': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'multiplier': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var ResistancePerLength = /*#__PURE__*/function (_BaseClass) {
    _inherits(ResistancePerLength, _BaseClass);
    var _super = _createSuper(ResistancePerLength);
    function ResistancePerLength() {
      _classCallCheck(this, ResistancePerLength);
      return _super.apply(this, arguments);
    }
    _createClass(ResistancePerLength, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ResistancePerLength";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:ResistancePerLength.value' in object) {
          attributeEntries['filledEntries']['cim:ResistancePerLength.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ResistancePerLength.value'], 'cim:Float', 'cim:ResistancePerLength.value');
        } else {
          attributeEntries['emptyEntries']['cim:ResistancePerLength.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ResistancePerLength.value'], 'cim:Float', 'cim:ResistancePerLength.value');
        }
        if ('cim:ResistancePerLength.unit' in object) {
          attributeEntries['filledEntries']['cim:ResistancePerLength.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ResistancePerLength.unit'], 'cim:UnitSymbol', 'cim:ResistancePerLength.unit');
        } else {
          attributeEntries['emptyEntries']['cim:ResistancePerLength.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ResistancePerLength.unit'], 'cim:UnitSymbol', 'cim:ResistancePerLength.unit');
        }
        if ('cim:ResistancePerLength.multiplier' in object) {
          attributeEntries['filledEntries']['cim:ResistancePerLength.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ResistancePerLength.multiplier'], 'cim:UnitMultiplier', 'cim:ResistancePerLength.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:ResistancePerLength.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ResistancePerLength.multiplier'], 'cim:UnitMultiplier', 'cim:ResistancePerLength.multiplier');
        }
        if ('cim:ResistancePerLength.denominatorUnit' in object) {
          attributeEntries['filledEntries']['cim:ResistancePerLength.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ResistancePerLength.denominatorUnit'], 'cim:UnitSymbol', 'cim:ResistancePerLength.denominatorUnit');
        } else {
          attributeEntries['emptyEntries']['cim:ResistancePerLength.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ResistancePerLength.denominatorUnit'], 'cim:UnitSymbol', 'cim:ResistancePerLength.denominatorUnit');
        }
        if ('cim:ResistancePerLength.denominatorMultiplier' in object) {
          attributeEntries['filledEntries']['cim:ResistancePerLength.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ResistancePerLength.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:ResistancePerLength.denominatorMultiplier');
        } else {
          attributeEntries['emptyEntries']['cim:ResistancePerLength.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ResistancePerLength.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:ResistancePerLength.denominatorMultiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ResistancePerLength.value", "cim:ResistancePerLength.unit", "cim:ResistancePerLength.multiplier", "cim:ResistancePerLength.denominatorUnit", "cim:ResistancePerLength.denominatorMultiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ResistancePerLength.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ResistancePerLength: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ResistancePerLength.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ResistancePerLength;
  }(BaseClass);
  _defineProperty(ResistancePerLength, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ],
    'denominatorUnit': [CGMESProfile.shortNames.EQ],
    'denominatorMultiplier': [CGMESProfile.shortNames.EQ]
  });

  var RotationSpeed = /*#__PURE__*/function (_BaseClass) {
    _inherits(RotationSpeed, _BaseClass);
    var _super = _createSuper(RotationSpeed);
    function RotationSpeed() {
      _classCallCheck(this, RotationSpeed);
      return _super.apply(this, arguments);
    }
    _createClass(RotationSpeed, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RotationSpeed";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:RotationSpeed.value' in object) {
          attributeEntries['filledEntries']['cim:RotationSpeed.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotationSpeed.value'], 'cim:Float', 'cim:RotationSpeed.value');
        } else {
          attributeEntries['emptyEntries']['cim:RotationSpeed.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotationSpeed.value'], 'cim:Float', 'cim:RotationSpeed.value');
        }
        if ('cim:RotationSpeed.unit' in object) {
          attributeEntries['filledEntries']['cim:RotationSpeed.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotationSpeed.unit'], 'cim:UnitSymbol', 'cim:RotationSpeed.unit');
        } else {
          attributeEntries['emptyEntries']['cim:RotationSpeed.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotationSpeed.unit'], 'cim:UnitSymbol', 'cim:RotationSpeed.unit');
        }
        if ('cim:RotationSpeed.multiplier' in object) {
          attributeEntries['filledEntries']['cim:RotationSpeed.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotationSpeed.multiplier'], 'cim:UnitMultiplier', 'cim:RotationSpeed.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:RotationSpeed.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotationSpeed.multiplier'], 'cim:UnitMultiplier', 'cim:RotationSpeed.multiplier');
        }
        if ('cim:RotationSpeed.denominatorUnit' in object) {
          attributeEntries['filledEntries']['cim:RotationSpeed.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotationSpeed.denominatorUnit'], 'cim:UnitSymbol', 'cim:RotationSpeed.denominatorUnit');
        } else {
          attributeEntries['emptyEntries']['cim:RotationSpeed.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotationSpeed.denominatorUnit'], 'cim:UnitSymbol', 'cim:RotationSpeed.denominatorUnit');
        }
        if ('cim:RotationSpeed.denominatorMultiplier' in object) {
          attributeEntries['filledEntries']['cim:RotationSpeed.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotationSpeed.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:RotationSpeed.denominatorMultiplier');
        } else {
          attributeEntries['emptyEntries']['cim:RotationSpeed.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['RotationSpeed.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:RotationSpeed.denominatorMultiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:RotationSpeed.value", "cim:RotationSpeed.unit", "cim:RotationSpeed.multiplier", "cim:RotationSpeed.denominatorUnit", "cim:RotationSpeed.denominatorMultiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RotationSpeed.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RotationSpeed: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RotationSpeed.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return RotationSpeed;
  }(BaseClass);
  _defineProperty(RotationSpeed, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ],
    'denominatorUnit': [CGMESProfile.shortNames.EQ],
    'denominatorMultiplier': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$i = [{
    "value": "--"
  }, {
    "value": "RotorKind.roundRotor",
    "label": "roundRotor"
  }, {
    "value": "RotorKind.salientPole",
    "label": "salientPole"
  }];
  var RotorKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(RotorKind, _BaseClass);
    var _super = _createSuper(RotorKind);
    function RotorKind() {
      _classCallCheck(this, RotorKind);
      return _super.apply(this, arguments);
    }
    _createClass(RotorKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "RotorKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!RotorKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class RotorKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = RotorKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$i;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return RotorKind;
  }(BaseClass);
  _defineProperty(RotorKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$h = [{
    "value": "--"
  }, {
    "value": "SVCControlMode.reactivePower",
    "label": "reactivePower"
  }, {
    "value": "SVCControlMode.voltage",
    "label": "voltage"
  }];
  var SVCControlMode = /*#__PURE__*/function (_BaseClass) {
    _inherits(SVCControlMode, _BaseClass);
    var _super = _createSuper(SVCControlMode);
    function SVCControlMode() {
      _classCallCheck(this, SVCControlMode);
      return _super.apply(this, arguments);
    }
    _createClass(SVCControlMode, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SVCControlMode";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SVCControlMode.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SVCControlMode: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SVCControlMode.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$h;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SVCControlMode;
  }(BaseClass);
  _defineProperty(SVCControlMode, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var Season = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(Season, _IdentifiedObject);
    var _super = _createSuper(Season);
    function Season() {
      _classCallCheck(this, Season);
      return _super.apply(this, arguments);
    }
    _createClass(Season, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Season";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:Season.endDate' in object) {
          attributeEntries['filledEntries']['cim:Season.endDate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Season.endDate'], 'cim:MonthDay', 'cim:Season.endDate');
        } else {
          attributeEntries['emptyEntries']['cim:Season.endDate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Season.endDate'], 'cim:MonthDay', 'cim:Season.endDate');
        }
        if ('cim:Season.startDate' in object) {
          attributeEntries['filledEntries']['cim:Season.startDate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Season.startDate'], 'cim:MonthDay', 'cim:Season.startDate');
        } else {
          attributeEntries['emptyEntries']['cim:Season.startDate'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Season.startDate'], 'cim:MonthDay', 'cim:Season.startDate');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Season.endDate", "cim:Season.startDate"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Season.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Season: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Season.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Season;
  }(IdentifiedObject);
  _defineProperty(Season, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'endDate': [CGMESProfile.shortNames.EQ],
    'startDate': [CGMESProfile.shortNames.EQ]
  });

  var Seconds = /*#__PURE__*/function (_BaseClass) {
    _inherits(Seconds, _BaseClass);
    var _super = _createSuper(Seconds);
    function Seconds() {
      _classCallCheck(this, Seconds);
      return _super.apply(this, arguments);
    }
    _createClass(Seconds, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Seconds";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Seconds.value' in object) {
          attributeEntries['filledEntries']['cim:Seconds.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Seconds.value'], 'cim:Float', 'cim:Seconds.value');
        } else {
          attributeEntries['emptyEntries']['cim:Seconds.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Seconds.value'], 'cim:Float', 'cim:Seconds.value');
        }
        if ('cim:Seconds.unit' in object) {
          attributeEntries['filledEntries']['cim:Seconds.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Seconds.unit'], 'cim:UnitSymbol', 'cim:Seconds.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Seconds.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Seconds.unit'], 'cim:UnitSymbol', 'cim:Seconds.unit');
        }
        if ('cim:Seconds.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Seconds.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Seconds.multiplier'], 'cim:UnitMultiplier', 'cim:Seconds.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Seconds.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Seconds.multiplier'], 'cim:UnitMultiplier', 'cim:Seconds.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Seconds.value", "cim:Seconds.unit", "cim:Seconds.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Seconds.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Seconds: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Seconds.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Seconds;
  }(BaseClass);
  _defineProperty(Seconds, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'value': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'unit': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'multiplier': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY]
  });

  var SeriesCompensator = /*#__PURE__*/function (_ConductingEquipment) {
    _inherits(SeriesCompensator, _ConductingEquipment);
    var _super = _createSuper(SeriesCompensator);
    function SeriesCompensator() {
      _classCallCheck(this, SeriesCompensator);
      return _super.apply(this, arguments);
    }
    _createClass(SeriesCompensator, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SeriesCompensator";
        var attributeEntries = ConductingEquipment.attributeHTML(object, cimmenu, classType);
        if ('cim:SeriesCompensator.r' in object) {
          attributeEntries['filledEntries']['cim:SeriesCompensator.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.r'], 'cim:Resistance', 'cim:SeriesCompensator.r');
        } else {
          attributeEntries['emptyEntries']['cim:SeriesCompensator.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.r'], 'cim:Resistance', 'cim:SeriesCompensator.r');
        }
        if ('cim:SeriesCompensator.x' in object) {
          attributeEntries['filledEntries']['cim:SeriesCompensator.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.x'], 'cim:Reactance', 'cim:SeriesCompensator.x');
        } else {
          attributeEntries['emptyEntries']['cim:SeriesCompensator.x'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.x'], 'cim:Reactance', 'cim:SeriesCompensator.x');
        }
        if ('cim:SeriesCompensator.varistorPresent' in object) {
          attributeEntries['filledEntries']['cim:SeriesCompensator.varistorPresent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.varistorPresent'], 'cim:Boolean', 'cim:SeriesCompensator.varistorPresent');
        } else {
          attributeEntries['emptyEntries']['cim:SeriesCompensator.varistorPresent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.varistorPresent'], 'cim:Boolean', 'cim:SeriesCompensator.varistorPresent');
        }
        if ('cim:SeriesCompensator.varistorRatedCurrent' in object) {
          attributeEntries['filledEntries']['cim:SeriesCompensator.varistorRatedCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.varistorRatedCurrent'], 'cim:CurrentFlow', 'cim:SeriesCompensator.varistorRatedCurrent');
        } else {
          attributeEntries['emptyEntries']['cim:SeriesCompensator.varistorRatedCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.varistorRatedCurrent'], 'cim:CurrentFlow', 'cim:SeriesCompensator.varistorRatedCurrent');
        }
        if ('cim:SeriesCompensator.varistorVoltageThreshold' in object) {
          attributeEntries['filledEntries']['cim:SeriesCompensator.varistorVoltageThreshold'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.varistorVoltageThreshold'], 'cim:Voltage', 'cim:SeriesCompensator.varistorVoltageThreshold');
        } else {
          attributeEntries['emptyEntries']['cim:SeriesCompensator.varistorVoltageThreshold'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.varistorVoltageThreshold'], 'cim:Voltage', 'cim:SeriesCompensator.varistorVoltageThreshold');
        }
        if ('cim:SeriesCompensator.r0' in object) {
          attributeEntries['filledEntries']['cim:SeriesCompensator.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.r0'], 'cim:Resistance', 'cim:SeriesCompensator.r0');
        } else {
          attributeEntries['emptyEntries']['cim:SeriesCompensator.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.r0'], 'cim:Resistance', 'cim:SeriesCompensator.r0');
        }
        if ('cim:SeriesCompensator.x0' in object) {
          attributeEntries['filledEntries']['cim:SeriesCompensator.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.x0'], 'cim:Reactance', 'cim:SeriesCompensator.x0');
        } else {
          attributeEntries['emptyEntries']['cim:SeriesCompensator.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SeriesCompensator.x0'], 'cim:Reactance', 'cim:SeriesCompensator.x0');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SeriesCompensator.r", "cim:SeriesCompensator.x", "cim:SeriesCompensator.varistorPresent", "cim:SeriesCompensator.varistorRatedCurrent", "cim:SeriesCompensator.varistorVoltageThreshold", "cim:SeriesCompensator.r0", "cim:SeriesCompensator.x0"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ConductingEquipment.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SeriesCompensator.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SeriesCompensator: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SeriesCompensator.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SeriesCompensator;
  }(ConductingEquipment);
  _defineProperty(SeriesCompensator, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'r': [CGMESProfile.shortNames.EQ],
    'x': [CGMESProfile.shortNames.EQ],
    'varistorPresent': [CGMESProfile.shortNames.EQ],
    'varistorRatedCurrent': [CGMESProfile.shortNames.EQ],
    'varistorVoltageThreshold': [CGMESProfile.shortNames.EQ],
    'r0': [CGMESProfile.shortNames.EQ],
    'x0': [CGMESProfile.shortNames.EQ]
  });

  var SetPoint = /*#__PURE__*/function (_AnalogControl) {
    _inherits(SetPoint, _AnalogControl);
    var _super = _createSuper(SetPoint);
    function SetPoint() {
      _classCallCheck(this, SetPoint);
      return _super.apply(this, arguments);
    }
    _createClass(SetPoint, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SetPoint";
        var attributeEntries = AnalogControl.attributeHTML(object, cimmenu, classType);
        if ('cim:SetPoint.normalValue' in object) {
          attributeEntries['filledEntries']['cim:SetPoint.normalValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SetPoint.normalValue'], 'cim:Simple_Float', 'cim:SetPoint.normalValue');
        } else {
          attributeEntries['emptyEntries']['cim:SetPoint.normalValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SetPoint.normalValue'], 'cim:Simple_Float', 'cim:SetPoint.normalValue');
        }
        if ('cim:SetPoint.value' in object) {
          attributeEntries['filledEntries']['cim:SetPoint.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SetPoint.value'], 'cim:Simple_Float', 'cim:SetPoint.value');
        } else {
          attributeEntries['emptyEntries']['cim:SetPoint.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SetPoint.value'], 'cim:Simple_Float', 'cim:SetPoint.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SetPoint.normalValue", "cim:SetPoint.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (AnalogControl.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SetPoint.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SetPoint: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SetPoint.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SetPoint;
  }(AnalogControl);
  _defineProperty(SetPoint, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'normalValue': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$g = [{
    "value": "--"
  }, {
    "value": "ShortCircuitRotorKind.salientPole1",
    "label": "salientPole1"
  }, {
    "value": "ShortCircuitRotorKind.salientPole2",
    "label": "salientPole2"
  }, {
    "value": "ShortCircuitRotorKind.turboSeries1",
    "label": "turboSeries1"
  }, {
    "value": "ShortCircuitRotorKind.turboSeries2",
    "label": "turboSeries2"
  }];
  var ShortCircuitRotorKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(ShortCircuitRotorKind, _BaseClass);
    var _super = _createSuper(ShortCircuitRotorKind);
    function ShortCircuitRotorKind() {
      _classCallCheck(this, ShortCircuitRotorKind);
      return _super.apply(this, arguments);
    }
    _createClass(ShortCircuitRotorKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ShortCircuitRotorKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ShortCircuitRotorKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ShortCircuitRotorKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ShortCircuitRotorKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$g;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ShortCircuitRotorKind;
  }(BaseClass);
  _defineProperty(ShortCircuitRotorKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var Simple_Float = /*#__PURE__*/function (_BaseClass) {
    _inherits(Simple_Float, _BaseClass);
    var _super = _createSuper(Simple_Float);
    function Simple_Float() {
      _classCallCheck(this, Simple_Float);
      return _super.apply(this, arguments);
    }
    _createClass(Simple_Float, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Simple_Float";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Simple_Float.value' in object) {
          attributeEntries['filledEntries']['cim:Simple_Float.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Simple_Float.value'], 'cim:Float', 'cim:Simple_Float.value');
        } else {
          attributeEntries['emptyEntries']['cim:Simple_Float.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Simple_Float.value'], 'cim:Float', 'cim:Simple_Float.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Simple_Float.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Simple_Float.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Simple_Float: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Simple_Float.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Simple_Float;
  }(BaseClass);
  _defineProperty(Simple_Float, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY],
    'value': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY]
  });

  var SolarGeneratingUnit = /*#__PURE__*/function (_GeneratingUnit) {
    _inherits(SolarGeneratingUnit, _GeneratingUnit);
    var _super = _createSuper(SolarGeneratingUnit);
    function SolarGeneratingUnit() {
      _classCallCheck(this, SolarGeneratingUnit);
      return _super.apply(this, arguments);
    }
    _createClass(SolarGeneratingUnit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SolarGeneratingUnit";
        var attributeEntries = GeneratingUnit.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (GeneratingUnit.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SolarGeneratingUnit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SolarGeneratingUnit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SolarGeneratingUnit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SolarGeneratingUnit;
  }(GeneratingUnit);
  _defineProperty(SolarGeneratingUnit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var possibleValues$f = [{
    "value": "--"
  }, {
    "value": "Source.PROCESS",
    "label": "PROCESS"
  }, {
    "value": "Source.DEFAULTED",
    "label": "DEFAULTED"
  }, {
    "value": "Source.SUBSTITUTED",
    "label": "SUBSTITUTED"
  }];
  var Source = /*#__PURE__*/function (_BaseClass) {
    _inherits(Source, _BaseClass);
    var _super = _createSuper(Source);
    function Source() {
      _classCallCheck(this, Source);
      return _super.apply(this, arguments);
    }
    _createClass(Source, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Source";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Source.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Source: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Source.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$f;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Source;
  }(BaseClass);
  _defineProperty(Source, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var StateVariablesVersion = /*#__PURE__*/function (_BaseClass) {
    _inherits(StateVariablesVersion, _BaseClass);
    var _super = _createSuper(StateVariablesVersion);
    function StateVariablesVersion() {
      _classCallCheck(this, StateVariablesVersion);
      return _super.apply(this, arguments);
    }
    _createClass(StateVariablesVersion, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "StateVariablesVersion";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:StateVariablesVersion.baseUML' in object) {
          attributeEntries['filledEntries']['cim:StateVariablesVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.baseUML'], 'cim:String', 'cim:StateVariablesVersion.baseUML');
        } else {
          attributeEntries['emptyEntries']['cim:StateVariablesVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.baseUML'], 'cim:String', 'cim:StateVariablesVersion.baseUML');
        }
        if ('cim:StateVariablesVersion.baseURI' in object) {
          attributeEntries['filledEntries']['cim:StateVariablesVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.baseURI'], 'cim:String', 'cim:StateVariablesVersion.baseURI');
        } else {
          attributeEntries['emptyEntries']['cim:StateVariablesVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.baseURI'], 'cim:String', 'cim:StateVariablesVersion.baseURI');
        }
        if ('cim:StateVariablesVersion.date' in object) {
          attributeEntries['filledEntries']['cim:StateVariablesVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.date'], 'cim:Date', 'cim:StateVariablesVersion.date');
        } else {
          attributeEntries['emptyEntries']['cim:StateVariablesVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.date'], 'cim:Date', 'cim:StateVariablesVersion.date');
        }
        if ('cim:StateVariablesVersion.differenceModelURI' in object) {
          attributeEntries['filledEntries']['cim:StateVariablesVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.differenceModelURI'], 'cim:String', 'cim:StateVariablesVersion.differenceModelURI');
        } else {
          attributeEntries['emptyEntries']['cim:StateVariablesVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.differenceModelURI'], 'cim:String', 'cim:StateVariablesVersion.differenceModelURI');
        }
        if ('cim:StateVariablesVersion.entsoeUML' in object) {
          attributeEntries['filledEntries']['cim:StateVariablesVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.entsoeUML'], 'cim:String', 'cim:StateVariablesVersion.entsoeUML');
        } else {
          attributeEntries['emptyEntries']['cim:StateVariablesVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.entsoeUML'], 'cim:String', 'cim:StateVariablesVersion.entsoeUML');
        }
        if ('cim:StateVariablesVersion.entsoeURI' in object) {
          attributeEntries['filledEntries']['cim:StateVariablesVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.entsoeURI'], 'cim:String', 'cim:StateVariablesVersion.entsoeURI');
        } else {
          attributeEntries['emptyEntries']['cim:StateVariablesVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.entsoeURI'], 'cim:String', 'cim:StateVariablesVersion.entsoeURI');
        }
        if ('cim:StateVariablesVersion.modelDescriptionURI' in object) {
          attributeEntries['filledEntries']['cim:StateVariablesVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.modelDescriptionURI'], 'cim:String', 'cim:StateVariablesVersion.modelDescriptionURI');
        } else {
          attributeEntries['emptyEntries']['cim:StateVariablesVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.modelDescriptionURI'], 'cim:String', 'cim:StateVariablesVersion.modelDescriptionURI');
        }
        if ('cim:StateVariablesVersion.namespaceRDF' in object) {
          attributeEntries['filledEntries']['cim:StateVariablesVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.namespaceRDF'], 'cim:String', 'cim:StateVariablesVersion.namespaceRDF');
        } else {
          attributeEntries['emptyEntries']['cim:StateVariablesVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.namespaceRDF'], 'cim:String', 'cim:StateVariablesVersion.namespaceRDF');
        }
        if ('cim:StateVariablesVersion.namespaceUML' in object) {
          attributeEntries['filledEntries']['cim:StateVariablesVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.namespaceUML'], 'cim:String', 'cim:StateVariablesVersion.namespaceUML');
        } else {
          attributeEntries['emptyEntries']['cim:StateVariablesVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.namespaceUML'], 'cim:String', 'cim:StateVariablesVersion.namespaceUML');
        }
        if ('cim:StateVariablesVersion.shortName' in object) {
          attributeEntries['filledEntries']['cim:StateVariablesVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.shortName'], 'cim:String', 'cim:StateVariablesVersion.shortName');
        } else {
          attributeEntries['emptyEntries']['cim:StateVariablesVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StateVariablesVersion.shortName'], 'cim:String', 'cim:StateVariablesVersion.shortName');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:StateVariablesVersion.baseUML", "cim:StateVariablesVersion.baseURI", "cim:StateVariablesVersion.date", "cim:StateVariablesVersion.differenceModelURI", "cim:StateVariablesVersion.entsoeUML", "cim:StateVariablesVersion.entsoeURI", "cim:StateVariablesVersion.modelDescriptionURI", "cim:StateVariablesVersion.namespaceRDF", "cim:StateVariablesVersion.namespaceUML", "cim:StateVariablesVersion.shortName"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!StateVariablesVersion.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class StateVariablesVersion: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = StateVariablesVersion.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return StateVariablesVersion;
  }(BaseClass);
  _defineProperty(StateVariablesVersion, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SV],
    'baseUML': [CGMESProfile.shortNames.SV],
    'baseURI': [CGMESProfile.shortNames.SV],
    'date': [CGMESProfile.shortNames.SV],
    'differenceModelURI': [CGMESProfile.shortNames.SV],
    'entsoeUML': [CGMESProfile.shortNames.SV],
    'entsoeURI': [CGMESProfile.shortNames.SV],
    'modelDescriptionURI': [CGMESProfile.shortNames.SV],
    'namespaceRDF': [CGMESProfile.shortNames.SV],
    'namespaceUML': [CGMESProfile.shortNames.SV],
    'shortName': [CGMESProfile.shortNames.SV]
  });

  var possibleValues$e = [{
    "value": "--"
  }, {
    "value": "StaticLoadModelKind.exponential",
    "label": "exponential"
  }, {
    "value": "StaticLoadModelKind.zIP1",
    "label": "zIP1"
  }, {
    "value": "StaticLoadModelKind.zIP2",
    "label": "zIP2"
  }, {
    "value": "StaticLoadModelKind.constantZ",
    "label": "constantZ"
  }];
  var StaticLoadModelKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(StaticLoadModelKind, _BaseClass);
    var _super = _createSuper(StaticLoadModelKind);
    function StaticLoadModelKind() {
      _classCallCheck(this, StaticLoadModelKind);
      return _super.apply(this, arguments);
    }
    _createClass(StaticLoadModelKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "StaticLoadModelKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!StaticLoadModelKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class StaticLoadModelKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = StaticLoadModelKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$e;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return StaticLoadModelKind;
  }(BaseClass);
  _defineProperty(StaticLoadModelKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var StaticVarCompensator = /*#__PURE__*/function (_RegulatingCondEq) {
    _inherits(StaticVarCompensator, _RegulatingCondEq);
    var _super = _createSuper(StaticVarCompensator);
    function StaticVarCompensator() {
      _classCallCheck(this, StaticVarCompensator);
      return _super.apply(this, arguments);
    }
    _createClass(StaticVarCompensator, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "StaticVarCompensator";
        var attributeEntries = RegulatingCondEq.attributeHTML(object, cimmenu, classType);
        if ('cim:StaticVarCompensator.capacitiveRating' in object) {
          attributeEntries['filledEntries']['cim:StaticVarCompensator.capacitiveRating'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StaticVarCompensator.capacitiveRating'], 'cim:Reactance', 'cim:StaticVarCompensator.capacitiveRating');
        } else {
          attributeEntries['emptyEntries']['cim:StaticVarCompensator.capacitiveRating'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StaticVarCompensator.capacitiveRating'], 'cim:Reactance', 'cim:StaticVarCompensator.capacitiveRating');
        }
        if ('cim:StaticVarCompensator.inductiveRating' in object) {
          attributeEntries['filledEntries']['cim:StaticVarCompensator.inductiveRating'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StaticVarCompensator.inductiveRating'], 'cim:Reactance', 'cim:StaticVarCompensator.inductiveRating');
        } else {
          attributeEntries['emptyEntries']['cim:StaticVarCompensator.inductiveRating'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StaticVarCompensator.inductiveRating'], 'cim:Reactance', 'cim:StaticVarCompensator.inductiveRating');
        }
        if ('cim:StaticVarCompensator.slope' in object) {
          attributeEntries['filledEntries']['cim:StaticVarCompensator.slope'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StaticVarCompensator.slope'], 'cim:VoltagePerReactivePower', 'cim:StaticVarCompensator.slope');
        } else {
          attributeEntries['emptyEntries']['cim:StaticVarCompensator.slope'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StaticVarCompensator.slope'], 'cim:VoltagePerReactivePower', 'cim:StaticVarCompensator.slope');
        }
        if ('cim:StaticVarCompensator.sVCControlMode' in object) {
          attributeEntries['filledEntries']['cim:StaticVarCompensator.sVCControlMode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StaticVarCompensator.sVCControlMode'], 'cim:SVCControlMode', 'cim:StaticVarCompensator.sVCControlMode');
        } else {
          attributeEntries['emptyEntries']['cim:StaticVarCompensator.sVCControlMode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StaticVarCompensator.sVCControlMode'], 'cim:SVCControlMode', 'cim:StaticVarCompensator.sVCControlMode');
        }
        if ('cim:StaticVarCompensator.voltageSetPoint' in object) {
          attributeEntries['filledEntries']['cim:StaticVarCompensator.voltageSetPoint'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StaticVarCompensator.voltageSetPoint'], 'cim:Voltage', 'cim:StaticVarCompensator.voltageSetPoint');
        } else {
          attributeEntries['emptyEntries']['cim:StaticVarCompensator.voltageSetPoint'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StaticVarCompensator.voltageSetPoint'], 'cim:Voltage', 'cim:StaticVarCompensator.voltageSetPoint');
        }
        if ('cim:StaticVarCompensator.q' in object) {
          attributeEntries['filledEntries']['cim:StaticVarCompensator.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StaticVarCompensator.q'], 'cim:ReactivePower', 'cim:StaticVarCompensator.q');
        } else {
          attributeEntries['emptyEntries']['cim:StaticVarCompensator.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StaticVarCompensator.q'], 'cim:ReactivePower', 'cim:StaticVarCompensator.q');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:StaticVarCompensator.capacitiveRating", "cim:StaticVarCompensator.inductiveRating", "cim:StaticVarCompensator.slope", "cim:StaticVarCompensator.sVCControlMode", "cim:StaticVarCompensator.voltageSetPoint", "cim:StaticVarCompensator.q"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (RegulatingCondEq.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!StaticVarCompensator.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class StaticVarCompensator: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = StaticVarCompensator.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return StaticVarCompensator;
  }(RegulatingCondEq);
  _defineProperty(StaticVarCompensator, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'capacitiveRating': [CGMESProfile.shortNames.EQ],
    'inductiveRating': [CGMESProfile.shortNames.EQ],
    'slope': [CGMESProfile.shortNames.EQ],
    'sVCControlMode': [CGMESProfile.shortNames.EQ],
    'voltageSetPoint': [CGMESProfile.shortNames.EQ],
    'q': [CGMESProfile.shortNames.SSH]
  });

  var StationSupply = /*#__PURE__*/function (_EnergyConsumer) {
    _inherits(StationSupply, _EnergyConsumer);
    var _super = _createSuper(StationSupply);
    function StationSupply() {
      _classCallCheck(this, StationSupply);
      return _super.apply(this, arguments);
    }
    _createClass(StationSupply, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "StationSupply";
        var attributeEntries = EnergyConsumer.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EnergyConsumer.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!StationSupply.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class StationSupply: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = StationSupply.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return StationSupply;
  }(EnergyConsumer);
  _defineProperty(StationSupply, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var SteadyStateHypothesisVersion = /*#__PURE__*/function (_BaseClass) {
    _inherits(SteadyStateHypothesisVersion, _BaseClass);
    var _super = _createSuper(SteadyStateHypothesisVersion);
    function SteadyStateHypothesisVersion() {
      _classCallCheck(this, SteadyStateHypothesisVersion);
      return _super.apply(this, arguments);
    }
    _createClass(SteadyStateHypothesisVersion, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SteadyStateHypothesisVersion";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:SteadyStateHypothesisVersion.baseUML' in object) {
          attributeEntries['filledEntries']['cim:SteadyStateHypothesisVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.baseUML'], 'cim:String', 'cim:SteadyStateHypothesisVersion.baseUML');
        } else {
          attributeEntries['emptyEntries']['cim:SteadyStateHypothesisVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.baseUML'], 'cim:String', 'cim:SteadyStateHypothesisVersion.baseUML');
        }
        if ('cim:SteadyStateHypothesisVersion.baseURI' in object) {
          attributeEntries['filledEntries']['cim:SteadyStateHypothesisVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.baseURI'], 'cim:String', 'cim:SteadyStateHypothesisVersion.baseURI');
        } else {
          attributeEntries['emptyEntries']['cim:SteadyStateHypothesisVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.baseURI'], 'cim:String', 'cim:SteadyStateHypothesisVersion.baseURI');
        }
        if ('cim:SteadyStateHypothesisVersion.date' in object) {
          attributeEntries['filledEntries']['cim:SteadyStateHypothesisVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.date'], 'cim:Date', 'cim:SteadyStateHypothesisVersion.date');
        } else {
          attributeEntries['emptyEntries']['cim:SteadyStateHypothesisVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.date'], 'cim:Date', 'cim:SteadyStateHypothesisVersion.date');
        }
        if ('cim:SteadyStateHypothesisVersion.differenceModelURI' in object) {
          attributeEntries['filledEntries']['cim:SteadyStateHypothesisVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.differenceModelURI'], 'cim:String', 'cim:SteadyStateHypothesisVersion.differenceModelURI');
        } else {
          attributeEntries['emptyEntries']['cim:SteadyStateHypothesisVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.differenceModelURI'], 'cim:String', 'cim:SteadyStateHypothesisVersion.differenceModelURI');
        }
        if ('cim:SteadyStateHypothesisVersion.entsoeUML' in object) {
          attributeEntries['filledEntries']['cim:SteadyStateHypothesisVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.entsoeUML'], 'cim:String', 'cim:SteadyStateHypothesisVersion.entsoeUML');
        } else {
          attributeEntries['emptyEntries']['cim:SteadyStateHypothesisVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.entsoeUML'], 'cim:String', 'cim:SteadyStateHypothesisVersion.entsoeUML');
        }
        if ('cim:SteadyStateHypothesisVersion.entsoeURI' in object) {
          attributeEntries['filledEntries']['cim:SteadyStateHypothesisVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.entsoeURI'], 'cim:String', 'cim:SteadyStateHypothesisVersion.entsoeURI');
        } else {
          attributeEntries['emptyEntries']['cim:SteadyStateHypothesisVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.entsoeURI'], 'cim:String', 'cim:SteadyStateHypothesisVersion.entsoeURI');
        }
        if ('cim:SteadyStateHypothesisVersion.modelDescriptionURI' in object) {
          attributeEntries['filledEntries']['cim:SteadyStateHypothesisVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.modelDescriptionURI'], 'cim:String', 'cim:SteadyStateHypothesisVersion.modelDescriptionURI');
        } else {
          attributeEntries['emptyEntries']['cim:SteadyStateHypothesisVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.modelDescriptionURI'], 'cim:String', 'cim:SteadyStateHypothesisVersion.modelDescriptionURI');
        }
        if ('cim:SteadyStateHypothesisVersion.namespaceRDF' in object) {
          attributeEntries['filledEntries']['cim:SteadyStateHypothesisVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.namespaceRDF'], 'cim:String', 'cim:SteadyStateHypothesisVersion.namespaceRDF');
        } else {
          attributeEntries['emptyEntries']['cim:SteadyStateHypothesisVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.namespaceRDF'], 'cim:String', 'cim:SteadyStateHypothesisVersion.namespaceRDF');
        }
        if ('cim:SteadyStateHypothesisVersion.namespaceUML' in object) {
          attributeEntries['filledEntries']['cim:SteadyStateHypothesisVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.namespaceUML'], 'cim:String', 'cim:SteadyStateHypothesisVersion.namespaceUML');
        } else {
          attributeEntries['emptyEntries']['cim:SteadyStateHypothesisVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.namespaceUML'], 'cim:String', 'cim:SteadyStateHypothesisVersion.namespaceUML');
        }
        if ('cim:SteadyStateHypothesisVersion.shortName' in object) {
          attributeEntries['filledEntries']['cim:SteadyStateHypothesisVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.shortName'], 'cim:String', 'cim:SteadyStateHypothesisVersion.shortName');
        } else {
          attributeEntries['emptyEntries']['cim:SteadyStateHypothesisVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SteadyStateHypothesisVersion.shortName'], 'cim:String', 'cim:SteadyStateHypothesisVersion.shortName');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SteadyStateHypothesisVersion.baseUML", "cim:SteadyStateHypothesisVersion.baseURI", "cim:SteadyStateHypothesisVersion.date", "cim:SteadyStateHypothesisVersion.differenceModelURI", "cim:SteadyStateHypothesisVersion.entsoeUML", "cim:SteadyStateHypothesisVersion.entsoeURI", "cim:SteadyStateHypothesisVersion.modelDescriptionURI", "cim:SteadyStateHypothesisVersion.namespaceRDF", "cim:SteadyStateHypothesisVersion.namespaceUML", "cim:SteadyStateHypothesisVersion.shortName"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SteadyStateHypothesisVersion.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SteadyStateHypothesisVersion: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SteadyStateHypothesisVersion.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SteadyStateHypothesisVersion;
  }(BaseClass);
  _defineProperty(SteadyStateHypothesisVersion, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SSH],
    'baseUML': [CGMESProfile.shortNames.SSH],
    'baseURI': [CGMESProfile.shortNames.SSH],
    'date': [CGMESProfile.shortNames.SSH],
    'differenceModelURI': [CGMESProfile.shortNames.SSH],
    'entsoeUML': [CGMESProfile.shortNames.SSH],
    'entsoeURI': [CGMESProfile.shortNames.SSH],
    'modelDescriptionURI': [CGMESProfile.shortNames.SSH],
    'namespaceRDF': [CGMESProfile.shortNames.SSH],
    'namespaceUML': [CGMESProfile.shortNames.SSH],
    'shortName': [CGMESProfile.shortNames.SSH]
  });

  var String$1 = /*#__PURE__*/function () {
    function String() {
      _classCallCheck(this, String);
    }
    _createClass(String, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        return {};
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        return false;
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        return "";
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_string(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        return [];
      }
    }]);
    return String;
  }();

  var StringMeasurement = /*#__PURE__*/function (_Measurement) {
    _inherits(StringMeasurement, _Measurement);
    var _super = _createSuper(StringMeasurement);
    function StringMeasurement() {
      _classCallCheck(this, StringMeasurement);
      return _super.apply(this, arguments);
    }
    _createClass(StringMeasurement, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "StringMeasurement";
        var attributeEntries = Measurement.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Measurement.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!StringMeasurement.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class StringMeasurement: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = StringMeasurement.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return StringMeasurement;
  }(Measurement);
  _defineProperty(StringMeasurement, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var StringMeasurementValue = /*#__PURE__*/function (_MeasurementValue) {
    _inherits(StringMeasurementValue, _MeasurementValue);
    var _super = _createSuper(StringMeasurementValue);
    function StringMeasurementValue() {
      _classCallCheck(this, StringMeasurementValue);
      return _super.apply(this, arguments);
    }
    _createClass(StringMeasurementValue, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "StringMeasurementValue";
        var attributeEntries = MeasurementValue.attributeHTML(object, cimmenu, classType);
        if ('cim:StringMeasurementValue.StringMeasurement' in object) {
          attributeEntries['filledEntries']['cim:StringMeasurementValue.StringMeasurement'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StringMeasurementValue.StringMeasurement'], 'cim:StringMeasurement', 'cim:StringMeasurementValue.StringMeasurement');
        } else {
          attributeEntries['emptyEntries']['cim:StringMeasurementValue.StringMeasurement'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StringMeasurementValue.StringMeasurement'], 'cim:StringMeasurement', 'cim:StringMeasurementValue.StringMeasurement');
        }
        if ('cim:StringMeasurementValue.value' in object) {
          attributeEntries['filledEntries']['cim:StringMeasurementValue.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StringMeasurementValue.value'], 'cim:String', 'cim:StringMeasurementValue.value');
        } else {
          attributeEntries['emptyEntries']['cim:StringMeasurementValue.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['StringMeasurementValue.value'], 'cim:String', 'cim:StringMeasurementValue.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:StringMeasurementValue.StringMeasurement", "cim:StringMeasurementValue.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (MeasurementValue.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!StringMeasurementValue.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class StringMeasurementValue: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = StringMeasurementValue.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return StringMeasurementValue;
  }(MeasurementValue);
  _defineProperty(StringMeasurementValue, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'StringMeasurement': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var SubGeographicalRegion = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(SubGeographicalRegion, _IdentifiedObject);
    var _super = _createSuper(SubGeographicalRegion);
    function SubGeographicalRegion() {
      _classCallCheck(this, SubGeographicalRegion);
      return _super.apply(this, arguments);
    }
    _createClass(SubGeographicalRegion, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SubGeographicalRegion";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:SubGeographicalRegion.Region' in object) {
          attributeEntries['filledEntries']['cim:SubGeographicalRegion.Region'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SubGeographicalRegion.Region'], 'cim:GeographicalRegion', 'cim:SubGeographicalRegion.Region');
        } else {
          attributeEntries['emptyEntries']['cim:SubGeographicalRegion.Region'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SubGeographicalRegion.Region'], 'cim:GeographicalRegion', 'cim:SubGeographicalRegion.Region');
        }
        if ('cim:SubGeographicalRegion.Substations' in object) {
          attributeEntries['filledEntries']['cim:SubGeographicalRegion.Substations'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SubGeographicalRegion.Substations'], 'cim:Substation', 'cim:SubGeographicalRegion.Substations');
        } else {
          attributeEntries['emptyEntries']['cim:SubGeographicalRegion.Substations'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SubGeographicalRegion.Substations'], 'cim:Substation', 'cim:SubGeographicalRegion.Substations');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SubGeographicalRegion.Region", "cim:SubGeographicalRegion.Substations"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SubGeographicalRegion.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SubGeographicalRegion: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SubGeographicalRegion.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SubGeographicalRegion;
  }(IdentifiedObject);
  _defineProperty(SubGeographicalRegion, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD],
    'Region': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.EQ_BD],
    'Substations': [CGMESProfile.shortNames.EQ]
  });

  var SubLoadArea = /*#__PURE__*/function (_EnergyArea) {
    _inherits(SubLoadArea, _EnergyArea);
    var _super = _createSuper(SubLoadArea);
    function SubLoadArea() {
      _classCallCheck(this, SubLoadArea);
      return _super.apply(this, arguments);
    }
    _createClass(SubLoadArea, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SubLoadArea";
        var attributeEntries = EnergyArea.attributeHTML(object, cimmenu, classType);
        if ('cim:SubLoadArea.LoadArea' in object) {
          attributeEntries['filledEntries']['cim:SubLoadArea.LoadArea'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SubLoadArea.LoadArea'], 'cim:LoadArea', 'cim:SubLoadArea.LoadArea');
        } else {
          attributeEntries['emptyEntries']['cim:SubLoadArea.LoadArea'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SubLoadArea.LoadArea'], 'cim:LoadArea', 'cim:SubLoadArea.LoadArea');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SubLoadArea.LoadArea"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EnergyArea.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SubLoadArea.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SubLoadArea: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SubLoadArea.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SubLoadArea;
  }(EnergyArea);
  _defineProperty(SubLoadArea, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'LoadArea': [CGMESProfile.shortNames.EQ]
  });

  var Substation = /*#__PURE__*/function (_EquipmentContainer) {
    _inherits(Substation, _EquipmentContainer);
    var _super = _createSuper(Substation);
    function Substation() {
      _classCallCheck(this, Substation);
      return _super.apply(this, arguments);
    }
    _createClass(Substation, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Substation";
        var attributeEntries = EquipmentContainer.attributeHTML(object, cimmenu, classType);
        if ('cim:Substation.Region' in object) {
          attributeEntries['filledEntries']['cim:Substation.Region'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Substation.Region'], 'cim:SubGeographicalRegion', 'cim:Substation.Region');
        } else {
          attributeEntries['emptyEntries']['cim:Substation.Region'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Substation.Region'], 'cim:SubGeographicalRegion', 'cim:Substation.Region');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Substation.Region"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EquipmentContainer.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Substation.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Substation: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Substation.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Substation;
  }(EquipmentContainer);
  _defineProperty(Substation, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'Region': [CGMESProfile.shortNames.EQ]
  });

  var Susceptance = /*#__PURE__*/function (_BaseClass) {
    _inherits(Susceptance, _BaseClass);
    var _super = _createSuper(Susceptance);
    function Susceptance() {
      _classCallCheck(this, Susceptance);
      return _super.apply(this, arguments);
    }
    _createClass(Susceptance, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Susceptance";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Susceptance.value' in object) {
          attributeEntries['filledEntries']['cim:Susceptance.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Susceptance.value'], 'cim:Float', 'cim:Susceptance.value');
        } else {
          attributeEntries['emptyEntries']['cim:Susceptance.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Susceptance.value'], 'cim:Float', 'cim:Susceptance.value');
        }
        if ('cim:Susceptance.unit' in object) {
          attributeEntries['filledEntries']['cim:Susceptance.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Susceptance.unit'], 'cim:UnitSymbol', 'cim:Susceptance.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Susceptance.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Susceptance.unit'], 'cim:UnitSymbol', 'cim:Susceptance.unit');
        }
        if ('cim:Susceptance.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Susceptance.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Susceptance.multiplier'], 'cim:UnitMultiplier', 'cim:Susceptance.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Susceptance.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Susceptance.multiplier'], 'cim:UnitMultiplier', 'cim:Susceptance.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Susceptance.value", "cim:Susceptance.unit", "cim:Susceptance.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Susceptance.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Susceptance: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Susceptance.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Susceptance;
  }(BaseClass);
  _defineProperty(Susceptance, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ]
  });

  var SvInjection = /*#__PURE__*/function (_BaseClass) {
    _inherits(SvInjection, _BaseClass);
    var _super = _createSuper(SvInjection);
    function SvInjection() {
      _classCallCheck(this, SvInjection);
      return _super.apply(this, arguments);
    }
    _createClass(SvInjection, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SvInjection";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:SvInjection.pInjection' in object) {
          attributeEntries['filledEntries']['cim:SvInjection.pInjection'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvInjection.pInjection'], 'cim:ActivePower', 'cim:SvInjection.pInjection');
        } else {
          attributeEntries['emptyEntries']['cim:SvInjection.pInjection'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvInjection.pInjection'], 'cim:ActivePower', 'cim:SvInjection.pInjection');
        }
        if ('cim:SvInjection.qInjection' in object) {
          attributeEntries['filledEntries']['cim:SvInjection.qInjection'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvInjection.qInjection'], 'cim:ReactivePower', 'cim:SvInjection.qInjection');
        } else {
          attributeEntries['emptyEntries']['cim:SvInjection.qInjection'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvInjection.qInjection'], 'cim:ReactivePower', 'cim:SvInjection.qInjection');
        }
        if ('cim:SvInjection.TopologicalNode' in object) {
          attributeEntries['filledEntries']['cim:SvInjection.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvInjection.TopologicalNode'], 'cim:TopologicalNode', 'cim:SvInjection.TopologicalNode');
        } else {
          attributeEntries['emptyEntries']['cim:SvInjection.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvInjection.TopologicalNode'], 'cim:TopologicalNode', 'cim:SvInjection.TopologicalNode');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SvInjection.pInjection", "cim:SvInjection.qInjection", "cim:SvInjection.TopologicalNode"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SvInjection.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SvInjection: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SvInjection.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SvInjection;
  }(BaseClass);
  _defineProperty(SvInjection, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SV],
    'pInjection': [CGMESProfile.shortNames.SV],
    'qInjection': [CGMESProfile.shortNames.SV],
    'TopologicalNode': [CGMESProfile.shortNames.SV]
  });

  var SvPowerFlow = /*#__PURE__*/function (_BaseClass) {
    _inherits(SvPowerFlow, _BaseClass);
    var _super = _createSuper(SvPowerFlow);
    function SvPowerFlow() {
      _classCallCheck(this, SvPowerFlow);
      return _super.apply(this, arguments);
    }
    _createClass(SvPowerFlow, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SvPowerFlow";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:SvPowerFlow.Terminal' in object) {
          attributeEntries['filledEntries']['cim:SvPowerFlow.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvPowerFlow.Terminal'], 'cim:Terminal', 'cim:SvPowerFlow.Terminal');
        } else {
          attributeEntries['emptyEntries']['cim:SvPowerFlow.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvPowerFlow.Terminal'], 'cim:Terminal', 'cim:SvPowerFlow.Terminal');
        }
        if ('cim:SvPowerFlow.p' in object) {
          attributeEntries['filledEntries']['cim:SvPowerFlow.p'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvPowerFlow.p'], 'cim:ActivePower', 'cim:SvPowerFlow.p');
        } else {
          attributeEntries['emptyEntries']['cim:SvPowerFlow.p'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvPowerFlow.p'], 'cim:ActivePower', 'cim:SvPowerFlow.p');
        }
        if ('cim:SvPowerFlow.q' in object) {
          attributeEntries['filledEntries']['cim:SvPowerFlow.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvPowerFlow.q'], 'cim:ReactivePower', 'cim:SvPowerFlow.q');
        } else {
          attributeEntries['emptyEntries']['cim:SvPowerFlow.q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvPowerFlow.q'], 'cim:ReactivePower', 'cim:SvPowerFlow.q');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SvPowerFlow.Terminal", "cim:SvPowerFlow.p", "cim:SvPowerFlow.q"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SvPowerFlow.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SvPowerFlow: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SvPowerFlow.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SvPowerFlow;
  }(BaseClass);
  _defineProperty(SvPowerFlow, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SV],
    'Terminal': [CGMESProfile.shortNames.SV],
    'p': [CGMESProfile.shortNames.SV],
    'q': [CGMESProfile.shortNames.SV]
  });

  var SvShuntCompensatorSections = /*#__PURE__*/function (_BaseClass) {
    _inherits(SvShuntCompensatorSections, _BaseClass);
    var _super = _createSuper(SvShuntCompensatorSections);
    function SvShuntCompensatorSections() {
      _classCallCheck(this, SvShuntCompensatorSections);
      return _super.apply(this, arguments);
    }
    _createClass(SvShuntCompensatorSections, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SvShuntCompensatorSections";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:SvShuntCompensatorSections.sections' in object) {
          attributeEntries['filledEntries']['cim:SvShuntCompensatorSections.sections'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvShuntCompensatorSections.sections'], 'cim:Simple_Float', 'cim:SvShuntCompensatorSections.sections');
        } else {
          attributeEntries['emptyEntries']['cim:SvShuntCompensatorSections.sections'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvShuntCompensatorSections.sections'], 'cim:Simple_Float', 'cim:SvShuntCompensatorSections.sections');
        }
        if ('cim:SvShuntCompensatorSections.ShuntCompensator' in object) {
          attributeEntries['filledEntries']['cim:SvShuntCompensatorSections.ShuntCompensator'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvShuntCompensatorSections.ShuntCompensator'], 'cim:ShuntCompensator', 'cim:SvShuntCompensatorSections.ShuntCompensator');
        } else {
          attributeEntries['emptyEntries']['cim:SvShuntCompensatorSections.ShuntCompensator'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvShuntCompensatorSections.ShuntCompensator'], 'cim:ShuntCompensator', 'cim:SvShuntCompensatorSections.ShuntCompensator');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SvShuntCompensatorSections.sections", "cim:SvShuntCompensatorSections.ShuntCompensator"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SvShuntCompensatorSections.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SvShuntCompensatorSections: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SvShuntCompensatorSections.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SvShuntCompensatorSections;
  }(BaseClass);
  _defineProperty(SvShuntCompensatorSections, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SV],
    'sections': [CGMESProfile.shortNames.SV],
    'ShuntCompensator': [CGMESProfile.shortNames.SV]
  });

  var SvStatus = /*#__PURE__*/function (_BaseClass) {
    _inherits(SvStatus, _BaseClass);
    var _super = _createSuper(SvStatus);
    function SvStatus() {
      _classCallCheck(this, SvStatus);
      return _super.apply(this, arguments);
    }
    _createClass(SvStatus, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SvStatus";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:SvStatus.ConductingEquipment' in object) {
          attributeEntries['filledEntries']['cim:SvStatus.ConductingEquipment'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvStatus.ConductingEquipment'], 'cim:ConductingEquipment', 'cim:SvStatus.ConductingEquipment');
        } else {
          attributeEntries['emptyEntries']['cim:SvStatus.ConductingEquipment'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvStatus.ConductingEquipment'], 'cim:ConductingEquipment', 'cim:SvStatus.ConductingEquipment');
        }
        if ('cim:SvStatus.inService' in object) {
          attributeEntries['filledEntries']['cim:SvStatus.inService'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvStatus.inService'], 'cim:Boolean', 'cim:SvStatus.inService');
        } else {
          attributeEntries['emptyEntries']['cim:SvStatus.inService'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvStatus.inService'], 'cim:Boolean', 'cim:SvStatus.inService');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SvStatus.ConductingEquipment", "cim:SvStatus.inService"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SvStatus.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SvStatus: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SvStatus.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SvStatus;
  }(BaseClass);
  _defineProperty(SvStatus, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SV],
    'ConductingEquipment': [CGMESProfile.shortNames.SV],
    'inService': [CGMESProfile.shortNames.SV]
  });

  var SvTapStep = /*#__PURE__*/function (_BaseClass) {
    _inherits(SvTapStep, _BaseClass);
    var _super = _createSuper(SvTapStep);
    function SvTapStep() {
      _classCallCheck(this, SvTapStep);
      return _super.apply(this, arguments);
    }
    _createClass(SvTapStep, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SvTapStep";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:SvTapStep.position' in object) {
          attributeEntries['filledEntries']['cim:SvTapStep.position'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvTapStep.position'], 'cim:Simple_Float', 'cim:SvTapStep.position');
        } else {
          attributeEntries['emptyEntries']['cim:SvTapStep.position'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvTapStep.position'], 'cim:Simple_Float', 'cim:SvTapStep.position');
        }
        if ('cim:SvTapStep.TapChanger' in object) {
          attributeEntries['filledEntries']['cim:SvTapStep.TapChanger'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvTapStep.TapChanger'], 'cim:TapChanger', 'cim:SvTapStep.TapChanger');
        } else {
          attributeEntries['emptyEntries']['cim:SvTapStep.TapChanger'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvTapStep.TapChanger'], 'cim:TapChanger', 'cim:SvTapStep.TapChanger');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SvTapStep.position", "cim:SvTapStep.TapChanger"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SvTapStep.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SvTapStep: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SvTapStep.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SvTapStep;
  }(BaseClass);
  _defineProperty(SvTapStep, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SV],
    'position': [CGMESProfile.shortNames.SV],
    'TapChanger': [CGMESProfile.shortNames.SV]
  });

  var SvVoltage = /*#__PURE__*/function (_BaseClass) {
    _inherits(SvVoltage, _BaseClass);
    var _super = _createSuper(SvVoltage);
    function SvVoltage() {
      _classCallCheck(this, SvVoltage);
      return _super.apply(this, arguments);
    }
    _createClass(SvVoltage, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SvVoltage";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:SvVoltage.angle' in object) {
          attributeEntries['filledEntries']['cim:SvVoltage.angle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvVoltage.angle'], 'cim:AngleDegrees', 'cim:SvVoltage.angle');
        } else {
          attributeEntries['emptyEntries']['cim:SvVoltage.angle'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvVoltage.angle'], 'cim:AngleDegrees', 'cim:SvVoltage.angle');
        }
        if ('cim:SvVoltage.v' in object) {
          attributeEntries['filledEntries']['cim:SvVoltage.v'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvVoltage.v'], 'cim:Voltage', 'cim:SvVoltage.v');
        } else {
          attributeEntries['emptyEntries']['cim:SvVoltage.v'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvVoltage.v'], 'cim:Voltage', 'cim:SvVoltage.v');
        }
        if ('cim:SvVoltage.TopologicalNode' in object) {
          attributeEntries['filledEntries']['cim:SvVoltage.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvVoltage.TopologicalNode'], 'cim:TopologicalNode', 'cim:SvVoltage.TopologicalNode');
        } else {
          attributeEntries['emptyEntries']['cim:SvVoltage.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SvVoltage.TopologicalNode'], 'cim:TopologicalNode', 'cim:SvVoltage.TopologicalNode');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SvVoltage.angle", "cim:SvVoltage.v", "cim:SvVoltage.TopologicalNode"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SvVoltage.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SvVoltage: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SvVoltage.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SvVoltage;
  }(BaseClass);
  _defineProperty(SvVoltage, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SV],
    'angle': [CGMESProfile.shortNames.SV],
    'v': [CGMESProfile.shortNames.SV],
    'TopologicalNode': [CGMESProfile.shortNames.SV]
  });

  var SwitchSchedule = /*#__PURE__*/function (_SeasonDayTypeSchedul) {
    _inherits(SwitchSchedule, _SeasonDayTypeSchedul);
    var _super = _createSuper(SwitchSchedule);
    function SwitchSchedule() {
      _classCallCheck(this, SwitchSchedule);
      return _super.apply(this, arguments);
    }
    _createClass(SwitchSchedule, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SwitchSchedule";
        var attributeEntries = SeasonDayTypeSchedule.attributeHTML(object, cimmenu, classType);
        if ('cim:SwitchSchedule.Switch' in object) {
          attributeEntries['filledEntries']['cim:SwitchSchedule.Switch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SwitchSchedule.Switch'], 'cim:Switch', 'cim:SwitchSchedule.Switch');
        } else {
          attributeEntries['emptyEntries']['cim:SwitchSchedule.Switch'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SwitchSchedule.Switch'], 'cim:Switch', 'cim:SwitchSchedule.Switch');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SwitchSchedule.Switch"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (SeasonDayTypeSchedule.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SwitchSchedule.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SwitchSchedule: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SwitchSchedule.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SwitchSchedule;
  }(SeasonDayTypeSchedule);
  _defineProperty(SwitchSchedule, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'Switch': [CGMESProfile.shortNames.EQ]
  });

  var SynchronousMachine = /*#__PURE__*/function (_RotatingMachine) {
    _inherits(SynchronousMachine, _RotatingMachine);
    var _super = _createSuper(SynchronousMachine);
    function SynchronousMachine() {
      _classCallCheck(this, SynchronousMachine);
      return _super.apply(this, arguments);
    }
    _createClass(SynchronousMachine, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SynchronousMachine";
        var attributeEntries = RotatingMachine.attributeHTML(object, cimmenu, classType);
        if ('cim:SynchronousMachine.InitialReactiveCapabilityCurve' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.InitialReactiveCapabilityCurve'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.InitialReactiveCapabilityCurve'], 'cim:ReactiveCapabilityCurve', 'cim:SynchronousMachine.InitialReactiveCapabilityCurve');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.InitialReactiveCapabilityCurve'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.InitialReactiveCapabilityCurve'], 'cim:ReactiveCapabilityCurve', 'cim:SynchronousMachine.InitialReactiveCapabilityCurve');
        }
        if ('cim:SynchronousMachine.maxQ' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.maxQ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.maxQ'], 'cim:ReactivePower', 'cim:SynchronousMachine.maxQ');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.maxQ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.maxQ'], 'cim:ReactivePower', 'cim:SynchronousMachine.maxQ');
        }
        if ('cim:SynchronousMachine.minQ' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.minQ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.minQ'], 'cim:ReactivePower', 'cim:SynchronousMachine.minQ');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.minQ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.minQ'], 'cim:ReactivePower', 'cim:SynchronousMachine.minQ');
        }
        if ('cim:SynchronousMachine.qPercent' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.qPercent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.qPercent'], 'cim:PerCent', 'cim:SynchronousMachine.qPercent');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.qPercent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.qPercent'], 'cim:PerCent', 'cim:SynchronousMachine.qPercent');
        }
        if ('cim:SynchronousMachine.type' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.type'], 'cim:SynchronousMachineKind', 'cim:SynchronousMachine.type');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.type'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.type'], 'cim:SynchronousMachineKind', 'cim:SynchronousMachine.type');
        }
        if ('cim:SynchronousMachine.earthing' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.earthing'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.earthing'], 'cim:Boolean', 'cim:SynchronousMachine.earthing');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.earthing'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.earthing'], 'cim:Boolean', 'cim:SynchronousMachine.earthing');
        }
        if ('cim:SynchronousMachine.earthingStarPointR' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.earthingStarPointR'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.earthingStarPointR'], 'cim:Resistance', 'cim:SynchronousMachine.earthingStarPointR');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.earthingStarPointR'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.earthingStarPointR'], 'cim:Resistance', 'cim:SynchronousMachine.earthingStarPointR');
        }
        if ('cim:SynchronousMachine.earthingStarPointX' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.earthingStarPointX'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.earthingStarPointX'], 'cim:Reactance', 'cim:SynchronousMachine.earthingStarPointX');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.earthingStarPointX'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.earthingStarPointX'], 'cim:Reactance', 'cim:SynchronousMachine.earthingStarPointX');
        }
        if ('cim:SynchronousMachine.ikk' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.ikk'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.ikk'], 'cim:CurrentFlow', 'cim:SynchronousMachine.ikk');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.ikk'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.ikk'], 'cim:CurrentFlow', 'cim:SynchronousMachine.ikk');
        }
        if ('cim:SynchronousMachine.mu' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.mu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.mu'], 'cim:Simple_Float', 'cim:SynchronousMachine.mu');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.mu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.mu'], 'cim:Simple_Float', 'cim:SynchronousMachine.mu');
        }
        if ('cim:SynchronousMachine.r0' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.r0'], 'cim:PU', 'cim:SynchronousMachine.r0');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.r0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.r0'], 'cim:PU', 'cim:SynchronousMachine.r0');
        }
        if ('cim:SynchronousMachine.r2' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.r2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.r2'], 'cim:PU', 'cim:SynchronousMachine.r2');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.r2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.r2'], 'cim:PU', 'cim:SynchronousMachine.r2');
        }
        if ('cim:SynchronousMachine.satDirectSubtransX' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.satDirectSubtransX'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.satDirectSubtransX'], 'cim:PU', 'cim:SynchronousMachine.satDirectSubtransX');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.satDirectSubtransX'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.satDirectSubtransX'], 'cim:PU', 'cim:SynchronousMachine.satDirectSubtransX');
        }
        if ('cim:SynchronousMachine.satDirectSyncX' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.satDirectSyncX'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.satDirectSyncX'], 'cim:PU', 'cim:SynchronousMachine.satDirectSyncX');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.satDirectSyncX'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.satDirectSyncX'], 'cim:PU', 'cim:SynchronousMachine.satDirectSyncX');
        }
        if ('cim:SynchronousMachine.satDirectTransX' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.satDirectTransX'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.satDirectTransX'], 'cim:PU', 'cim:SynchronousMachine.satDirectTransX');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.satDirectTransX'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.satDirectTransX'], 'cim:PU', 'cim:SynchronousMachine.satDirectTransX');
        }
        if ('cim:SynchronousMachine.shortCircuitRotorType' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.shortCircuitRotorType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.shortCircuitRotorType'], 'cim:ShortCircuitRotorKind', 'cim:SynchronousMachine.shortCircuitRotorType');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.shortCircuitRotorType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.shortCircuitRotorType'], 'cim:ShortCircuitRotorKind', 'cim:SynchronousMachine.shortCircuitRotorType');
        }
        if ('cim:SynchronousMachine.voltageRegulationRange' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.voltageRegulationRange'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.voltageRegulationRange'], 'cim:PerCent', 'cim:SynchronousMachine.voltageRegulationRange');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.voltageRegulationRange'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.voltageRegulationRange'], 'cim:PerCent', 'cim:SynchronousMachine.voltageRegulationRange');
        }
        if ('cim:SynchronousMachine.r' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.r'], 'cim:Resistance', 'cim:SynchronousMachine.r');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.r'], 'cim:Resistance', 'cim:SynchronousMachine.r');
        }
        if ('cim:SynchronousMachine.x0' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.x0'], 'cim:PU', 'cim:SynchronousMachine.x0');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.x0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.x0'], 'cim:PU', 'cim:SynchronousMachine.x0');
        }
        if ('cim:SynchronousMachine.x2' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.x2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.x2'], 'cim:PU', 'cim:SynchronousMachine.x2');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.x2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.x2'], 'cim:PU', 'cim:SynchronousMachine.x2');
        }
        if ('cim:SynchronousMachine.operatingMode' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.operatingMode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.operatingMode'], 'cim:SynchronousMachineOperatingMode', 'cim:SynchronousMachine.operatingMode');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.operatingMode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.operatingMode'], 'cim:SynchronousMachineOperatingMode', 'cim:SynchronousMachine.operatingMode');
        }
        if ('cim:SynchronousMachine.referencePriority' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachine.referencePriority'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.referencePriority'], 'cim:Integer', 'cim:SynchronousMachine.referencePriority');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachine.referencePriority'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachine.referencePriority'], 'cim:Integer', 'cim:SynchronousMachine.referencePriority');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SynchronousMachine.InitialReactiveCapabilityCurve", "cim:SynchronousMachine.maxQ", "cim:SynchronousMachine.minQ", "cim:SynchronousMachine.qPercent", "cim:SynchronousMachine.type", "cim:SynchronousMachine.earthing", "cim:SynchronousMachine.earthingStarPointR", "cim:SynchronousMachine.earthingStarPointX", "cim:SynchronousMachine.ikk", "cim:SynchronousMachine.mu", "cim:SynchronousMachine.r0", "cim:SynchronousMachine.r2", "cim:SynchronousMachine.satDirectSubtransX", "cim:SynchronousMachine.satDirectSyncX", "cim:SynchronousMachine.satDirectTransX", "cim:SynchronousMachine.shortCircuitRotorType", "cim:SynchronousMachine.voltageRegulationRange", "cim:SynchronousMachine.r", "cim:SynchronousMachine.x0", "cim:SynchronousMachine.x2", "cim:SynchronousMachine.operatingMode", "cim:SynchronousMachine.referencePriority"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (RotatingMachine.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SynchronousMachine.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SynchronousMachine: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SynchronousMachine.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SynchronousMachine;
  }(RotatingMachine);
  _defineProperty(SynchronousMachine, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.DY],
    'InitialReactiveCapabilityCurve': [CGMESProfile.shortNames.EQ],
    'maxQ': [CGMESProfile.shortNames.EQ],
    'minQ': [CGMESProfile.shortNames.EQ],
    'qPercent': [CGMESProfile.shortNames.EQ],
    'type': [CGMESProfile.shortNames.EQ],
    'earthing': [CGMESProfile.shortNames.EQ],
    'earthingStarPointR': [CGMESProfile.shortNames.EQ],
    'earthingStarPointX': [CGMESProfile.shortNames.EQ],
    'ikk': [CGMESProfile.shortNames.EQ],
    'mu': [CGMESProfile.shortNames.EQ],
    'r0': [CGMESProfile.shortNames.EQ],
    'r2': [CGMESProfile.shortNames.EQ],
    'satDirectSubtransX': [CGMESProfile.shortNames.EQ],
    'satDirectSyncX': [CGMESProfile.shortNames.EQ],
    'satDirectTransX': [CGMESProfile.shortNames.EQ],
    'shortCircuitRotorType': [CGMESProfile.shortNames.EQ],
    'voltageRegulationRange': [CGMESProfile.shortNames.EQ],
    'r': [CGMESProfile.shortNames.EQ],
    'x0': [CGMESProfile.shortNames.EQ],
    'x2': [CGMESProfile.shortNames.EQ],
    'operatingMode': [CGMESProfile.shortNames.SSH],
    'referencePriority': [CGMESProfile.shortNames.SSH]
  });

  var SynchronousMachineDynamics = /*#__PURE__*/function (_RotatingMachineDynam) {
    _inherits(SynchronousMachineDynamics, _RotatingMachineDynam);
    var _super = _createSuper(SynchronousMachineDynamics);
    function SynchronousMachineDynamics() {
      _classCallCheck(this, SynchronousMachineDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(SynchronousMachineDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SynchronousMachineDynamics";
        var attributeEntries = RotatingMachineDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:SynchronousMachineDynamics.SynchronousMachine' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineDynamics.SynchronousMachine'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDynamics.SynchronousMachine'], 'cim:SynchronousMachine', 'cim:SynchronousMachineDynamics.SynchronousMachine');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineDynamics.SynchronousMachine'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDynamics.SynchronousMachine'], 'cim:SynchronousMachine', 'cim:SynchronousMachineDynamics.SynchronousMachine');
        }
        if ('cim:SynchronousMachineDynamics.ExcitationSystemDynamics' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineDynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:SynchronousMachineDynamics.ExcitationSystemDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineDynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:SynchronousMachineDynamics.ExcitationSystemDynamics');
        }
        if ('cim:SynchronousMachineDynamics.GenICompensationForGenJ' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineDynamics.GenICompensationForGenJ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDynamics.GenICompensationForGenJ'], 'cim:GenICompensationForGenJ', 'cim:SynchronousMachineDynamics.GenICompensationForGenJ');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineDynamics.GenICompensationForGenJ'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDynamics.GenICompensationForGenJ'], 'cim:GenICompensationForGenJ', 'cim:SynchronousMachineDynamics.GenICompensationForGenJ');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SynchronousMachineDynamics.SynchronousMachine", "cim:SynchronousMachineDynamics.ExcitationSystemDynamics", "cim:SynchronousMachineDynamics.GenICompensationForGenJ"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (RotatingMachineDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SynchronousMachineDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SynchronousMachineDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SynchronousMachineDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["SynchronousMachineUserDefined", "SynchronousMachineSimplified", "SynchronousMachineDetailed", "SynchronousMachineTimeConstantReactance", "SynchronousMachineEquivalentCircuit"];
        return subClasses;
      }
    }]);
    return SynchronousMachineDynamics;
  }(RotatingMachineDynamics);
  _defineProperty(SynchronousMachineDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'SynchronousMachine': [CGMESProfile.shortNames.DY],
    'ExcitationSystemDynamics': [CGMESProfile.shortNames.DY],
    'GenICompensationForGenJ': [CGMESProfile.shortNames.DY]
  });

  var SynchronousMachineDetailed = /*#__PURE__*/function (_SynchronousMachineDy) {
    _inherits(SynchronousMachineDetailed, _SynchronousMachineDy);
    var _super = _createSuper(SynchronousMachineDetailed);
    function SynchronousMachineDetailed() {
      _classCallCheck(this, SynchronousMachineDetailed);
      return _super.apply(this, arguments);
    }
    _createClass(SynchronousMachineDetailed, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SynchronousMachineDetailed";
        var attributeEntries = SynchronousMachineDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:SynchronousMachineDetailed.saturationFactorQAxis' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineDetailed.saturationFactorQAxis'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDetailed.saturationFactorQAxis'], 'cim:Simple_Float', 'cim:SynchronousMachineDetailed.saturationFactorQAxis');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineDetailed.saturationFactorQAxis'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDetailed.saturationFactorQAxis'], 'cim:Simple_Float', 'cim:SynchronousMachineDetailed.saturationFactorQAxis');
        }
        if ('cim:SynchronousMachineDetailed.saturationFactor120QAxis' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineDetailed.saturationFactor120QAxis'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDetailed.saturationFactor120QAxis'], 'cim:Simple_Float', 'cim:SynchronousMachineDetailed.saturationFactor120QAxis');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineDetailed.saturationFactor120QAxis'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDetailed.saturationFactor120QAxis'], 'cim:Simple_Float', 'cim:SynchronousMachineDetailed.saturationFactor120QAxis');
        }
        if ('cim:SynchronousMachineDetailed.efdBaseRatio' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineDetailed.efdBaseRatio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDetailed.efdBaseRatio'], 'cim:Simple_Float', 'cim:SynchronousMachineDetailed.efdBaseRatio');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineDetailed.efdBaseRatio'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDetailed.efdBaseRatio'], 'cim:Simple_Float', 'cim:SynchronousMachineDetailed.efdBaseRatio');
        }
        if ('cim:SynchronousMachineDetailed.ifdBaseType' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineDetailed.ifdBaseType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDetailed.ifdBaseType'], 'cim:IfdBaseKind', 'cim:SynchronousMachineDetailed.ifdBaseType');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineDetailed.ifdBaseType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDetailed.ifdBaseType'], 'cim:IfdBaseKind', 'cim:SynchronousMachineDetailed.ifdBaseType');
        }
        if ('cim:SynchronousMachineDetailed.ifdBaseValue' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineDetailed.ifdBaseValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDetailed.ifdBaseValue'], 'cim:CurrentFlow', 'cim:SynchronousMachineDetailed.ifdBaseValue');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineDetailed.ifdBaseValue'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineDetailed.ifdBaseValue'], 'cim:CurrentFlow', 'cim:SynchronousMachineDetailed.ifdBaseValue');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SynchronousMachineDetailed.saturationFactorQAxis", "cim:SynchronousMachineDetailed.saturationFactor120QAxis", "cim:SynchronousMachineDetailed.efdBaseRatio", "cim:SynchronousMachineDetailed.ifdBaseType", "cim:SynchronousMachineDetailed.ifdBaseValue"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (SynchronousMachineDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SynchronousMachineDetailed.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SynchronousMachineDetailed: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SynchronousMachineDetailed.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["SynchronousMachineTimeConstantReactance", "SynchronousMachineEquivalentCircuit"];
        return subClasses;
      }
    }]);
    return SynchronousMachineDetailed;
  }(SynchronousMachineDynamics);
  _defineProperty(SynchronousMachineDetailed, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'saturationFactorQAxis': [CGMESProfile.shortNames.DY],
    'saturationFactor120QAxis': [CGMESProfile.shortNames.DY],
    'efdBaseRatio': [CGMESProfile.shortNames.DY],
    'ifdBaseType': [CGMESProfile.shortNames.DY],
    'ifdBaseValue': [CGMESProfile.shortNames.DY]
  });

  var SynchronousMachineEquivalentCircuit = /*#__PURE__*/function (_SynchronousMachineDe) {
    _inherits(SynchronousMachineEquivalentCircuit, _SynchronousMachineDe);
    var _super = _createSuper(SynchronousMachineEquivalentCircuit);
    function SynchronousMachineEquivalentCircuit() {
      _classCallCheck(this, SynchronousMachineEquivalentCircuit);
      return _super.apply(this, arguments);
    }
    _createClass(SynchronousMachineEquivalentCircuit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SynchronousMachineEquivalentCircuit";
        var attributeEntries = SynchronousMachineDetailed.attributeHTML(object, cimmenu, classType);
        if ('cim:SynchronousMachineEquivalentCircuit.xad' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineEquivalentCircuit.xad'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.xad'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.xad');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineEquivalentCircuit.xad'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.xad'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.xad');
        }
        if ('cim:SynchronousMachineEquivalentCircuit.rfd' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineEquivalentCircuit.rfd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.rfd'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.rfd');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineEquivalentCircuit.rfd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.rfd'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.rfd');
        }
        if ('cim:SynchronousMachineEquivalentCircuit.xfd' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineEquivalentCircuit.xfd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.xfd'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.xfd');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineEquivalentCircuit.xfd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.xfd'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.xfd');
        }
        if ('cim:SynchronousMachineEquivalentCircuit.r1d' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineEquivalentCircuit.r1d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.r1d'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.r1d');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineEquivalentCircuit.r1d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.r1d'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.r1d');
        }
        if ('cim:SynchronousMachineEquivalentCircuit.x1d' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineEquivalentCircuit.x1d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.x1d'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.x1d');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineEquivalentCircuit.x1d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.x1d'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.x1d');
        }
        if ('cim:SynchronousMachineEquivalentCircuit.xf1d' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineEquivalentCircuit.xf1d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.xf1d'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.xf1d');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineEquivalentCircuit.xf1d'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.xf1d'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.xf1d');
        }
        if ('cim:SynchronousMachineEquivalentCircuit.xaq' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineEquivalentCircuit.xaq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.xaq'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.xaq');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineEquivalentCircuit.xaq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.xaq'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.xaq');
        }
        if ('cim:SynchronousMachineEquivalentCircuit.r1q' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineEquivalentCircuit.r1q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.r1q'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.r1q');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineEquivalentCircuit.r1q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.r1q'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.r1q');
        }
        if ('cim:SynchronousMachineEquivalentCircuit.x1q' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineEquivalentCircuit.x1q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.x1q'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.x1q');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineEquivalentCircuit.x1q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.x1q'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.x1q');
        }
        if ('cim:SynchronousMachineEquivalentCircuit.r2q' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineEquivalentCircuit.r2q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.r2q'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.r2q');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineEquivalentCircuit.r2q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.r2q'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.r2q');
        }
        if ('cim:SynchronousMachineEquivalentCircuit.x2q' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineEquivalentCircuit.x2q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.x2q'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.x2q');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineEquivalentCircuit.x2q'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineEquivalentCircuit.x2q'], 'cim:PU', 'cim:SynchronousMachineEquivalentCircuit.x2q');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SynchronousMachineEquivalentCircuit.xad", "cim:SynchronousMachineEquivalentCircuit.rfd", "cim:SynchronousMachineEquivalentCircuit.xfd", "cim:SynchronousMachineEquivalentCircuit.r1d", "cim:SynchronousMachineEquivalentCircuit.x1d", "cim:SynchronousMachineEquivalentCircuit.xf1d", "cim:SynchronousMachineEquivalentCircuit.xaq", "cim:SynchronousMachineEquivalentCircuit.r1q", "cim:SynchronousMachineEquivalentCircuit.x1q", "cim:SynchronousMachineEquivalentCircuit.r2q", "cim:SynchronousMachineEquivalentCircuit.x2q"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (SynchronousMachineDetailed.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SynchronousMachineEquivalentCircuit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SynchronousMachineEquivalentCircuit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SynchronousMachineEquivalentCircuit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SynchronousMachineEquivalentCircuit;
  }(SynchronousMachineDetailed);
  _defineProperty(SynchronousMachineEquivalentCircuit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'xad': [CGMESProfile.shortNames.DY],
    'rfd': [CGMESProfile.shortNames.DY],
    'xfd': [CGMESProfile.shortNames.DY],
    'r1d': [CGMESProfile.shortNames.DY],
    'x1d': [CGMESProfile.shortNames.DY],
    'xf1d': [CGMESProfile.shortNames.DY],
    'xaq': [CGMESProfile.shortNames.DY],
    'r1q': [CGMESProfile.shortNames.DY],
    'x1q': [CGMESProfile.shortNames.DY],
    'r2q': [CGMESProfile.shortNames.DY],
    'x2q': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$d = [{
    "value": "--"
  }, {
    "value": "SynchronousMachineKind.generator",
    "label": "generator"
  }, {
    "value": "SynchronousMachineKind.condenser",
    "label": "condenser"
  }, {
    "value": "SynchronousMachineKind.generatorOrCondenser",
    "label": "generatorOrCondenser"
  }, {
    "value": "SynchronousMachineKind.motor",
    "label": "motor"
  }, {
    "value": "SynchronousMachineKind.generatorOrMotor",
    "label": "generatorOrMotor"
  }, {
    "value": "SynchronousMachineKind.motorOrCondenser",
    "label": "motorOrCondenser"
  }, {
    "value": "SynchronousMachineKind.generatorOrCondenserOrMotor",
    "label": "generatorOrCondenserOrMotor"
  }];
  var SynchronousMachineKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(SynchronousMachineKind, _BaseClass);
    var _super = _createSuper(SynchronousMachineKind);
    function SynchronousMachineKind() {
      _classCallCheck(this, SynchronousMachineKind);
      return _super.apply(this, arguments);
    }
    _createClass(SynchronousMachineKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SynchronousMachineKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SynchronousMachineKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SynchronousMachineKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SynchronousMachineKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$d;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SynchronousMachineKind;
  }(BaseClass);
  _defineProperty(SynchronousMachineKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$c = [{
    "value": "--"
  }, {
    "value": "SynchronousMachineModelKind.subtransient",
    "label": "subtransient"
  }, {
    "value": "SynchronousMachineModelKind.subtransientTypeF",
    "label": "subtransientTypeF"
  }, {
    "value": "SynchronousMachineModelKind.subtransientTypeJ",
    "label": "subtransientTypeJ"
  }, {
    "value": "SynchronousMachineModelKind.subtransientSimplified",
    "label": "subtransientSimplified"
  }, {
    "value": "SynchronousMachineModelKind.subtransientSimplifiedDirectAxis",
    "label": "subtransientSimplifiedDirectAxis"
  }];
  var SynchronousMachineModelKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(SynchronousMachineModelKind, _BaseClass);
    var _super = _createSuper(SynchronousMachineModelKind);
    function SynchronousMachineModelKind() {
      _classCallCheck(this, SynchronousMachineModelKind);
      return _super.apply(this, arguments);
    }
    _createClass(SynchronousMachineModelKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SynchronousMachineModelKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SynchronousMachineModelKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SynchronousMachineModelKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SynchronousMachineModelKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$c;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SynchronousMachineModelKind;
  }(BaseClass);
  _defineProperty(SynchronousMachineModelKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$b = [{
    "value": "--"
  }, {
    "value": "SynchronousMachineOperatingMode.generator",
    "label": "generator"
  }, {
    "value": "SynchronousMachineOperatingMode.condenser",
    "label": "condenser"
  }, {
    "value": "SynchronousMachineOperatingMode.motor",
    "label": "motor"
  }];
  var SynchronousMachineOperatingMode = /*#__PURE__*/function (_BaseClass) {
    _inherits(SynchronousMachineOperatingMode, _BaseClass);
    var _super = _createSuper(SynchronousMachineOperatingMode);
    function SynchronousMachineOperatingMode() {
      _classCallCheck(this, SynchronousMachineOperatingMode);
      return _super.apply(this, arguments);
    }
    _createClass(SynchronousMachineOperatingMode, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SynchronousMachineOperatingMode";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SynchronousMachineOperatingMode.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SynchronousMachineOperatingMode: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SynchronousMachineOperatingMode.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$b;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SynchronousMachineOperatingMode;
  }(BaseClass);
  _defineProperty(SynchronousMachineOperatingMode, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SSH]
  });

  var SynchronousMachineSimplified = /*#__PURE__*/function (_SynchronousMachineDy) {
    _inherits(SynchronousMachineSimplified, _SynchronousMachineDy);
    var _super = _createSuper(SynchronousMachineSimplified);
    function SynchronousMachineSimplified() {
      _classCallCheck(this, SynchronousMachineSimplified);
      return _super.apply(this, arguments);
    }
    _createClass(SynchronousMachineSimplified, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SynchronousMachineSimplified";
        var attributeEntries = SynchronousMachineDynamics.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (SynchronousMachineDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SynchronousMachineSimplified.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SynchronousMachineSimplified: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SynchronousMachineSimplified.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SynchronousMachineSimplified;
  }(SynchronousMachineDynamics);
  _defineProperty(SynchronousMachineSimplified, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var SynchronousMachineTimeConstantReactance = /*#__PURE__*/function (_SynchronousMachineDe) {
    _inherits(SynchronousMachineTimeConstantReactance, _SynchronousMachineDe);
    var _super = _createSuper(SynchronousMachineTimeConstantReactance);
    function SynchronousMachineTimeConstantReactance() {
      _classCallCheck(this, SynchronousMachineTimeConstantReactance);
      return _super.apply(this, arguments);
    }
    _createClass(SynchronousMachineTimeConstantReactance, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SynchronousMachineTimeConstantReactance";
        var attributeEntries = SynchronousMachineDetailed.attributeHTML(object, cimmenu, classType);
        if ('cim:SynchronousMachineTimeConstantReactance.rotorType' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.rotorType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.rotorType'], 'cim:RotorKind', 'cim:SynchronousMachineTimeConstantReactance.rotorType');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.rotorType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.rotorType'], 'cim:RotorKind', 'cim:SynchronousMachineTimeConstantReactance.rotorType');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.modelType' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.modelType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.modelType'], 'cim:SynchronousMachineModelKind', 'cim:SynchronousMachineTimeConstantReactance.modelType');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.modelType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.modelType'], 'cim:SynchronousMachineModelKind', 'cim:SynchronousMachineTimeConstantReactance.modelType');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.ks' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.ks'], 'cim:Simple_Float', 'cim:SynchronousMachineTimeConstantReactance.ks');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.ks'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.ks'], 'cim:Simple_Float', 'cim:SynchronousMachineTimeConstantReactance.ks');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.xDirectSync' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.xDirectSync'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.xDirectSync'], 'cim:PU', 'cim:SynchronousMachineTimeConstantReactance.xDirectSync');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.xDirectSync'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.xDirectSync'], 'cim:PU', 'cim:SynchronousMachineTimeConstantReactance.xDirectSync');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.xDirectTrans' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.xDirectTrans'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.xDirectTrans'], 'cim:PU', 'cim:SynchronousMachineTimeConstantReactance.xDirectTrans');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.xDirectTrans'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.xDirectTrans'], 'cim:PU', 'cim:SynchronousMachineTimeConstantReactance.xDirectTrans');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.xDirectSubtrans' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.xDirectSubtrans'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.xDirectSubtrans'], 'cim:PU', 'cim:SynchronousMachineTimeConstantReactance.xDirectSubtrans');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.xDirectSubtrans'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.xDirectSubtrans'], 'cim:PU', 'cim:SynchronousMachineTimeConstantReactance.xDirectSubtrans');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.xQuadSync' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.xQuadSync'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.xQuadSync'], 'cim:PU', 'cim:SynchronousMachineTimeConstantReactance.xQuadSync');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.xQuadSync'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.xQuadSync'], 'cim:PU', 'cim:SynchronousMachineTimeConstantReactance.xQuadSync');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.xQuadTrans' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.xQuadTrans'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.xQuadTrans'], 'cim:PU', 'cim:SynchronousMachineTimeConstantReactance.xQuadTrans');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.xQuadTrans'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.xQuadTrans'], 'cim:PU', 'cim:SynchronousMachineTimeConstantReactance.xQuadTrans');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.xQuadSubtrans' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.xQuadSubtrans'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.xQuadSubtrans'], 'cim:PU', 'cim:SynchronousMachineTimeConstantReactance.xQuadSubtrans');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.xQuadSubtrans'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.xQuadSubtrans'], 'cim:PU', 'cim:SynchronousMachineTimeConstantReactance.xQuadSubtrans');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.tpdo' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.tpdo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.tpdo'], 'cim:Seconds', 'cim:SynchronousMachineTimeConstantReactance.tpdo');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.tpdo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.tpdo'], 'cim:Seconds', 'cim:SynchronousMachineTimeConstantReactance.tpdo');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.tppdo' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.tppdo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.tppdo'], 'cim:Seconds', 'cim:SynchronousMachineTimeConstantReactance.tppdo');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.tppdo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.tppdo'], 'cim:Seconds', 'cim:SynchronousMachineTimeConstantReactance.tppdo');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.tpqo' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.tpqo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.tpqo'], 'cim:Seconds', 'cim:SynchronousMachineTimeConstantReactance.tpqo');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.tpqo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.tpqo'], 'cim:Seconds', 'cim:SynchronousMachineTimeConstantReactance.tpqo');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.tppqo' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.tppqo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.tppqo'], 'cim:Seconds', 'cim:SynchronousMachineTimeConstantReactance.tppqo');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.tppqo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.tppqo'], 'cim:Seconds', 'cim:SynchronousMachineTimeConstantReactance.tppqo');
        }
        if ('cim:SynchronousMachineTimeConstantReactance.tc' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineTimeConstantReactance.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.tc'], 'cim:Seconds', 'cim:SynchronousMachineTimeConstantReactance.tc');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineTimeConstantReactance.tc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineTimeConstantReactance.tc'], 'cim:Seconds', 'cim:SynchronousMachineTimeConstantReactance.tc');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SynchronousMachineTimeConstantReactance.rotorType", "cim:SynchronousMachineTimeConstantReactance.modelType", "cim:SynchronousMachineTimeConstantReactance.ks", "cim:SynchronousMachineTimeConstantReactance.xDirectSync", "cim:SynchronousMachineTimeConstantReactance.xDirectTrans", "cim:SynchronousMachineTimeConstantReactance.xDirectSubtrans", "cim:SynchronousMachineTimeConstantReactance.xQuadSync", "cim:SynchronousMachineTimeConstantReactance.xQuadTrans", "cim:SynchronousMachineTimeConstantReactance.xQuadSubtrans", "cim:SynchronousMachineTimeConstantReactance.tpdo", "cim:SynchronousMachineTimeConstantReactance.tppdo", "cim:SynchronousMachineTimeConstantReactance.tpqo", "cim:SynchronousMachineTimeConstantReactance.tppqo", "cim:SynchronousMachineTimeConstantReactance.tc"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (SynchronousMachineDetailed.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SynchronousMachineTimeConstantReactance.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SynchronousMachineTimeConstantReactance: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SynchronousMachineTimeConstantReactance.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SynchronousMachineTimeConstantReactance;
  }(SynchronousMachineDetailed);
  _defineProperty(SynchronousMachineTimeConstantReactance, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'rotorType': [CGMESProfile.shortNames.DY],
    'modelType': [CGMESProfile.shortNames.DY],
    'ks': [CGMESProfile.shortNames.DY],
    'xDirectSync': [CGMESProfile.shortNames.DY],
    'xDirectTrans': [CGMESProfile.shortNames.DY],
    'xDirectSubtrans': [CGMESProfile.shortNames.DY],
    'xQuadSync': [CGMESProfile.shortNames.DY],
    'xQuadTrans': [CGMESProfile.shortNames.DY],
    'xQuadSubtrans': [CGMESProfile.shortNames.DY],
    'tpdo': [CGMESProfile.shortNames.DY],
    'tppdo': [CGMESProfile.shortNames.DY],
    'tpqo': [CGMESProfile.shortNames.DY],
    'tppqo': [CGMESProfile.shortNames.DY],
    'tc': [CGMESProfile.shortNames.DY]
  });

  var SynchronousMachineUserDefined = /*#__PURE__*/function (_SynchronousMachineDy) {
    _inherits(SynchronousMachineUserDefined, _SynchronousMachineDy);
    var _super = _createSuper(SynchronousMachineUserDefined);
    function SynchronousMachineUserDefined() {
      _classCallCheck(this, SynchronousMachineUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(SynchronousMachineUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "SynchronousMachineUserDefined";
        var attributeEntries = SynchronousMachineDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:SynchronousMachineUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:SynchronousMachineUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineUserDefined.proprietary'], 'cim:Boolean', 'cim:SynchronousMachineUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:SynchronousMachineUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['SynchronousMachineUserDefined.proprietary'], 'cim:Boolean', 'cim:SynchronousMachineUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:SynchronousMachineUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (SynchronousMachineDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!SynchronousMachineUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class SynchronousMachineUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = SynchronousMachineUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return SynchronousMachineUserDefined;
  }(SynchronousMachineDynamics);
  _defineProperty(SynchronousMachineUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var TapChangerControl = /*#__PURE__*/function (_RegulatingControl) {
    _inherits(TapChangerControl, _RegulatingControl);
    var _super = _createSuper(TapChangerControl);
    function TapChangerControl() {
      _classCallCheck(this, TapChangerControl);
      return _super.apply(this, arguments);
    }
    _createClass(TapChangerControl, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TapChangerControl";
        var attributeEntries = RegulatingControl.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (RegulatingControl.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TapChangerControl.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TapChangerControl: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TapChangerControl.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return TapChangerControl;
  }(RegulatingControl);
  _defineProperty(TapChangerControl, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var TapSchedule = /*#__PURE__*/function (_SeasonDayTypeSchedul) {
    _inherits(TapSchedule, _SeasonDayTypeSchedul);
    var _super = _createSuper(TapSchedule);
    function TapSchedule() {
      _classCallCheck(this, TapSchedule);
      return _super.apply(this, arguments);
    }
    _createClass(TapSchedule, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TapSchedule";
        var attributeEntries = SeasonDayTypeSchedule.attributeHTML(object, cimmenu, classType);
        if ('cim:TapSchedule.TapChanger' in object) {
          attributeEntries['filledEntries']['cim:TapSchedule.TapChanger'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapSchedule.TapChanger'], 'cim:TapChanger', 'cim:TapSchedule.TapChanger');
        } else {
          attributeEntries['emptyEntries']['cim:TapSchedule.TapChanger'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TapSchedule.TapChanger'], 'cim:TapChanger', 'cim:TapSchedule.TapChanger');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TapSchedule.TapChanger"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (SeasonDayTypeSchedule.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TapSchedule.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TapSchedule: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TapSchedule.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return TapSchedule;
  }(SeasonDayTypeSchedule);
  _defineProperty(TapSchedule, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'TapChanger': [CGMESProfile.shortNames.EQ]
  });

  var Temperature = /*#__PURE__*/function (_BaseClass) {
    _inherits(Temperature, _BaseClass);
    var _super = _createSuper(Temperature);
    function Temperature() {
      _classCallCheck(this, Temperature);
      return _super.apply(this, arguments);
    }
    _createClass(Temperature, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Temperature";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Temperature.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Temperature.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Temperature.multiplier'], 'cim:UnitMultiplier', 'cim:Temperature.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Temperature.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Temperature.multiplier'], 'cim:UnitMultiplier', 'cim:Temperature.multiplier');
        }
        if ('cim:Temperature.unit' in object) {
          attributeEntries['filledEntries']['cim:Temperature.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Temperature.unit'], 'cim:UnitSymbol', 'cim:Temperature.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Temperature.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Temperature.unit'], 'cim:UnitSymbol', 'cim:Temperature.unit');
        }
        if ('cim:Temperature.value' in object) {
          attributeEntries['filledEntries']['cim:Temperature.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Temperature.value'], 'cim:Float', 'cim:Temperature.value');
        } else {
          attributeEntries['emptyEntries']['cim:Temperature.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Temperature.value'], 'cim:Float', 'cim:Temperature.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Temperature.multiplier", "cim:Temperature.unit", "cim:Temperature.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Temperature.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Temperature: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Temperature.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Temperature;
  }(BaseClass);
  _defineProperty(Temperature, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'multiplier': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'unit': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY],
    'value': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY]
  });

  var Terminal = /*#__PURE__*/function (_ACDCTerminal) {
    _inherits(Terminal, _ACDCTerminal);
    var _super = _createSuper(Terminal);
    function Terminal() {
      _classCallCheck(this, Terminal);
      return _super.apply(this, arguments);
    }
    _createClass(Terminal, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Terminal";
        var attributeEntries = ACDCTerminal.attributeHTML(object, cimmenu, classType);
        if ('cim:Terminal.ConductingEquipment' in object) {
          attributeEntries['filledEntries']['cim:Terminal.ConductingEquipment'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.ConductingEquipment'], 'cim:ConductingEquipment', 'cim:Terminal.ConductingEquipment');
        } else {
          attributeEntries['emptyEntries']['cim:Terminal.ConductingEquipment'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.ConductingEquipment'], 'cim:ConductingEquipment', 'cim:Terminal.ConductingEquipment');
        }
        if ('cim:Terminal.phases' in object) {
          attributeEntries['filledEntries']['cim:Terminal.phases'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.phases'], 'cim:PhaseCode', 'cim:Terminal.phases');
        } else {
          attributeEntries['emptyEntries']['cim:Terminal.phases'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.phases'], 'cim:PhaseCode', 'cim:Terminal.phases');
        }
        if ('cim:Terminal.TieFlow' in object) {
          attributeEntries['filledEntries']['cim:Terminal.TieFlow'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.TieFlow'], 'cim:TieFlow', 'cim:Terminal.TieFlow');
        } else {
          attributeEntries['emptyEntries']['cim:Terminal.TieFlow'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.TieFlow'], 'cim:TieFlow', 'cim:Terminal.TieFlow');
        }
        if ('cim:Terminal.ConnectivityNode' in object) {
          attributeEntries['filledEntries']['cim:Terminal.ConnectivityNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.ConnectivityNode'], 'cim:ConnectivityNode', 'cim:Terminal.ConnectivityNode');
        } else {
          attributeEntries['emptyEntries']['cim:Terminal.ConnectivityNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.ConnectivityNode'], 'cim:ConnectivityNode', 'cim:Terminal.ConnectivityNode');
        }
        if ('cim:Terminal.HasSecondMutualCoupling' in object) {
          attributeEntries['filledEntries']['cim:Terminal.HasSecondMutualCoupling'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.HasSecondMutualCoupling'], 'cim:MutualCoupling', 'cim:Terminal.HasSecondMutualCoupling');
        } else {
          attributeEntries['emptyEntries']['cim:Terminal.HasSecondMutualCoupling'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.HasSecondMutualCoupling'], 'cim:MutualCoupling', 'cim:Terminal.HasSecondMutualCoupling');
        }
        if ('cim:Terminal.RemoteInputSignal' in object) {
          attributeEntries['filledEntries']['cim:Terminal.RemoteInputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.RemoteInputSignal'], 'cim:RemoteInputSignal', 'cim:Terminal.RemoteInputSignal');
        } else {
          attributeEntries['emptyEntries']['cim:Terminal.RemoteInputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.RemoteInputSignal'], 'cim:RemoteInputSignal', 'cim:Terminal.RemoteInputSignal');
        }
        if ('cim:Terminal.TopologicalNode' in object) {
          attributeEntries['filledEntries']['cim:Terminal.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.TopologicalNode'], 'cim:TopologicalNode', 'cim:Terminal.TopologicalNode');
        } else {
          attributeEntries['emptyEntries']['cim:Terminal.TopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Terminal.TopologicalNode'], 'cim:TopologicalNode', 'cim:Terminal.TopologicalNode');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Terminal.ConductingEquipment", "cim:Terminal.phases", "cim:Terminal.TieFlow", "cim:Terminal.ConnectivityNode", "cim:Terminal.HasSecondMutualCoupling", "cim:Terminal.RemoteInputSignal", "cim:Terminal.TopologicalNode"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ACDCTerminal.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Terminal.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Terminal: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Terminal.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Terminal;
  }(ACDCTerminal);
  _defineProperty(Terminal, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.TP, CGMESProfile.shortNames.EQ_BD],
    'ConductingEquipment': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.EQ_BD],
    'phases': [CGMESProfile.shortNames.EQ],
    'TieFlow': [CGMESProfile.shortNames.EQ],
    'ConnectivityNode': [CGMESProfile.shortNames.EQ],
    'HasSecondMutualCoupling': [CGMESProfile.shortNames.EQ],
    'RemoteInputSignal': [CGMESProfile.shortNames.DY],
    'TopologicalNode': [CGMESProfile.shortNames.TP]
  });

  var TextDiagramObject = /*#__PURE__*/function (_DiagramObject) {
    _inherits(TextDiagramObject, _DiagramObject);
    var _super = _createSuper(TextDiagramObject);
    function TextDiagramObject() {
      _classCallCheck(this, TextDiagramObject);
      return _super.apply(this, arguments);
    }
    _createClass(TextDiagramObject, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TextDiagramObject";
        var attributeEntries = DiagramObject.attributeHTML(object, cimmenu, classType);
        if ('cim:TextDiagramObject.text' in object) {
          attributeEntries['filledEntries']['cim:TextDiagramObject.text'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TextDiagramObject.text'], 'cim:String', 'cim:TextDiagramObject.text');
        } else {
          attributeEntries['emptyEntries']['cim:TextDiagramObject.text'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TextDiagramObject.text'], 'cim:String', 'cim:TextDiagramObject.text');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TextDiagramObject.text"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DiagramObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TextDiagramObject.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TextDiagramObject: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TextDiagramObject.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return TextDiagramObject;
  }(DiagramObject);
  _defineProperty(TextDiagramObject, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL],
    'text': [CGMESProfile.shortNames.DL]
  });

  var ThermalGeneratingUnit = /*#__PURE__*/function (_GeneratingUnit) {
    _inherits(ThermalGeneratingUnit, _GeneratingUnit);
    var _super = _createSuper(ThermalGeneratingUnit);
    function ThermalGeneratingUnit() {
      _classCallCheck(this, ThermalGeneratingUnit);
      return _super.apply(this, arguments);
    }
    _createClass(ThermalGeneratingUnit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ThermalGeneratingUnit";
        var attributeEntries = GeneratingUnit.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (GeneratingUnit.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ThermalGeneratingUnit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ThermalGeneratingUnit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ThermalGeneratingUnit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ThermalGeneratingUnit;
  }(GeneratingUnit);
  _defineProperty(ThermalGeneratingUnit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH]
  });

  var TieFlow = /*#__PURE__*/function (_BaseClass) {
    _inherits(TieFlow, _BaseClass);
    var _super = _createSuper(TieFlow);
    function TieFlow() {
      _classCallCheck(this, TieFlow);
      return _super.apply(this, arguments);
    }
    _createClass(TieFlow, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TieFlow";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:TieFlow.Terminal' in object) {
          attributeEntries['filledEntries']['cim:TieFlow.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TieFlow.Terminal'], 'cim:Terminal', 'cim:TieFlow.Terminal');
        } else {
          attributeEntries['emptyEntries']['cim:TieFlow.Terminal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TieFlow.Terminal'], 'cim:Terminal', 'cim:TieFlow.Terminal');
        }
        if ('cim:TieFlow.ControlArea' in object) {
          attributeEntries['filledEntries']['cim:TieFlow.ControlArea'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TieFlow.ControlArea'], 'cim:ControlArea', 'cim:TieFlow.ControlArea');
        } else {
          attributeEntries['emptyEntries']['cim:TieFlow.ControlArea'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TieFlow.ControlArea'], 'cim:ControlArea', 'cim:TieFlow.ControlArea');
        }
        if ('cim:TieFlow.positiveFlowIn' in object) {
          attributeEntries['filledEntries']['cim:TieFlow.positiveFlowIn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TieFlow.positiveFlowIn'], 'cim:Boolean', 'cim:TieFlow.positiveFlowIn');
        } else {
          attributeEntries['emptyEntries']['cim:TieFlow.positiveFlowIn'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TieFlow.positiveFlowIn'], 'cim:Boolean', 'cim:TieFlow.positiveFlowIn');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TieFlow.Terminal", "cim:TieFlow.ControlArea", "cim:TieFlow.positiveFlowIn"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TieFlow.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TieFlow: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TieFlow.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return TieFlow;
  }(BaseClass);
  _defineProperty(TieFlow, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'Terminal': [CGMESProfile.shortNames.EQ],
    'ControlArea': [CGMESProfile.shortNames.EQ],
    'positiveFlowIn': [CGMESProfile.shortNames.EQ]
  });

  var TopologicalIsland = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(TopologicalIsland, _IdentifiedObject);
    var _super = _createSuper(TopologicalIsland);
    function TopologicalIsland() {
      _classCallCheck(this, TopologicalIsland);
      return _super.apply(this, arguments);
    }
    _createClass(TopologicalIsland, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TopologicalIsland";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:TopologicalIsland.AngleRefTopologicalNode' in object) {
          attributeEntries['filledEntries']['cim:TopologicalIsland.AngleRefTopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalIsland.AngleRefTopologicalNode'], 'cim:TopologicalNode', 'cim:TopologicalIsland.AngleRefTopologicalNode');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalIsland.AngleRefTopologicalNode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalIsland.AngleRefTopologicalNode'], 'cim:TopologicalNode', 'cim:TopologicalIsland.AngleRefTopologicalNode');
        }
        if ('cim:TopologicalIsland.TopologicalNodes' in object) {
          attributeEntries['filledEntries']['cim:TopologicalIsland.TopologicalNodes'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalIsland.TopologicalNodes'], 'cim:TopologicalNode', 'cim:TopologicalIsland.TopologicalNodes');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalIsland.TopologicalNodes'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalIsland.TopologicalNodes'], 'cim:TopologicalNode', 'cim:TopologicalIsland.TopologicalNodes');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TopologicalIsland.AngleRefTopologicalNode", "cim:TopologicalIsland.TopologicalNodes"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TopologicalIsland.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TopologicalIsland: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TopologicalIsland.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return TopologicalIsland;
  }(IdentifiedObject);
  _defineProperty(TopologicalIsland, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SV],
    'AngleRefTopologicalNode': [CGMESProfile.shortNames.SV],
    'TopologicalNodes': [CGMESProfile.shortNames.SV]
  });

  var TopologicalNode = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(TopologicalNode, _IdentifiedObject);
    var _super = _createSuper(TopologicalNode);
    function TopologicalNode() {
      _classCallCheck(this, TopologicalNode);
      return _super.apply(this, arguments);
    }
    _createClass(TopologicalNode, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TopologicalNode";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:TopologicalNode.SvVoltage' in object) {
          attributeEntries['filledEntries']['cim:TopologicalNode.SvVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.SvVoltage'], 'cim:SvVoltage', 'cim:TopologicalNode.SvVoltage');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalNode.SvVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.SvVoltage'], 'cim:SvVoltage', 'cim:TopologicalNode.SvVoltage');
        }
        if ('cim:TopologicalNode.TopologicalIsland' in object) {
          attributeEntries['filledEntries']['cim:TopologicalNode.TopologicalIsland'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.TopologicalIsland'], 'cim:TopologicalIsland', 'cim:TopologicalNode.TopologicalIsland');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalNode.TopologicalIsland'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.TopologicalIsland'], 'cim:TopologicalIsland', 'cim:TopologicalNode.TopologicalIsland');
        }
        if ('cim:TopologicalNode.BaseVoltage' in object) {
          attributeEntries['filledEntries']['cim:TopologicalNode.BaseVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.BaseVoltage'], 'cim:BaseVoltage', 'cim:TopologicalNode.BaseVoltage');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalNode.BaseVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.BaseVoltage'], 'cim:BaseVoltage', 'cim:TopologicalNode.BaseVoltage');
        }
        if ('cim:TopologicalNode.ConnectivityNodeContainer' in object) {
          attributeEntries['filledEntries']['cim:TopologicalNode.ConnectivityNodeContainer'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.ConnectivityNodeContainer'], 'cim:ConnectivityNodeContainer', 'cim:TopologicalNode.ConnectivityNodeContainer');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalNode.ConnectivityNodeContainer'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.ConnectivityNodeContainer'], 'cim:ConnectivityNodeContainer', 'cim:TopologicalNode.ConnectivityNodeContainer');
        }
        if ('cim:TopologicalNode.ReportingGroup' in object) {
          attributeEntries['filledEntries']['cim:TopologicalNode.ReportingGroup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.ReportingGroup'], 'cim:ReportingGroup', 'cim:TopologicalNode.ReportingGroup');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalNode.ReportingGroup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.ReportingGroup'], 'cim:ReportingGroup', 'cim:TopologicalNode.ReportingGroup');
        }
        if ('cim:TopologicalNode.boundaryPoint' in object) {
          attributeEntries['filledEntries']['cim:TopologicalNode.boundaryPoint'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.boundaryPoint'], 'cim:Boolean', 'cim:TopologicalNode.boundaryPoint');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalNode.boundaryPoint'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.boundaryPoint'], 'cim:Boolean', 'cim:TopologicalNode.boundaryPoint');
        }
        if ('cim:TopologicalNode.fromEndIsoCode' in object) {
          attributeEntries['filledEntries']['cim:TopologicalNode.fromEndIsoCode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.fromEndIsoCode'], 'cim:String', 'cim:TopologicalNode.fromEndIsoCode');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalNode.fromEndIsoCode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.fromEndIsoCode'], 'cim:String', 'cim:TopologicalNode.fromEndIsoCode');
        }
        if ('cim:TopologicalNode.fromEndName' in object) {
          attributeEntries['filledEntries']['cim:TopologicalNode.fromEndName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.fromEndName'], 'cim:String', 'cim:TopologicalNode.fromEndName');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalNode.fromEndName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.fromEndName'], 'cim:String', 'cim:TopologicalNode.fromEndName');
        }
        if ('cim:TopologicalNode.fromEndNameTso' in object) {
          attributeEntries['filledEntries']['cim:TopologicalNode.fromEndNameTso'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.fromEndNameTso'], 'cim:String', 'cim:TopologicalNode.fromEndNameTso');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalNode.fromEndNameTso'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.fromEndNameTso'], 'cim:String', 'cim:TopologicalNode.fromEndNameTso');
        }
        if ('cim:TopologicalNode.toEndIsoCode' in object) {
          attributeEntries['filledEntries']['cim:TopologicalNode.toEndIsoCode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.toEndIsoCode'], 'cim:String', 'cim:TopologicalNode.toEndIsoCode');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalNode.toEndIsoCode'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.toEndIsoCode'], 'cim:String', 'cim:TopologicalNode.toEndIsoCode');
        }
        if ('cim:TopologicalNode.toEndName' in object) {
          attributeEntries['filledEntries']['cim:TopologicalNode.toEndName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.toEndName'], 'cim:String', 'cim:TopologicalNode.toEndName');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalNode.toEndName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.toEndName'], 'cim:String', 'cim:TopologicalNode.toEndName');
        }
        if ('cim:TopologicalNode.toEndNameTso' in object) {
          attributeEntries['filledEntries']['cim:TopologicalNode.toEndNameTso'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.toEndNameTso'], 'cim:String', 'cim:TopologicalNode.toEndNameTso');
        } else {
          attributeEntries['emptyEntries']['cim:TopologicalNode.toEndNameTso'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologicalNode.toEndNameTso'], 'cim:String', 'cim:TopologicalNode.toEndNameTso');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TopologicalNode.SvVoltage", "cim:TopologicalNode.TopologicalIsland", "cim:TopologicalNode.BaseVoltage", "cim:TopologicalNode.ConnectivityNodeContainer", "cim:TopologicalNode.ReportingGroup", "cim:TopologicalNode.boundaryPoint", "cim:TopologicalNode.fromEndIsoCode", "cim:TopologicalNode.fromEndName", "cim:TopologicalNode.fromEndNameTso", "cim:TopologicalNode.toEndIsoCode", "cim:TopologicalNode.toEndName", "cim:TopologicalNode.toEndNameTso"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TopologicalNode.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TopologicalNode: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TopologicalNode.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return TopologicalNode;
  }(IdentifiedObject);
  _defineProperty(TopologicalNode, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SV, CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD],
    'SvVoltage': [CGMESProfile.shortNames.SV],
    'TopologicalIsland': [CGMESProfile.shortNames.SV],
    'BaseVoltage': [CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD],
    'ConnectivityNodeContainer': [CGMESProfile.shortNames.TP, CGMESProfile.shortNames.TP_BD],
    'ReportingGroup': [CGMESProfile.shortNames.TP],
    'boundaryPoint': [CGMESProfile.shortNames.TP_BD],
    'fromEndIsoCode': [CGMESProfile.shortNames.TP_BD],
    'fromEndName': [CGMESProfile.shortNames.TP_BD],
    'fromEndNameTso': [CGMESProfile.shortNames.TP_BD],
    'toEndIsoCode': [CGMESProfile.shortNames.TP_BD],
    'toEndName': [CGMESProfile.shortNames.TP_BD],
    'toEndNameTso': [CGMESProfile.shortNames.TP_BD]
  });

  var TopologyBoundaryVersion = /*#__PURE__*/function (_BaseClass) {
    _inherits(TopologyBoundaryVersion, _BaseClass);
    var _super = _createSuper(TopologyBoundaryVersion);
    function TopologyBoundaryVersion() {
      _classCallCheck(this, TopologyBoundaryVersion);
      return _super.apply(this, arguments);
    }
    _createClass(TopologyBoundaryVersion, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TopologyBoundaryVersion";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:TopologyBoundaryVersion.baseUML' in object) {
          attributeEntries['filledEntries']['cim:TopologyBoundaryVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.baseUML'], 'cim:String', 'cim:TopologyBoundaryVersion.baseUML');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyBoundaryVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.baseUML'], 'cim:String', 'cim:TopologyBoundaryVersion.baseUML');
        }
        if ('cim:TopologyBoundaryVersion.baseURI' in object) {
          attributeEntries['filledEntries']['cim:TopologyBoundaryVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.baseURI'], 'cim:String', 'cim:TopologyBoundaryVersion.baseURI');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyBoundaryVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.baseURI'], 'cim:String', 'cim:TopologyBoundaryVersion.baseURI');
        }
        if ('cim:TopologyBoundaryVersion.date' in object) {
          attributeEntries['filledEntries']['cim:TopologyBoundaryVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.date'], 'cim:Date', 'cim:TopologyBoundaryVersion.date');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyBoundaryVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.date'], 'cim:Date', 'cim:TopologyBoundaryVersion.date');
        }
        if ('cim:TopologyBoundaryVersion.differenceModelURI' in object) {
          attributeEntries['filledEntries']['cim:TopologyBoundaryVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.differenceModelURI'], 'cim:String', 'cim:TopologyBoundaryVersion.differenceModelURI');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyBoundaryVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.differenceModelURI'], 'cim:String', 'cim:TopologyBoundaryVersion.differenceModelURI');
        }
        if ('cim:TopologyBoundaryVersion.entsoeUML' in object) {
          attributeEntries['filledEntries']['cim:TopologyBoundaryVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.entsoeUML'], 'cim:String', 'cim:TopologyBoundaryVersion.entsoeUML');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyBoundaryVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.entsoeUML'], 'cim:String', 'cim:TopologyBoundaryVersion.entsoeUML');
        }
        if ('cim:TopologyBoundaryVersion.entsoeURI' in object) {
          attributeEntries['filledEntries']['cim:TopologyBoundaryVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.entsoeURI'], 'cim:String', 'cim:TopologyBoundaryVersion.entsoeURI');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyBoundaryVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.entsoeURI'], 'cim:String', 'cim:TopologyBoundaryVersion.entsoeURI');
        }
        if ('cim:TopologyBoundaryVersion.modelDescriptionURI' in object) {
          attributeEntries['filledEntries']['cim:TopologyBoundaryVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.modelDescriptionURI'], 'cim:String', 'cim:TopologyBoundaryVersion.modelDescriptionURI');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyBoundaryVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.modelDescriptionURI'], 'cim:String', 'cim:TopologyBoundaryVersion.modelDescriptionURI');
        }
        if ('cim:TopologyBoundaryVersion.namespaceRDF' in object) {
          attributeEntries['filledEntries']['cim:TopologyBoundaryVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.namespaceRDF'], 'cim:String', 'cim:TopologyBoundaryVersion.namespaceRDF');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyBoundaryVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.namespaceRDF'], 'cim:String', 'cim:TopologyBoundaryVersion.namespaceRDF');
        }
        if ('cim:TopologyBoundaryVersion.namespaceUML' in object) {
          attributeEntries['filledEntries']['cim:TopologyBoundaryVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.namespaceUML'], 'cim:String', 'cim:TopologyBoundaryVersion.namespaceUML');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyBoundaryVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.namespaceUML'], 'cim:String', 'cim:TopologyBoundaryVersion.namespaceUML');
        }
        if ('cim:TopologyBoundaryVersion.shortName' in object) {
          attributeEntries['filledEntries']['cim:TopologyBoundaryVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.shortName'], 'cim:String', 'cim:TopologyBoundaryVersion.shortName');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyBoundaryVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyBoundaryVersion.shortName'], 'cim:String', 'cim:TopologyBoundaryVersion.shortName');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TopologyBoundaryVersion.baseUML", "cim:TopologyBoundaryVersion.baseURI", "cim:TopologyBoundaryVersion.date", "cim:TopologyBoundaryVersion.differenceModelURI", "cim:TopologyBoundaryVersion.entsoeUML", "cim:TopologyBoundaryVersion.entsoeURI", "cim:TopologyBoundaryVersion.modelDescriptionURI", "cim:TopologyBoundaryVersion.namespaceRDF", "cim:TopologyBoundaryVersion.namespaceUML", "cim:TopologyBoundaryVersion.shortName"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TopologyBoundaryVersion.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TopologyBoundaryVersion: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TopologyBoundaryVersion.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return TopologyBoundaryVersion;
  }(BaseClass);
  _defineProperty(TopologyBoundaryVersion, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.TP_BD],
    'baseUML': [CGMESProfile.shortNames.TP_BD],
    'baseURI': [CGMESProfile.shortNames.TP_BD],
    'date': [CGMESProfile.shortNames.TP_BD],
    'differenceModelURI': [CGMESProfile.shortNames.TP_BD],
    'entsoeUML': [CGMESProfile.shortNames.TP_BD],
    'entsoeURI': [CGMESProfile.shortNames.TP_BD],
    'modelDescriptionURI': [CGMESProfile.shortNames.TP_BD],
    'namespaceRDF': [CGMESProfile.shortNames.TP_BD],
    'namespaceUML': [CGMESProfile.shortNames.TP_BD],
    'shortName': [CGMESProfile.shortNames.TP_BD]
  });

  var TopologyVersion = /*#__PURE__*/function (_BaseClass) {
    _inherits(TopologyVersion, _BaseClass);
    var _super = _createSuper(TopologyVersion);
    function TopologyVersion() {
      _classCallCheck(this, TopologyVersion);
      return _super.apply(this, arguments);
    }
    _createClass(TopologyVersion, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TopologyVersion";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:TopologyVersion.baseUML' in object) {
          attributeEntries['filledEntries']['cim:TopologyVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.baseUML'], 'cim:String', 'cim:TopologyVersion.baseUML');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyVersion.baseUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.baseUML'], 'cim:String', 'cim:TopologyVersion.baseUML');
        }
        if ('cim:TopologyVersion.baseURI' in object) {
          attributeEntries['filledEntries']['cim:TopologyVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.baseURI'], 'cim:String', 'cim:TopologyVersion.baseURI');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyVersion.baseURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.baseURI'], 'cim:String', 'cim:TopologyVersion.baseURI');
        }
        if ('cim:TopologyVersion.date' in object) {
          attributeEntries['filledEntries']['cim:TopologyVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.date'], 'cim:Date', 'cim:TopologyVersion.date');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyVersion.date'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.date'], 'cim:Date', 'cim:TopologyVersion.date');
        }
        if ('cim:TopologyVersion.differenceModelURI' in object) {
          attributeEntries['filledEntries']['cim:TopologyVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.differenceModelURI'], 'cim:String', 'cim:TopologyVersion.differenceModelURI');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyVersion.differenceModelURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.differenceModelURI'], 'cim:String', 'cim:TopologyVersion.differenceModelURI');
        }
        if ('cim:TopologyVersion.entsoeUML' in object) {
          attributeEntries['filledEntries']['cim:TopologyVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.entsoeUML'], 'cim:String', 'cim:TopologyVersion.entsoeUML');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyVersion.entsoeUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.entsoeUML'], 'cim:String', 'cim:TopologyVersion.entsoeUML');
        }
        if ('cim:TopologyVersion.entsoeURI' in object) {
          attributeEntries['filledEntries']['cim:TopologyVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.entsoeURI'], 'cim:String', 'cim:TopologyVersion.entsoeURI');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyVersion.entsoeURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.entsoeURI'], 'cim:String', 'cim:TopologyVersion.entsoeURI');
        }
        if ('cim:TopologyVersion.modelDescriptionURI' in object) {
          attributeEntries['filledEntries']['cim:TopologyVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.modelDescriptionURI'], 'cim:String', 'cim:TopologyVersion.modelDescriptionURI');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyVersion.modelDescriptionURI'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.modelDescriptionURI'], 'cim:String', 'cim:TopologyVersion.modelDescriptionURI');
        }
        if ('cim:TopologyVersion.namespaceRDF' in object) {
          attributeEntries['filledEntries']['cim:TopologyVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.namespaceRDF'], 'cim:String', 'cim:TopologyVersion.namespaceRDF');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyVersion.namespaceRDF'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.namespaceRDF'], 'cim:String', 'cim:TopologyVersion.namespaceRDF');
        }
        if ('cim:TopologyVersion.namespaceUML' in object) {
          attributeEntries['filledEntries']['cim:TopologyVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.namespaceUML'], 'cim:String', 'cim:TopologyVersion.namespaceUML');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyVersion.namespaceUML'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.namespaceUML'], 'cim:String', 'cim:TopologyVersion.namespaceUML');
        }
        if ('cim:TopologyVersion.shortName' in object) {
          attributeEntries['filledEntries']['cim:TopologyVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.shortName'], 'cim:String', 'cim:TopologyVersion.shortName');
        } else {
          attributeEntries['emptyEntries']['cim:TopologyVersion.shortName'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TopologyVersion.shortName'], 'cim:String', 'cim:TopologyVersion.shortName');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TopologyVersion.baseUML", "cim:TopologyVersion.baseURI", "cim:TopologyVersion.date", "cim:TopologyVersion.differenceModelURI", "cim:TopologyVersion.entsoeUML", "cim:TopologyVersion.entsoeURI", "cim:TopologyVersion.modelDescriptionURI", "cim:TopologyVersion.namespaceRDF", "cim:TopologyVersion.namespaceUML", "cim:TopologyVersion.shortName"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TopologyVersion.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TopologyVersion: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TopologyVersion.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return TopologyVersion;
  }(BaseClass);
  _defineProperty(TopologyVersion, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.TP],
    'baseUML': [CGMESProfile.shortNames.TP],
    'baseURI': [CGMESProfile.shortNames.TP],
    'date': [CGMESProfile.shortNames.TP],
    'differenceModelURI': [CGMESProfile.shortNames.TP],
    'entsoeUML': [CGMESProfile.shortNames.TP],
    'entsoeURI': [CGMESProfile.shortNames.TP],
    'modelDescriptionURI': [CGMESProfile.shortNames.TP],
    'namespaceRDF': [CGMESProfile.shortNames.TP],
    'namespaceUML': [CGMESProfile.shortNames.TP],
    'shortName': [CGMESProfile.shortNames.TP]
  });

  var possibleValues$a = [{
    "value": "--"
  }, {
    "value": "TransformerControlMode.volt",
    "label": "volt"
  }, {
    "value": "TransformerControlMode.reactive",
    "label": "reactive"
  }];
  var TransformerControlMode = /*#__PURE__*/function (_BaseClass) {
    _inherits(TransformerControlMode, _BaseClass);
    var _super = _createSuper(TransformerControlMode);
    function TransformerControlMode() {
      _classCallCheck(this, TransformerControlMode);
      return _super.apply(this, arguments);
    }
    _createClass(TransformerControlMode, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TransformerControlMode";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TransformerControlMode.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TransformerControlMode: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TransformerControlMode.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$a;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return TransformerControlMode;
  }(BaseClass);
  _defineProperty(TransformerControlMode, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var TurbineLoadControllerDynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(TurbineLoadControllerDynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(TurbineLoadControllerDynamics);
    function TurbineLoadControllerDynamics() {
      _classCallCheck(this, TurbineLoadControllerDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(TurbineLoadControllerDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TurbineLoadControllerDynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:TurbineLoadControllerDynamics.TurbineGovernorDynamics' in object) {
          attributeEntries['filledEntries']['cim:TurbineLoadControllerDynamics.TurbineGovernorDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbineLoadControllerDynamics.TurbineGovernorDynamics'], 'cim:TurbineGovernorDynamics', 'cim:TurbineLoadControllerDynamics.TurbineGovernorDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:TurbineLoadControllerDynamics.TurbineGovernorDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbineLoadControllerDynamics.TurbineGovernorDynamics'], 'cim:TurbineGovernorDynamics', 'cim:TurbineLoadControllerDynamics.TurbineGovernorDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TurbineLoadControllerDynamics.TurbineGovernorDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TurbineLoadControllerDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TurbineLoadControllerDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TurbineLoadControllerDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["TurbineLoadControllerUserDefined", "TurbLCFB1"];
        return subClasses;
      }
    }]);
    return TurbineLoadControllerDynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(TurbineLoadControllerDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'TurbineGovernorDynamics': [CGMESProfile.shortNames.DY]
  });

  var TurbLCFB1 = /*#__PURE__*/function (_TurbineLoadControlle) {
    _inherits(TurbLCFB1, _TurbineLoadControlle);
    var _super = _createSuper(TurbLCFB1);
    function TurbLCFB1() {
      _classCallCheck(this, TurbLCFB1);
      return _super.apply(this, arguments);
    }
    _createClass(TurbLCFB1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TurbLCFB1";
        var attributeEntries = TurbineLoadControllerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:TurbLCFB1.mwbase' in object) {
          attributeEntries['filledEntries']['cim:TurbLCFB1.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.mwbase'], 'cim:ActivePower', 'cim:TurbLCFB1.mwbase');
        } else {
          attributeEntries['emptyEntries']['cim:TurbLCFB1.mwbase'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.mwbase'], 'cim:ActivePower', 'cim:TurbLCFB1.mwbase');
        }
        if ('cim:TurbLCFB1.speedReferenceGovernor' in object) {
          attributeEntries['filledEntries']['cim:TurbLCFB1.speedReferenceGovernor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.speedReferenceGovernor'], 'cim:Boolean', 'cim:TurbLCFB1.speedReferenceGovernor');
        } else {
          attributeEntries['emptyEntries']['cim:TurbLCFB1.speedReferenceGovernor'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.speedReferenceGovernor'], 'cim:Boolean', 'cim:TurbLCFB1.speedReferenceGovernor');
        }
        if ('cim:TurbLCFB1.db' in object) {
          attributeEntries['filledEntries']['cim:TurbLCFB1.db'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.db'], 'cim:PU', 'cim:TurbLCFB1.db');
        } else {
          attributeEntries['emptyEntries']['cim:TurbLCFB1.db'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.db'], 'cim:PU', 'cim:TurbLCFB1.db');
        }
        if ('cim:TurbLCFB1.emax' in object) {
          attributeEntries['filledEntries']['cim:TurbLCFB1.emax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.emax'], 'cim:PU', 'cim:TurbLCFB1.emax');
        } else {
          attributeEntries['emptyEntries']['cim:TurbLCFB1.emax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.emax'], 'cim:PU', 'cim:TurbLCFB1.emax');
        }
        if ('cim:TurbLCFB1.fb' in object) {
          attributeEntries['filledEntries']['cim:TurbLCFB1.fb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.fb'], 'cim:PU', 'cim:TurbLCFB1.fb');
        } else {
          attributeEntries['emptyEntries']['cim:TurbLCFB1.fb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.fb'], 'cim:PU', 'cim:TurbLCFB1.fb');
        }
        if ('cim:TurbLCFB1.kp' in object) {
          attributeEntries['filledEntries']['cim:TurbLCFB1.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.kp'], 'cim:PU', 'cim:TurbLCFB1.kp');
        } else {
          attributeEntries['emptyEntries']['cim:TurbLCFB1.kp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.kp'], 'cim:PU', 'cim:TurbLCFB1.kp');
        }
        if ('cim:TurbLCFB1.ki' in object) {
          attributeEntries['filledEntries']['cim:TurbLCFB1.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.ki'], 'cim:PU', 'cim:TurbLCFB1.ki');
        } else {
          attributeEntries['emptyEntries']['cim:TurbLCFB1.ki'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.ki'], 'cim:PU', 'cim:TurbLCFB1.ki');
        }
        if ('cim:TurbLCFB1.fbf' in object) {
          attributeEntries['filledEntries']['cim:TurbLCFB1.fbf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.fbf'], 'cim:Boolean', 'cim:TurbLCFB1.fbf');
        } else {
          attributeEntries['emptyEntries']['cim:TurbLCFB1.fbf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.fbf'], 'cim:Boolean', 'cim:TurbLCFB1.fbf');
        }
        if ('cim:TurbLCFB1.pbf' in object) {
          attributeEntries['filledEntries']['cim:TurbLCFB1.pbf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.pbf'], 'cim:Boolean', 'cim:TurbLCFB1.pbf');
        } else {
          attributeEntries['emptyEntries']['cim:TurbLCFB1.pbf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.pbf'], 'cim:Boolean', 'cim:TurbLCFB1.pbf');
        }
        if ('cim:TurbLCFB1.tpelec' in object) {
          attributeEntries['filledEntries']['cim:TurbLCFB1.tpelec'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.tpelec'], 'cim:Seconds', 'cim:TurbLCFB1.tpelec');
        } else {
          attributeEntries['emptyEntries']['cim:TurbLCFB1.tpelec'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.tpelec'], 'cim:Seconds', 'cim:TurbLCFB1.tpelec');
        }
        if ('cim:TurbLCFB1.irmax' in object) {
          attributeEntries['filledEntries']['cim:TurbLCFB1.irmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.irmax'], 'cim:PU', 'cim:TurbLCFB1.irmax');
        } else {
          attributeEntries['emptyEntries']['cim:TurbLCFB1.irmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.irmax'], 'cim:PU', 'cim:TurbLCFB1.irmax');
        }
        if ('cim:TurbLCFB1.pmwset' in object) {
          attributeEntries['filledEntries']['cim:TurbLCFB1.pmwset'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.pmwset'], 'cim:ActivePower', 'cim:TurbLCFB1.pmwset');
        } else {
          attributeEntries['emptyEntries']['cim:TurbLCFB1.pmwset'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbLCFB1.pmwset'], 'cim:ActivePower', 'cim:TurbLCFB1.pmwset');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TurbLCFB1.mwbase", "cim:TurbLCFB1.speedReferenceGovernor", "cim:TurbLCFB1.db", "cim:TurbLCFB1.emax", "cim:TurbLCFB1.fb", "cim:TurbLCFB1.kp", "cim:TurbLCFB1.ki", "cim:TurbLCFB1.fbf", "cim:TurbLCFB1.pbf", "cim:TurbLCFB1.tpelec", "cim:TurbLCFB1.irmax", "cim:TurbLCFB1.pmwset"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineLoadControllerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TurbLCFB1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TurbLCFB1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TurbLCFB1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return TurbLCFB1;
  }(TurbineLoadControllerDynamics);
  _defineProperty(TurbLCFB1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'mwbase': [CGMESProfile.shortNames.DY],
    'speedReferenceGovernor': [CGMESProfile.shortNames.DY],
    'db': [CGMESProfile.shortNames.DY],
    'emax': [CGMESProfile.shortNames.DY],
    'fb': [CGMESProfile.shortNames.DY],
    'kp': [CGMESProfile.shortNames.DY],
    'ki': [CGMESProfile.shortNames.DY],
    'fbf': [CGMESProfile.shortNames.DY],
    'pbf': [CGMESProfile.shortNames.DY],
    'tpelec': [CGMESProfile.shortNames.DY],
    'irmax': [CGMESProfile.shortNames.DY],
    'pmwset': [CGMESProfile.shortNames.DY]
  });

  var TurbineGovernorUserDefined = /*#__PURE__*/function (_TurbineGovernorDynam) {
    _inherits(TurbineGovernorUserDefined, _TurbineGovernorDynam);
    var _super = _createSuper(TurbineGovernorUserDefined);
    function TurbineGovernorUserDefined() {
      _classCallCheck(this, TurbineGovernorUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(TurbineGovernorUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TurbineGovernorUserDefined";
        var attributeEntries = TurbineGovernorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:TurbineGovernorUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:TurbineGovernorUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbineGovernorUserDefined.proprietary'], 'cim:Boolean', 'cim:TurbineGovernorUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:TurbineGovernorUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbineGovernorUserDefined.proprietary'], 'cim:Boolean', 'cim:TurbineGovernorUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TurbineGovernorUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineGovernorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TurbineGovernorUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TurbineGovernorUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TurbineGovernorUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return TurbineGovernorUserDefined;
  }(TurbineGovernorDynamics);
  _defineProperty(TurbineGovernorUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var TurbineLoadControllerUserDefined = /*#__PURE__*/function (_TurbineLoadControlle) {
    _inherits(TurbineLoadControllerUserDefined, _TurbineLoadControlle);
    var _super = _createSuper(TurbineLoadControllerUserDefined);
    function TurbineLoadControllerUserDefined() {
      _classCallCheck(this, TurbineLoadControllerUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(TurbineLoadControllerUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TurbineLoadControllerUserDefined";
        var attributeEntries = TurbineLoadControllerDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:TurbineLoadControllerUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:TurbineLoadControllerUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbineLoadControllerUserDefined.proprietary'], 'cim:Boolean', 'cim:TurbineLoadControllerUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:TurbineLoadControllerUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['TurbineLoadControllerUserDefined.proprietary'], 'cim:Boolean', 'cim:TurbineLoadControllerUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:TurbineLoadControllerUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (TurbineLoadControllerDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!TurbineLoadControllerUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class TurbineLoadControllerUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = TurbineLoadControllerUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return TurbineLoadControllerUserDefined;
  }(TurbineLoadControllerDynamics);
  _defineProperty(TurbineLoadControllerUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var UnderexcitationLimiterDynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(UnderexcitationLimiterDynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(UnderexcitationLimiterDynamics);
    function UnderexcitationLimiterDynamics() {
      _classCallCheck(this, UnderexcitationLimiterDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(UnderexcitationLimiterDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "UnderexcitationLimiterDynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:UnderexcitationLimiterDynamics.ExcitationSystemDynamics' in object) {
          attributeEntries['filledEntries']['cim:UnderexcitationLimiterDynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcitationLimiterDynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:UnderexcitationLimiterDynamics.ExcitationSystemDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcitationLimiterDynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcitationLimiterDynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:UnderexcitationLimiterDynamics.ExcitationSystemDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:UnderexcitationLimiterDynamics.ExcitationSystemDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!UnderexcitationLimiterDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class UnderexcitationLimiterDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = UnderexcitationLimiterDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["UnderexcitationLimiterUserDefined", "UnderexcLimIEEE1", "UnderexcLimIEEE2", "UnderexcLim2Simplified", "UnderexcLimX1", "UnderexcLimX2"];
        return subClasses;
      }
    }]);
    return UnderexcitationLimiterDynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(UnderexcitationLimiterDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ExcitationSystemDynamics': [CGMESProfile.shortNames.DY]
  });

  var UnderexcLim2Simplified = /*#__PURE__*/function (_UnderexcitationLimit) {
    _inherits(UnderexcLim2Simplified, _UnderexcitationLimit);
    var _super = _createSuper(UnderexcLim2Simplified);
    function UnderexcLim2Simplified() {
      _classCallCheck(this, UnderexcLim2Simplified);
      return _super.apply(this, arguments);
    }
    _createClass(UnderexcLim2Simplified, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "UnderexcLim2Simplified";
        var attributeEntries = UnderexcitationLimiterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:UnderexcLim2Simplified.q0' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLim2Simplified.q0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.q0'], 'cim:PU', 'cim:UnderexcLim2Simplified.q0');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLim2Simplified.q0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.q0'], 'cim:PU', 'cim:UnderexcLim2Simplified.q0');
        }
        if ('cim:UnderexcLim2Simplified.q1' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLim2Simplified.q1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.q1'], 'cim:PU', 'cim:UnderexcLim2Simplified.q1');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLim2Simplified.q1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.q1'], 'cim:PU', 'cim:UnderexcLim2Simplified.q1');
        }
        if ('cim:UnderexcLim2Simplified.p0' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLim2Simplified.p0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.p0'], 'cim:PU', 'cim:UnderexcLim2Simplified.p0');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLim2Simplified.p0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.p0'], 'cim:PU', 'cim:UnderexcLim2Simplified.p0');
        }
        if ('cim:UnderexcLim2Simplified.p1' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLim2Simplified.p1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.p1'], 'cim:PU', 'cim:UnderexcLim2Simplified.p1');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLim2Simplified.p1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.p1'], 'cim:PU', 'cim:UnderexcLim2Simplified.p1');
        }
        if ('cim:UnderexcLim2Simplified.kui' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLim2Simplified.kui'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.kui'], 'cim:PU', 'cim:UnderexcLim2Simplified.kui');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLim2Simplified.kui'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.kui'], 'cim:PU', 'cim:UnderexcLim2Simplified.kui');
        }
        if ('cim:UnderexcLim2Simplified.vuimin' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLim2Simplified.vuimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.vuimin'], 'cim:PU', 'cim:UnderexcLim2Simplified.vuimin');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLim2Simplified.vuimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.vuimin'], 'cim:PU', 'cim:UnderexcLim2Simplified.vuimin');
        }
        if ('cim:UnderexcLim2Simplified.vuimax' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLim2Simplified.vuimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.vuimax'], 'cim:PU', 'cim:UnderexcLim2Simplified.vuimax');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLim2Simplified.vuimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLim2Simplified.vuimax'], 'cim:PU', 'cim:UnderexcLim2Simplified.vuimax');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:UnderexcLim2Simplified.q0", "cim:UnderexcLim2Simplified.q1", "cim:UnderexcLim2Simplified.p0", "cim:UnderexcLim2Simplified.p1", "cim:UnderexcLim2Simplified.kui", "cim:UnderexcLim2Simplified.vuimin", "cim:UnderexcLim2Simplified.vuimax"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (UnderexcitationLimiterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!UnderexcLim2Simplified.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class UnderexcLim2Simplified: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = UnderexcLim2Simplified.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return UnderexcLim2Simplified;
  }(UnderexcitationLimiterDynamics);
  _defineProperty(UnderexcLim2Simplified, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'q0': [CGMESProfile.shortNames.DY],
    'q1': [CGMESProfile.shortNames.DY],
    'p0': [CGMESProfile.shortNames.DY],
    'p1': [CGMESProfile.shortNames.DY],
    'kui': [CGMESProfile.shortNames.DY],
    'vuimin': [CGMESProfile.shortNames.DY],
    'vuimax': [CGMESProfile.shortNames.DY]
  });

  var UnderexcLimIEEE1 = /*#__PURE__*/function (_UnderexcitationLimit) {
    _inherits(UnderexcLimIEEE1, _UnderexcitationLimit);
    var _super = _createSuper(UnderexcLimIEEE1);
    function UnderexcLimIEEE1() {
      _classCallCheck(this, UnderexcLimIEEE1);
      return _super.apply(this, arguments);
    }
    _createClass(UnderexcLimIEEE1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "UnderexcLimIEEE1";
        var attributeEntries = UnderexcitationLimiterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:UnderexcLimIEEE1.kur' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.kur'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.kur'], 'cim:PU', 'cim:UnderexcLimIEEE1.kur');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.kur'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.kur'], 'cim:PU', 'cim:UnderexcLimIEEE1.kur');
        }
        if ('cim:UnderexcLimIEEE1.kuc' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.kuc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.kuc'], 'cim:PU', 'cim:UnderexcLimIEEE1.kuc');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.kuc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.kuc'], 'cim:PU', 'cim:UnderexcLimIEEE1.kuc');
        }
        if ('cim:UnderexcLimIEEE1.kuf' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.kuf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.kuf'], 'cim:PU', 'cim:UnderexcLimIEEE1.kuf');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.kuf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.kuf'], 'cim:PU', 'cim:UnderexcLimIEEE1.kuf');
        }
        if ('cim:UnderexcLimIEEE1.vurmax' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.vurmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.vurmax'], 'cim:PU', 'cim:UnderexcLimIEEE1.vurmax');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.vurmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.vurmax'], 'cim:PU', 'cim:UnderexcLimIEEE1.vurmax');
        }
        if ('cim:UnderexcLimIEEE1.vucmax' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.vucmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.vucmax'], 'cim:PU', 'cim:UnderexcLimIEEE1.vucmax');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.vucmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.vucmax'], 'cim:PU', 'cim:UnderexcLimIEEE1.vucmax');
        }
        if ('cim:UnderexcLimIEEE1.kui' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.kui'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.kui'], 'cim:PU', 'cim:UnderexcLimIEEE1.kui');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.kui'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.kui'], 'cim:PU', 'cim:UnderexcLimIEEE1.kui');
        }
        if ('cim:UnderexcLimIEEE1.kul' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.kul'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.kul'], 'cim:PU', 'cim:UnderexcLimIEEE1.kul');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.kul'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.kul'], 'cim:PU', 'cim:UnderexcLimIEEE1.kul');
        }
        if ('cim:UnderexcLimIEEE1.vuimax' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.vuimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.vuimax'], 'cim:PU', 'cim:UnderexcLimIEEE1.vuimax');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.vuimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.vuimax'], 'cim:PU', 'cim:UnderexcLimIEEE1.vuimax');
        }
        if ('cim:UnderexcLimIEEE1.vuimin' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.vuimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.vuimin'], 'cim:PU', 'cim:UnderexcLimIEEE1.vuimin');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.vuimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.vuimin'], 'cim:PU', 'cim:UnderexcLimIEEE1.vuimin');
        }
        if ('cim:UnderexcLimIEEE1.tu1' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.tu1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.tu1'], 'cim:Seconds', 'cim:UnderexcLimIEEE1.tu1');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.tu1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.tu1'], 'cim:Seconds', 'cim:UnderexcLimIEEE1.tu1');
        }
        if ('cim:UnderexcLimIEEE1.tu2' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.tu2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.tu2'], 'cim:Seconds', 'cim:UnderexcLimIEEE1.tu2');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.tu2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.tu2'], 'cim:Seconds', 'cim:UnderexcLimIEEE1.tu2');
        }
        if ('cim:UnderexcLimIEEE1.tu3' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.tu3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.tu3'], 'cim:Seconds', 'cim:UnderexcLimIEEE1.tu3');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.tu3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.tu3'], 'cim:Seconds', 'cim:UnderexcLimIEEE1.tu3');
        }
        if ('cim:UnderexcLimIEEE1.tu4' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.tu4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.tu4'], 'cim:Seconds', 'cim:UnderexcLimIEEE1.tu4');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.tu4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.tu4'], 'cim:Seconds', 'cim:UnderexcLimIEEE1.tu4');
        }
        if ('cim:UnderexcLimIEEE1.vulmax' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.vulmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.vulmax'], 'cim:PU', 'cim:UnderexcLimIEEE1.vulmax');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.vulmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.vulmax'], 'cim:PU', 'cim:UnderexcLimIEEE1.vulmax');
        }
        if ('cim:UnderexcLimIEEE1.vulmin' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE1.vulmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.vulmin'], 'cim:PU', 'cim:UnderexcLimIEEE1.vulmin');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE1.vulmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE1.vulmin'], 'cim:PU', 'cim:UnderexcLimIEEE1.vulmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:UnderexcLimIEEE1.kur", "cim:UnderexcLimIEEE1.kuc", "cim:UnderexcLimIEEE1.kuf", "cim:UnderexcLimIEEE1.vurmax", "cim:UnderexcLimIEEE1.vucmax", "cim:UnderexcLimIEEE1.kui", "cim:UnderexcLimIEEE1.kul", "cim:UnderexcLimIEEE1.vuimax", "cim:UnderexcLimIEEE1.vuimin", "cim:UnderexcLimIEEE1.tu1", "cim:UnderexcLimIEEE1.tu2", "cim:UnderexcLimIEEE1.tu3", "cim:UnderexcLimIEEE1.tu4", "cim:UnderexcLimIEEE1.vulmax", "cim:UnderexcLimIEEE1.vulmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (UnderexcitationLimiterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!UnderexcLimIEEE1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class UnderexcLimIEEE1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = UnderexcLimIEEE1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return UnderexcLimIEEE1;
  }(UnderexcitationLimiterDynamics);
  _defineProperty(UnderexcLimIEEE1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kur': [CGMESProfile.shortNames.DY],
    'kuc': [CGMESProfile.shortNames.DY],
    'kuf': [CGMESProfile.shortNames.DY],
    'vurmax': [CGMESProfile.shortNames.DY],
    'vucmax': [CGMESProfile.shortNames.DY],
    'kui': [CGMESProfile.shortNames.DY],
    'kul': [CGMESProfile.shortNames.DY],
    'vuimax': [CGMESProfile.shortNames.DY],
    'vuimin': [CGMESProfile.shortNames.DY],
    'tu1': [CGMESProfile.shortNames.DY],
    'tu2': [CGMESProfile.shortNames.DY],
    'tu3': [CGMESProfile.shortNames.DY],
    'tu4': [CGMESProfile.shortNames.DY],
    'vulmax': [CGMESProfile.shortNames.DY],
    'vulmin': [CGMESProfile.shortNames.DY]
  });

  var UnderexcLimIEEE2 = /*#__PURE__*/function (_UnderexcitationLimit) {
    _inherits(UnderexcLimIEEE2, _UnderexcitationLimit);
    var _super = _createSuper(UnderexcLimIEEE2);
    function UnderexcLimIEEE2() {
      _classCallCheck(this, UnderexcLimIEEE2);
      return _super.apply(this, arguments);
    }
    _createClass(UnderexcLimIEEE2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "UnderexcLimIEEE2";
        var attributeEntries = UnderexcitationLimiterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:UnderexcLimIEEE2.tuv' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.tuv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tuv'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tuv');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.tuv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tuv'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tuv');
        }
        if ('cim:UnderexcLimIEEE2.tup' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.tup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tup'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tup');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.tup'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tup'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tup');
        }
        if ('cim:UnderexcLimIEEE2.tuq' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.tuq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tuq'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tuq');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.tuq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tuq'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tuq');
        }
        if ('cim:UnderexcLimIEEE2.kui' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.kui'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.kui'], 'cim:PU', 'cim:UnderexcLimIEEE2.kui');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.kui'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.kui'], 'cim:PU', 'cim:UnderexcLimIEEE2.kui');
        }
        if ('cim:UnderexcLimIEEE2.kul' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.kul'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.kul'], 'cim:PU', 'cim:UnderexcLimIEEE2.kul');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.kul'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.kul'], 'cim:PU', 'cim:UnderexcLimIEEE2.kul');
        }
        if ('cim:UnderexcLimIEEE2.vuimax' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.vuimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.vuimax'], 'cim:PU', 'cim:UnderexcLimIEEE2.vuimax');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.vuimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.vuimax'], 'cim:PU', 'cim:UnderexcLimIEEE2.vuimax');
        }
        if ('cim:UnderexcLimIEEE2.vuimin' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.vuimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.vuimin'], 'cim:PU', 'cim:UnderexcLimIEEE2.vuimin');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.vuimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.vuimin'], 'cim:PU', 'cim:UnderexcLimIEEE2.vuimin');
        }
        if ('cim:UnderexcLimIEEE2.kuf' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.kuf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.kuf'], 'cim:PU', 'cim:UnderexcLimIEEE2.kuf');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.kuf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.kuf'], 'cim:PU', 'cim:UnderexcLimIEEE2.kuf');
        }
        if ('cim:UnderexcLimIEEE2.kfb' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.kfb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.kfb'], 'cim:PU', 'cim:UnderexcLimIEEE2.kfb');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.kfb'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.kfb'], 'cim:PU', 'cim:UnderexcLimIEEE2.kfb');
        }
        if ('cim:UnderexcLimIEEE2.tul' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.tul'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tul'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tul');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.tul'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tul'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tul');
        }
        if ('cim:UnderexcLimIEEE2.tu1' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.tu1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tu1'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tu1');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.tu1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tu1'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tu1');
        }
        if ('cim:UnderexcLimIEEE2.tu2' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.tu2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tu2'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tu2');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.tu2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tu2'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tu2');
        }
        if ('cim:UnderexcLimIEEE2.tu3' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.tu3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tu3'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tu3');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.tu3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tu3'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tu3');
        }
        if ('cim:UnderexcLimIEEE2.tu4' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.tu4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tu4'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tu4');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.tu4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.tu4'], 'cim:Seconds', 'cim:UnderexcLimIEEE2.tu4');
        }
        if ('cim:UnderexcLimIEEE2.vulmax' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.vulmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.vulmax'], 'cim:PU', 'cim:UnderexcLimIEEE2.vulmax');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.vulmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.vulmax'], 'cim:PU', 'cim:UnderexcLimIEEE2.vulmax');
        }
        if ('cim:UnderexcLimIEEE2.vulmin' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.vulmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.vulmin'], 'cim:PU', 'cim:UnderexcLimIEEE2.vulmin');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.vulmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.vulmin'], 'cim:PU', 'cim:UnderexcLimIEEE2.vulmin');
        }
        if ('cim:UnderexcLimIEEE2.p0' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.p0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p0'], 'cim:PU', 'cim:UnderexcLimIEEE2.p0');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.p0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p0'], 'cim:PU', 'cim:UnderexcLimIEEE2.p0');
        }
        if ('cim:UnderexcLimIEEE2.q0' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.q0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q0'], 'cim:PU', 'cim:UnderexcLimIEEE2.q0');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.q0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q0'], 'cim:PU', 'cim:UnderexcLimIEEE2.q0');
        }
        if ('cim:UnderexcLimIEEE2.p1' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.p1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p1'], 'cim:PU', 'cim:UnderexcLimIEEE2.p1');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.p1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p1'], 'cim:PU', 'cim:UnderexcLimIEEE2.p1');
        }
        if ('cim:UnderexcLimIEEE2.q1' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.q1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q1'], 'cim:PU', 'cim:UnderexcLimIEEE2.q1');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.q1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q1'], 'cim:PU', 'cim:UnderexcLimIEEE2.q1');
        }
        if ('cim:UnderexcLimIEEE2.p2' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.p2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p2'], 'cim:PU', 'cim:UnderexcLimIEEE2.p2');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.p2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p2'], 'cim:PU', 'cim:UnderexcLimIEEE2.p2');
        }
        if ('cim:UnderexcLimIEEE2.q2' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.q2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q2'], 'cim:PU', 'cim:UnderexcLimIEEE2.q2');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.q2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q2'], 'cim:PU', 'cim:UnderexcLimIEEE2.q2');
        }
        if ('cim:UnderexcLimIEEE2.p3' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.p3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p3'], 'cim:PU', 'cim:UnderexcLimIEEE2.p3');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.p3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p3'], 'cim:PU', 'cim:UnderexcLimIEEE2.p3');
        }
        if ('cim:UnderexcLimIEEE2.q3' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.q3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q3'], 'cim:PU', 'cim:UnderexcLimIEEE2.q3');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.q3'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q3'], 'cim:PU', 'cim:UnderexcLimIEEE2.q3');
        }
        if ('cim:UnderexcLimIEEE2.p4' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.p4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p4'], 'cim:PU', 'cim:UnderexcLimIEEE2.p4');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.p4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p4'], 'cim:PU', 'cim:UnderexcLimIEEE2.p4');
        }
        if ('cim:UnderexcLimIEEE2.q4' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.q4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q4'], 'cim:PU', 'cim:UnderexcLimIEEE2.q4');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.q4'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q4'], 'cim:PU', 'cim:UnderexcLimIEEE2.q4');
        }
        if ('cim:UnderexcLimIEEE2.p5' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.p5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p5'], 'cim:PU', 'cim:UnderexcLimIEEE2.p5');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.p5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p5'], 'cim:PU', 'cim:UnderexcLimIEEE2.p5');
        }
        if ('cim:UnderexcLimIEEE2.q5' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.q5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q5'], 'cim:PU', 'cim:UnderexcLimIEEE2.q5');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.q5'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q5'], 'cim:PU', 'cim:UnderexcLimIEEE2.q5');
        }
        if ('cim:UnderexcLimIEEE2.p6' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.p6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p6'], 'cim:PU', 'cim:UnderexcLimIEEE2.p6');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.p6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p6'], 'cim:PU', 'cim:UnderexcLimIEEE2.p6');
        }
        if ('cim:UnderexcLimIEEE2.q6' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.q6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q6'], 'cim:PU', 'cim:UnderexcLimIEEE2.q6');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.q6'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q6'], 'cim:PU', 'cim:UnderexcLimIEEE2.q6');
        }
        if ('cim:UnderexcLimIEEE2.p7' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.p7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p7'], 'cim:PU', 'cim:UnderexcLimIEEE2.p7');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.p7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p7'], 'cim:PU', 'cim:UnderexcLimIEEE2.p7');
        }
        if ('cim:UnderexcLimIEEE2.q7' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.q7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q7'], 'cim:PU', 'cim:UnderexcLimIEEE2.q7');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.q7'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q7'], 'cim:PU', 'cim:UnderexcLimIEEE2.q7');
        }
        if ('cim:UnderexcLimIEEE2.p8' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.p8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p8'], 'cim:PU', 'cim:UnderexcLimIEEE2.p8');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.p8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p8'], 'cim:PU', 'cim:UnderexcLimIEEE2.p8');
        }
        if ('cim:UnderexcLimIEEE2.q8' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.q8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q8'], 'cim:PU', 'cim:UnderexcLimIEEE2.q8');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.q8'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q8'], 'cim:PU', 'cim:UnderexcLimIEEE2.q8');
        }
        if ('cim:UnderexcLimIEEE2.p9' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.p9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p9'], 'cim:PU', 'cim:UnderexcLimIEEE2.p9');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.p9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p9'], 'cim:PU', 'cim:UnderexcLimIEEE2.p9');
        }
        if ('cim:UnderexcLimIEEE2.q9' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.q9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q9'], 'cim:PU', 'cim:UnderexcLimIEEE2.q9');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.q9'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q9'], 'cim:PU', 'cim:UnderexcLimIEEE2.q9');
        }
        if ('cim:UnderexcLimIEEE2.p10' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.p10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p10'], 'cim:PU', 'cim:UnderexcLimIEEE2.p10');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.p10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.p10'], 'cim:PU', 'cim:UnderexcLimIEEE2.p10');
        }
        if ('cim:UnderexcLimIEEE2.q10' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.q10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q10'], 'cim:PU', 'cim:UnderexcLimIEEE2.q10');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.q10'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.q10'], 'cim:PU', 'cim:UnderexcLimIEEE2.q10');
        }
        if ('cim:UnderexcLimIEEE2.k1' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.k1'], 'cim:Simple_Float', 'cim:UnderexcLimIEEE2.k1');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.k1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.k1'], 'cim:Simple_Float', 'cim:UnderexcLimIEEE2.k1');
        }
        if ('cim:UnderexcLimIEEE2.k2' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimIEEE2.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.k2'], 'cim:Simple_Float', 'cim:UnderexcLimIEEE2.k2');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimIEEE2.k2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimIEEE2.k2'], 'cim:Simple_Float', 'cim:UnderexcLimIEEE2.k2');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:UnderexcLimIEEE2.tuv", "cim:UnderexcLimIEEE2.tup", "cim:UnderexcLimIEEE2.tuq", "cim:UnderexcLimIEEE2.kui", "cim:UnderexcLimIEEE2.kul", "cim:UnderexcLimIEEE2.vuimax", "cim:UnderexcLimIEEE2.vuimin", "cim:UnderexcLimIEEE2.kuf", "cim:UnderexcLimIEEE2.kfb", "cim:UnderexcLimIEEE2.tul", "cim:UnderexcLimIEEE2.tu1", "cim:UnderexcLimIEEE2.tu2", "cim:UnderexcLimIEEE2.tu3", "cim:UnderexcLimIEEE2.tu4", "cim:UnderexcLimIEEE2.vulmax", "cim:UnderexcLimIEEE2.vulmin", "cim:UnderexcLimIEEE2.p0", "cim:UnderexcLimIEEE2.q0", "cim:UnderexcLimIEEE2.p1", "cim:UnderexcLimIEEE2.q1", "cim:UnderexcLimIEEE2.p2", "cim:UnderexcLimIEEE2.q2", "cim:UnderexcLimIEEE2.p3", "cim:UnderexcLimIEEE2.q3", "cim:UnderexcLimIEEE2.p4", "cim:UnderexcLimIEEE2.q4", "cim:UnderexcLimIEEE2.p5", "cim:UnderexcLimIEEE2.q5", "cim:UnderexcLimIEEE2.p6", "cim:UnderexcLimIEEE2.q6", "cim:UnderexcLimIEEE2.p7", "cim:UnderexcLimIEEE2.q7", "cim:UnderexcLimIEEE2.p8", "cim:UnderexcLimIEEE2.q8", "cim:UnderexcLimIEEE2.p9", "cim:UnderexcLimIEEE2.q9", "cim:UnderexcLimIEEE2.p10", "cim:UnderexcLimIEEE2.q10", "cim:UnderexcLimIEEE2.k1", "cim:UnderexcLimIEEE2.k2"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (UnderexcitationLimiterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!UnderexcLimIEEE2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class UnderexcLimIEEE2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = UnderexcLimIEEE2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return UnderexcLimIEEE2;
  }(UnderexcitationLimiterDynamics);
  _defineProperty(UnderexcLimIEEE2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tuv': [CGMESProfile.shortNames.DY],
    'tup': [CGMESProfile.shortNames.DY],
    'tuq': [CGMESProfile.shortNames.DY],
    'kui': [CGMESProfile.shortNames.DY],
    'kul': [CGMESProfile.shortNames.DY],
    'vuimax': [CGMESProfile.shortNames.DY],
    'vuimin': [CGMESProfile.shortNames.DY],
    'kuf': [CGMESProfile.shortNames.DY],
    'kfb': [CGMESProfile.shortNames.DY],
    'tul': [CGMESProfile.shortNames.DY],
    'tu1': [CGMESProfile.shortNames.DY],
    'tu2': [CGMESProfile.shortNames.DY],
    'tu3': [CGMESProfile.shortNames.DY],
    'tu4': [CGMESProfile.shortNames.DY],
    'vulmax': [CGMESProfile.shortNames.DY],
    'vulmin': [CGMESProfile.shortNames.DY],
    'p0': [CGMESProfile.shortNames.DY],
    'q0': [CGMESProfile.shortNames.DY],
    'p1': [CGMESProfile.shortNames.DY],
    'q1': [CGMESProfile.shortNames.DY],
    'p2': [CGMESProfile.shortNames.DY],
    'q2': [CGMESProfile.shortNames.DY],
    'p3': [CGMESProfile.shortNames.DY],
    'q3': [CGMESProfile.shortNames.DY],
    'p4': [CGMESProfile.shortNames.DY],
    'q4': [CGMESProfile.shortNames.DY],
    'p5': [CGMESProfile.shortNames.DY],
    'q5': [CGMESProfile.shortNames.DY],
    'p6': [CGMESProfile.shortNames.DY],
    'q6': [CGMESProfile.shortNames.DY],
    'p7': [CGMESProfile.shortNames.DY],
    'q7': [CGMESProfile.shortNames.DY],
    'p8': [CGMESProfile.shortNames.DY],
    'q8': [CGMESProfile.shortNames.DY],
    'p9': [CGMESProfile.shortNames.DY],
    'q9': [CGMESProfile.shortNames.DY],
    'p10': [CGMESProfile.shortNames.DY],
    'q10': [CGMESProfile.shortNames.DY],
    'k1': [CGMESProfile.shortNames.DY],
    'k2': [CGMESProfile.shortNames.DY]
  });

  var UnderexcLimX1 = /*#__PURE__*/function (_UnderexcitationLimit) {
    _inherits(UnderexcLimX1, _UnderexcitationLimit);
    var _super = _createSuper(UnderexcLimX1);
    function UnderexcLimX1() {
      _classCallCheck(this, UnderexcLimX1);
      return _super.apply(this, arguments);
    }
    _createClass(UnderexcLimX1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "UnderexcLimX1";
        var attributeEntries = UnderexcitationLimiterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:UnderexcLimX1.kf2' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX1.kf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX1.kf2'], 'cim:PU', 'cim:UnderexcLimX1.kf2');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX1.kf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX1.kf2'], 'cim:PU', 'cim:UnderexcLimX1.kf2');
        }
        if ('cim:UnderexcLimX1.tf2' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX1.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX1.tf2'], 'cim:Seconds', 'cim:UnderexcLimX1.tf2');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX1.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX1.tf2'], 'cim:Seconds', 'cim:UnderexcLimX1.tf2');
        }
        if ('cim:UnderexcLimX1.km' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX1.km'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX1.km'], 'cim:PU', 'cim:UnderexcLimX1.km');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX1.km'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX1.km'], 'cim:PU', 'cim:UnderexcLimX1.km');
        }
        if ('cim:UnderexcLimX1.tm' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX1.tm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX1.tm'], 'cim:Seconds', 'cim:UnderexcLimX1.tm');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX1.tm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX1.tm'], 'cim:Seconds', 'cim:UnderexcLimX1.tm');
        }
        if ('cim:UnderexcLimX1.melmax' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX1.melmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX1.melmax'], 'cim:PU', 'cim:UnderexcLimX1.melmax');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX1.melmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX1.melmax'], 'cim:PU', 'cim:UnderexcLimX1.melmax');
        }
        if ('cim:UnderexcLimX1.k' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX1.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX1.k'], 'cim:PU', 'cim:UnderexcLimX1.k');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX1.k'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX1.k'], 'cim:PU', 'cim:UnderexcLimX1.k');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:UnderexcLimX1.kf2", "cim:UnderexcLimX1.tf2", "cim:UnderexcLimX1.km", "cim:UnderexcLimX1.tm", "cim:UnderexcLimX1.melmax", "cim:UnderexcLimX1.k"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (UnderexcitationLimiterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!UnderexcLimX1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class UnderexcLimX1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = UnderexcLimX1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return UnderexcLimX1;
  }(UnderexcitationLimiterDynamics);
  _defineProperty(UnderexcLimX1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kf2': [CGMESProfile.shortNames.DY],
    'tf2': [CGMESProfile.shortNames.DY],
    'km': [CGMESProfile.shortNames.DY],
    'tm': [CGMESProfile.shortNames.DY],
    'melmax': [CGMESProfile.shortNames.DY],
    'k': [CGMESProfile.shortNames.DY]
  });

  var UnderexcLimX2 = /*#__PURE__*/function (_UnderexcitationLimit) {
    _inherits(UnderexcLimX2, _UnderexcitationLimit);
    var _super = _createSuper(UnderexcLimX2);
    function UnderexcLimX2() {
      _classCallCheck(this, UnderexcLimX2);
      return _super.apply(this, arguments);
    }
    _createClass(UnderexcLimX2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "UnderexcLimX2";
        var attributeEntries = UnderexcitationLimiterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:UnderexcLimX2.kf2' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX2.kf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.kf2'], 'cim:PU', 'cim:UnderexcLimX2.kf2');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX2.kf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.kf2'], 'cim:PU', 'cim:UnderexcLimX2.kf2');
        }
        if ('cim:UnderexcLimX2.tf2' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX2.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.tf2'], 'cim:Seconds', 'cim:UnderexcLimX2.tf2');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX2.tf2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.tf2'], 'cim:Seconds', 'cim:UnderexcLimX2.tf2');
        }
        if ('cim:UnderexcLimX2.km' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX2.km'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.km'], 'cim:PU', 'cim:UnderexcLimX2.km');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX2.km'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.km'], 'cim:PU', 'cim:UnderexcLimX2.km');
        }
        if ('cim:UnderexcLimX2.tm' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX2.tm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.tm'], 'cim:Seconds', 'cim:UnderexcLimX2.tm');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX2.tm'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.tm'], 'cim:Seconds', 'cim:UnderexcLimX2.tm');
        }
        if ('cim:UnderexcLimX2.melmax' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX2.melmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.melmax'], 'cim:PU', 'cim:UnderexcLimX2.melmax');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX2.melmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.melmax'], 'cim:PU', 'cim:UnderexcLimX2.melmax');
        }
        if ('cim:UnderexcLimX2.qo' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX2.qo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.qo'], 'cim:PU', 'cim:UnderexcLimX2.qo');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX2.qo'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.qo'], 'cim:PU', 'cim:UnderexcLimX2.qo');
        }
        if ('cim:UnderexcLimX2.r' in object) {
          attributeEntries['filledEntries']['cim:UnderexcLimX2.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.r'], 'cim:PU', 'cim:UnderexcLimX2.r');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcLimX2.r'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcLimX2.r'], 'cim:PU', 'cim:UnderexcLimX2.r');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:UnderexcLimX2.kf2", "cim:UnderexcLimX2.tf2", "cim:UnderexcLimX2.km", "cim:UnderexcLimX2.tm", "cim:UnderexcLimX2.melmax", "cim:UnderexcLimX2.qo", "cim:UnderexcLimX2.r"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (UnderexcitationLimiterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!UnderexcLimX2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class UnderexcLimX2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = UnderexcLimX2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return UnderexcLimX2;
  }(UnderexcitationLimiterDynamics);
  _defineProperty(UnderexcLimX2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kf2': [CGMESProfile.shortNames.DY],
    'tf2': [CGMESProfile.shortNames.DY],
    'km': [CGMESProfile.shortNames.DY],
    'tm': [CGMESProfile.shortNames.DY],
    'melmax': [CGMESProfile.shortNames.DY],
    'qo': [CGMESProfile.shortNames.DY],
    'r': [CGMESProfile.shortNames.DY]
  });

  var UnderexcitationLimiterUserDefined = /*#__PURE__*/function (_UnderexcitationLimit) {
    _inherits(UnderexcitationLimiterUserDefined, _UnderexcitationLimit);
    var _super = _createSuper(UnderexcitationLimiterUserDefined);
    function UnderexcitationLimiterUserDefined() {
      _classCallCheck(this, UnderexcitationLimiterUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(UnderexcitationLimiterUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "UnderexcitationLimiterUserDefined";
        var attributeEntries = UnderexcitationLimiterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:UnderexcitationLimiterUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:UnderexcitationLimiterUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcitationLimiterUserDefined.proprietary'], 'cim:Boolean', 'cim:UnderexcitationLimiterUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:UnderexcitationLimiterUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['UnderexcitationLimiterUserDefined.proprietary'], 'cim:Boolean', 'cim:UnderexcitationLimiterUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:UnderexcitationLimiterUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (UnderexcitationLimiterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!UnderexcitationLimiterUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class UnderexcitationLimiterUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = UnderexcitationLimiterUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return UnderexcitationLimiterUserDefined;
  }(UnderexcitationLimiterDynamics);
  _defineProperty(UnderexcitationLimiterUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$9 = [{
    "value": "--"
  }, {
    "value": "UnitMultiplier.p",
    "label": "p"
  }, {
    "value": "UnitMultiplier.n",
    "label": "n"
  }, {
    "value": "UnitMultiplier.micro",
    "label": "micro"
  }, {
    "value": "UnitMultiplier.m",
    "label": "m"
  }, {
    "value": "UnitMultiplier.c",
    "label": "c"
  }, {
    "value": "UnitMultiplier.d",
    "label": "d"
  }, {
    "value": "UnitMultiplier.k",
    "label": "k"
  }, {
    "value": "UnitMultiplier.M",
    "label": "M"
  }, {
    "value": "UnitMultiplier.G",
    "label": "G"
  }, {
    "value": "UnitMultiplier.T",
    "label": "T"
  }, {
    "value": "UnitMultiplier.none",
    "label": "none"
  }];
  var UnitMultiplier = /*#__PURE__*/function (_BaseClass) {
    _inherits(UnitMultiplier, _BaseClass);
    var _super = _createSuper(UnitMultiplier);
    function UnitMultiplier() {
      _classCallCheck(this, UnitMultiplier);
      return _super.apply(this, arguments);
    }
    _createClass(UnitMultiplier, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "UnitMultiplier";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!UnitMultiplier.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class UnitMultiplier: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = UnitMultiplier.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$9;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return UnitMultiplier;
  }(BaseClass);
  _defineProperty(UnitMultiplier, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.EQ_BD]
  });

  var possibleValues$8 = [{
    "value": "--"
  }, {
    "value": "UnitSymbol.VA",
    "label": "VA"
  }, {
    "value": "UnitSymbol.W",
    "label": "W"
  }, {
    "value": "UnitSymbol.VAr",
    "label": "VAr"
  }, {
    "value": "UnitSymbol.VAh",
    "label": "VAh"
  }, {
    "value": "UnitSymbol.Wh",
    "label": "Wh"
  }, {
    "value": "UnitSymbol.VArh",
    "label": "VArh"
  }, {
    "value": "UnitSymbol.V",
    "label": "V"
  }, {
    "value": "UnitSymbol.ohm",
    "label": "ohm"
  }, {
    "value": "UnitSymbol.A",
    "label": "A"
  }, {
    "value": "UnitSymbol.F",
    "label": "F"
  }, {
    "value": "UnitSymbol.H",
    "label": "H"
  }, {
    "value": "UnitSymbol.degC",
    "label": "degC"
  }, {
    "value": "UnitSymbol.s",
    "label": "s"
  }, {
    "value": "UnitSymbol.min",
    "label": "min"
  }, {
    "value": "UnitSymbol.h",
    "label": "h"
  }, {
    "value": "UnitSymbol.deg",
    "label": "deg"
  }, {
    "value": "UnitSymbol.rad",
    "label": "rad"
  }, {
    "value": "UnitSymbol.J",
    "label": "J"
  }, {
    "value": "UnitSymbol.N",
    "label": "N"
  }, {
    "value": "UnitSymbol.S",
    "label": "S"
  }, {
    "value": "UnitSymbol.none",
    "label": "none"
  }, {
    "value": "UnitSymbol.Hz",
    "label": "Hz"
  }, {
    "value": "UnitSymbol.g",
    "label": "g"
  }, {
    "value": "UnitSymbol.Pa",
    "label": "Pa"
  }, {
    "value": "UnitSymbol.m",
    "label": "m"
  }, {
    "value": "UnitSymbol.m2",
    "label": "m2"
  }, {
    "value": "UnitSymbol.m3",
    "label": "m3"
  }];
  var UnitSymbol = /*#__PURE__*/function (_BaseClass) {
    _inherits(UnitSymbol, _BaseClass);
    var _super = _createSuper(UnitSymbol);
    function UnitSymbol() {
      _classCallCheck(this, UnitSymbol);
      return _super.apply(this, arguments);
    }
    _createClass(UnitSymbol, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "UnitSymbol";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!UnitSymbol.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class UnitSymbol: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = UnitSymbol.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$8;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return UnitSymbol;
  }(BaseClass);
  _defineProperty(UnitSymbol, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL, CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.DY, CGMESProfile.shortNames.EQ_BD]
  });

  var VoltageAdjusterDynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(VoltageAdjusterDynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(VoltageAdjusterDynamics);
    function VoltageAdjusterDynamics() {
      _classCallCheck(this, VoltageAdjusterDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(VoltageAdjusterDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VoltageAdjusterDynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:VoltageAdjusterDynamics.PFVArControllerType1Dynamics' in object) {
          attributeEntries['filledEntries']['cim:VoltageAdjusterDynamics.PFVArControllerType1Dynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageAdjusterDynamics.PFVArControllerType1Dynamics'], 'cim:PFVArControllerType1Dynamics', 'cim:VoltageAdjusterDynamics.PFVArControllerType1Dynamics');
        } else {
          attributeEntries['emptyEntries']['cim:VoltageAdjusterDynamics.PFVArControllerType1Dynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageAdjusterDynamics.PFVArControllerType1Dynamics'], 'cim:PFVArControllerType1Dynamics', 'cim:VoltageAdjusterDynamics.PFVArControllerType1Dynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VoltageAdjusterDynamics.PFVArControllerType1Dynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VoltageAdjusterDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VoltageAdjusterDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VoltageAdjusterDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["VoltageAdjusterUserDefined", "VAdjIEEE"];
        return subClasses;
      }
    }]);
    return VoltageAdjusterDynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(VoltageAdjusterDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'PFVArControllerType1Dynamics': [CGMESProfile.shortNames.DY]
  });

  var VAdjIEEE = /*#__PURE__*/function (_VoltageAdjusterDynam) {
    _inherits(VAdjIEEE, _VoltageAdjusterDynam);
    var _super = _createSuper(VAdjIEEE);
    function VAdjIEEE() {
      _classCallCheck(this, VAdjIEEE);
      return _super.apply(this, arguments);
    }
    _createClass(VAdjIEEE, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VAdjIEEE";
        var attributeEntries = VoltageAdjusterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:VAdjIEEE.vadjf' in object) {
          attributeEntries['filledEntries']['cim:VAdjIEEE.vadjf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VAdjIEEE.vadjf'], 'cim:Simple_Float', 'cim:VAdjIEEE.vadjf');
        } else {
          attributeEntries['emptyEntries']['cim:VAdjIEEE.vadjf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VAdjIEEE.vadjf'], 'cim:Simple_Float', 'cim:VAdjIEEE.vadjf');
        }
        if ('cim:VAdjIEEE.adjslew' in object) {
          attributeEntries['filledEntries']['cim:VAdjIEEE.adjslew'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VAdjIEEE.adjslew'], 'cim:Simple_Float', 'cim:VAdjIEEE.adjslew');
        } else {
          attributeEntries['emptyEntries']['cim:VAdjIEEE.adjslew'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VAdjIEEE.adjslew'], 'cim:Simple_Float', 'cim:VAdjIEEE.adjslew');
        }
        if ('cim:VAdjIEEE.vadjmax' in object) {
          attributeEntries['filledEntries']['cim:VAdjIEEE.vadjmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VAdjIEEE.vadjmax'], 'cim:PU', 'cim:VAdjIEEE.vadjmax');
        } else {
          attributeEntries['emptyEntries']['cim:VAdjIEEE.vadjmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VAdjIEEE.vadjmax'], 'cim:PU', 'cim:VAdjIEEE.vadjmax');
        }
        if ('cim:VAdjIEEE.vadjmin' in object) {
          attributeEntries['filledEntries']['cim:VAdjIEEE.vadjmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VAdjIEEE.vadjmin'], 'cim:PU', 'cim:VAdjIEEE.vadjmin');
        } else {
          attributeEntries['emptyEntries']['cim:VAdjIEEE.vadjmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VAdjIEEE.vadjmin'], 'cim:PU', 'cim:VAdjIEEE.vadjmin');
        }
        if ('cim:VAdjIEEE.taon' in object) {
          attributeEntries['filledEntries']['cim:VAdjIEEE.taon'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VAdjIEEE.taon'], 'cim:Seconds', 'cim:VAdjIEEE.taon');
        } else {
          attributeEntries['emptyEntries']['cim:VAdjIEEE.taon'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VAdjIEEE.taon'], 'cim:Seconds', 'cim:VAdjIEEE.taon');
        }
        if ('cim:VAdjIEEE.taoff' in object) {
          attributeEntries['filledEntries']['cim:VAdjIEEE.taoff'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VAdjIEEE.taoff'], 'cim:Seconds', 'cim:VAdjIEEE.taoff');
        } else {
          attributeEntries['emptyEntries']['cim:VAdjIEEE.taoff'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VAdjIEEE.taoff'], 'cim:Seconds', 'cim:VAdjIEEE.taoff');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VAdjIEEE.vadjf", "cim:VAdjIEEE.adjslew", "cim:VAdjIEEE.vadjmax", "cim:VAdjIEEE.vadjmin", "cim:VAdjIEEE.taon", "cim:VAdjIEEE.taoff"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (VoltageAdjusterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VAdjIEEE.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VAdjIEEE: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VAdjIEEE.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VAdjIEEE;
  }(VoltageAdjusterDynamics);
  _defineProperty(VAdjIEEE, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'vadjf': [CGMESProfile.shortNames.DY],
    'adjslew': [CGMESProfile.shortNames.DY],
    'vadjmax': [CGMESProfile.shortNames.DY],
    'vadjmin': [CGMESProfile.shortNames.DY],
    'taon': [CGMESProfile.shortNames.DY],
    'taoff': [CGMESProfile.shortNames.DY]
  });

  var VoltageCompensatorDynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(VoltageCompensatorDynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(VoltageCompensatorDynamics);
    function VoltageCompensatorDynamics() {
      _classCallCheck(this, VoltageCompensatorDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(VoltageCompensatorDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VoltageCompensatorDynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:VoltageCompensatorDynamics.ExcitationSystemDynamics' in object) {
          attributeEntries['filledEntries']['cim:VoltageCompensatorDynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageCompensatorDynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:VoltageCompensatorDynamics.ExcitationSystemDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:VoltageCompensatorDynamics.ExcitationSystemDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageCompensatorDynamics.ExcitationSystemDynamics'], 'cim:ExcitationSystemDynamics', 'cim:VoltageCompensatorDynamics.ExcitationSystemDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VoltageCompensatorDynamics.ExcitationSystemDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VoltageCompensatorDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VoltageCompensatorDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VoltageCompensatorDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["VoltageCompensatorUserDefined", "VCompIEEEType1", "VCompIEEEType2"];
        return subClasses;
      }
    }]);
    return VoltageCompensatorDynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(VoltageCompensatorDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'ExcitationSystemDynamics': [CGMESProfile.shortNames.DY]
  });

  var VCompIEEEType1 = /*#__PURE__*/function (_VoltageCompensatorDy) {
    _inherits(VCompIEEEType1, _VoltageCompensatorDy);
    var _super = _createSuper(VCompIEEEType1);
    function VCompIEEEType1() {
      _classCallCheck(this, VCompIEEEType1);
      return _super.apply(this, arguments);
    }
    _createClass(VCompIEEEType1, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VCompIEEEType1";
        var attributeEntries = VoltageCompensatorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:VCompIEEEType1.rc' in object) {
          attributeEntries['filledEntries']['cim:VCompIEEEType1.rc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VCompIEEEType1.rc'], 'cim:PU', 'cim:VCompIEEEType1.rc');
        } else {
          attributeEntries['emptyEntries']['cim:VCompIEEEType1.rc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VCompIEEEType1.rc'], 'cim:PU', 'cim:VCompIEEEType1.rc');
        }
        if ('cim:VCompIEEEType1.xc' in object) {
          attributeEntries['filledEntries']['cim:VCompIEEEType1.xc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VCompIEEEType1.xc'], 'cim:PU', 'cim:VCompIEEEType1.xc');
        } else {
          attributeEntries['emptyEntries']['cim:VCompIEEEType1.xc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VCompIEEEType1.xc'], 'cim:PU', 'cim:VCompIEEEType1.xc');
        }
        if ('cim:VCompIEEEType1.tr' in object) {
          attributeEntries['filledEntries']['cim:VCompIEEEType1.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VCompIEEEType1.tr'], 'cim:Seconds', 'cim:VCompIEEEType1.tr');
        } else {
          attributeEntries['emptyEntries']['cim:VCompIEEEType1.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VCompIEEEType1.tr'], 'cim:Seconds', 'cim:VCompIEEEType1.tr');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VCompIEEEType1.rc", "cim:VCompIEEEType1.xc", "cim:VCompIEEEType1.tr"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (VoltageCompensatorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VCompIEEEType1.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VCompIEEEType1: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VCompIEEEType1.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VCompIEEEType1;
  }(VoltageCompensatorDynamics);
  _defineProperty(VCompIEEEType1, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'rc': [CGMESProfile.shortNames.DY],
    'xc': [CGMESProfile.shortNames.DY],
    'tr': [CGMESProfile.shortNames.DY]
  });

  var VCompIEEEType2 = /*#__PURE__*/function (_VoltageCompensatorDy) {
    _inherits(VCompIEEEType2, _VoltageCompensatorDy);
    var _super = _createSuper(VCompIEEEType2);
    function VCompIEEEType2() {
      _classCallCheck(this, VCompIEEEType2);
      return _super.apply(this, arguments);
    }
    _createClass(VCompIEEEType2, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VCompIEEEType2";
        var attributeEntries = VoltageCompensatorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:VCompIEEEType2.tr' in object) {
          attributeEntries['filledEntries']['cim:VCompIEEEType2.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VCompIEEEType2.tr'], 'cim:Seconds', 'cim:VCompIEEEType2.tr');
        } else {
          attributeEntries['emptyEntries']['cim:VCompIEEEType2.tr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VCompIEEEType2.tr'], 'cim:Seconds', 'cim:VCompIEEEType2.tr');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VCompIEEEType2.tr"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (VoltageCompensatorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VCompIEEEType2.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VCompIEEEType2: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VCompIEEEType2.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VCompIEEEType2;
  }(VoltageCompensatorDynamics);
  _defineProperty(VCompIEEEType2, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'tr': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$7 = [{
    "value": "--"
  }, {
    "value": "Validity.GOOD",
    "label": "GOOD"
  }, {
    "value": "Validity.QUESTIONABLE",
    "label": "QUESTIONABLE"
  }, {
    "value": "Validity.INVALID",
    "label": "INVALID"
  }];
  var Validity = /*#__PURE__*/function (_BaseClass) {
    _inherits(Validity, _BaseClass);
    var _super = _createSuper(Validity);
    function Validity() {
      _classCallCheck(this, Validity);
      return _super.apply(this, arguments);
    }
    _createClass(Validity, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Validity";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Validity.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Validity: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Validity.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$7;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Validity;
  }(BaseClass);
  _defineProperty(Validity, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var ValueAliasSet = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(ValueAliasSet, _IdentifiedObject);
    var _super = _createSuper(ValueAliasSet);
    function ValueAliasSet() {
      _classCallCheck(this, ValueAliasSet);
      return _super.apply(this, arguments);
    }
    _createClass(ValueAliasSet, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ValueAliasSet";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:ValueAliasSet.Discretes' in object) {
          attributeEntries['filledEntries']['cim:ValueAliasSet.Discretes'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ValueAliasSet.Discretes'], 'cim:Discrete', 'cim:ValueAliasSet.Discretes');
        } else {
          attributeEntries['emptyEntries']['cim:ValueAliasSet.Discretes'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ValueAliasSet.Discretes'], 'cim:Discrete', 'cim:ValueAliasSet.Discretes');
        }
        if ('cim:ValueAliasSet.Values' in object) {
          attributeEntries['filledEntries']['cim:ValueAliasSet.Values'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ValueAliasSet.Values'], 'cim:ValueToAlias', 'cim:ValueAliasSet.Values');
        } else {
          attributeEntries['emptyEntries']['cim:ValueAliasSet.Values'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ValueAliasSet.Values'], 'cim:ValueToAlias', 'cim:ValueAliasSet.Values');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ValueAliasSet.Discretes", "cim:ValueAliasSet.Values"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ValueAliasSet.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ValueAliasSet: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ValueAliasSet.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ValueAliasSet;
  }(IdentifiedObject);
  _defineProperty(ValueAliasSet, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'Discretes': [CGMESProfile.shortNames.EQ],
    'Values': [CGMESProfile.shortNames.EQ]
  });

  var ValueToAlias = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(ValueToAlias, _IdentifiedObject);
    var _super = _createSuper(ValueToAlias);
    function ValueToAlias() {
      _classCallCheck(this, ValueToAlias);
      return _super.apply(this, arguments);
    }
    _createClass(ValueToAlias, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ValueToAlias";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:ValueToAlias.ValueAliasSet' in object) {
          attributeEntries['filledEntries']['cim:ValueToAlias.ValueAliasSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ValueToAlias.ValueAliasSet'], 'cim:ValueAliasSet', 'cim:ValueToAlias.ValueAliasSet');
        } else {
          attributeEntries['emptyEntries']['cim:ValueToAlias.ValueAliasSet'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ValueToAlias.ValueAliasSet'], 'cim:ValueAliasSet', 'cim:ValueToAlias.ValueAliasSet');
        }
        if ('cim:ValueToAlias.value' in object) {
          attributeEntries['filledEntries']['cim:ValueToAlias.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ValueToAlias.value'], 'cim:Integer', 'cim:ValueToAlias.value');
        } else {
          attributeEntries['emptyEntries']['cim:ValueToAlias.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['ValueToAlias.value'], 'cim:Integer', 'cim:ValueToAlias.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:ValueToAlias.ValueAliasSet", "cim:ValueToAlias.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!ValueToAlias.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class ValueToAlias: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = ValueToAlias.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return ValueToAlias;
  }(IdentifiedObject);
  _defineProperty(ValueToAlias, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'ValueAliasSet': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var VisibilityLayer = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(VisibilityLayer, _IdentifiedObject);
    var _super = _createSuper(VisibilityLayer);
    function VisibilityLayer() {
      _classCallCheck(this, VisibilityLayer);
      return _super.apply(this, arguments);
    }
    _createClass(VisibilityLayer, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VisibilityLayer";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:VisibilityLayer.VisibleObjects' in object) {
          attributeEntries['filledEntries']['cim:VisibilityLayer.VisibleObjects'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VisibilityLayer.VisibleObjects'], 'cim:DiagramObject', 'cim:VisibilityLayer.VisibleObjects');
        } else {
          attributeEntries['emptyEntries']['cim:VisibilityLayer.VisibleObjects'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VisibilityLayer.VisibleObjects'], 'cim:DiagramObject', 'cim:VisibilityLayer.VisibleObjects');
        }
        if ('cim:VisibilityLayer.drawingOrder' in object) {
          attributeEntries['filledEntries']['cim:VisibilityLayer.drawingOrder'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VisibilityLayer.drawingOrder'], 'cim:Integer', 'cim:VisibilityLayer.drawingOrder');
        } else {
          attributeEntries['emptyEntries']['cim:VisibilityLayer.drawingOrder'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VisibilityLayer.drawingOrder'], 'cim:Integer', 'cim:VisibilityLayer.drawingOrder');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VisibilityLayer.VisibleObjects", "cim:VisibilityLayer.drawingOrder"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VisibilityLayer.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VisibilityLayer: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VisibilityLayer.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VisibilityLayer;
  }(IdentifiedObject);
  _defineProperty(VisibilityLayer, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DL],
    'VisibleObjects': [CGMESProfile.shortNames.DL],
    'drawingOrder': [CGMESProfile.shortNames.DL]
  });

  var Voltage = /*#__PURE__*/function (_BaseClass) {
    _inherits(Voltage, _BaseClass);
    var _super = _createSuper(Voltage);
    function Voltage() {
      _classCallCheck(this, Voltage);
      return _super.apply(this, arguments);
    }
    _createClass(Voltage, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Voltage";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:Voltage.value' in object) {
          attributeEntries['filledEntries']['cim:Voltage.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Voltage.value'], 'cim:Float', 'cim:Voltage.value');
        } else {
          attributeEntries['emptyEntries']['cim:Voltage.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Voltage.value'], 'cim:Float', 'cim:Voltage.value');
        }
        if ('cim:Voltage.unit' in object) {
          attributeEntries['filledEntries']['cim:Voltage.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Voltage.unit'], 'cim:UnitSymbol', 'cim:Voltage.unit');
        } else {
          attributeEntries['emptyEntries']['cim:Voltage.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Voltage.unit'], 'cim:UnitSymbol', 'cim:Voltage.unit');
        }
        if ('cim:Voltage.multiplier' in object) {
          attributeEntries['filledEntries']['cim:Voltage.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Voltage.multiplier'], 'cim:UnitMultiplier', 'cim:Voltage.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:Voltage.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['Voltage.multiplier'], 'cim:UnitMultiplier', 'cim:Voltage.multiplier');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:Voltage.value", "cim:Voltage.unit", "cim:Voltage.multiplier"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!Voltage.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class Voltage: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = Voltage.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(data) {
        return templates.handlebars_cim_render_float(data);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return Voltage;
  }(BaseClass);
  _defineProperty(Voltage, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.EQ_BD],
    'value': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.EQ_BD],
    'unit': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.EQ_BD],
    'multiplier': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV, CGMESProfile.shortNames.EQ_BD]
  });

  var VoltageAdjusterUserDefined = /*#__PURE__*/function (_VoltageAdjusterDynam) {
    _inherits(VoltageAdjusterUserDefined, _VoltageAdjusterDynam);
    var _super = _createSuper(VoltageAdjusterUserDefined);
    function VoltageAdjusterUserDefined() {
      _classCallCheck(this, VoltageAdjusterUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(VoltageAdjusterUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VoltageAdjusterUserDefined";
        var attributeEntries = VoltageAdjusterDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:VoltageAdjusterUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:VoltageAdjusterUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageAdjusterUserDefined.proprietary'], 'cim:Boolean', 'cim:VoltageAdjusterUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:VoltageAdjusterUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageAdjusterUserDefined.proprietary'], 'cim:Boolean', 'cim:VoltageAdjusterUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VoltageAdjusterUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (VoltageAdjusterDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VoltageAdjusterUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VoltageAdjusterUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VoltageAdjusterUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VoltageAdjusterUserDefined;
  }(VoltageAdjusterDynamics);
  _defineProperty(VoltageAdjusterUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var VoltageCompensatorUserDefined = /*#__PURE__*/function (_VoltageCompensatorDy) {
    _inherits(VoltageCompensatorUserDefined, _VoltageCompensatorDy);
    var _super = _createSuper(VoltageCompensatorUserDefined);
    function VoltageCompensatorUserDefined() {
      _classCallCheck(this, VoltageCompensatorUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(VoltageCompensatorUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VoltageCompensatorUserDefined";
        var attributeEntries = VoltageCompensatorDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:VoltageCompensatorUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:VoltageCompensatorUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageCompensatorUserDefined.proprietary'], 'cim:Boolean', 'cim:VoltageCompensatorUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:VoltageCompensatorUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageCompensatorUserDefined.proprietary'], 'cim:Boolean', 'cim:VoltageCompensatorUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VoltageCompensatorUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (VoltageCompensatorDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VoltageCompensatorUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VoltageCompensatorUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VoltageCompensatorUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VoltageCompensatorUserDefined;
  }(VoltageCompensatorDynamics);
  _defineProperty(VoltageCompensatorUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var VoltageLevel = /*#__PURE__*/function (_EquipmentContainer) {
    _inherits(VoltageLevel, _EquipmentContainer);
    var _super = _createSuper(VoltageLevel);
    function VoltageLevel() {
      _classCallCheck(this, VoltageLevel);
      return _super.apply(this, arguments);
    }
    _createClass(VoltageLevel, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VoltageLevel";
        var attributeEntries = EquipmentContainer.attributeHTML(object, cimmenu, classType);
        if ('cim:VoltageLevel.BaseVoltage' in object) {
          attributeEntries['filledEntries']['cim:VoltageLevel.BaseVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageLevel.BaseVoltage'], 'cim:BaseVoltage', 'cim:VoltageLevel.BaseVoltage');
        } else {
          attributeEntries['emptyEntries']['cim:VoltageLevel.BaseVoltage'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageLevel.BaseVoltage'], 'cim:BaseVoltage', 'cim:VoltageLevel.BaseVoltage');
        }
        if ('cim:VoltageLevel.Substation' in object) {
          attributeEntries['filledEntries']['cim:VoltageLevel.Substation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageLevel.Substation'], 'cim:Substation', 'cim:VoltageLevel.Substation');
        } else {
          attributeEntries['emptyEntries']['cim:VoltageLevel.Substation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageLevel.Substation'], 'cim:Substation', 'cim:VoltageLevel.Substation');
        }
        if ('cim:VoltageLevel.highVoltageLimit' in object) {
          attributeEntries['filledEntries']['cim:VoltageLevel.highVoltageLimit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageLevel.highVoltageLimit'], 'cim:Voltage', 'cim:VoltageLevel.highVoltageLimit');
        } else {
          attributeEntries['emptyEntries']['cim:VoltageLevel.highVoltageLimit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageLevel.highVoltageLimit'], 'cim:Voltage', 'cim:VoltageLevel.highVoltageLimit');
        }
        if ('cim:VoltageLevel.lowVoltageLimit' in object) {
          attributeEntries['filledEntries']['cim:VoltageLevel.lowVoltageLimit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageLevel.lowVoltageLimit'], 'cim:Voltage', 'cim:VoltageLevel.lowVoltageLimit');
        } else {
          attributeEntries['emptyEntries']['cim:VoltageLevel.lowVoltageLimit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageLevel.lowVoltageLimit'], 'cim:Voltage', 'cim:VoltageLevel.lowVoltageLimit');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VoltageLevel.BaseVoltage", "cim:VoltageLevel.Substation", "cim:VoltageLevel.highVoltageLimit", "cim:VoltageLevel.lowVoltageLimit"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (EquipmentContainer.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VoltageLevel.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VoltageLevel: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VoltageLevel.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VoltageLevel;
  }(EquipmentContainer);
  _defineProperty(VoltageLevel, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'BaseVoltage': [CGMESProfile.shortNames.EQ],
    'Substation': [CGMESProfile.shortNames.EQ],
    'highVoltageLimit': [CGMESProfile.shortNames.EQ],
    'lowVoltageLimit': [CGMESProfile.shortNames.EQ]
  });

  var VoltageLimit = /*#__PURE__*/function (_OperationalLimit) {
    _inherits(VoltageLimit, _OperationalLimit);
    var _super = _createSuper(VoltageLimit);
    function VoltageLimit() {
      _classCallCheck(this, VoltageLimit);
      return _super.apply(this, arguments);
    }
    _createClass(VoltageLimit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VoltageLimit";
        var attributeEntries = OperationalLimit.attributeHTML(object, cimmenu, classType);
        if ('cim:VoltageLimit.value' in object) {
          attributeEntries['filledEntries']['cim:VoltageLimit.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageLimit.value'], 'cim:Voltage', 'cim:VoltageLimit.value');
        } else {
          attributeEntries['emptyEntries']['cim:VoltageLimit.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltageLimit.value'], 'cim:Voltage', 'cim:VoltageLimit.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VoltageLimit.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (OperationalLimit.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VoltageLimit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VoltageLimit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VoltageLimit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VoltageLimit;
  }(OperationalLimit);
  _defineProperty(VoltageLimit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ]
  });

  var VoltagePerReactivePower = /*#__PURE__*/function (_BaseClass) {
    _inherits(VoltagePerReactivePower, _BaseClass);
    var _super = _createSuper(VoltagePerReactivePower);
    function VoltagePerReactivePower() {
      _classCallCheck(this, VoltagePerReactivePower);
      return _super.apply(this, arguments);
    }
    _createClass(VoltagePerReactivePower, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VoltagePerReactivePower";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:VoltagePerReactivePower.value' in object) {
          attributeEntries['filledEntries']['cim:VoltagePerReactivePower.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltagePerReactivePower.value'], 'cim:Float', 'cim:VoltagePerReactivePower.value');
        } else {
          attributeEntries['emptyEntries']['cim:VoltagePerReactivePower.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltagePerReactivePower.value'], 'cim:Float', 'cim:VoltagePerReactivePower.value');
        }
        if ('cim:VoltagePerReactivePower.unit' in object) {
          attributeEntries['filledEntries']['cim:VoltagePerReactivePower.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltagePerReactivePower.unit'], 'cim:UnitSymbol', 'cim:VoltagePerReactivePower.unit');
        } else {
          attributeEntries['emptyEntries']['cim:VoltagePerReactivePower.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltagePerReactivePower.unit'], 'cim:UnitSymbol', 'cim:VoltagePerReactivePower.unit');
        }
        if ('cim:VoltagePerReactivePower.denominatorMultiplier' in object) {
          attributeEntries['filledEntries']['cim:VoltagePerReactivePower.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltagePerReactivePower.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:VoltagePerReactivePower.denominatorMultiplier');
        } else {
          attributeEntries['emptyEntries']['cim:VoltagePerReactivePower.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltagePerReactivePower.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:VoltagePerReactivePower.denominatorMultiplier');
        }
        if ('cim:VoltagePerReactivePower.multiplier' in object) {
          attributeEntries['filledEntries']['cim:VoltagePerReactivePower.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltagePerReactivePower.multiplier'], 'cim:UnitMultiplier', 'cim:VoltagePerReactivePower.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:VoltagePerReactivePower.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltagePerReactivePower.multiplier'], 'cim:UnitMultiplier', 'cim:VoltagePerReactivePower.multiplier');
        }
        if ('cim:VoltagePerReactivePower.denominatorUnit' in object) {
          attributeEntries['filledEntries']['cim:VoltagePerReactivePower.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltagePerReactivePower.denominatorUnit'], 'cim:UnitSymbol', 'cim:VoltagePerReactivePower.denominatorUnit');
        } else {
          attributeEntries['emptyEntries']['cim:VoltagePerReactivePower.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VoltagePerReactivePower.denominatorUnit'], 'cim:UnitSymbol', 'cim:VoltagePerReactivePower.denominatorUnit');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VoltagePerReactivePower.value", "cim:VoltagePerReactivePower.unit", "cim:VoltagePerReactivePower.denominatorMultiplier", "cim:VoltagePerReactivePower.multiplier", "cim:VoltagePerReactivePower.denominatorUnit"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VoltagePerReactivePower.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VoltagePerReactivePower: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VoltagePerReactivePower.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VoltagePerReactivePower;
  }(BaseClass);
  _defineProperty(VoltagePerReactivePower, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ],
    'value': [CGMESProfile.shortNames.EQ],
    'unit': [CGMESProfile.shortNames.EQ],
    'denominatorMultiplier': [CGMESProfile.shortNames.EQ],
    'multiplier': [CGMESProfile.shortNames.EQ],
    'denominatorUnit': [CGMESProfile.shortNames.EQ]
  });

  var VolumeFlowRate = /*#__PURE__*/function (_BaseClass) {
    _inherits(VolumeFlowRate, _BaseClass);
    var _super = _createSuper(VolumeFlowRate);
    function VolumeFlowRate() {
      _classCallCheck(this, VolumeFlowRate);
      return _super.apply(this, arguments);
    }
    _createClass(VolumeFlowRate, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VolumeFlowRate";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        if ('cim:VolumeFlowRate.denominatorMultiplier' in object) {
          attributeEntries['filledEntries']['cim:VolumeFlowRate.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VolumeFlowRate.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:VolumeFlowRate.denominatorMultiplier');
        } else {
          attributeEntries['emptyEntries']['cim:VolumeFlowRate.denominatorMultiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VolumeFlowRate.denominatorMultiplier'], 'cim:UnitMultiplier', 'cim:VolumeFlowRate.denominatorMultiplier');
        }
        if ('cim:VolumeFlowRate.denominatorUnit' in object) {
          attributeEntries['filledEntries']['cim:VolumeFlowRate.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VolumeFlowRate.denominatorUnit'], 'cim:UnitSymbol', 'cim:VolumeFlowRate.denominatorUnit');
        } else {
          attributeEntries['emptyEntries']['cim:VolumeFlowRate.denominatorUnit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VolumeFlowRate.denominatorUnit'], 'cim:UnitSymbol', 'cim:VolumeFlowRate.denominatorUnit');
        }
        if ('cim:VolumeFlowRate.multiplier' in object) {
          attributeEntries['filledEntries']['cim:VolumeFlowRate.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VolumeFlowRate.multiplier'], 'cim:UnitMultiplier', 'cim:VolumeFlowRate.multiplier');
        } else {
          attributeEntries['emptyEntries']['cim:VolumeFlowRate.multiplier'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VolumeFlowRate.multiplier'], 'cim:UnitMultiplier', 'cim:VolumeFlowRate.multiplier');
        }
        if ('cim:VolumeFlowRate.unit' in object) {
          attributeEntries['filledEntries']['cim:VolumeFlowRate.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VolumeFlowRate.unit'], 'cim:UnitSymbol', 'cim:VolumeFlowRate.unit');
        } else {
          attributeEntries['emptyEntries']['cim:VolumeFlowRate.unit'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VolumeFlowRate.unit'], 'cim:UnitSymbol', 'cim:VolumeFlowRate.unit');
        }
        if ('cim:VolumeFlowRate.value' in object) {
          attributeEntries['filledEntries']['cim:VolumeFlowRate.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VolumeFlowRate.value'], 'cim:Float', 'cim:VolumeFlowRate.value');
        } else {
          attributeEntries['emptyEntries']['cim:VolumeFlowRate.value'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VolumeFlowRate.value'], 'cim:Float', 'cim:VolumeFlowRate.value');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VolumeFlowRate.denominatorMultiplier", "cim:VolumeFlowRate.denominatorUnit", "cim:VolumeFlowRate.multiplier", "cim:VolumeFlowRate.unit", "cim:VolumeFlowRate.value"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VolumeFlowRate.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VolumeFlowRate: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VolumeFlowRate.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VolumeFlowRate;
  }(BaseClass);
  _defineProperty(VolumeFlowRate, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'denominatorMultiplier': [CGMESProfile.shortNames.DY],
    'denominatorUnit': [CGMESProfile.shortNames.DY],
    'multiplier': [CGMESProfile.shortNames.DY],
    'unit': [CGMESProfile.shortNames.DY],
    'value': [CGMESProfile.shortNames.DY]
  });

  var VsCapabilityCurve = /*#__PURE__*/function (_Curve) {
    _inherits(VsCapabilityCurve, _Curve);
    var _super = _createSuper(VsCapabilityCurve);
    function VsCapabilityCurve() {
      _classCallCheck(this, VsCapabilityCurve);
      return _super.apply(this, arguments);
    }
    _createClass(VsCapabilityCurve, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VsCapabilityCurve";
        var attributeEntries = Curve.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (Curve.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VsCapabilityCurve.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VsCapabilityCurve: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VsCapabilityCurve.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VsCapabilityCurve;
  }(Curve);
  _defineProperty(VsCapabilityCurve, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var VsConverter = /*#__PURE__*/function (_ACDCConverter) {
    _inherits(VsConverter, _ACDCConverter);
    var _super = _createSuper(VsConverter);
    function VsConverter() {
      _classCallCheck(this, VsConverter);
      return _super.apply(this, arguments);
    }
    _createClass(VsConverter, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VsConverter";
        var attributeEntries = ACDCConverter.attributeHTML(object, cimmenu, classType);
        if ('cim:VsConverter.CapabilityCurve' in object) {
          attributeEntries['filledEntries']['cim:VsConverter.CapabilityCurve'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.CapabilityCurve'], 'cim:VsCapabilityCurve', 'cim:VsConverter.CapabilityCurve');
        } else {
          attributeEntries['emptyEntries']['cim:VsConverter.CapabilityCurve'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.CapabilityCurve'], 'cim:VsCapabilityCurve', 'cim:VsConverter.CapabilityCurve');
        }
        if ('cim:VsConverter.maxModulationIndex' in object) {
          attributeEntries['filledEntries']['cim:VsConverter.maxModulationIndex'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.maxModulationIndex'], 'cim:Simple_Float', 'cim:VsConverter.maxModulationIndex');
        } else {
          attributeEntries['emptyEntries']['cim:VsConverter.maxModulationIndex'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.maxModulationIndex'], 'cim:Simple_Float', 'cim:VsConverter.maxModulationIndex');
        }
        if ('cim:VsConverter.maxValveCurrent' in object) {
          attributeEntries['filledEntries']['cim:VsConverter.maxValveCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.maxValveCurrent'], 'cim:CurrentFlow', 'cim:VsConverter.maxValveCurrent');
        } else {
          attributeEntries['emptyEntries']['cim:VsConverter.maxValveCurrent'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.maxValveCurrent'], 'cim:CurrentFlow', 'cim:VsConverter.maxValveCurrent');
        }
        if ('cim:VsConverter.droop' in object) {
          attributeEntries['filledEntries']['cim:VsConverter.droop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.droop'], 'cim:PU', 'cim:VsConverter.droop');
        } else {
          attributeEntries['emptyEntries']['cim:VsConverter.droop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.droop'], 'cim:PU', 'cim:VsConverter.droop');
        }
        if ('cim:VsConverter.droopCompensation' in object) {
          attributeEntries['filledEntries']['cim:VsConverter.droopCompensation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.droopCompensation'], 'cim:Resistance', 'cim:VsConverter.droopCompensation');
        } else {
          attributeEntries['emptyEntries']['cim:VsConverter.droopCompensation'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.droopCompensation'], 'cim:Resistance', 'cim:VsConverter.droopCompensation');
        }
        if ('cim:VsConverter.pPccControl' in object) {
          attributeEntries['filledEntries']['cim:VsConverter.pPccControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.pPccControl'], 'cim:VsPpccControlKind', 'cim:VsConverter.pPccControl');
        } else {
          attributeEntries['emptyEntries']['cim:VsConverter.pPccControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.pPccControl'], 'cim:VsPpccControlKind', 'cim:VsConverter.pPccControl');
        }
        if ('cim:VsConverter.qPccControl' in object) {
          attributeEntries['filledEntries']['cim:VsConverter.qPccControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.qPccControl'], 'cim:VsQpccControlKind', 'cim:VsConverter.qPccControl');
        } else {
          attributeEntries['emptyEntries']['cim:VsConverter.qPccControl'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.qPccControl'], 'cim:VsQpccControlKind', 'cim:VsConverter.qPccControl');
        }
        if ('cim:VsConverter.qShare' in object) {
          attributeEntries['filledEntries']['cim:VsConverter.qShare'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.qShare'], 'cim:PerCent', 'cim:VsConverter.qShare');
        } else {
          attributeEntries['emptyEntries']['cim:VsConverter.qShare'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.qShare'], 'cim:PerCent', 'cim:VsConverter.qShare');
        }
        if ('cim:VsConverter.targetQpcc' in object) {
          attributeEntries['filledEntries']['cim:VsConverter.targetQpcc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.targetQpcc'], 'cim:ReactivePower', 'cim:VsConverter.targetQpcc');
        } else {
          attributeEntries['emptyEntries']['cim:VsConverter.targetQpcc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.targetQpcc'], 'cim:ReactivePower', 'cim:VsConverter.targetQpcc');
        }
        if ('cim:VsConverter.targetUpcc' in object) {
          attributeEntries['filledEntries']['cim:VsConverter.targetUpcc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.targetUpcc'], 'cim:Voltage', 'cim:VsConverter.targetUpcc');
        } else {
          attributeEntries['emptyEntries']['cim:VsConverter.targetUpcc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.targetUpcc'], 'cim:Voltage', 'cim:VsConverter.targetUpcc');
        }
        if ('cim:VsConverter.delta' in object) {
          attributeEntries['filledEntries']['cim:VsConverter.delta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.delta'], 'cim:AngleDegrees', 'cim:VsConverter.delta');
        } else {
          attributeEntries['emptyEntries']['cim:VsConverter.delta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.delta'], 'cim:AngleDegrees', 'cim:VsConverter.delta');
        }
        if ('cim:VsConverter.uf' in object) {
          attributeEntries['filledEntries']['cim:VsConverter.uf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.uf'], 'cim:Voltage', 'cim:VsConverter.uf');
        } else {
          attributeEntries['emptyEntries']['cim:VsConverter.uf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['VsConverter.uf'], 'cim:Voltage', 'cim:VsConverter.uf');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:VsConverter.CapabilityCurve", "cim:VsConverter.maxModulationIndex", "cim:VsConverter.maxValveCurrent", "cim:VsConverter.droop", "cim:VsConverter.droopCompensation", "cim:VsConverter.pPccControl", "cim:VsConverter.qPccControl", "cim:VsConverter.qShare", "cim:VsConverter.targetQpcc", "cim:VsConverter.targetUpcc", "cim:VsConverter.delta", "cim:VsConverter.uf"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (ACDCConverter.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VsConverter.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VsConverter: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VsConverter.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VsConverter;
  }(ACDCConverter);
  _defineProperty(VsConverter, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH, CGMESProfile.shortNames.SV],
    'CapabilityCurve': [CGMESProfile.shortNames.EQ],
    'maxModulationIndex': [CGMESProfile.shortNames.EQ],
    'maxValveCurrent': [CGMESProfile.shortNames.EQ],
    'droop': [CGMESProfile.shortNames.SSH],
    'droopCompensation': [CGMESProfile.shortNames.SSH],
    'pPccControl': [CGMESProfile.shortNames.SSH],
    'qPccControl': [CGMESProfile.shortNames.SSH],
    'qShare': [CGMESProfile.shortNames.SSH],
    'targetQpcc': [CGMESProfile.shortNames.SSH],
    'targetUpcc': [CGMESProfile.shortNames.SSH],
    'delta': [CGMESProfile.shortNames.SV],
    'uf': [CGMESProfile.shortNames.SV]
  });

  var possibleValues$6 = [{
    "value": "--"
  }, {
    "value": "VsPpccControlKind.pPcc",
    "label": "pPcc"
  }, {
    "value": "VsPpccControlKind.udc",
    "label": "udc"
  }, {
    "value": "VsPpccControlKind.pPccAndUdcDroop",
    "label": "pPccAndUdcDroop"
  }, {
    "value": "VsPpccControlKind.pPccAndUdcDroopWithCompensation",
    "label": "pPccAndUdcDroopWithCompensation"
  }, {
    "value": "VsPpccControlKind.pPccAndUdcDroopPilot",
    "label": "pPccAndUdcDroopPilot"
  }];
  var VsPpccControlKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(VsPpccControlKind, _BaseClass);
    var _super = _createSuper(VsPpccControlKind);
    function VsPpccControlKind() {
      _classCallCheck(this, VsPpccControlKind);
      return _super.apply(this, arguments);
    }
    _createClass(VsPpccControlKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VsPpccControlKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VsPpccControlKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VsPpccControlKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VsPpccControlKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$6;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VsPpccControlKind;
  }(BaseClass);
  _defineProperty(VsPpccControlKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SSH]
  });

  var possibleValues$5 = [{
    "value": "--"
  }, {
    "value": "VsQpccControlKind.reactivePcc",
    "label": "reactivePcc"
  }, {
    "value": "VsQpccControlKind.voltagePcc",
    "label": "voltagePcc"
  }, {
    "value": "VsQpccControlKind.powerFactorPcc",
    "label": "powerFactorPcc"
  }];
  var VsQpccControlKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(VsQpccControlKind, _BaseClass);
    var _super = _createSuper(VsQpccControlKind);
    function VsQpccControlKind() {
      _classCallCheck(this, VsQpccControlKind);
      return _super.apply(this, arguments);
    }
    _createClass(VsQpccControlKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "VsQpccControlKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!VsQpccControlKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class VsQpccControlKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = VsQpccControlKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$5;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return VsQpccControlKind;
  }(BaseClass);
  _defineProperty(VsQpccControlKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.SSH]
  });

  var WindAeroConstIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindAeroConstIEC, _IdentifiedObject);
    var _super = _createSuper(WindAeroConstIEC);
    function WindAeroConstIEC() {
      _classCallCheck(this, WindAeroConstIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindAeroConstIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindAeroConstIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindAeroConstIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindAeroConstIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindAeroConstIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindAeroConstIEC;
  }(IdentifiedObject);
  _defineProperty(WindAeroConstIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var WindAeroLinearIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindAeroLinearIEC, _IdentifiedObject);
    var _super = _createSuper(WindAeroLinearIEC);
    function WindAeroLinearIEC() {
      _classCallCheck(this, WindAeroLinearIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindAeroLinearIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindAeroLinearIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindAeroLinearIEC.dpomega' in object) {
          attributeEntries['filledEntries']['cim:WindAeroLinearIEC.dpomega'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindAeroLinearIEC.dpomega'], 'cim:PU', 'cim:WindAeroLinearIEC.dpomega');
        } else {
          attributeEntries['emptyEntries']['cim:WindAeroLinearIEC.dpomega'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindAeroLinearIEC.dpomega'], 'cim:PU', 'cim:WindAeroLinearIEC.dpomega');
        }
        if ('cim:WindAeroLinearIEC.dptheta' in object) {
          attributeEntries['filledEntries']['cim:WindAeroLinearIEC.dptheta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindAeroLinearIEC.dptheta'], 'cim:PU', 'cim:WindAeroLinearIEC.dptheta');
        } else {
          attributeEntries['emptyEntries']['cim:WindAeroLinearIEC.dptheta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindAeroLinearIEC.dptheta'], 'cim:PU', 'cim:WindAeroLinearIEC.dptheta');
        }
        if ('cim:WindAeroLinearIEC.omegazero' in object) {
          attributeEntries['filledEntries']['cim:WindAeroLinearIEC.omegazero'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindAeroLinearIEC.omegazero'], 'cim:PU', 'cim:WindAeroLinearIEC.omegazero');
        } else {
          attributeEntries['emptyEntries']['cim:WindAeroLinearIEC.omegazero'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindAeroLinearIEC.omegazero'], 'cim:PU', 'cim:WindAeroLinearIEC.omegazero');
        }
        if ('cim:WindAeroLinearIEC.pavail' in object) {
          attributeEntries['filledEntries']['cim:WindAeroLinearIEC.pavail'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindAeroLinearIEC.pavail'], 'cim:PU', 'cim:WindAeroLinearIEC.pavail');
        } else {
          attributeEntries['emptyEntries']['cim:WindAeroLinearIEC.pavail'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindAeroLinearIEC.pavail'], 'cim:PU', 'cim:WindAeroLinearIEC.pavail');
        }
        if ('cim:WindAeroLinearIEC.thetazero' in object) {
          attributeEntries['filledEntries']['cim:WindAeroLinearIEC.thetazero'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindAeroLinearIEC.thetazero'], 'cim:AngleDegrees', 'cim:WindAeroLinearIEC.thetazero');
        } else {
          attributeEntries['emptyEntries']['cim:WindAeroLinearIEC.thetazero'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindAeroLinearIEC.thetazero'], 'cim:AngleDegrees', 'cim:WindAeroLinearIEC.thetazero');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindAeroLinearIEC.dpomega", "cim:WindAeroLinearIEC.dptheta", "cim:WindAeroLinearIEC.omegazero", "cim:WindAeroLinearIEC.pavail", "cim:WindAeroLinearIEC.thetazero"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindAeroLinearIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindAeroLinearIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindAeroLinearIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindAeroLinearIEC;
  }(IdentifiedObject);
  _defineProperty(WindAeroLinearIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'dpomega': [CGMESProfile.shortNames.DY],
    'dptheta': [CGMESProfile.shortNames.DY],
    'omegazero': [CGMESProfile.shortNames.DY],
    'pavail': [CGMESProfile.shortNames.DY],
    'thetazero': [CGMESProfile.shortNames.DY]
  });

  var WindContCurrLimIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindContCurrLimIEC, _IdentifiedObject);
    var _super = _createSuper(WindContCurrLimIEC);
    function WindContCurrLimIEC() {
      _classCallCheck(this, WindContCurrLimIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindContCurrLimIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindContCurrLimIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindContCurrLimIEC.imax' in object) {
          attributeEntries['filledEntries']['cim:WindContCurrLimIEC.imax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContCurrLimIEC.imax'], 'cim:PU', 'cim:WindContCurrLimIEC.imax');
        } else {
          attributeEntries['emptyEntries']['cim:WindContCurrLimIEC.imax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContCurrLimIEC.imax'], 'cim:PU', 'cim:WindContCurrLimIEC.imax');
        }
        if ('cim:WindContCurrLimIEC.imaxdip' in object) {
          attributeEntries['filledEntries']['cim:WindContCurrLimIEC.imaxdip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContCurrLimIEC.imaxdip'], 'cim:PU', 'cim:WindContCurrLimIEC.imaxdip');
        } else {
          attributeEntries['emptyEntries']['cim:WindContCurrLimIEC.imaxdip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContCurrLimIEC.imaxdip'], 'cim:PU', 'cim:WindContCurrLimIEC.imaxdip');
        }
        if ('cim:WindContCurrLimIEC.mdfslim' in object) {
          attributeEntries['filledEntries']['cim:WindContCurrLimIEC.mdfslim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContCurrLimIEC.mdfslim'], 'cim:Boolean', 'cim:WindContCurrLimIEC.mdfslim');
        } else {
          attributeEntries['emptyEntries']['cim:WindContCurrLimIEC.mdfslim'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContCurrLimIEC.mdfslim'], 'cim:Boolean', 'cim:WindContCurrLimIEC.mdfslim');
        }
        if ('cim:WindContCurrLimIEC.mqpri' in object) {
          attributeEntries['filledEntries']['cim:WindContCurrLimIEC.mqpri'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContCurrLimIEC.mqpri'], 'cim:Boolean', 'cim:WindContCurrLimIEC.mqpri');
        } else {
          attributeEntries['emptyEntries']['cim:WindContCurrLimIEC.mqpri'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContCurrLimIEC.mqpri'], 'cim:Boolean', 'cim:WindContCurrLimIEC.mqpri');
        }
        if ('cim:WindContCurrLimIEC.tufilt' in object) {
          attributeEntries['filledEntries']['cim:WindContCurrLimIEC.tufilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContCurrLimIEC.tufilt'], 'cim:Seconds', 'cim:WindContCurrLimIEC.tufilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContCurrLimIEC.tufilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContCurrLimIEC.tufilt'], 'cim:Seconds', 'cim:WindContCurrLimIEC.tufilt');
        }
        if ('cim:WindContCurrLimIEC.WindDynamicsLookupTable' in object) {
          attributeEntries['filledEntries']['cim:WindContCurrLimIEC.WindDynamicsLookupTable'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContCurrLimIEC.WindDynamicsLookupTable'], 'cim:WindDynamicsLookupTable', 'cim:WindContCurrLimIEC.WindDynamicsLookupTable');
        } else {
          attributeEntries['emptyEntries']['cim:WindContCurrLimIEC.WindDynamicsLookupTable'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContCurrLimIEC.WindDynamicsLookupTable'], 'cim:WindDynamicsLookupTable', 'cim:WindContCurrLimIEC.WindDynamicsLookupTable');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindContCurrLimIEC.imax", "cim:WindContCurrLimIEC.imaxdip", "cim:WindContCurrLimIEC.mdfslim", "cim:WindContCurrLimIEC.mqpri", "cim:WindContCurrLimIEC.tufilt", "cim:WindContCurrLimIEC.WindDynamicsLookupTable"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindContCurrLimIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindContCurrLimIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindContCurrLimIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindContCurrLimIEC;
  }(IdentifiedObject);
  _defineProperty(WindContCurrLimIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'imax': [CGMESProfile.shortNames.DY],
    'imaxdip': [CGMESProfile.shortNames.DY],
    'mdfslim': [CGMESProfile.shortNames.DY],
    'mqpri': [CGMESProfile.shortNames.DY],
    'tufilt': [CGMESProfile.shortNames.DY],
    'WindDynamicsLookupTable': [CGMESProfile.shortNames.DY]
  });

  var WindContPType3IEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindContPType3IEC, _IdentifiedObject);
    var _super = _createSuper(WindContPType3IEC);
    function WindContPType3IEC() {
      _classCallCheck(this, WindContPType3IEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindContPType3IEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindContPType3IEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindContPType3IEC.dpmax' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.dpmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.dpmax'], 'cim:PU', 'cim:WindContPType3IEC.dpmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.dpmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.dpmax'], 'cim:PU', 'cim:WindContPType3IEC.dpmax');
        }
        if ('cim:WindContPType3IEC.dtrisemaxlvrt' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.dtrisemaxlvrt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.dtrisemaxlvrt'], 'cim:PU', 'cim:WindContPType3IEC.dtrisemaxlvrt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.dtrisemaxlvrt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.dtrisemaxlvrt'], 'cim:PU', 'cim:WindContPType3IEC.dtrisemaxlvrt');
        }
        if ('cim:WindContPType3IEC.kdtd' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.kdtd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.kdtd'], 'cim:PU', 'cim:WindContPType3IEC.kdtd');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.kdtd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.kdtd'], 'cim:PU', 'cim:WindContPType3IEC.kdtd');
        }
        if ('cim:WindContPType3IEC.kip' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.kip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.kip'], 'cim:PU', 'cim:WindContPType3IEC.kip');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.kip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.kip'], 'cim:PU', 'cim:WindContPType3IEC.kip');
        }
        if ('cim:WindContPType3IEC.kpp' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.kpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.kpp'], 'cim:PU', 'cim:WindContPType3IEC.kpp');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.kpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.kpp'], 'cim:PU', 'cim:WindContPType3IEC.kpp');
        }
        if ('cim:WindContPType3IEC.mplvrt' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.mplvrt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.mplvrt'], 'cim:Boolean', 'cim:WindContPType3IEC.mplvrt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.mplvrt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.mplvrt'], 'cim:Boolean', 'cim:WindContPType3IEC.mplvrt');
        }
        if ('cim:WindContPType3IEC.omegaoffset' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.omegaoffset'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.omegaoffset'], 'cim:PU', 'cim:WindContPType3IEC.omegaoffset');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.omegaoffset'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.omegaoffset'], 'cim:PU', 'cim:WindContPType3IEC.omegaoffset');
        }
        if ('cim:WindContPType3IEC.pdtdmax' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.pdtdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.pdtdmax'], 'cim:PU', 'cim:WindContPType3IEC.pdtdmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.pdtdmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.pdtdmax'], 'cim:PU', 'cim:WindContPType3IEC.pdtdmax');
        }
        if ('cim:WindContPType3IEC.rramp' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.rramp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.rramp'], 'cim:PU', 'cim:WindContPType3IEC.rramp');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.rramp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.rramp'], 'cim:PU', 'cim:WindContPType3IEC.rramp');
        }
        if ('cim:WindContPType3IEC.tdvs' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.tdvs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.tdvs'], 'cim:Seconds', 'cim:WindContPType3IEC.tdvs');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.tdvs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.tdvs'], 'cim:Seconds', 'cim:WindContPType3IEC.tdvs');
        }
        if ('cim:WindContPType3IEC.temin' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.temin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.temin'], 'cim:PU', 'cim:WindContPType3IEC.temin');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.temin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.temin'], 'cim:PU', 'cim:WindContPType3IEC.temin');
        }
        if ('cim:WindContPType3IEC.tomegafilt' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.tomegafilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.tomegafilt'], 'cim:Seconds', 'cim:WindContPType3IEC.tomegafilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.tomegafilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.tomegafilt'], 'cim:Seconds', 'cim:WindContPType3IEC.tomegafilt');
        }
        if ('cim:WindContPType3IEC.tpfilt' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.tpfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.tpfilt'], 'cim:Seconds', 'cim:WindContPType3IEC.tpfilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.tpfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.tpfilt'], 'cim:Seconds', 'cim:WindContPType3IEC.tpfilt');
        }
        if ('cim:WindContPType3IEC.tpord' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.tpord'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.tpord'], 'cim:PU', 'cim:WindContPType3IEC.tpord');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.tpord'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.tpord'], 'cim:PU', 'cim:WindContPType3IEC.tpord');
        }
        if ('cim:WindContPType3IEC.tufilt' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.tufilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.tufilt'], 'cim:Seconds', 'cim:WindContPType3IEC.tufilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.tufilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.tufilt'], 'cim:Seconds', 'cim:WindContPType3IEC.tufilt');
        }
        if ('cim:WindContPType3IEC.tuscale' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.tuscale'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.tuscale'], 'cim:PU', 'cim:WindContPType3IEC.tuscale');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.tuscale'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.tuscale'], 'cim:PU', 'cim:WindContPType3IEC.tuscale');
        }
        if ('cim:WindContPType3IEC.twref' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.twref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.twref'], 'cim:Seconds', 'cim:WindContPType3IEC.twref');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.twref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.twref'], 'cim:Seconds', 'cim:WindContPType3IEC.twref');
        }
        if ('cim:WindContPType3IEC.udvs' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.udvs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.udvs'], 'cim:PU', 'cim:WindContPType3IEC.udvs');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.udvs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.udvs'], 'cim:PU', 'cim:WindContPType3IEC.udvs');
        }
        if ('cim:WindContPType3IEC.updip' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.updip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.updip'], 'cim:PU', 'cim:WindContPType3IEC.updip');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.updip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.updip'], 'cim:PU', 'cim:WindContPType3IEC.updip');
        }
        if ('cim:WindContPType3IEC.wdtd' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.wdtd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.wdtd'], 'cim:PU', 'cim:WindContPType3IEC.wdtd');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.wdtd'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.wdtd'], 'cim:PU', 'cim:WindContPType3IEC.wdtd');
        }
        if ('cim:WindContPType3IEC.zeta' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.zeta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.zeta'], 'cim:Simple_Float', 'cim:WindContPType3IEC.zeta');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.zeta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.zeta'], 'cim:Simple_Float', 'cim:WindContPType3IEC.zeta');
        }
        if ('cim:WindContPType3IEC.WindDynamicsLookupTable' in object) {
          attributeEntries['filledEntries']['cim:WindContPType3IEC.WindDynamicsLookupTable'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.WindDynamicsLookupTable'], 'cim:WindDynamicsLookupTable', 'cim:WindContPType3IEC.WindDynamicsLookupTable');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType3IEC.WindDynamicsLookupTable'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType3IEC.WindDynamicsLookupTable'], 'cim:WindDynamicsLookupTable', 'cim:WindContPType3IEC.WindDynamicsLookupTable');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindContPType3IEC.dpmax", "cim:WindContPType3IEC.dtrisemaxlvrt", "cim:WindContPType3IEC.kdtd", "cim:WindContPType3IEC.kip", "cim:WindContPType3IEC.kpp", "cim:WindContPType3IEC.mplvrt", "cim:WindContPType3IEC.omegaoffset", "cim:WindContPType3IEC.pdtdmax", "cim:WindContPType3IEC.rramp", "cim:WindContPType3IEC.tdvs", "cim:WindContPType3IEC.temin", "cim:WindContPType3IEC.tomegafilt", "cim:WindContPType3IEC.tpfilt", "cim:WindContPType3IEC.tpord", "cim:WindContPType3IEC.tufilt", "cim:WindContPType3IEC.tuscale", "cim:WindContPType3IEC.twref", "cim:WindContPType3IEC.udvs", "cim:WindContPType3IEC.updip", "cim:WindContPType3IEC.wdtd", "cim:WindContPType3IEC.zeta", "cim:WindContPType3IEC.WindDynamicsLookupTable"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindContPType3IEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindContPType3IEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindContPType3IEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindContPType3IEC;
  }(IdentifiedObject);
  _defineProperty(WindContPType3IEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'dpmax': [CGMESProfile.shortNames.DY],
    'dtrisemaxlvrt': [CGMESProfile.shortNames.DY],
    'kdtd': [CGMESProfile.shortNames.DY],
    'kip': [CGMESProfile.shortNames.DY],
    'kpp': [CGMESProfile.shortNames.DY],
    'mplvrt': [CGMESProfile.shortNames.DY],
    'omegaoffset': [CGMESProfile.shortNames.DY],
    'pdtdmax': [CGMESProfile.shortNames.DY],
    'rramp': [CGMESProfile.shortNames.DY],
    'tdvs': [CGMESProfile.shortNames.DY],
    'temin': [CGMESProfile.shortNames.DY],
    'tomegafilt': [CGMESProfile.shortNames.DY],
    'tpfilt': [CGMESProfile.shortNames.DY],
    'tpord': [CGMESProfile.shortNames.DY],
    'tufilt': [CGMESProfile.shortNames.DY],
    'tuscale': [CGMESProfile.shortNames.DY],
    'twref': [CGMESProfile.shortNames.DY],
    'udvs': [CGMESProfile.shortNames.DY],
    'updip': [CGMESProfile.shortNames.DY],
    'wdtd': [CGMESProfile.shortNames.DY],
    'zeta': [CGMESProfile.shortNames.DY],
    'WindDynamicsLookupTable': [CGMESProfile.shortNames.DY]
  });

  var WindContPType4aIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindContPType4aIEC, _IdentifiedObject);
    var _super = _createSuper(WindContPType4aIEC);
    function WindContPType4aIEC() {
      _classCallCheck(this, WindContPType4aIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindContPType4aIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindContPType4aIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindContPType4aIEC.dpmax' in object) {
          attributeEntries['filledEntries']['cim:WindContPType4aIEC.dpmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4aIEC.dpmax'], 'cim:PU', 'cim:WindContPType4aIEC.dpmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType4aIEC.dpmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4aIEC.dpmax'], 'cim:PU', 'cim:WindContPType4aIEC.dpmax');
        }
        if ('cim:WindContPType4aIEC.tpord' in object) {
          attributeEntries['filledEntries']['cim:WindContPType4aIEC.tpord'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4aIEC.tpord'], 'cim:Seconds', 'cim:WindContPType4aIEC.tpord');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType4aIEC.tpord'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4aIEC.tpord'], 'cim:Seconds', 'cim:WindContPType4aIEC.tpord');
        }
        if ('cim:WindContPType4aIEC.tufilt' in object) {
          attributeEntries['filledEntries']['cim:WindContPType4aIEC.tufilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4aIEC.tufilt'], 'cim:Seconds', 'cim:WindContPType4aIEC.tufilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType4aIEC.tufilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4aIEC.tufilt'], 'cim:Seconds', 'cim:WindContPType4aIEC.tufilt');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindContPType4aIEC.dpmax", "cim:WindContPType4aIEC.tpord", "cim:WindContPType4aIEC.tufilt"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindContPType4aIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindContPType4aIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindContPType4aIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindContPType4aIEC;
  }(IdentifiedObject);
  _defineProperty(WindContPType4aIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'dpmax': [CGMESProfile.shortNames.DY],
    'tpord': [CGMESProfile.shortNames.DY],
    'tufilt': [CGMESProfile.shortNames.DY]
  });

  var WindContPType4bIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindContPType4bIEC, _IdentifiedObject);
    var _super = _createSuper(WindContPType4bIEC);
    function WindContPType4bIEC() {
      _classCallCheck(this, WindContPType4bIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindContPType4bIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindContPType4bIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindContPType4bIEC.dpmax' in object) {
          attributeEntries['filledEntries']['cim:WindContPType4bIEC.dpmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4bIEC.dpmax'], 'cim:PU', 'cim:WindContPType4bIEC.dpmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType4bIEC.dpmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4bIEC.dpmax'], 'cim:PU', 'cim:WindContPType4bIEC.dpmax');
        }
        if ('cim:WindContPType4bIEC.tpaero' in object) {
          attributeEntries['filledEntries']['cim:WindContPType4bIEC.tpaero'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4bIEC.tpaero'], 'cim:Seconds', 'cim:WindContPType4bIEC.tpaero');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType4bIEC.tpaero'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4bIEC.tpaero'], 'cim:Seconds', 'cim:WindContPType4bIEC.tpaero');
        }
        if ('cim:WindContPType4bIEC.tpord' in object) {
          attributeEntries['filledEntries']['cim:WindContPType4bIEC.tpord'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4bIEC.tpord'], 'cim:Seconds', 'cim:WindContPType4bIEC.tpord');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType4bIEC.tpord'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4bIEC.tpord'], 'cim:Seconds', 'cim:WindContPType4bIEC.tpord');
        }
        if ('cim:WindContPType4bIEC.tufilt' in object) {
          attributeEntries['filledEntries']['cim:WindContPType4bIEC.tufilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4bIEC.tufilt'], 'cim:Seconds', 'cim:WindContPType4bIEC.tufilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPType4bIEC.tufilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPType4bIEC.tufilt'], 'cim:Seconds', 'cim:WindContPType4bIEC.tufilt');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindContPType4bIEC.dpmax", "cim:WindContPType4bIEC.tpaero", "cim:WindContPType4bIEC.tpord", "cim:WindContPType4bIEC.tufilt"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindContPType4bIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindContPType4bIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindContPType4bIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindContPType4bIEC;
  }(IdentifiedObject);
  _defineProperty(WindContPType4bIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'dpmax': [CGMESProfile.shortNames.DY],
    'tpaero': [CGMESProfile.shortNames.DY],
    'tpord': [CGMESProfile.shortNames.DY],
    'tufilt': [CGMESProfile.shortNames.DY]
  });

  var WindContPitchAngleIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindContPitchAngleIEC, _IdentifiedObject);
    var _super = _createSuper(WindContPitchAngleIEC);
    function WindContPitchAngleIEC() {
      _classCallCheck(this, WindContPitchAngleIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindContPitchAngleIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindContPitchAngleIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindContPitchAngleIEC.dthetamax' in object) {
          attributeEntries['filledEntries']['cim:WindContPitchAngleIEC.dthetamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.dthetamax'], 'cim:Simple_Float', 'cim:WindContPitchAngleIEC.dthetamax');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPitchAngleIEC.dthetamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.dthetamax'], 'cim:Simple_Float', 'cim:WindContPitchAngleIEC.dthetamax');
        }
        if ('cim:WindContPitchAngleIEC.dthetamin' in object) {
          attributeEntries['filledEntries']['cim:WindContPitchAngleIEC.dthetamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.dthetamin'], 'cim:Simple_Float', 'cim:WindContPitchAngleIEC.dthetamin');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPitchAngleIEC.dthetamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.dthetamin'], 'cim:Simple_Float', 'cim:WindContPitchAngleIEC.dthetamin');
        }
        if ('cim:WindContPitchAngleIEC.kic' in object) {
          attributeEntries['filledEntries']['cim:WindContPitchAngleIEC.kic'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.kic'], 'cim:PU', 'cim:WindContPitchAngleIEC.kic');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPitchAngleIEC.kic'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.kic'], 'cim:PU', 'cim:WindContPitchAngleIEC.kic');
        }
        if ('cim:WindContPitchAngleIEC.kiomega' in object) {
          attributeEntries['filledEntries']['cim:WindContPitchAngleIEC.kiomega'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.kiomega'], 'cim:PU', 'cim:WindContPitchAngleIEC.kiomega');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPitchAngleIEC.kiomega'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.kiomega'], 'cim:PU', 'cim:WindContPitchAngleIEC.kiomega');
        }
        if ('cim:WindContPitchAngleIEC.kpc' in object) {
          attributeEntries['filledEntries']['cim:WindContPitchAngleIEC.kpc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.kpc'], 'cim:PU', 'cim:WindContPitchAngleIEC.kpc');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPitchAngleIEC.kpc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.kpc'], 'cim:PU', 'cim:WindContPitchAngleIEC.kpc');
        }
        if ('cim:WindContPitchAngleIEC.kpomega' in object) {
          attributeEntries['filledEntries']['cim:WindContPitchAngleIEC.kpomega'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.kpomega'], 'cim:PU', 'cim:WindContPitchAngleIEC.kpomega');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPitchAngleIEC.kpomega'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.kpomega'], 'cim:PU', 'cim:WindContPitchAngleIEC.kpomega');
        }
        if ('cim:WindContPitchAngleIEC.kpx' in object) {
          attributeEntries['filledEntries']['cim:WindContPitchAngleIEC.kpx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.kpx'], 'cim:PU', 'cim:WindContPitchAngleIEC.kpx');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPitchAngleIEC.kpx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.kpx'], 'cim:PU', 'cim:WindContPitchAngleIEC.kpx');
        }
        if ('cim:WindContPitchAngleIEC.thetamax' in object) {
          attributeEntries['filledEntries']['cim:WindContPitchAngleIEC.thetamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.thetamax'], 'cim:AngleDegrees', 'cim:WindContPitchAngleIEC.thetamax');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPitchAngleIEC.thetamax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.thetamax'], 'cim:AngleDegrees', 'cim:WindContPitchAngleIEC.thetamax');
        }
        if ('cim:WindContPitchAngleIEC.thetamin' in object) {
          attributeEntries['filledEntries']['cim:WindContPitchAngleIEC.thetamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.thetamin'], 'cim:AngleDegrees', 'cim:WindContPitchAngleIEC.thetamin');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPitchAngleIEC.thetamin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.thetamin'], 'cim:AngleDegrees', 'cim:WindContPitchAngleIEC.thetamin');
        }
        if ('cim:WindContPitchAngleIEC.ttheta' in object) {
          attributeEntries['filledEntries']['cim:WindContPitchAngleIEC.ttheta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.ttheta'], 'cim:Seconds', 'cim:WindContPitchAngleIEC.ttheta');
        } else {
          attributeEntries['emptyEntries']['cim:WindContPitchAngleIEC.ttheta'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContPitchAngleIEC.ttheta'], 'cim:Seconds', 'cim:WindContPitchAngleIEC.ttheta');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindContPitchAngleIEC.dthetamax", "cim:WindContPitchAngleIEC.dthetamin", "cim:WindContPitchAngleIEC.kic", "cim:WindContPitchAngleIEC.kiomega", "cim:WindContPitchAngleIEC.kpc", "cim:WindContPitchAngleIEC.kpomega", "cim:WindContPitchAngleIEC.kpx", "cim:WindContPitchAngleIEC.thetamax", "cim:WindContPitchAngleIEC.thetamin", "cim:WindContPitchAngleIEC.ttheta"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindContPitchAngleIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindContPitchAngleIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindContPitchAngleIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindContPitchAngleIEC;
  }(IdentifiedObject);
  _defineProperty(WindContPitchAngleIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'dthetamax': [CGMESProfile.shortNames.DY],
    'dthetamin': [CGMESProfile.shortNames.DY],
    'kic': [CGMESProfile.shortNames.DY],
    'kiomega': [CGMESProfile.shortNames.DY],
    'kpc': [CGMESProfile.shortNames.DY],
    'kpomega': [CGMESProfile.shortNames.DY],
    'kpx': [CGMESProfile.shortNames.DY],
    'thetamax': [CGMESProfile.shortNames.DY],
    'thetamin': [CGMESProfile.shortNames.DY],
    'ttheta': [CGMESProfile.shortNames.DY]
  });

  var WindContQIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindContQIEC, _IdentifiedObject);
    var _super = _createSuper(WindContQIEC);
    function WindContQIEC() {
      _classCallCheck(this, WindContQIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindContQIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindContQIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindContQIEC.iqh1' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.iqh1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.iqh1'], 'cim:PU', 'cim:WindContQIEC.iqh1');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.iqh1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.iqh1'], 'cim:PU', 'cim:WindContQIEC.iqh1');
        }
        if ('cim:WindContQIEC.iqmax' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.iqmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.iqmax'], 'cim:PU', 'cim:WindContQIEC.iqmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.iqmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.iqmax'], 'cim:PU', 'cim:WindContQIEC.iqmax');
        }
        if ('cim:WindContQIEC.iqmin' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.iqmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.iqmin'], 'cim:PU', 'cim:WindContQIEC.iqmin');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.iqmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.iqmin'], 'cim:PU', 'cim:WindContQIEC.iqmin');
        }
        if ('cim:WindContQIEC.iqpost' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.iqpost'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.iqpost'], 'cim:PU', 'cim:WindContQIEC.iqpost');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.iqpost'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.iqpost'], 'cim:PU', 'cim:WindContQIEC.iqpost');
        }
        if ('cim:WindContQIEC.kiq' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.kiq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.kiq'], 'cim:PU', 'cim:WindContQIEC.kiq');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.kiq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.kiq'], 'cim:PU', 'cim:WindContQIEC.kiq');
        }
        if ('cim:WindContQIEC.kiu' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.kiu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.kiu'], 'cim:PU', 'cim:WindContQIEC.kiu');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.kiu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.kiu'], 'cim:PU', 'cim:WindContQIEC.kiu');
        }
        if ('cim:WindContQIEC.kpq' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.kpq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.kpq'], 'cim:PU', 'cim:WindContQIEC.kpq');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.kpq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.kpq'], 'cim:PU', 'cim:WindContQIEC.kpq');
        }
        if ('cim:WindContQIEC.kpu' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.kpu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.kpu'], 'cim:PU', 'cim:WindContQIEC.kpu');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.kpu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.kpu'], 'cim:PU', 'cim:WindContQIEC.kpu');
        }
        if ('cim:WindContQIEC.kqv' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.kqv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.kqv'], 'cim:PU', 'cim:WindContQIEC.kqv');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.kqv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.kqv'], 'cim:PU', 'cim:WindContQIEC.kqv');
        }
        if ('cim:WindContQIEC.qmax' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.qmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.qmax'], 'cim:PU', 'cim:WindContQIEC.qmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.qmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.qmax'], 'cim:PU', 'cim:WindContQIEC.qmax');
        }
        if ('cim:WindContQIEC.qmin' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.qmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.qmin'], 'cim:PU', 'cim:WindContQIEC.qmin');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.qmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.qmin'], 'cim:PU', 'cim:WindContQIEC.qmin');
        }
        if ('cim:WindContQIEC.rdroop' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.rdroop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.rdroop'], 'cim:PU', 'cim:WindContQIEC.rdroop');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.rdroop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.rdroop'], 'cim:PU', 'cim:WindContQIEC.rdroop');
        }
        if ('cim:WindContQIEC.tiq' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.tiq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.tiq'], 'cim:Seconds', 'cim:WindContQIEC.tiq');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.tiq'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.tiq'], 'cim:Seconds', 'cim:WindContQIEC.tiq');
        }
        if ('cim:WindContQIEC.tpfilt' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.tpfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.tpfilt'], 'cim:Seconds', 'cim:WindContQIEC.tpfilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.tpfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.tpfilt'], 'cim:Seconds', 'cim:WindContQIEC.tpfilt');
        }
        if ('cim:WindContQIEC.tpost' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.tpost'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.tpost'], 'cim:Seconds', 'cim:WindContQIEC.tpost');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.tpost'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.tpost'], 'cim:Seconds', 'cim:WindContQIEC.tpost');
        }
        if ('cim:WindContQIEC.tqord' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.tqord'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.tqord'], 'cim:Seconds', 'cim:WindContQIEC.tqord');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.tqord'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.tqord'], 'cim:Seconds', 'cim:WindContQIEC.tqord');
        }
        if ('cim:WindContQIEC.tufilt' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.tufilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.tufilt'], 'cim:Seconds', 'cim:WindContQIEC.tufilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.tufilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.tufilt'], 'cim:Seconds', 'cim:WindContQIEC.tufilt');
        }
        if ('cim:WindContQIEC.udb1' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.udb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.udb1'], 'cim:PU', 'cim:WindContQIEC.udb1');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.udb1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.udb1'], 'cim:PU', 'cim:WindContQIEC.udb1');
        }
        if ('cim:WindContQIEC.udb2' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.udb2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.udb2'], 'cim:PU', 'cim:WindContQIEC.udb2');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.udb2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.udb2'], 'cim:PU', 'cim:WindContQIEC.udb2');
        }
        if ('cim:WindContQIEC.umax' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.umax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.umax'], 'cim:PU', 'cim:WindContQIEC.umax');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.umax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.umax'], 'cim:PU', 'cim:WindContQIEC.umax');
        }
        if ('cim:WindContQIEC.umin' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.umin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.umin'], 'cim:PU', 'cim:WindContQIEC.umin');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.umin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.umin'], 'cim:PU', 'cim:WindContQIEC.umin');
        }
        if ('cim:WindContQIEC.uqdip' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.uqdip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.uqdip'], 'cim:PU', 'cim:WindContQIEC.uqdip');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.uqdip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.uqdip'], 'cim:PU', 'cim:WindContQIEC.uqdip');
        }
        if ('cim:WindContQIEC.uref0' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.uref0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.uref0'], 'cim:PU', 'cim:WindContQIEC.uref0');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.uref0'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.uref0'], 'cim:PU', 'cim:WindContQIEC.uref0');
        }
        if ('cim:WindContQIEC.windLVRTQcontrolModesType' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.windLVRTQcontrolModesType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.windLVRTQcontrolModesType'], 'cim:WindLVRTQcontrolModesKind', 'cim:WindContQIEC.windLVRTQcontrolModesType');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.windLVRTQcontrolModesType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.windLVRTQcontrolModesType'], 'cim:WindLVRTQcontrolModesKind', 'cim:WindContQIEC.windLVRTQcontrolModesType');
        }
        if ('cim:WindContQIEC.windQcontrolModesType' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.windQcontrolModesType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.windQcontrolModesType'], 'cim:WindQcontrolModesKind', 'cim:WindContQIEC.windQcontrolModesType');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.windQcontrolModesType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.windQcontrolModesType'], 'cim:WindQcontrolModesKind', 'cim:WindContQIEC.windQcontrolModesType');
        }
        if ('cim:WindContQIEC.xdroop' in object) {
          attributeEntries['filledEntries']['cim:WindContQIEC.xdroop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.xdroop'], 'cim:PU', 'cim:WindContQIEC.xdroop');
        } else {
          attributeEntries['emptyEntries']['cim:WindContQIEC.xdroop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContQIEC.xdroop'], 'cim:PU', 'cim:WindContQIEC.xdroop');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindContQIEC.iqh1", "cim:WindContQIEC.iqmax", "cim:WindContQIEC.iqmin", "cim:WindContQIEC.iqpost", "cim:WindContQIEC.kiq", "cim:WindContQIEC.kiu", "cim:WindContQIEC.kpq", "cim:WindContQIEC.kpu", "cim:WindContQIEC.kqv", "cim:WindContQIEC.qmax", "cim:WindContQIEC.qmin", "cim:WindContQIEC.rdroop", "cim:WindContQIEC.tiq", "cim:WindContQIEC.tpfilt", "cim:WindContQIEC.tpost", "cim:WindContQIEC.tqord", "cim:WindContQIEC.tufilt", "cim:WindContQIEC.udb1", "cim:WindContQIEC.udb2", "cim:WindContQIEC.umax", "cim:WindContQIEC.umin", "cim:WindContQIEC.uqdip", "cim:WindContQIEC.uref0", "cim:WindContQIEC.windLVRTQcontrolModesType", "cim:WindContQIEC.windQcontrolModesType", "cim:WindContQIEC.xdroop"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindContQIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindContQIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindContQIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindContQIEC;
  }(IdentifiedObject);
  _defineProperty(WindContQIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'iqh1': [CGMESProfile.shortNames.DY],
    'iqmax': [CGMESProfile.shortNames.DY],
    'iqmin': [CGMESProfile.shortNames.DY],
    'iqpost': [CGMESProfile.shortNames.DY],
    'kiq': [CGMESProfile.shortNames.DY],
    'kiu': [CGMESProfile.shortNames.DY],
    'kpq': [CGMESProfile.shortNames.DY],
    'kpu': [CGMESProfile.shortNames.DY],
    'kqv': [CGMESProfile.shortNames.DY],
    'qmax': [CGMESProfile.shortNames.DY],
    'qmin': [CGMESProfile.shortNames.DY],
    'rdroop': [CGMESProfile.shortNames.DY],
    'tiq': [CGMESProfile.shortNames.DY],
    'tpfilt': [CGMESProfile.shortNames.DY],
    'tpost': [CGMESProfile.shortNames.DY],
    'tqord': [CGMESProfile.shortNames.DY],
    'tufilt': [CGMESProfile.shortNames.DY],
    'udb1': [CGMESProfile.shortNames.DY],
    'udb2': [CGMESProfile.shortNames.DY],
    'umax': [CGMESProfile.shortNames.DY],
    'umin': [CGMESProfile.shortNames.DY],
    'uqdip': [CGMESProfile.shortNames.DY],
    'uref0': [CGMESProfile.shortNames.DY],
    'windLVRTQcontrolModesType': [CGMESProfile.shortNames.DY],
    'windQcontrolModesType': [CGMESProfile.shortNames.DY],
    'xdroop': [CGMESProfile.shortNames.DY]
  });

  var WindContRotorRIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindContRotorRIEC, _IdentifiedObject);
    var _super = _createSuper(WindContRotorRIEC);
    function WindContRotorRIEC() {
      _classCallCheck(this, WindContRotorRIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindContRotorRIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindContRotorRIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindContRotorRIEC.kirr' in object) {
          attributeEntries['filledEntries']['cim:WindContRotorRIEC.kirr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.kirr'], 'cim:PU', 'cim:WindContRotorRIEC.kirr');
        } else {
          attributeEntries['emptyEntries']['cim:WindContRotorRIEC.kirr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.kirr'], 'cim:PU', 'cim:WindContRotorRIEC.kirr');
        }
        if ('cim:WindContRotorRIEC.komegafilt' in object) {
          attributeEntries['filledEntries']['cim:WindContRotorRIEC.komegafilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.komegafilt'], 'cim:Simple_Float', 'cim:WindContRotorRIEC.komegafilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContRotorRIEC.komegafilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.komegafilt'], 'cim:Simple_Float', 'cim:WindContRotorRIEC.komegafilt');
        }
        if ('cim:WindContRotorRIEC.kpfilt' in object) {
          attributeEntries['filledEntries']['cim:WindContRotorRIEC.kpfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.kpfilt'], 'cim:Simple_Float', 'cim:WindContRotorRIEC.kpfilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContRotorRIEC.kpfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.kpfilt'], 'cim:Simple_Float', 'cim:WindContRotorRIEC.kpfilt');
        }
        if ('cim:WindContRotorRIEC.kprr' in object) {
          attributeEntries['filledEntries']['cim:WindContRotorRIEC.kprr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.kprr'], 'cim:PU', 'cim:WindContRotorRIEC.kprr');
        } else {
          attributeEntries['emptyEntries']['cim:WindContRotorRIEC.kprr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.kprr'], 'cim:PU', 'cim:WindContRotorRIEC.kprr');
        }
        if ('cim:WindContRotorRIEC.rmax' in object) {
          attributeEntries['filledEntries']['cim:WindContRotorRIEC.rmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.rmax'], 'cim:PU', 'cim:WindContRotorRIEC.rmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindContRotorRIEC.rmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.rmax'], 'cim:PU', 'cim:WindContRotorRIEC.rmax');
        }
        if ('cim:WindContRotorRIEC.rmin' in object) {
          attributeEntries['filledEntries']['cim:WindContRotorRIEC.rmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.rmin'], 'cim:PU', 'cim:WindContRotorRIEC.rmin');
        } else {
          attributeEntries['emptyEntries']['cim:WindContRotorRIEC.rmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.rmin'], 'cim:PU', 'cim:WindContRotorRIEC.rmin');
        }
        if ('cim:WindContRotorRIEC.tomegafilt' in object) {
          attributeEntries['filledEntries']['cim:WindContRotorRIEC.tomegafilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.tomegafilt'], 'cim:Seconds', 'cim:WindContRotorRIEC.tomegafilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContRotorRIEC.tomegafilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.tomegafilt'], 'cim:Seconds', 'cim:WindContRotorRIEC.tomegafilt');
        }
        if ('cim:WindContRotorRIEC.tpfilt' in object) {
          attributeEntries['filledEntries']['cim:WindContRotorRIEC.tpfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.tpfilt'], 'cim:Seconds', 'cim:WindContRotorRIEC.tpfilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindContRotorRIEC.tpfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.tpfilt'], 'cim:Seconds', 'cim:WindContRotorRIEC.tpfilt');
        }
        if ('cim:WindContRotorRIEC.WindGenTurbineType2IEC' in object) {
          attributeEntries['filledEntries']['cim:WindContRotorRIEC.WindGenTurbineType2IEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.WindGenTurbineType2IEC'], 'cim:WindGenTurbineType2IEC', 'cim:WindContRotorRIEC.WindGenTurbineType2IEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindContRotorRIEC.WindGenTurbineType2IEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindContRotorRIEC.WindGenTurbineType2IEC'], 'cim:WindGenTurbineType2IEC', 'cim:WindContRotorRIEC.WindGenTurbineType2IEC');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindContRotorRIEC.kirr", "cim:WindContRotorRIEC.komegafilt", "cim:WindContRotorRIEC.kpfilt", "cim:WindContRotorRIEC.kprr", "cim:WindContRotorRIEC.rmax", "cim:WindContRotorRIEC.rmin", "cim:WindContRotorRIEC.tomegafilt", "cim:WindContRotorRIEC.tpfilt", "cim:WindContRotorRIEC.WindGenTurbineType2IEC"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindContRotorRIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindContRotorRIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindContRotorRIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindContRotorRIEC;
  }(IdentifiedObject);
  _defineProperty(WindContRotorRIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kirr': [CGMESProfile.shortNames.DY],
    'komegafilt': [CGMESProfile.shortNames.DY],
    'kpfilt': [CGMESProfile.shortNames.DY],
    'kprr': [CGMESProfile.shortNames.DY],
    'rmax': [CGMESProfile.shortNames.DY],
    'rmin': [CGMESProfile.shortNames.DY],
    'tomegafilt': [CGMESProfile.shortNames.DY],
    'tpfilt': [CGMESProfile.shortNames.DY],
    'WindGenTurbineType2IEC': [CGMESProfile.shortNames.DY]
  });

  var WindDynamicsLookupTable = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindDynamicsLookupTable, _IdentifiedObject);
    var _super = _createSuper(WindDynamicsLookupTable);
    function WindDynamicsLookupTable() {
      _classCallCheck(this, WindDynamicsLookupTable);
      return _super.apply(this, arguments);
    }
    _createClass(WindDynamicsLookupTable, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindDynamicsLookupTable";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindDynamicsLookupTable.WindContCurrLimIEC' in object) {
          attributeEntries['filledEntries']['cim:WindDynamicsLookupTable.WindContCurrLimIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.WindContCurrLimIEC'], 'cim:WindContCurrLimIEC', 'cim:WindDynamicsLookupTable.WindContCurrLimIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindDynamicsLookupTable.WindContCurrLimIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.WindContCurrLimIEC'], 'cim:WindContCurrLimIEC', 'cim:WindDynamicsLookupTable.WindContCurrLimIEC');
        }
        if ('cim:WindDynamicsLookupTable.WindContPType3IEC' in object) {
          attributeEntries['filledEntries']['cim:WindDynamicsLookupTable.WindContPType3IEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.WindContPType3IEC'], 'cim:WindContPType3IEC', 'cim:WindDynamicsLookupTable.WindContPType3IEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindDynamicsLookupTable.WindContPType3IEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.WindContPType3IEC'], 'cim:WindContPType3IEC', 'cim:WindDynamicsLookupTable.WindContPType3IEC');
        }
        if ('cim:WindDynamicsLookupTable.WindContRotorRIEC' in object) {
          attributeEntries['filledEntries']['cim:WindDynamicsLookupTable.WindContRotorRIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.WindContRotorRIEC'], 'cim:WindContRotorRIEC', 'cim:WindDynamicsLookupTable.WindContRotorRIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindDynamicsLookupTable.WindContRotorRIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.WindContRotorRIEC'], 'cim:WindContRotorRIEC', 'cim:WindDynamicsLookupTable.WindContRotorRIEC');
        }
        if ('cim:WindDynamicsLookupTable.input' in object) {
          attributeEntries['filledEntries']['cim:WindDynamicsLookupTable.input'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.input'], 'cim:Simple_Float', 'cim:WindDynamicsLookupTable.input');
        } else {
          attributeEntries['emptyEntries']['cim:WindDynamicsLookupTable.input'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.input'], 'cim:Simple_Float', 'cim:WindDynamicsLookupTable.input');
        }
        if ('cim:WindDynamicsLookupTable.lookupTableFunctionType' in object) {
          attributeEntries['filledEntries']['cim:WindDynamicsLookupTable.lookupTableFunctionType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.lookupTableFunctionType'], 'cim:WindLookupTableFunctionKind', 'cim:WindDynamicsLookupTable.lookupTableFunctionType');
        } else {
          attributeEntries['emptyEntries']['cim:WindDynamicsLookupTable.lookupTableFunctionType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.lookupTableFunctionType'], 'cim:WindLookupTableFunctionKind', 'cim:WindDynamicsLookupTable.lookupTableFunctionType');
        }
        if ('cim:WindDynamicsLookupTable.output' in object) {
          attributeEntries['filledEntries']['cim:WindDynamicsLookupTable.output'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.output'], 'cim:Simple_Float', 'cim:WindDynamicsLookupTable.output');
        } else {
          attributeEntries['emptyEntries']['cim:WindDynamicsLookupTable.output'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.output'], 'cim:Simple_Float', 'cim:WindDynamicsLookupTable.output');
        }
        if ('cim:WindDynamicsLookupTable.sequence' in object) {
          attributeEntries['filledEntries']['cim:WindDynamicsLookupTable.sequence'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.sequence'], 'cim:Integer', 'cim:WindDynamicsLookupTable.sequence');
        } else {
          attributeEntries['emptyEntries']['cim:WindDynamicsLookupTable.sequence'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.sequence'], 'cim:Integer', 'cim:WindDynamicsLookupTable.sequence');
        }
        if ('cim:WindDynamicsLookupTable.WindPlantFreqPcontrolIEC' in object) {
          attributeEntries['filledEntries']['cim:WindDynamicsLookupTable.WindPlantFreqPcontrolIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.WindPlantFreqPcontrolIEC'], 'cim:WindPlantFreqPcontrolIEC', 'cim:WindDynamicsLookupTable.WindPlantFreqPcontrolIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindDynamicsLookupTable.WindPlantFreqPcontrolIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindDynamicsLookupTable.WindPlantFreqPcontrolIEC'], 'cim:WindPlantFreqPcontrolIEC', 'cim:WindDynamicsLookupTable.WindPlantFreqPcontrolIEC');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindDynamicsLookupTable.WindContCurrLimIEC", "cim:WindDynamicsLookupTable.WindContPType3IEC", "cim:WindDynamicsLookupTable.WindContRotorRIEC", "cim:WindDynamicsLookupTable.input", "cim:WindDynamicsLookupTable.lookupTableFunctionType", "cim:WindDynamicsLookupTable.output", "cim:WindDynamicsLookupTable.sequence", "cim:WindDynamicsLookupTable.WindPlantFreqPcontrolIEC"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindDynamicsLookupTable.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindDynamicsLookupTable: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindDynamicsLookupTable.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindDynamicsLookupTable;
  }(IdentifiedObject);
  _defineProperty(WindDynamicsLookupTable, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'WindContCurrLimIEC': [CGMESProfile.shortNames.DY],
    'WindContPType3IEC': [CGMESProfile.shortNames.DY],
    'WindContRotorRIEC': [CGMESProfile.shortNames.DY],
    'input': [CGMESProfile.shortNames.DY],
    'lookupTableFunctionType': [CGMESProfile.shortNames.DY],
    'output': [CGMESProfile.shortNames.DY],
    'sequence': [CGMESProfile.shortNames.DY],
    'WindPlantFreqPcontrolIEC': [CGMESProfile.shortNames.DY]
  });

  var WindTurbineType1or2Dynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(WindTurbineType1or2Dynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(WindTurbineType1or2Dynamics);
    function WindTurbineType1or2Dynamics() {
      _classCallCheck(this, WindTurbineType1or2Dynamics);
      return _super.apply(this, arguments);
    }
    _createClass(WindTurbineType1or2Dynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindTurbineType1or2Dynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:WindTurbineType1or2Dynamics.RemoteInputSignal' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType1or2Dynamics.RemoteInputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType1or2Dynamics.RemoteInputSignal'], 'cim:RemoteInputSignal', 'cim:WindTurbineType1or2Dynamics.RemoteInputSignal');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType1or2Dynamics.RemoteInputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType1or2Dynamics.RemoteInputSignal'], 'cim:RemoteInputSignal', 'cim:WindTurbineType1or2Dynamics.RemoteInputSignal');
        }
        if ('cim:WindTurbineType1or2Dynamics.AsynchronousMachineDynamics' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType1or2Dynamics.AsynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType1or2Dynamics.AsynchronousMachineDynamics'], 'cim:AsynchronousMachineDynamics', 'cim:WindTurbineType1or2Dynamics.AsynchronousMachineDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType1or2Dynamics.AsynchronousMachineDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType1or2Dynamics.AsynchronousMachineDynamics'], 'cim:AsynchronousMachineDynamics', 'cim:WindTurbineType1or2Dynamics.AsynchronousMachineDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindTurbineType1or2Dynamics.RemoteInputSignal", "cim:WindTurbineType1or2Dynamics.AsynchronousMachineDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindTurbineType1or2Dynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindTurbineType1or2Dynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindTurbineType1or2Dynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["WindType1or2UserDefined", "WindTurbineType1or2IEC", "WindGenTurbineType1IEC", "WindGenTurbineType2IEC"];
        return subClasses;
      }
    }]);
    return WindTurbineType1or2Dynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(WindTurbineType1or2Dynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'RemoteInputSignal': [CGMESProfile.shortNames.DY],
    'AsynchronousMachineDynamics': [CGMESProfile.shortNames.DY]
  });

  var WindTurbineType1or2IEC = /*#__PURE__*/function (_WindTurbineType1or2D) {
    _inherits(WindTurbineType1or2IEC, _WindTurbineType1or2D);
    var _super = _createSuper(WindTurbineType1or2IEC);
    function WindTurbineType1or2IEC() {
      _classCallCheck(this, WindTurbineType1or2IEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindTurbineType1or2IEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindTurbineType1or2IEC";
        var attributeEntries = WindTurbineType1or2Dynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:WindTurbineType1or2IEC.WindMechIEC' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType1or2IEC.WindMechIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType1or2IEC.WindMechIEC'], 'cim:WindMechIEC', 'cim:WindTurbineType1or2IEC.WindMechIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType1or2IEC.WindMechIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType1or2IEC.WindMechIEC'], 'cim:WindMechIEC', 'cim:WindTurbineType1or2IEC.WindMechIEC');
        }
        if ('cim:WindTurbineType1or2IEC.WindProtectionIEC' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType1or2IEC.WindProtectionIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType1or2IEC.WindProtectionIEC'], 'cim:WindProtectionIEC', 'cim:WindTurbineType1or2IEC.WindProtectionIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType1or2IEC.WindProtectionIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType1or2IEC.WindProtectionIEC'], 'cim:WindProtectionIEC', 'cim:WindTurbineType1or2IEC.WindProtectionIEC');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindTurbineType1or2IEC.WindMechIEC", "cim:WindTurbineType1or2IEC.WindProtectionIEC"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindTurbineType1or2Dynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindTurbineType1or2IEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindTurbineType1or2IEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindTurbineType1or2IEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["WindGenTurbineType1IEC", "WindGenTurbineType2IEC"];
        return subClasses;
      }
    }]);
    return WindTurbineType1or2IEC;
  }(WindTurbineType1or2Dynamics);
  _defineProperty(WindTurbineType1or2IEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'WindMechIEC': [CGMESProfile.shortNames.DY],
    'WindProtectionIEC': [CGMESProfile.shortNames.DY]
  });

  var WindGenTurbineType1IEC = /*#__PURE__*/function (_WindTurbineType1or2I) {
    _inherits(WindGenTurbineType1IEC, _WindTurbineType1or2I);
    var _super = _createSuper(WindGenTurbineType1IEC);
    function WindGenTurbineType1IEC() {
      _classCallCheck(this, WindGenTurbineType1IEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindGenTurbineType1IEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindGenTurbineType1IEC";
        var attributeEntries = WindTurbineType1or2IEC.attributeHTML(object, cimmenu, classType);
        if ('cim:WindGenTurbineType1IEC.WindAeroConstIEC' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType1IEC.WindAeroConstIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType1IEC.WindAeroConstIEC'], 'cim:WindAeroConstIEC', 'cim:WindGenTurbineType1IEC.WindAeroConstIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType1IEC.WindAeroConstIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType1IEC.WindAeroConstIEC'], 'cim:WindAeroConstIEC', 'cim:WindGenTurbineType1IEC.WindAeroConstIEC');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindGenTurbineType1IEC.WindAeroConstIEC"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindTurbineType1or2IEC.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindGenTurbineType1IEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindGenTurbineType1IEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindGenTurbineType1IEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindGenTurbineType1IEC;
  }(WindTurbineType1or2IEC);
  _defineProperty(WindGenTurbineType1IEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'WindAeroConstIEC': [CGMESProfile.shortNames.DY]
  });

  var WindGenTurbineType2IEC = /*#__PURE__*/function (_WindTurbineType1or2I) {
    _inherits(WindGenTurbineType2IEC, _WindTurbineType1or2I);
    var _super = _createSuper(WindGenTurbineType2IEC);
    function WindGenTurbineType2IEC() {
      _classCallCheck(this, WindGenTurbineType2IEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindGenTurbineType2IEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindGenTurbineType2IEC";
        var attributeEntries = WindTurbineType1or2IEC.attributeHTML(object, cimmenu, classType);
        if ('cim:WindGenTurbineType2IEC.WindContRotorRIEC' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType2IEC.WindContRotorRIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType2IEC.WindContRotorRIEC'], 'cim:WindContRotorRIEC', 'cim:WindGenTurbineType2IEC.WindContRotorRIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType2IEC.WindContRotorRIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType2IEC.WindContRotorRIEC'], 'cim:WindContRotorRIEC', 'cim:WindGenTurbineType2IEC.WindContRotorRIEC');
        }
        if ('cim:WindGenTurbineType2IEC.WindPitchContEmulIEC' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType2IEC.WindPitchContEmulIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType2IEC.WindPitchContEmulIEC'], 'cim:WindPitchContEmulIEC', 'cim:WindGenTurbineType2IEC.WindPitchContEmulIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType2IEC.WindPitchContEmulIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType2IEC.WindPitchContEmulIEC'], 'cim:WindPitchContEmulIEC', 'cim:WindGenTurbineType2IEC.WindPitchContEmulIEC');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindGenTurbineType2IEC.WindContRotorRIEC", "cim:WindGenTurbineType2IEC.WindPitchContEmulIEC"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindTurbineType1or2IEC.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindGenTurbineType2IEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindGenTurbineType2IEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindGenTurbineType2IEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindGenTurbineType2IEC;
  }(WindTurbineType1or2IEC);
  _defineProperty(WindGenTurbineType2IEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'WindContRotorRIEC': [CGMESProfile.shortNames.DY],
    'WindPitchContEmulIEC': [CGMESProfile.shortNames.DY]
  });

  var WindTurbineType3or4Dynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(WindTurbineType3or4Dynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(WindTurbineType3or4Dynamics);
    function WindTurbineType3or4Dynamics() {
      _classCallCheck(this, WindTurbineType3or4Dynamics);
      return _super.apply(this, arguments);
    }
    _createClass(WindTurbineType3or4Dynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindTurbineType3or4Dynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:WindTurbineType3or4Dynamics.EnergySource' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType3or4Dynamics.EnergySource'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType3or4Dynamics.EnergySource'], 'cim:EnergySource', 'cim:WindTurbineType3or4Dynamics.EnergySource');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType3or4Dynamics.EnergySource'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType3or4Dynamics.EnergySource'], 'cim:EnergySource', 'cim:WindTurbineType3or4Dynamics.EnergySource');
        }
        if ('cim:WindTurbineType3or4Dynamics.RemoteInputSignal' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType3or4Dynamics.RemoteInputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType3or4Dynamics.RemoteInputSignal'], 'cim:RemoteInputSignal', 'cim:WindTurbineType3or4Dynamics.RemoteInputSignal');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType3or4Dynamics.RemoteInputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType3or4Dynamics.RemoteInputSignal'], 'cim:RemoteInputSignal', 'cim:WindTurbineType3or4Dynamics.RemoteInputSignal');
        }
        if ('cim:WindTurbineType3or4Dynamics.WindPlantDynamics' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType3or4Dynamics.WindPlantDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType3or4Dynamics.WindPlantDynamics'], 'cim:WindPlantDynamics', 'cim:WindTurbineType3or4Dynamics.WindPlantDynamics');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType3or4Dynamics.WindPlantDynamics'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType3or4Dynamics.WindPlantDynamics'], 'cim:WindPlantDynamics', 'cim:WindTurbineType3or4Dynamics.WindPlantDynamics');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindTurbineType3or4Dynamics.EnergySource", "cim:WindTurbineType3or4Dynamics.RemoteInputSignal", "cim:WindTurbineType3or4Dynamics.WindPlantDynamics"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindTurbineType3or4Dynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindTurbineType3or4Dynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindTurbineType3or4Dynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["WindType3or4UserDefined", "WindTurbineType3or4IEC", "WindGenTurbineType3IEC", "WindGenTurbineType3aIEC", "WindGenTurbineType3bIEC", "WindGenType4IEC", "WindTurbineType4aIEC", "WindTurbineType4bIEC"];
        return subClasses;
      }
    }]);
    return WindTurbineType3or4Dynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(WindTurbineType3or4Dynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'EnergySource': [CGMESProfile.shortNames.DY],
    'RemoteInputSignal': [CGMESProfile.shortNames.DY],
    'WindPlantDynamics': [CGMESProfile.shortNames.DY]
  });

  var WindTurbineType3or4IEC = /*#__PURE__*/function (_WindTurbineType3or4D) {
    _inherits(WindTurbineType3or4IEC, _WindTurbineType3or4D);
    var _super = _createSuper(WindTurbineType3or4IEC);
    function WindTurbineType3or4IEC() {
      _classCallCheck(this, WindTurbineType3or4IEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindTurbineType3or4IEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindTurbineType3or4IEC";
        var attributeEntries = WindTurbineType3or4Dynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:WindTurbineType3or4IEC.WindContCurrLimIEC' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType3or4IEC.WindContCurrLimIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType3or4IEC.WindContCurrLimIEC'], 'cim:WindContCurrLimIEC', 'cim:WindTurbineType3or4IEC.WindContCurrLimIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType3or4IEC.WindContCurrLimIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType3or4IEC.WindContCurrLimIEC'], 'cim:WindContCurrLimIEC', 'cim:WindTurbineType3or4IEC.WindContCurrLimIEC');
        }
        if ('cim:WindTurbineType3or4IEC.WIndContQIEC' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType3or4IEC.WIndContQIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType3or4IEC.WIndContQIEC'], 'cim:WindContQIEC', 'cim:WindTurbineType3or4IEC.WIndContQIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType3or4IEC.WIndContQIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType3or4IEC.WIndContQIEC'], 'cim:WindContQIEC', 'cim:WindTurbineType3or4IEC.WIndContQIEC');
        }
        if ('cim:WindTurbineType3or4IEC.WindProtectionIEC' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType3or4IEC.WindProtectionIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType3or4IEC.WindProtectionIEC'], 'cim:WindProtectionIEC', 'cim:WindTurbineType3or4IEC.WindProtectionIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType3or4IEC.WindProtectionIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType3or4IEC.WindProtectionIEC'], 'cim:WindProtectionIEC', 'cim:WindTurbineType3or4IEC.WindProtectionIEC');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindTurbineType3or4IEC.WindContCurrLimIEC", "cim:WindTurbineType3or4IEC.WIndContQIEC", "cim:WindTurbineType3or4IEC.WindProtectionIEC"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindTurbineType3or4Dynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindTurbineType3or4IEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindTurbineType3or4IEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindTurbineType3or4IEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["WindGenTurbineType3IEC", "WindGenTurbineType3aIEC", "WindGenTurbineType3bIEC", "WindGenType4IEC", "WindTurbineType4aIEC", "WindTurbineType4bIEC"];
        return subClasses;
      }
    }]);
    return WindTurbineType3or4IEC;
  }(WindTurbineType3or4Dynamics);
  _defineProperty(WindTurbineType3or4IEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'WindContCurrLimIEC': [CGMESProfile.shortNames.DY],
    'WIndContQIEC': [CGMESProfile.shortNames.DY],
    'WindProtectionIEC': [CGMESProfile.shortNames.DY]
  });

  var WindGenTurbineType3IEC = /*#__PURE__*/function (_WindTurbineType3or4I) {
    _inherits(WindGenTurbineType3IEC, _WindTurbineType3or4I);
    var _super = _createSuper(WindGenTurbineType3IEC);
    function WindGenTurbineType3IEC() {
      _classCallCheck(this, WindGenTurbineType3IEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindGenTurbineType3IEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindGenTurbineType3IEC";
        var attributeEntries = WindTurbineType3or4IEC.attributeHTML(object, cimmenu, classType);
        if ('cim:WindGenTurbineType3IEC.WindAeroLinearIEC' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3IEC.WindAeroLinearIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3IEC.WindAeroLinearIEC'], 'cim:WindAeroLinearIEC', 'cim:WindGenTurbineType3IEC.WindAeroLinearIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3IEC.WindAeroLinearIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3IEC.WindAeroLinearIEC'], 'cim:WindAeroLinearIEC', 'cim:WindGenTurbineType3IEC.WindAeroLinearIEC');
        }
        if ('cim:WindGenTurbineType3IEC.WindContPitchAngleIEC' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3IEC.WindContPitchAngleIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3IEC.WindContPitchAngleIEC'], 'cim:WindContPitchAngleIEC', 'cim:WindGenTurbineType3IEC.WindContPitchAngleIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3IEC.WindContPitchAngleIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3IEC.WindContPitchAngleIEC'], 'cim:WindContPitchAngleIEC', 'cim:WindGenTurbineType3IEC.WindContPitchAngleIEC');
        }
        if ('cim:WindGenTurbineType3IEC.WindContPType3IEC' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3IEC.WindContPType3IEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3IEC.WindContPType3IEC'], 'cim:WindContPType3IEC', 'cim:WindGenTurbineType3IEC.WindContPType3IEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3IEC.WindContPType3IEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3IEC.WindContPType3IEC'], 'cim:WindContPType3IEC', 'cim:WindGenTurbineType3IEC.WindContPType3IEC');
        }
        if ('cim:WindGenTurbineType3IEC.dipmax' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3IEC.dipmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3IEC.dipmax'], 'cim:PU', 'cim:WindGenTurbineType3IEC.dipmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3IEC.dipmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3IEC.dipmax'], 'cim:PU', 'cim:WindGenTurbineType3IEC.dipmax');
        }
        if ('cim:WindGenTurbineType3IEC.diqmax' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3IEC.diqmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3IEC.diqmax'], 'cim:PU', 'cim:WindGenTurbineType3IEC.diqmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3IEC.diqmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3IEC.diqmax'], 'cim:PU', 'cim:WindGenTurbineType3IEC.diqmax');
        }
        if ('cim:WindGenTurbineType3IEC.WindMechIEC' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3IEC.WindMechIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3IEC.WindMechIEC'], 'cim:WindMechIEC', 'cim:WindGenTurbineType3IEC.WindMechIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3IEC.WindMechIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3IEC.WindMechIEC'], 'cim:WindMechIEC', 'cim:WindGenTurbineType3IEC.WindMechIEC');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindGenTurbineType3IEC.WindAeroLinearIEC", "cim:WindGenTurbineType3IEC.WindContPitchAngleIEC", "cim:WindGenTurbineType3IEC.WindContPType3IEC", "cim:WindGenTurbineType3IEC.dipmax", "cim:WindGenTurbineType3IEC.diqmax", "cim:WindGenTurbineType3IEC.WindMechIEC"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindTurbineType3or4IEC.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindGenTurbineType3IEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindGenTurbineType3IEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindGenTurbineType3IEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["WindGenTurbineType3aIEC", "WindGenTurbineType3bIEC"];
        return subClasses;
      }
    }]);
    return WindGenTurbineType3IEC;
  }(WindTurbineType3or4IEC);
  _defineProperty(WindGenTurbineType3IEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'WindAeroLinearIEC': [CGMESProfile.shortNames.DY],
    'WindContPitchAngleIEC': [CGMESProfile.shortNames.DY],
    'WindContPType3IEC': [CGMESProfile.shortNames.DY],
    'dipmax': [CGMESProfile.shortNames.DY],
    'diqmax': [CGMESProfile.shortNames.DY],
    'WindMechIEC': [CGMESProfile.shortNames.DY]
  });

  var WindGenTurbineType3aIEC = /*#__PURE__*/function (_WindGenTurbineType3I) {
    _inherits(WindGenTurbineType3aIEC, _WindGenTurbineType3I);
    var _super = _createSuper(WindGenTurbineType3aIEC);
    function WindGenTurbineType3aIEC() {
      _classCallCheck(this, WindGenTurbineType3aIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindGenTurbineType3aIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindGenTurbineType3aIEC";
        var attributeEntries = WindGenTurbineType3IEC.attributeHTML(object, cimmenu, classType);
        if ('cim:WindGenTurbineType3aIEC.kpc' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3aIEC.kpc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3aIEC.kpc'], 'cim:Simple_Float', 'cim:WindGenTurbineType3aIEC.kpc');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3aIEC.kpc'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3aIEC.kpc'], 'cim:Simple_Float', 'cim:WindGenTurbineType3aIEC.kpc');
        }
        if ('cim:WindGenTurbineType3aIEC.xs' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3aIEC.xs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3aIEC.xs'], 'cim:PU', 'cim:WindGenTurbineType3aIEC.xs');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3aIEC.xs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3aIEC.xs'], 'cim:PU', 'cim:WindGenTurbineType3aIEC.xs');
        }
        if ('cim:WindGenTurbineType3aIEC.tic' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3aIEC.tic'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3aIEC.tic'], 'cim:Seconds', 'cim:WindGenTurbineType3aIEC.tic');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3aIEC.tic'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3aIEC.tic'], 'cim:Seconds', 'cim:WindGenTurbineType3aIEC.tic');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindGenTurbineType3aIEC.kpc", "cim:WindGenTurbineType3aIEC.xs", "cim:WindGenTurbineType3aIEC.tic"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindGenTurbineType3IEC.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindGenTurbineType3aIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindGenTurbineType3aIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindGenTurbineType3aIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindGenTurbineType3aIEC;
  }(WindGenTurbineType3IEC);
  _defineProperty(WindGenTurbineType3aIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kpc': [CGMESProfile.shortNames.DY],
    'xs': [CGMESProfile.shortNames.DY],
    'tic': [CGMESProfile.shortNames.DY]
  });

  var WindGenTurbineType3bIEC = /*#__PURE__*/function (_WindGenTurbineType3I) {
    _inherits(WindGenTurbineType3bIEC, _WindGenTurbineType3I);
    var _super = _createSuper(WindGenTurbineType3bIEC);
    function WindGenTurbineType3bIEC() {
      _classCallCheck(this, WindGenTurbineType3bIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindGenTurbineType3bIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindGenTurbineType3bIEC";
        var attributeEntries = WindGenTurbineType3IEC.attributeHTML(object, cimmenu, classType);
        if ('cim:WindGenTurbineType3bIEC.fducw' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3bIEC.fducw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3bIEC.fducw'], 'cim:Simple_Float', 'cim:WindGenTurbineType3bIEC.fducw');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3bIEC.fducw'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3bIEC.fducw'], 'cim:Simple_Float', 'cim:WindGenTurbineType3bIEC.fducw');
        }
        if ('cim:WindGenTurbineType3bIEC.tg' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3bIEC.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3bIEC.tg'], 'cim:Seconds', 'cim:WindGenTurbineType3bIEC.tg');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3bIEC.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3bIEC.tg'], 'cim:Seconds', 'cim:WindGenTurbineType3bIEC.tg');
        }
        if ('cim:WindGenTurbineType3bIEC.two' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3bIEC.two'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3bIEC.two'], 'cim:Seconds', 'cim:WindGenTurbineType3bIEC.two');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3bIEC.two'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3bIEC.two'], 'cim:Seconds', 'cim:WindGenTurbineType3bIEC.two');
        }
        if ('cim:WindGenTurbineType3bIEC.mwtcwp' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3bIEC.mwtcwp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3bIEC.mwtcwp'], 'cim:Boolean', 'cim:WindGenTurbineType3bIEC.mwtcwp');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3bIEC.mwtcwp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3bIEC.mwtcwp'], 'cim:Boolean', 'cim:WindGenTurbineType3bIEC.mwtcwp');
        }
        if ('cim:WindGenTurbineType3bIEC.xs' in object) {
          attributeEntries['filledEntries']['cim:WindGenTurbineType3bIEC.xs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3bIEC.xs'], 'cim:PU', 'cim:WindGenTurbineType3bIEC.xs');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenTurbineType3bIEC.xs'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenTurbineType3bIEC.xs'], 'cim:PU', 'cim:WindGenTurbineType3bIEC.xs');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindGenTurbineType3bIEC.fducw", "cim:WindGenTurbineType3bIEC.tg", "cim:WindGenTurbineType3bIEC.two", "cim:WindGenTurbineType3bIEC.mwtcwp", "cim:WindGenTurbineType3bIEC.xs"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindGenTurbineType3IEC.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindGenTurbineType3bIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindGenTurbineType3bIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindGenTurbineType3bIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindGenTurbineType3bIEC;
  }(WindGenTurbineType3IEC);
  _defineProperty(WindGenTurbineType3bIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'fducw': [CGMESProfile.shortNames.DY],
    'tg': [CGMESProfile.shortNames.DY],
    'two': [CGMESProfile.shortNames.DY],
    'mwtcwp': [CGMESProfile.shortNames.DY],
    'xs': [CGMESProfile.shortNames.DY]
  });

  var WindGenType4IEC = /*#__PURE__*/function (_WindTurbineType3or4I) {
    _inherits(WindGenType4IEC, _WindTurbineType3or4I);
    var _super = _createSuper(WindGenType4IEC);
    function WindGenType4IEC() {
      _classCallCheck(this, WindGenType4IEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindGenType4IEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindGenType4IEC";
        var attributeEntries = WindTurbineType3or4IEC.attributeHTML(object, cimmenu, classType);
        if ('cim:WindGenType4IEC.dipmax' in object) {
          attributeEntries['filledEntries']['cim:WindGenType4IEC.dipmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenType4IEC.dipmax'], 'cim:PU', 'cim:WindGenType4IEC.dipmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenType4IEC.dipmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenType4IEC.dipmax'], 'cim:PU', 'cim:WindGenType4IEC.dipmax');
        }
        if ('cim:WindGenType4IEC.diqmin' in object) {
          attributeEntries['filledEntries']['cim:WindGenType4IEC.diqmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenType4IEC.diqmin'], 'cim:PU', 'cim:WindGenType4IEC.diqmin');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenType4IEC.diqmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenType4IEC.diqmin'], 'cim:PU', 'cim:WindGenType4IEC.diqmin');
        }
        if ('cim:WindGenType4IEC.diqmax' in object) {
          attributeEntries['filledEntries']['cim:WindGenType4IEC.diqmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenType4IEC.diqmax'], 'cim:PU', 'cim:WindGenType4IEC.diqmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenType4IEC.diqmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenType4IEC.diqmax'], 'cim:PU', 'cim:WindGenType4IEC.diqmax');
        }
        if ('cim:WindGenType4IEC.tg' in object) {
          attributeEntries['filledEntries']['cim:WindGenType4IEC.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenType4IEC.tg'], 'cim:Seconds', 'cim:WindGenType4IEC.tg');
        } else {
          attributeEntries['emptyEntries']['cim:WindGenType4IEC.tg'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGenType4IEC.tg'], 'cim:Seconds', 'cim:WindGenType4IEC.tg');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindGenType4IEC.dipmax", "cim:WindGenType4IEC.diqmin", "cim:WindGenType4IEC.diqmax", "cim:WindGenType4IEC.tg"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindTurbineType3or4IEC.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindGenType4IEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindGenType4IEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindGenType4IEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["WindTurbineType4aIEC", "WindTurbineType4bIEC"];
        return subClasses;
      }
    }]);
    return WindGenType4IEC;
  }(WindTurbineType3or4IEC);
  _defineProperty(WindGenType4IEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'dipmax': [CGMESProfile.shortNames.DY],
    'diqmin': [CGMESProfile.shortNames.DY],
    'diqmax': [CGMESProfile.shortNames.DY],
    'tg': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$4 = [{
    "value": "--"
  }, {
    "value": "WindGenUnitKind.offshore",
    "label": "offshore"
  }, {
    "value": "WindGenUnitKind.onshore",
    "label": "onshore"
  }];
  var WindGenUnitKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(WindGenUnitKind, _BaseClass);
    var _super = _createSuper(WindGenUnitKind);
    function WindGenUnitKind() {
      _classCallCheck(this, WindGenUnitKind);
      return _super.apply(this, arguments);
    }
    _createClass(WindGenUnitKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindGenUnitKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindGenUnitKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindGenUnitKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindGenUnitKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$4;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindGenUnitKind;
  }(BaseClass);
  _defineProperty(WindGenUnitKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var WindGeneratingUnit = /*#__PURE__*/function (_GeneratingUnit) {
    _inherits(WindGeneratingUnit, _GeneratingUnit);
    var _super = _createSuper(WindGeneratingUnit);
    function WindGeneratingUnit() {
      _classCallCheck(this, WindGeneratingUnit);
      return _super.apply(this, arguments);
    }
    _createClass(WindGeneratingUnit, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindGeneratingUnit";
        var attributeEntries = GeneratingUnit.attributeHTML(object, cimmenu, classType);
        if ('cim:WindGeneratingUnit.windGenUnitType' in object) {
          attributeEntries['filledEntries']['cim:WindGeneratingUnit.windGenUnitType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGeneratingUnit.windGenUnitType'], 'cim:WindGenUnitKind', 'cim:WindGeneratingUnit.windGenUnitType');
        } else {
          attributeEntries['emptyEntries']['cim:WindGeneratingUnit.windGenUnitType'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindGeneratingUnit.windGenUnitType'], 'cim:WindGenUnitKind', 'cim:WindGeneratingUnit.windGenUnitType');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindGeneratingUnit.windGenUnitType"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (GeneratingUnit.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindGeneratingUnit.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindGeneratingUnit: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindGeneratingUnit.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindGeneratingUnit;
  }(GeneratingUnit);
  _defineProperty(WindGeneratingUnit, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ, CGMESProfile.shortNames.SSH],
    'windGenUnitType': [CGMESProfile.shortNames.EQ]
  });

  var possibleValues$3 = [{
    "value": "--"
  }, {
    "value": "WindLVRTQcontrolModesKind.mode1",
    "label": "mode1"
  }, {
    "value": "WindLVRTQcontrolModesKind.mode2",
    "label": "mode2"
  }, {
    "value": "WindLVRTQcontrolModesKind.mode3",
    "label": "mode3"
  }];
  var WindLVRTQcontrolModesKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(WindLVRTQcontrolModesKind, _BaseClass);
    var _super = _createSuper(WindLVRTQcontrolModesKind);
    function WindLVRTQcontrolModesKind() {
      _classCallCheck(this, WindLVRTQcontrolModesKind);
      return _super.apply(this, arguments);
    }
    _createClass(WindLVRTQcontrolModesKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindLVRTQcontrolModesKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindLVRTQcontrolModesKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindLVRTQcontrolModesKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindLVRTQcontrolModesKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$3;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindLVRTQcontrolModesKind;
  }(BaseClass);
  _defineProperty(WindLVRTQcontrolModesKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$2 = [{
    "value": "--"
  }, {
    "value": "WindLookupTableFunctionKind.fpslip",
    "label": "fpslip"
  }, {
    "value": "WindLookupTableFunctionKind.fpomega",
    "label": "fpomega"
  }, {
    "value": "WindLookupTableFunctionKind.ipvdl",
    "label": "ipvdl"
  }, {
    "value": "WindLookupTableFunctionKind.iqvdl",
    "label": "iqvdl"
  }, {
    "value": "WindLookupTableFunctionKind.fdpf",
    "label": "fdpf"
  }];
  var WindLookupTableFunctionKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(WindLookupTableFunctionKind, _BaseClass);
    var _super = _createSuper(WindLookupTableFunctionKind);
    function WindLookupTableFunctionKind() {
      _classCallCheck(this, WindLookupTableFunctionKind);
      return _super.apply(this, arguments);
    }
    _createClass(WindLookupTableFunctionKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindLookupTableFunctionKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindLookupTableFunctionKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindLookupTableFunctionKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindLookupTableFunctionKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$2;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindLookupTableFunctionKind;
  }(BaseClass);
  _defineProperty(WindLookupTableFunctionKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var WindMechIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindMechIEC, _IdentifiedObject);
    var _super = _createSuper(WindMechIEC);
    function WindMechIEC() {
      _classCallCheck(this, WindMechIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindMechIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindMechIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindMechIEC.cdrt' in object) {
          attributeEntries['filledEntries']['cim:WindMechIEC.cdrt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindMechIEC.cdrt'], 'cim:PU', 'cim:WindMechIEC.cdrt');
        } else {
          attributeEntries['emptyEntries']['cim:WindMechIEC.cdrt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindMechIEC.cdrt'], 'cim:PU', 'cim:WindMechIEC.cdrt');
        }
        if ('cim:WindMechIEC.hgen' in object) {
          attributeEntries['filledEntries']['cim:WindMechIEC.hgen'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindMechIEC.hgen'], 'cim:Seconds', 'cim:WindMechIEC.hgen');
        } else {
          attributeEntries['emptyEntries']['cim:WindMechIEC.hgen'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindMechIEC.hgen'], 'cim:Seconds', 'cim:WindMechIEC.hgen');
        }
        if ('cim:WindMechIEC.hwtr' in object) {
          attributeEntries['filledEntries']['cim:WindMechIEC.hwtr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindMechIEC.hwtr'], 'cim:Seconds', 'cim:WindMechIEC.hwtr');
        } else {
          attributeEntries['emptyEntries']['cim:WindMechIEC.hwtr'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindMechIEC.hwtr'], 'cim:Seconds', 'cim:WindMechIEC.hwtr');
        }
        if ('cim:WindMechIEC.kdrt' in object) {
          attributeEntries['filledEntries']['cim:WindMechIEC.kdrt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindMechIEC.kdrt'], 'cim:PU', 'cim:WindMechIEC.kdrt');
        } else {
          attributeEntries['emptyEntries']['cim:WindMechIEC.kdrt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindMechIEC.kdrt'], 'cim:PU', 'cim:WindMechIEC.kdrt');
        }
        if ('cim:WindMechIEC.WindTurbineType1or2IEC' in object) {
          attributeEntries['filledEntries']['cim:WindMechIEC.WindTurbineType1or2IEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindMechIEC.WindTurbineType1or2IEC'], 'cim:WindTurbineType1or2IEC', 'cim:WindMechIEC.WindTurbineType1or2IEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindMechIEC.WindTurbineType1or2IEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindMechIEC.WindTurbineType1or2IEC'], 'cim:WindTurbineType1or2IEC', 'cim:WindMechIEC.WindTurbineType1or2IEC');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindMechIEC.cdrt", "cim:WindMechIEC.hgen", "cim:WindMechIEC.hwtr", "cim:WindMechIEC.kdrt", "cim:WindMechIEC.WindTurbineType1or2IEC"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindMechIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindMechIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindMechIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindMechIEC;
  }(IdentifiedObject);
  _defineProperty(WindMechIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'cdrt': [CGMESProfile.shortNames.DY],
    'hgen': [CGMESProfile.shortNames.DY],
    'hwtr': [CGMESProfile.shortNames.DY],
    'kdrt': [CGMESProfile.shortNames.DY],
    'WindTurbineType1or2IEC': [CGMESProfile.shortNames.DY]
  });

  var WindPitchContEmulIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindPitchContEmulIEC, _IdentifiedObject);
    var _super = _createSuper(WindPitchContEmulIEC);
    function WindPitchContEmulIEC() {
      _classCallCheck(this, WindPitchContEmulIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindPitchContEmulIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindPitchContEmulIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindPitchContEmulIEC.kdroop' in object) {
          attributeEntries['filledEntries']['cim:WindPitchContEmulIEC.kdroop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.kdroop'], 'cim:Simple_Float', 'cim:WindPitchContEmulIEC.kdroop');
        } else {
          attributeEntries['emptyEntries']['cim:WindPitchContEmulIEC.kdroop'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.kdroop'], 'cim:Simple_Float', 'cim:WindPitchContEmulIEC.kdroop');
        }
        if ('cim:WindPitchContEmulIEC.kipce' in object) {
          attributeEntries['filledEntries']['cim:WindPitchContEmulIEC.kipce'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.kipce'], 'cim:Simple_Float', 'cim:WindPitchContEmulIEC.kipce');
        } else {
          attributeEntries['emptyEntries']['cim:WindPitchContEmulIEC.kipce'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.kipce'], 'cim:Simple_Float', 'cim:WindPitchContEmulIEC.kipce');
        }
        if ('cim:WindPitchContEmulIEC.komegaaero' in object) {
          attributeEntries['filledEntries']['cim:WindPitchContEmulIEC.komegaaero'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.komegaaero'], 'cim:PU', 'cim:WindPitchContEmulIEC.komegaaero');
        } else {
          attributeEntries['emptyEntries']['cim:WindPitchContEmulIEC.komegaaero'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.komegaaero'], 'cim:PU', 'cim:WindPitchContEmulIEC.komegaaero');
        }
        if ('cim:WindPitchContEmulIEC.kppce' in object) {
          attributeEntries['filledEntries']['cim:WindPitchContEmulIEC.kppce'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.kppce'], 'cim:Simple_Float', 'cim:WindPitchContEmulIEC.kppce');
        } else {
          attributeEntries['emptyEntries']['cim:WindPitchContEmulIEC.kppce'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.kppce'], 'cim:Simple_Float', 'cim:WindPitchContEmulIEC.kppce');
        }
        if ('cim:WindPitchContEmulIEC.omegaref' in object) {
          attributeEntries['filledEntries']['cim:WindPitchContEmulIEC.omegaref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.omegaref'], 'cim:PU', 'cim:WindPitchContEmulIEC.omegaref');
        } else {
          attributeEntries['emptyEntries']['cim:WindPitchContEmulIEC.omegaref'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.omegaref'], 'cim:PU', 'cim:WindPitchContEmulIEC.omegaref');
        }
        if ('cim:WindPitchContEmulIEC.pimax' in object) {
          attributeEntries['filledEntries']['cim:WindPitchContEmulIEC.pimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.pimax'], 'cim:PU', 'cim:WindPitchContEmulIEC.pimax');
        } else {
          attributeEntries['emptyEntries']['cim:WindPitchContEmulIEC.pimax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.pimax'], 'cim:PU', 'cim:WindPitchContEmulIEC.pimax');
        }
        if ('cim:WindPitchContEmulIEC.pimin' in object) {
          attributeEntries['filledEntries']['cim:WindPitchContEmulIEC.pimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.pimin'], 'cim:PU', 'cim:WindPitchContEmulIEC.pimin');
        } else {
          attributeEntries['emptyEntries']['cim:WindPitchContEmulIEC.pimin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.pimin'], 'cim:PU', 'cim:WindPitchContEmulIEC.pimin');
        }
        if ('cim:WindPitchContEmulIEC.t1' in object) {
          attributeEntries['filledEntries']['cim:WindPitchContEmulIEC.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.t1'], 'cim:Seconds', 'cim:WindPitchContEmulIEC.t1');
        } else {
          attributeEntries['emptyEntries']['cim:WindPitchContEmulIEC.t1'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.t1'], 'cim:Seconds', 'cim:WindPitchContEmulIEC.t1');
        }
        if ('cim:WindPitchContEmulIEC.t2' in object) {
          attributeEntries['filledEntries']['cim:WindPitchContEmulIEC.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.t2'], 'cim:Seconds', 'cim:WindPitchContEmulIEC.t2');
        } else {
          attributeEntries['emptyEntries']['cim:WindPitchContEmulIEC.t2'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.t2'], 'cim:Seconds', 'cim:WindPitchContEmulIEC.t2');
        }
        if ('cim:WindPitchContEmulIEC.tpe' in object) {
          attributeEntries['filledEntries']['cim:WindPitchContEmulIEC.tpe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.tpe'], 'cim:Seconds', 'cim:WindPitchContEmulIEC.tpe');
        } else {
          attributeEntries['emptyEntries']['cim:WindPitchContEmulIEC.tpe'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPitchContEmulIEC.tpe'], 'cim:Seconds', 'cim:WindPitchContEmulIEC.tpe');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindPitchContEmulIEC.kdroop", "cim:WindPitchContEmulIEC.kipce", "cim:WindPitchContEmulIEC.komegaaero", "cim:WindPitchContEmulIEC.kppce", "cim:WindPitchContEmulIEC.omegaref", "cim:WindPitchContEmulIEC.pimax", "cim:WindPitchContEmulIEC.pimin", "cim:WindPitchContEmulIEC.t1", "cim:WindPitchContEmulIEC.t2", "cim:WindPitchContEmulIEC.tpe"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindPitchContEmulIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindPitchContEmulIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindPitchContEmulIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindPitchContEmulIEC;
  }(IdentifiedObject);
  _defineProperty(WindPitchContEmulIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kdroop': [CGMESProfile.shortNames.DY],
    'kipce': [CGMESProfile.shortNames.DY],
    'komegaaero': [CGMESProfile.shortNames.DY],
    'kppce': [CGMESProfile.shortNames.DY],
    'omegaref': [CGMESProfile.shortNames.DY],
    'pimax': [CGMESProfile.shortNames.DY],
    'pimin': [CGMESProfile.shortNames.DY],
    't1': [CGMESProfile.shortNames.DY],
    't2': [CGMESProfile.shortNames.DY],
    'tpe': [CGMESProfile.shortNames.DY]
  });

  var WindPlantDynamics = /*#__PURE__*/function (_DynamicsFunctionBloc) {
    _inherits(WindPlantDynamics, _DynamicsFunctionBloc);
    var _super = _createSuper(WindPlantDynamics);
    function WindPlantDynamics() {
      _classCallCheck(this, WindPlantDynamics);
      return _super.apply(this, arguments);
    }
    _createClass(WindPlantDynamics, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindPlantDynamics";
        var attributeEntries = DynamicsFunctionBlock.attributeHTML(object, cimmenu, classType);
        if ('cim:WindPlantDynamics.RemoteInputSignal' in object) {
          attributeEntries['filledEntries']['cim:WindPlantDynamics.RemoteInputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantDynamics.RemoteInputSignal'], 'cim:RemoteInputSignal', 'cim:WindPlantDynamics.RemoteInputSignal');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantDynamics.RemoteInputSignal'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantDynamics.RemoteInputSignal'], 'cim:RemoteInputSignal', 'cim:WindPlantDynamics.RemoteInputSignal');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindPlantDynamics.RemoteInputSignal"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (DynamicsFunctionBlock.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindPlantDynamics.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindPlantDynamics: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindPlantDynamics.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = ["WindPlantUserDefined", "WindPlantIEC"];
        return subClasses;
      }
    }]);
    return WindPlantDynamics;
  }(DynamicsFunctionBlock);
  _defineProperty(WindPlantDynamics, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'RemoteInputSignal': [CGMESProfile.shortNames.DY]
  });

  var WindPlantFreqPcontrolIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindPlantFreqPcontrolIEC, _IdentifiedObject);
    var _super = _createSuper(WindPlantFreqPcontrolIEC);
    function WindPlantFreqPcontrolIEC() {
      _classCallCheck(this, WindPlantFreqPcontrolIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindPlantFreqPcontrolIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindPlantFreqPcontrolIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindPlantFreqPcontrolIEC.dprefmax' in object) {
          attributeEntries['filledEntries']['cim:WindPlantFreqPcontrolIEC.dprefmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.dprefmax'], 'cim:PU', 'cim:WindPlantFreqPcontrolIEC.dprefmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantFreqPcontrolIEC.dprefmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.dprefmax'], 'cim:PU', 'cim:WindPlantFreqPcontrolIEC.dprefmax');
        }
        if ('cim:WindPlantFreqPcontrolIEC.dprefmin' in object) {
          attributeEntries['filledEntries']['cim:WindPlantFreqPcontrolIEC.dprefmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.dprefmin'], 'cim:PU', 'cim:WindPlantFreqPcontrolIEC.dprefmin');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantFreqPcontrolIEC.dprefmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.dprefmin'], 'cim:PU', 'cim:WindPlantFreqPcontrolIEC.dprefmin');
        }
        if ('cim:WindPlantFreqPcontrolIEC.kiwpp' in object) {
          attributeEntries['filledEntries']['cim:WindPlantFreqPcontrolIEC.kiwpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.kiwpp'], 'cim:Simple_Float', 'cim:WindPlantFreqPcontrolIEC.kiwpp');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantFreqPcontrolIEC.kiwpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.kiwpp'], 'cim:Simple_Float', 'cim:WindPlantFreqPcontrolIEC.kiwpp');
        }
        if ('cim:WindPlantFreqPcontrolIEC.kpwpp' in object) {
          attributeEntries['filledEntries']['cim:WindPlantFreqPcontrolIEC.kpwpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.kpwpp'], 'cim:Simple_Float', 'cim:WindPlantFreqPcontrolIEC.kpwpp');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantFreqPcontrolIEC.kpwpp'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.kpwpp'], 'cim:Simple_Float', 'cim:WindPlantFreqPcontrolIEC.kpwpp');
        }
        if ('cim:WindPlantFreqPcontrolIEC.prefmax' in object) {
          attributeEntries['filledEntries']['cim:WindPlantFreqPcontrolIEC.prefmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.prefmax'], 'cim:PU', 'cim:WindPlantFreqPcontrolIEC.prefmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantFreqPcontrolIEC.prefmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.prefmax'], 'cim:PU', 'cim:WindPlantFreqPcontrolIEC.prefmax');
        }
        if ('cim:WindPlantFreqPcontrolIEC.prefmin' in object) {
          attributeEntries['filledEntries']['cim:WindPlantFreqPcontrolIEC.prefmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.prefmin'], 'cim:PU', 'cim:WindPlantFreqPcontrolIEC.prefmin');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantFreqPcontrolIEC.prefmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.prefmin'], 'cim:PU', 'cim:WindPlantFreqPcontrolIEC.prefmin');
        }
        if ('cim:WindPlantFreqPcontrolIEC.tpft' in object) {
          attributeEntries['filledEntries']['cim:WindPlantFreqPcontrolIEC.tpft'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.tpft'], 'cim:Seconds', 'cim:WindPlantFreqPcontrolIEC.tpft');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantFreqPcontrolIEC.tpft'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.tpft'], 'cim:Seconds', 'cim:WindPlantFreqPcontrolIEC.tpft');
        }
        if ('cim:WindPlantFreqPcontrolIEC.tpfv' in object) {
          attributeEntries['filledEntries']['cim:WindPlantFreqPcontrolIEC.tpfv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.tpfv'], 'cim:Seconds', 'cim:WindPlantFreqPcontrolIEC.tpfv');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantFreqPcontrolIEC.tpfv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.tpfv'], 'cim:Seconds', 'cim:WindPlantFreqPcontrolIEC.tpfv');
        }
        if ('cim:WindPlantFreqPcontrolIEC.twpffilt' in object) {
          attributeEntries['filledEntries']['cim:WindPlantFreqPcontrolIEC.twpffilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.twpffilt'], 'cim:Seconds', 'cim:WindPlantFreqPcontrolIEC.twpffilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantFreqPcontrolIEC.twpffilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.twpffilt'], 'cim:Seconds', 'cim:WindPlantFreqPcontrolIEC.twpffilt');
        }
        if ('cim:WindPlantFreqPcontrolIEC.twppfilt' in object) {
          attributeEntries['filledEntries']['cim:WindPlantFreqPcontrolIEC.twppfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.twppfilt'], 'cim:Seconds', 'cim:WindPlantFreqPcontrolIEC.twppfilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantFreqPcontrolIEC.twppfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantFreqPcontrolIEC.twppfilt'], 'cim:Seconds', 'cim:WindPlantFreqPcontrolIEC.twppfilt');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindPlantFreqPcontrolIEC.dprefmax", "cim:WindPlantFreqPcontrolIEC.dprefmin", "cim:WindPlantFreqPcontrolIEC.kiwpp", "cim:WindPlantFreqPcontrolIEC.kpwpp", "cim:WindPlantFreqPcontrolIEC.prefmax", "cim:WindPlantFreqPcontrolIEC.prefmin", "cim:WindPlantFreqPcontrolIEC.tpft", "cim:WindPlantFreqPcontrolIEC.tpfv", "cim:WindPlantFreqPcontrolIEC.twpffilt", "cim:WindPlantFreqPcontrolIEC.twppfilt"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindPlantFreqPcontrolIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindPlantFreqPcontrolIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindPlantFreqPcontrolIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindPlantFreqPcontrolIEC;
  }(IdentifiedObject);
  _defineProperty(WindPlantFreqPcontrolIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'dprefmax': [CGMESProfile.shortNames.DY],
    'dprefmin': [CGMESProfile.shortNames.DY],
    'kiwpp': [CGMESProfile.shortNames.DY],
    'kpwpp': [CGMESProfile.shortNames.DY],
    'prefmax': [CGMESProfile.shortNames.DY],
    'prefmin': [CGMESProfile.shortNames.DY],
    'tpft': [CGMESProfile.shortNames.DY],
    'tpfv': [CGMESProfile.shortNames.DY],
    'twpffilt': [CGMESProfile.shortNames.DY],
    'twppfilt': [CGMESProfile.shortNames.DY]
  });

  var WindPlantIEC = /*#__PURE__*/function (_WindPlantDynamics) {
    _inherits(WindPlantIEC, _WindPlantDynamics);
    var _super = _createSuper(WindPlantIEC);
    function WindPlantIEC() {
      _classCallCheck(this, WindPlantIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindPlantIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindPlantIEC";
        var attributeEntries = WindPlantDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:WindPlantIEC.WindPlantFreqPcontrolIEC' in object) {
          attributeEntries['filledEntries']['cim:WindPlantIEC.WindPlantFreqPcontrolIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantIEC.WindPlantFreqPcontrolIEC'], 'cim:WindPlantFreqPcontrolIEC', 'cim:WindPlantIEC.WindPlantFreqPcontrolIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantIEC.WindPlantFreqPcontrolIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantIEC.WindPlantFreqPcontrolIEC'], 'cim:WindPlantFreqPcontrolIEC', 'cim:WindPlantIEC.WindPlantFreqPcontrolIEC');
        }
        if ('cim:WindPlantIEC.WindPlantReactiveControlIEC' in object) {
          attributeEntries['filledEntries']['cim:WindPlantIEC.WindPlantReactiveControlIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantIEC.WindPlantReactiveControlIEC'], 'cim:WindPlantReactiveControlIEC', 'cim:WindPlantIEC.WindPlantReactiveControlIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantIEC.WindPlantReactiveControlIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantIEC.WindPlantReactiveControlIEC'], 'cim:WindPlantReactiveControlIEC', 'cim:WindPlantIEC.WindPlantReactiveControlIEC');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindPlantIEC.WindPlantFreqPcontrolIEC", "cim:WindPlantIEC.WindPlantReactiveControlIEC"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindPlantDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindPlantIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindPlantIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindPlantIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindPlantIEC;
  }(WindPlantDynamics);
  _defineProperty(WindPlantIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'WindPlantFreqPcontrolIEC': [CGMESProfile.shortNames.DY],
    'WindPlantReactiveControlIEC': [CGMESProfile.shortNames.DY]
  });

  var WindPlantReactiveControlIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindPlantReactiveControlIEC, _IdentifiedObject);
    var _super = _createSuper(WindPlantReactiveControlIEC);
    function WindPlantReactiveControlIEC() {
      _classCallCheck(this, WindPlantReactiveControlIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindPlantReactiveControlIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindPlantReactiveControlIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindPlantReactiveControlIEC.kiwpx' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.kiwpx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.kiwpx'], 'cim:Simple_Float', 'cim:WindPlantReactiveControlIEC.kiwpx');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.kiwpx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.kiwpx'], 'cim:Simple_Float', 'cim:WindPlantReactiveControlIEC.kiwpx');
        }
        if ('cim:WindPlantReactiveControlIEC.kpwpx' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.kpwpx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.kpwpx'], 'cim:Simple_Float', 'cim:WindPlantReactiveControlIEC.kpwpx');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.kpwpx'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.kpwpx'], 'cim:Simple_Float', 'cim:WindPlantReactiveControlIEC.kpwpx');
        }
        if ('cim:WindPlantReactiveControlIEC.kwpqu' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.kwpqu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.kwpqu'], 'cim:PU', 'cim:WindPlantReactiveControlIEC.kwpqu');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.kwpqu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.kwpqu'], 'cim:PU', 'cim:WindPlantReactiveControlIEC.kwpqu');
        }
        if ('cim:WindPlantReactiveControlIEC.mwppf' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.mwppf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.mwppf'], 'cim:Boolean', 'cim:WindPlantReactiveControlIEC.mwppf');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.mwppf'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.mwppf'], 'cim:Boolean', 'cim:WindPlantReactiveControlIEC.mwppf');
        }
        if ('cim:WindPlantReactiveControlIEC.mwpu' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.mwpu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.mwpu'], 'cim:Boolean', 'cim:WindPlantReactiveControlIEC.mwpu');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.mwpu'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.mwpu'], 'cim:Boolean', 'cim:WindPlantReactiveControlIEC.mwpu');
        }
        if ('cim:WindPlantReactiveControlIEC.twppfilt' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.twppfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.twppfilt'], 'cim:Seconds', 'cim:WindPlantReactiveControlIEC.twppfilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.twppfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.twppfilt'], 'cim:Seconds', 'cim:WindPlantReactiveControlIEC.twppfilt');
        }
        if ('cim:WindPlantReactiveControlIEC.twpqfilt' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.twpqfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.twpqfilt'], 'cim:Seconds', 'cim:WindPlantReactiveControlIEC.twpqfilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.twpqfilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.twpqfilt'], 'cim:Seconds', 'cim:WindPlantReactiveControlIEC.twpqfilt');
        }
        if ('cim:WindPlantReactiveControlIEC.twpufilt' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.twpufilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.twpufilt'], 'cim:Seconds', 'cim:WindPlantReactiveControlIEC.twpufilt');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.twpufilt'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.twpufilt'], 'cim:Seconds', 'cim:WindPlantReactiveControlIEC.twpufilt');
        }
        if ('cim:WindPlantReactiveControlIEC.txft' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.txft'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.txft'], 'cim:Seconds', 'cim:WindPlantReactiveControlIEC.txft');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.txft'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.txft'], 'cim:Seconds', 'cim:WindPlantReactiveControlIEC.txft');
        }
        if ('cim:WindPlantReactiveControlIEC.txfv' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.txfv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.txfv'], 'cim:Seconds', 'cim:WindPlantReactiveControlIEC.txfv');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.txfv'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.txfv'], 'cim:Seconds', 'cim:WindPlantReactiveControlIEC.txfv');
        }
        if ('cim:WindPlantReactiveControlIEC.uwpqdip' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.uwpqdip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.uwpqdip'], 'cim:PU', 'cim:WindPlantReactiveControlIEC.uwpqdip');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.uwpqdip'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.uwpqdip'], 'cim:PU', 'cim:WindPlantReactiveControlIEC.uwpqdip');
        }
        if ('cim:WindPlantReactiveControlIEC.xrefmax' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.xrefmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.xrefmax'], 'cim:PU', 'cim:WindPlantReactiveControlIEC.xrefmax');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.xrefmax'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.xrefmax'], 'cim:PU', 'cim:WindPlantReactiveControlIEC.xrefmax');
        }
        if ('cim:WindPlantReactiveControlIEC.xrefmin' in object) {
          attributeEntries['filledEntries']['cim:WindPlantReactiveControlIEC.xrefmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.xrefmin'], 'cim:PU', 'cim:WindPlantReactiveControlIEC.xrefmin');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantReactiveControlIEC.xrefmin'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantReactiveControlIEC.xrefmin'], 'cim:PU', 'cim:WindPlantReactiveControlIEC.xrefmin');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindPlantReactiveControlIEC.kiwpx", "cim:WindPlantReactiveControlIEC.kpwpx", "cim:WindPlantReactiveControlIEC.kwpqu", "cim:WindPlantReactiveControlIEC.mwppf", "cim:WindPlantReactiveControlIEC.mwpu", "cim:WindPlantReactiveControlIEC.twppfilt", "cim:WindPlantReactiveControlIEC.twpqfilt", "cim:WindPlantReactiveControlIEC.twpufilt", "cim:WindPlantReactiveControlIEC.txft", "cim:WindPlantReactiveControlIEC.txfv", "cim:WindPlantReactiveControlIEC.uwpqdip", "cim:WindPlantReactiveControlIEC.xrefmax", "cim:WindPlantReactiveControlIEC.xrefmin"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindPlantReactiveControlIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindPlantReactiveControlIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindPlantReactiveControlIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindPlantReactiveControlIEC;
  }(IdentifiedObject);
  _defineProperty(WindPlantReactiveControlIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'kiwpx': [CGMESProfile.shortNames.DY],
    'kpwpx': [CGMESProfile.shortNames.DY],
    'kwpqu': [CGMESProfile.shortNames.DY],
    'mwppf': [CGMESProfile.shortNames.DY],
    'mwpu': [CGMESProfile.shortNames.DY],
    'twppfilt': [CGMESProfile.shortNames.DY],
    'twpqfilt': [CGMESProfile.shortNames.DY],
    'twpufilt': [CGMESProfile.shortNames.DY],
    'txft': [CGMESProfile.shortNames.DY],
    'txfv': [CGMESProfile.shortNames.DY],
    'uwpqdip': [CGMESProfile.shortNames.DY],
    'xrefmax': [CGMESProfile.shortNames.DY],
    'xrefmin': [CGMESProfile.shortNames.DY]
  });

  var WindPlantUserDefined = /*#__PURE__*/function (_WindPlantDynamics) {
    _inherits(WindPlantUserDefined, _WindPlantDynamics);
    var _super = _createSuper(WindPlantUserDefined);
    function WindPlantUserDefined() {
      _classCallCheck(this, WindPlantUserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(WindPlantUserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindPlantUserDefined";
        var attributeEntries = WindPlantDynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:WindPlantUserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:WindPlantUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantUserDefined.proprietary'], 'cim:Boolean', 'cim:WindPlantUserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:WindPlantUserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindPlantUserDefined.proprietary'], 'cim:Boolean', 'cim:WindPlantUserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindPlantUserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindPlantDynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindPlantUserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindPlantUserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindPlantUserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindPlantUserDefined;
  }(WindPlantDynamics);
  _defineProperty(WindPlantUserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var WindProtectionIEC = /*#__PURE__*/function (_IdentifiedObject) {
    _inherits(WindProtectionIEC, _IdentifiedObject);
    var _super = _createSuper(WindProtectionIEC);
    function WindProtectionIEC() {
      _classCallCheck(this, WindProtectionIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindProtectionIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindProtectionIEC";
        var attributeEntries = IdentifiedObject.attributeHTML(object, cimmenu, classType);
        if ('cim:WindProtectionIEC.fover' in object) {
          attributeEntries['filledEntries']['cim:WindProtectionIEC.fover'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.fover'], 'cim:PU', 'cim:WindProtectionIEC.fover');
        } else {
          attributeEntries['emptyEntries']['cim:WindProtectionIEC.fover'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.fover'], 'cim:PU', 'cim:WindProtectionIEC.fover');
        }
        if ('cim:WindProtectionIEC.funder' in object) {
          attributeEntries['filledEntries']['cim:WindProtectionIEC.funder'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.funder'], 'cim:PU', 'cim:WindProtectionIEC.funder');
        } else {
          attributeEntries['emptyEntries']['cim:WindProtectionIEC.funder'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.funder'], 'cim:PU', 'cim:WindProtectionIEC.funder');
        }
        if ('cim:WindProtectionIEC.tfover' in object) {
          attributeEntries['filledEntries']['cim:WindProtectionIEC.tfover'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.tfover'], 'cim:Seconds', 'cim:WindProtectionIEC.tfover');
        } else {
          attributeEntries['emptyEntries']['cim:WindProtectionIEC.tfover'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.tfover'], 'cim:Seconds', 'cim:WindProtectionIEC.tfover');
        }
        if ('cim:WindProtectionIEC.tfunder' in object) {
          attributeEntries['filledEntries']['cim:WindProtectionIEC.tfunder'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.tfunder'], 'cim:Seconds', 'cim:WindProtectionIEC.tfunder');
        } else {
          attributeEntries['emptyEntries']['cim:WindProtectionIEC.tfunder'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.tfunder'], 'cim:Seconds', 'cim:WindProtectionIEC.tfunder');
        }
        if ('cim:WindProtectionIEC.tuover' in object) {
          attributeEntries['filledEntries']['cim:WindProtectionIEC.tuover'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.tuover'], 'cim:Seconds', 'cim:WindProtectionIEC.tuover');
        } else {
          attributeEntries['emptyEntries']['cim:WindProtectionIEC.tuover'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.tuover'], 'cim:Seconds', 'cim:WindProtectionIEC.tuover');
        }
        if ('cim:WindProtectionIEC.tuunder' in object) {
          attributeEntries['filledEntries']['cim:WindProtectionIEC.tuunder'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.tuunder'], 'cim:Seconds', 'cim:WindProtectionIEC.tuunder');
        } else {
          attributeEntries['emptyEntries']['cim:WindProtectionIEC.tuunder'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.tuunder'], 'cim:Seconds', 'cim:WindProtectionIEC.tuunder');
        }
        if ('cim:WindProtectionIEC.uover' in object) {
          attributeEntries['filledEntries']['cim:WindProtectionIEC.uover'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.uover'], 'cim:PU', 'cim:WindProtectionIEC.uover');
        } else {
          attributeEntries['emptyEntries']['cim:WindProtectionIEC.uover'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.uover'], 'cim:PU', 'cim:WindProtectionIEC.uover');
        }
        if ('cim:WindProtectionIEC.uunder' in object) {
          attributeEntries['filledEntries']['cim:WindProtectionIEC.uunder'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.uunder'], 'cim:PU', 'cim:WindProtectionIEC.uunder');
        } else {
          attributeEntries['emptyEntries']['cim:WindProtectionIEC.uunder'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.uunder'], 'cim:PU', 'cim:WindProtectionIEC.uunder');
        }
        if ('cim:WindProtectionIEC.WindTurbineType1or2IEC' in object) {
          attributeEntries['filledEntries']['cim:WindProtectionIEC.WindTurbineType1or2IEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.WindTurbineType1or2IEC'], 'cim:WindTurbineType1or2IEC', 'cim:WindProtectionIEC.WindTurbineType1or2IEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindProtectionIEC.WindTurbineType1or2IEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindProtectionIEC.WindTurbineType1or2IEC'], 'cim:WindTurbineType1or2IEC', 'cim:WindProtectionIEC.WindTurbineType1or2IEC');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindProtectionIEC.fover", "cim:WindProtectionIEC.funder", "cim:WindProtectionIEC.tfover", "cim:WindProtectionIEC.tfunder", "cim:WindProtectionIEC.tuover", "cim:WindProtectionIEC.tuunder", "cim:WindProtectionIEC.uover", "cim:WindProtectionIEC.uunder", "cim:WindProtectionIEC.WindTurbineType1or2IEC"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (IdentifiedObject.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindProtectionIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindProtectionIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindProtectionIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindProtectionIEC;
  }(IdentifiedObject);
  _defineProperty(WindProtectionIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'fover': [CGMESProfile.shortNames.DY],
    'funder': [CGMESProfile.shortNames.DY],
    'tfover': [CGMESProfile.shortNames.DY],
    'tfunder': [CGMESProfile.shortNames.DY],
    'tuover': [CGMESProfile.shortNames.DY],
    'tuunder': [CGMESProfile.shortNames.DY],
    'uover': [CGMESProfile.shortNames.DY],
    'uunder': [CGMESProfile.shortNames.DY],
    'WindTurbineType1or2IEC': [CGMESProfile.shortNames.DY]
  });

  var possibleValues$1 = [{
    "value": "--"
  }, {
    "value": "WindQcontrolModesKind.voltage",
    "label": "voltage"
  }, {
    "value": "WindQcontrolModesKind.reactivePower",
    "label": "reactivePower"
  }, {
    "value": "WindQcontrolModesKind.openLoopReactivePower",
    "label": "openLoopReactivePower"
  }, {
    "value": "WindQcontrolModesKind.powerFactor",
    "label": "powerFactor"
  }];
  var WindQcontrolModesKind = /*#__PURE__*/function (_BaseClass) {
    _inherits(WindQcontrolModesKind, _BaseClass);
    var _super = _createSuper(WindQcontrolModesKind);
    function WindQcontrolModesKind() {
      _classCallCheck(this, WindQcontrolModesKind);
      return _super.apply(this, arguments);
    }
    _createClass(WindQcontrolModesKind, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindQcontrolModesKind";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindQcontrolModesKind.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindQcontrolModesKind: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindQcontrolModesKind.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues$1;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindQcontrolModesKind;
  }(BaseClass);
  _defineProperty(WindQcontrolModesKind, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY]
  });

  var WindTurbineType4aIEC = /*#__PURE__*/function (_WindGenType4IEC) {
    _inherits(WindTurbineType4aIEC, _WindGenType4IEC);
    var _super = _createSuper(WindTurbineType4aIEC);
    function WindTurbineType4aIEC() {
      _classCallCheck(this, WindTurbineType4aIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindTurbineType4aIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindTurbineType4aIEC";
        var attributeEntries = WindGenType4IEC.attributeHTML(object, cimmenu, classType);
        if ('cim:WindTurbineType4aIEC.WindContPType4aIEC' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType4aIEC.WindContPType4aIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType4aIEC.WindContPType4aIEC'], 'cim:WindContPType4aIEC', 'cim:WindTurbineType4aIEC.WindContPType4aIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType4aIEC.WindContPType4aIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType4aIEC.WindContPType4aIEC'], 'cim:WindContPType4aIEC', 'cim:WindTurbineType4aIEC.WindContPType4aIEC');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindTurbineType4aIEC.WindContPType4aIEC"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindGenType4IEC.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindTurbineType4aIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindTurbineType4aIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindTurbineType4aIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindTurbineType4aIEC;
  }(WindGenType4IEC);
  _defineProperty(WindTurbineType4aIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'WindContPType4aIEC': [CGMESProfile.shortNames.DY]
  });

  var WindTurbineType4bIEC = /*#__PURE__*/function (_WindGenType4IEC) {
    _inherits(WindTurbineType4bIEC, _WindGenType4IEC);
    var _super = _createSuper(WindTurbineType4bIEC);
    function WindTurbineType4bIEC() {
      _classCallCheck(this, WindTurbineType4bIEC);
      return _super.apply(this, arguments);
    }
    _createClass(WindTurbineType4bIEC, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindTurbineType4bIEC";
        var attributeEntries = WindGenType4IEC.attributeHTML(object, cimmenu, classType);
        if ('cim:WindTurbineType4bIEC.WindContPType4bIEC' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType4bIEC.WindContPType4bIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType4bIEC.WindContPType4bIEC'], 'cim:WindContPType4bIEC', 'cim:WindTurbineType4bIEC.WindContPType4bIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType4bIEC.WindContPType4bIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType4bIEC.WindContPType4bIEC'], 'cim:WindContPType4bIEC', 'cim:WindTurbineType4bIEC.WindContPType4bIEC');
        }
        if ('cim:WindTurbineType4bIEC.WindMechIEC' in object) {
          attributeEntries['filledEntries']['cim:WindTurbineType4bIEC.WindMechIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType4bIEC.WindMechIEC'], 'cim:WindMechIEC', 'cim:WindTurbineType4bIEC.WindMechIEC');
        } else {
          attributeEntries['emptyEntries']['cim:WindTurbineType4bIEC.WindMechIEC'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindTurbineType4bIEC.WindMechIEC'], 'cim:WindMechIEC', 'cim:WindTurbineType4bIEC.WindMechIEC');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindTurbineType4bIEC.WindContPType4bIEC", "cim:WindTurbineType4bIEC.WindMechIEC"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindGenType4IEC.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindTurbineType4bIEC.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindTurbineType4bIEC: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindTurbineType4bIEC.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindTurbineType4bIEC;
  }(WindGenType4IEC);
  _defineProperty(WindTurbineType4bIEC, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'WindContPType4bIEC': [CGMESProfile.shortNames.DY],
    'WindMechIEC': [CGMESProfile.shortNames.DY]
  });

  var WindType1or2UserDefined = /*#__PURE__*/function (_WindTurbineType1or2D) {
    _inherits(WindType1or2UserDefined, _WindTurbineType1or2D);
    var _super = _createSuper(WindType1or2UserDefined);
    function WindType1or2UserDefined() {
      _classCallCheck(this, WindType1or2UserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(WindType1or2UserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindType1or2UserDefined";
        var attributeEntries = WindTurbineType1or2Dynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:WindType1or2UserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:WindType1or2UserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindType1or2UserDefined.proprietary'], 'cim:Boolean', 'cim:WindType1or2UserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:WindType1or2UserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindType1or2UserDefined.proprietary'], 'cim:Boolean', 'cim:WindType1or2UserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindType1or2UserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindTurbineType1or2Dynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindType1or2UserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindType1or2UserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindType1or2UserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindType1or2UserDefined;
  }(WindTurbineType1or2Dynamics);
  _defineProperty(WindType1or2UserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var WindType3or4UserDefined = /*#__PURE__*/function (_WindTurbineType3or4D) {
    _inherits(WindType3or4UserDefined, _WindTurbineType3or4D);
    var _super = _createSuper(WindType3or4UserDefined);
    function WindType3or4UserDefined() {
      _classCallCheck(this, WindType3or4UserDefined);
      return _super.apply(this, arguments);
    }
    _createClass(WindType3or4UserDefined, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindType3or4UserDefined";
        var attributeEntries = WindTurbineType3or4Dynamics.attributeHTML(object, cimmenu, classType);
        if ('cim:WindType3or4UserDefined.proprietary' in object) {
          attributeEntries['filledEntries']['cim:WindType3or4UserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindType3or4UserDefined.proprietary'], 'cim:Boolean', 'cim:WindType3or4UserDefined.proprietary');
        } else {
          attributeEntries['emptyEntries']['cim:WindType3or4UserDefined.proprietary'] = cimmenu.getAggregateComponentMenu('cim:' + classType, object['pintura:rdfid'], object['WindType3or4UserDefined.proprietary'], 'cim:Boolean', 'cim:WindType3or4UserDefined.proprietary');
        }
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = ["cim:WindType3or4UserDefined.proprietary"];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (WindTurbineType3or4Dynamics.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindType3or4UserDefined.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindType3or4UserDefined: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindType3or4UserDefined.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_update_complex_type;
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindType3or4UserDefined;
  }(WindTurbineType3or4Dynamics);
  _defineProperty(WindType3or4UserDefined, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.DY],
    'proprietary': [CGMESProfile.shortNames.DY]
  });

  var possibleValues = [{
    "value": "--"
  }, {
    "value": "WindingConnection.D",
    "label": "D"
  }, {
    "value": "WindingConnection.Y",
    "label": "Y"
  }, {
    "value": "WindingConnection.Z",
    "label": "Z"
  }, {
    "value": "WindingConnection.Yn",
    "label": "Yn"
  }, {
    "value": "WindingConnection.Zn",
    "label": "Zn"
  }, {
    "value": "WindingConnection.A",
    "label": "A"
  }, {
    "value": "WindingConnection.I",
    "label": "I"
  }];
  var WindingConnection = /*#__PURE__*/function (_BaseClass) {
    _inherits(WindingConnection, _BaseClass);
    var _super = _createSuper(WindingConnection);
    function WindingConnection() {
      _classCallCheck(this, WindingConnection);
      return _super.apply(this, arguments);
    }
    _createClass(WindingConnection, null, [{
      key: "attributeHTML",
      value: function attributeHTML(object, cimmenu) {
        var classType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "WindingConnection";
        var attributeEntries = BaseClass.attributeHTML(object, cimmenu, classType);
        return attributeEntries;
      }
    }, {
      key: "isMemberAttribute",
      value: function isMemberAttribute(attribute) {
        var attributes = [];
        if (attribute.substr(0, 8) == "pintura:") {
          return true;
        }
        if (attributes.indexOf(attribute) >= 0) {
          return true;
        } else if (BaseClass.isMemberAttribute(attribute)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "read",
      value: function read(object) {
        Object.keys(object).forEach(function (attribute) {
          if (!WindingConnection.isMemberAttribute(attribute) && !(attribute == "about")) {
            console.error("Unexpected attribute for class WindingConnection: ", attribute, " with value: ", object[attribute]);
          }
        });
      }
    }, {
      key: "renderAsClass",
      value: function renderAsClass(object, cimmenu) {
        var separateEntries = WindingConnection.attributeHTML(object, cimmenu);
        var filledEntries = separateEntries['filledEntries'];
        var emptyEntries = separateEntries['emptyEntries'];
        var attributeEntries = _objectSpread2(_objectSpread2({}, filledEntries), emptyEntries);
        return templates.handlebars_cim_class_render({
          'attributes': attributeEntries
        });
      }
    }, {
      key: "renderAsAttribute",
      value: function renderAsAttribute(matchingComponents) {
        var template = templates.handlebars_cim_instance_type;
        matchingComponents.aggregates = possibleValues;
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.value) {
            var value = matchingComponents.value['rdf:resource'];
            var candidate = matchingComponents.aggregates[index].value;
            if (candidate !== undefined && common.getRidOfHash(value) == candidate) {
              matchingComponents.aggregates[index].selected = 'selected';
            } else {
              delete matchingComponents.aggregates[index].selected;
            }
          }
        }
        return template(matchingComponents);
      }
    }, {
      key: "subClassList",
      value: function subClassList() {
        var subClasses = [];
        return subClasses;
      }
    }]);
    return WindingConnection;
  }(BaseClass);
  _defineProperty(WindingConnection, "possibleProfileList", {
    'class': [CGMESProfile.shortNames.EQ]
  });

  var cgmes = {
    src_ACDCConverter_js: ACDCConverter,
    src_ACDCConverterDCTerminal_js: ACDCConverterDCTerminal,
    src_ACDCTerminal_js: ACDCTerminal,
    src_ACLineSegment_js: ACLineSegment,
    src_Accumulator_js: Accumulator,
    src_AccumulatorLimit_js: AccumulatorLimit,
    src_AccumulatorLimitSet_js: AccumulatorLimitSet,
    src_AccumulatorReset_js: AccumulatorReset,
    src_AccumulatorValue_js: AccumulatorValue,
    src_ActivePower_js: ActivePower,
    src_ActivePowerLimit_js: ActivePowerLimit,
    src_ActivePowerPerCurrentFlow_js: ActivePowerPerCurrentFlow,
    src_ActivePowerPerFrequency_js: ActivePowerPerFrequency,
    src_Analog_js: Analog,
    src_AnalogControl_js: AnalogControl,
    src_AnalogLimit_js: AnalogLimit,
    src_AnalogLimitSet_js: AnalogLimitSet,
    src_AnalogValue_js: AnalogValue,
    src_AngleDegrees_js: AngleDegrees,
    src_AngleRadians_js: AngleRadians,
    src_ApparentPower_js: ApparentPower,
    src_ApparentPowerLimit_js: ApparentPowerLimit,
    src_Area_js: Area,
    src_AsynchronousMachine_js: AsynchronousMachine,
    src_AsynchronousMachineDynamics_js: AsynchronousMachineDynamics,
    src_AsynchronousMachineEquivalentCircuit_js: AsynchronousMachineEquivalentCircuit,
    src_AsynchronousMachineKind_js: AsynchronousMachineKind,
    src_AsynchronousMachineTimeConstantReactance_js: AsynchronousMachineTimeConstantReactance,
    src_AsynchronousMachineUserDefined_js: AsynchronousMachineUserDefined,
    src_BaseClass_js: BaseClass,
    src_BaseVoltage_js: BaseVoltage,
    src_BasicIntervalSchedule_js: BasicIntervalSchedule,
    src_Bay_js: Bay,
    src_Boolean_js: Boolean$1,
    src_Breaker_js: Breaker,
    src_BusNameMarker_js: BusNameMarker,
    src_BusbarSection_js: BusbarSection,
    src_CGMESProfile_js: CGMESProfile,
    src_Capacitance_js: Capacitance,
    src_CapacitancePerLength_js: CapacitancePerLength,
    src_Command_js: Command,
    src_Conductance_js: Conductance,
    src_ConductingEquipment_js: ConductingEquipment,
    src_Conductor_js: Conductor,
    src_ConformLoad_js: ConformLoad,
    src_ConformLoadGroup_js: ConformLoadGroup,
    src_ConformLoadSchedule_js: ConformLoadSchedule,
    src_ConnectivityNode_js: ConnectivityNode,
    src_ConnectivityNodeContainer_js: ConnectivityNodeContainer,
    src_Connector_js: Connector,
    src_Control_js: Control,
    src_ControlArea_js: ControlArea,
    src_ControlAreaGeneratingUnit_js: ControlAreaGeneratingUnit,
    src_ControlAreaTypeKind_js: ControlAreaTypeKind,
    src_CoordinateSystem_js: CoordinateSystem,
    src_CsConverter_js: CsConverter,
    src_CsOperatingModeKind_js: CsOperatingModeKind,
    src_CsPpccControlKind_js: CsPpccControlKind,
    src_Currency_js: Currency,
    src_CurrentFlow_js: CurrentFlow,
    src_CurrentLimit_js: CurrentLimit,
    src_Curve_js: Curve,
    src_CurveData_js: CurveData,
    src_CurveStyle_js: CurveStyle,
    src_DCBaseTerminal_js: DCBaseTerminal,
    src_DCBreaker_js: DCBreaker,
    src_DCBusbar_js: DCBusbar,
    src_DCChopper_js: DCChopper,
    src_DCConductingEquipment_js: DCConductingEquipment,
    src_DCConverterOperatingModeKind_js: DCConverterOperatingModeKind,
    src_DCConverterUnit_js: DCConverterUnit,
    src_DCDisconnector_js: DCDisconnector,
    src_DCEquipmentContainer_js: DCEquipmentContainer,
    src_DCGround_js: DCGround,
    src_DCLine_js: DCLine,
    src_DCLineSegment_js: DCLineSegment,
    src_DCNode_js: DCNode,
    src_DCPolarityKind_js: DCPolarityKind,
    src_DCSeriesDevice_js: DCSeriesDevice,
    src_DCShunt_js: DCShunt,
    src_DCSwitch_js: DCSwitch,
    src_DCTerminal_js: DCTerminal,
    src_DCTopologicalIsland_js: DCTopologicalIsland,
    src_DCTopologicalNode_js: DCTopologicalNode,
    src_Date_js: Date$1,
    src_DateTime_js: DateTime,
    src_DayType_js: DayType,
    src_Decimal_js: Decimal,
    src_Diagram_js: Diagram,
    src_DiagramLayoutVersion_js: DiagramLayoutVersion,
    src_DiagramObject_js: DiagramObject,
    src_DiagramObjectGluePoint_js: DiagramObjectGluePoint,
    src_DiagramObjectPoint_js: DiagramObjectPoint,
    src_DiagramObjectStyle_js: DiagramObjectStyle,
    src_DiagramStyle_js: DiagramStyle,
    src_DiscExcContIEEEDEC1A_js: DiscExcContIEEEDEC1A,
    src_DiscExcContIEEEDEC2A_js: DiscExcContIEEEDEC2A,
    src_DiscExcContIEEEDEC3A_js: DiscExcContIEEEDEC3A,
    src_Disconnector_js: Disconnector,
    src_DiscontinuousExcitationControlDynamics_js: DiscontinuousExcitationControlDynamics,
    src_DiscontinuousExcitationControlUserDefined_js: DiscontinuousExcitationControlUserDefined,
    src_Discrete_js: Discrete,
    src_DiscreteValue_js: DiscreteValue,
    src_DroopSignalFeedbackKind_js: DroopSignalFeedbackKind,
    src_DynamicsFunctionBlock_js: DynamicsFunctionBlock,
    src_DynamicsVersion_js: DynamicsVersion,
    src_EarthFaultCompensator_js: EarthFaultCompensator,
    src_EnergyArea_js: EnergyArea,
    src_EnergyConsumer_js: EnergyConsumer,
    src_EnergySchedulingType_js: EnergySchedulingType,
    src_EnergySource_js: EnergySource,
    src_Equipment_js: Equipment,
    src_EquipmentBoundaryVersion_js: EquipmentBoundaryVersion,
    src_EquipmentContainer_js: EquipmentContainer,
    src_EquipmentVersion_js: EquipmentVersion,
    src_EquivalentBranch_js: EquivalentBranch,
    src_EquivalentEquipment_js: EquivalentEquipment,
    src_EquivalentInjection_js: EquivalentInjection,
    src_EquivalentNetwork_js: EquivalentNetwork,
    src_EquivalentShunt_js: EquivalentShunt,
    src_ExcAC1A_js: ExcAC1A,
    src_ExcAC2A_js: ExcAC2A,
    src_ExcAC3A_js: ExcAC3A,
    src_ExcAC4A_js: ExcAC4A,
    src_ExcAC5A_js: ExcAC5A,
    src_ExcAC6A_js: ExcAC6A,
    src_ExcAC8B_js: ExcAC8B,
    src_ExcANS_js: ExcANS,
    src_ExcAVR1_js: ExcAVR1,
    src_ExcAVR2_js: ExcAVR2,
    src_ExcAVR3_js: ExcAVR3,
    src_ExcAVR4_js: ExcAVR4,
    src_ExcAVR5_js: ExcAVR5,
    src_ExcAVR7_js: ExcAVR7,
    src_ExcBBC_js: ExcBBC,
    src_ExcCZ_js: ExcCZ,
    src_ExcDC1A_js: ExcDC1A,
    src_ExcDC2A_js: ExcDC2A,
    src_ExcDC3A_js: ExcDC3A,
    src_ExcDC3A1_js: ExcDC3A1,
    src_ExcELIN1_js: ExcELIN1,
    src_ExcELIN2_js: ExcELIN2,
    src_ExcHU_js: ExcHU,
    src_ExcIEEEAC1A_js: ExcIEEEAC1A,
    src_ExcIEEEAC2A_js: ExcIEEEAC2A,
    src_ExcIEEEAC3A_js: ExcIEEEAC3A,
    src_ExcIEEEAC4A_js: ExcIEEEAC4A,
    src_ExcIEEEAC5A_js: ExcIEEEAC5A,
    src_ExcIEEEAC6A_js: ExcIEEEAC6A,
    src_ExcIEEEAC7B_js: ExcIEEEAC7B,
    src_ExcIEEEAC8B_js: ExcIEEEAC8B,
    src_ExcIEEEDC1A_js: ExcIEEEDC1A,
    src_ExcIEEEDC2A_js: ExcIEEEDC2A,
    src_ExcIEEEDC3A_js: ExcIEEEDC3A,
    src_ExcIEEEDC4B_js: ExcIEEEDC4B,
    src_ExcIEEEST1A_js: ExcIEEEST1A,
    src_ExcIEEEST1AUELselectorKind_js: ExcIEEEST1AUELselectorKind,
    src_ExcIEEEST2A_js: ExcIEEEST2A,
    src_ExcIEEEST3A_js: ExcIEEEST3A,
    src_ExcIEEEST4B_js: ExcIEEEST4B,
    src_ExcIEEEST5B_js: ExcIEEEST5B,
    src_ExcIEEEST6B_js: ExcIEEEST6B,
    src_ExcIEEEST7B_js: ExcIEEEST7B,
    src_ExcOEX3T_js: ExcOEX3T,
    src_ExcPIC_js: ExcPIC,
    src_ExcREXS_js: ExcREXS,
    src_ExcREXSFeedbackSignalKind_js: ExcREXSFeedbackSignalKind,
    src_ExcSCRX_js: ExcSCRX,
    src_ExcSEXS_js: ExcSEXS,
    src_ExcSK_js: ExcSK,
    src_ExcST1A_js: ExcST1A,
    src_ExcST2A_js: ExcST2A,
    src_ExcST3A_js: ExcST3A,
    src_ExcST4B_js: ExcST4B,
    src_ExcST6B_js: ExcST6B,
    src_ExcST6BOELselectorKind_js: ExcST6BOELselectorKind,
    src_ExcST7B_js: ExcST7B,
    src_ExcST7BOELselectorKind_js: ExcST7BOELselectorKind,
    src_ExcST7BUELselectorKind_js: ExcST7BUELselectorKind,
    src_ExcitationSystemDynamics_js: ExcitationSystemDynamics,
    src_ExcitationSystemUserDefined_js: ExcitationSystemUserDefined,
    src_ExternalNetworkInjection_js: ExternalNetworkInjection,
    src_Float_js: Float,
    src_FossilFuel_js: FossilFuel,
    src_FrancisGovernorControlKind_js: FrancisGovernorControlKind,
    src_Frequency_js: Frequency,
    src_FuelType_js: FuelType,
    src_GenICompensationForGenJ_js: GenICompensationForGenJ,
    src_GeneratingUnit_js: GeneratingUnit,
    src_GeneratorControlSource_js: GeneratorControlSource,
    src_GenericNonLinearLoadModelKind_js: GenericNonLinearLoadModelKind,
    src_GeographicalLocationVersion_js: GeographicalLocationVersion,
    src_GeographicalRegion_js: GeographicalRegion,
    src_GovCT1_js: GovCT1,
    src_GovCT2_js: GovCT2,
    src_GovGAST_js: GovGAST,
    src_GovGAST1_js: GovGAST1,
    src_GovGAST2_js: GovGAST2,
    src_GovGAST3_js: GovGAST3,
    src_GovGAST4_js: GovGAST4,
    src_GovGASTWD_js: GovGASTWD,
    src_GovHydro1_js: GovHydro1,
    src_GovHydro2_js: GovHydro2,
    src_GovHydro3_js: GovHydro3,
    src_GovHydro4_js: GovHydro4,
    src_GovHydroDD_js: GovHydroDD,
    src_GovHydroFrancis_js: GovHydroFrancis,
    src_GovHydroIEEE0_js: GovHydroIEEE0,
    src_GovHydroIEEE2_js: GovHydroIEEE2,
    src_GovHydroPID_js: GovHydroPID,
    src_GovHydroPID2_js: GovHydroPID2,
    src_GovHydroPelton_js: GovHydroPelton,
    src_GovHydroR_js: GovHydroR,
    src_GovHydroWEH_js: GovHydroWEH,
    src_GovHydroWPID_js: GovHydroWPID,
    src_GovSteam0_js: GovSteam0,
    src_GovSteam1_js: GovSteam1,
    src_GovSteam2_js: GovSteam2,
    src_GovSteamCC_js: GovSteamCC,
    src_GovSteamEU_js: GovSteamEU,
    src_GovSteamFV2_js: GovSteamFV2,
    src_GovSteamFV3_js: GovSteamFV3,
    src_GovSteamFV4_js: GovSteamFV4,
    src_GovSteamIEEE1_js: GovSteamIEEE1,
    src_GovSteamSGO_js: GovSteamSGO,
    src_GrossToNetActivePowerCurve_js: GrossToNetActivePowerCurve,
    src_Ground_js: Ground,
    src_GroundDisconnector_js: GroundDisconnector,
    src_GroundingImpedance_js: GroundingImpedance,
    src_HydroEnergyConversionKind_js: HydroEnergyConversionKind,
    src_HydroGeneratingUnit_js: HydroGeneratingUnit,
    src_HydroPlantStorageKind_js: HydroPlantStorageKind,
    src_HydroPowerPlant_js: HydroPowerPlant,
    src_HydroPump_js: HydroPump,
    src_IdentifiedObject_js: IdentifiedObject,
    src_IfdBaseKind_js: IfdBaseKind,
    src_Inductance_js: Inductance,
    src_InductancePerLength_js: InductancePerLength,
    src_InputSignalKind_js: InputSignalKind,
    src_Integer_js: Integer,
    src_Junction_js: Junction,
    src_Length_js: Length,
    src_Limit_js: Limit,
    src_LimitSet_js: LimitSet,
    src_LimitTypeKind_js: LimitTypeKind,
    src_Line_js: Line,
    src_LinearShuntCompensator_js: LinearShuntCompensator,
    src_LoadAggregate_js: LoadAggregate,
    src_LoadArea_js: LoadArea,
    src_LoadBreakSwitch_js: LoadBreakSwitch,
    src_LoadComposite_js: LoadComposite,
    src_LoadDynamics_js: LoadDynamics,
    src_LoadGenericNonLinear_js: LoadGenericNonLinear,
    src_LoadGroup_js: LoadGroup,
    src_LoadMotor_js: LoadMotor,
    src_LoadResponseCharacteristic_js: LoadResponseCharacteristic,
    src_LoadStatic_js: LoadStatic,
    src_LoadUserDefined_js: LoadUserDefined,
    src_Location_js: Location,
    src_Measurement_js: Measurement,
    src_MeasurementValue_js: MeasurementValue,
    src_MeasurementValueQuality_js: MeasurementValueQuality,
    src_MeasurementValueSource_js: MeasurementValueSource,
    src_MechLoad1_js: MechLoad1,
    src_MechanicalLoadDynamics_js: MechanicalLoadDynamics,
    src_MechanicalLoadUserDefined_js: MechanicalLoadUserDefined,
    src_Money_js: Money,
    src_MonthDay_js: MonthDay,
    src_MutualCoupling_js: MutualCoupling,
    src_NonConformLoad_js: NonConformLoad,
    src_NonConformLoadGroup_js: NonConformLoadGroup,
    src_NonConformLoadSchedule_js: NonConformLoadSchedule,
    src_NonlinearShuntCompensator_js: NonlinearShuntCompensator,
    src_NonlinearShuntCompensatorPoint_js: NonlinearShuntCompensatorPoint,
    src_NuclearGeneratingUnit_js: NuclearGeneratingUnit,
    src_OperationalLimit_js: OperationalLimit,
    src_OperationalLimitDirectionKind_js: OperationalLimitDirectionKind,
    src_OperationalLimitSet_js: OperationalLimitSet,
    src_OperationalLimitType_js: OperationalLimitType,
    src_OrientationKind_js: OrientationKind,
    src_OverexcLim2_js: OverexcLim2,
    src_OverexcLimIEEE_js: OverexcLimIEEE,
    src_OverexcLimX1_js: OverexcLimX1,
    src_OverexcLimX2_js: OverexcLimX2,
    src_OverexcitationLimiterDynamics_js: OverexcitationLimiterDynamics,
    src_OverexcitationLimiterUserDefined_js: OverexcitationLimiterUserDefined,
    src_PFVArControllerType1Dynamics_js: PFVArControllerType1Dynamics,
    src_PFVArControllerType1UserDefined_js: PFVArControllerType1UserDefined,
    src_PFVArControllerType2Dynamics_js: PFVArControllerType2Dynamics,
    src_PFVArControllerType2UserDefined_js: PFVArControllerType2UserDefined,
    src_PFVArType1IEEEPFController_js: PFVArType1IEEEPFController,
    src_PFVArType1IEEEVArController_js: PFVArType1IEEEVArController,
    src_PFVArType2Common1_js: PFVArType2Common1,
    src_PFVArType2IEEEPFController_js: PFVArType2IEEEPFController,
    src_PFVArType2IEEEVArController_js: PFVArType2IEEEVArController,
    src_PU_js: PU,
    src_PerCent_js: PerCent,
    src_PerLengthDCLineParameter_js: PerLengthDCLineParameter,
    src_PetersenCoil_js: PetersenCoil,
    src_PetersenCoilModeKind_js: PetersenCoilModeKind,
    src_PhaseCode_js: PhaseCode,
    src_PhaseTapChanger_js: PhaseTapChanger,
    src_PhaseTapChangerAsymmetrical_js: PhaseTapChangerAsymmetrical,
    src_PhaseTapChangerLinear_js: PhaseTapChangerLinear,
    src_PhaseTapChangerNonLinear_js: PhaseTapChangerNonLinear,
    src_PhaseTapChangerSymmetrical_js: PhaseTapChangerSymmetrical,
    src_PhaseTapChangerTable_js: PhaseTapChangerTable,
    src_PhaseTapChangerTablePoint_js: PhaseTapChangerTablePoint,
    src_PhaseTapChangerTabular_js: PhaseTapChangerTabular,
    src_PositionPoint_js: PositionPoint,
    src_PowerSystemResource_js: PowerSystemResource,
    src_PowerSystemStabilizerDynamics_js: PowerSystemStabilizerDynamics,
    src_PowerSystemStabilizerUserDefined_js: PowerSystemStabilizerUserDefined,
    src_PowerTransformer_js: PowerTransformer,
    src_PowerTransformerEnd_js: PowerTransformerEnd,
    src_ProprietaryParameterDynamics_js: ProprietaryParameterDynamics,
    src_ProtectedSwitch_js: ProtectedSwitch,
    src_Pss1_js: Pss1,
    src_Pss1A_js: Pss1A,
    src_Pss2B_js: Pss2B,
    src_Pss2ST_js: Pss2ST,
    src_Pss5_js: Pss5,
    src_PssELIN2_js: PssELIN2,
    src_PssIEEE1A_js: PssIEEE1A,
    src_PssIEEE2B_js: PssIEEE2B,
    src_PssIEEE3B_js: PssIEEE3B,
    src_PssIEEE4B_js: PssIEEE4B,
    src_PssPTIST1_js: PssPTIST1,
    src_PssPTIST3_js: PssPTIST3,
    src_PssSB4_js: PssSB4,
    src_PssSH_js: PssSH,
    src_PssSK_js: PssSK,
    src_PssWECC_js: PssWECC,
    src_Quality61850_js: Quality61850,
    src_RaiseLowerCommand_js: RaiseLowerCommand,
    src_RatioTapChanger_js: RatioTapChanger,
    src_RatioTapChangerTable_js: RatioTapChangerTable,
    src_RatioTapChangerTablePoint_js: RatioTapChangerTablePoint,
    src_Reactance_js: Reactance,
    src_ReactiveCapabilityCurve_js: ReactiveCapabilityCurve,
    src_ReactivePower_js: ReactivePower,
    src_RegularIntervalSchedule_js: RegularIntervalSchedule,
    src_RegularTimePoint_js: RegularTimePoint,
    src_RegulatingCondEq_js: RegulatingCondEq,
    src_RegulatingControl_js: RegulatingControl,
    src_RegulatingControlModeKind_js: RegulatingControlModeKind,
    src_RegulationSchedule_js: RegulationSchedule,
    src_RemoteInputSignal_js: RemoteInputSignal,
    src_RemoteSignalKind_js: RemoteSignalKind,
    src_ReportingGroup_js: ReportingGroup,
    src_Resistance_js: Resistance,
    src_ResistancePerLength_js: ResistancePerLength,
    src_RotatingMachine_js: RotatingMachine,
    src_RotatingMachineDynamics_js: RotatingMachineDynamics,
    src_RotationSpeed_js: RotationSpeed,
    src_RotorKind_js: RotorKind,
    src_SVCControlMode_js: SVCControlMode,
    src_Season_js: Season,
    src_SeasonDayTypeSchedule_js: SeasonDayTypeSchedule,
    src_Seconds_js: Seconds,
    src_SeriesCompensator_js: SeriesCompensator,
    src_SetPoint_js: SetPoint,
    src_ShortCircuitRotorKind_js: ShortCircuitRotorKind,
    src_ShuntCompensator_js: ShuntCompensator,
    src_Simple_Float_js: Simple_Float,
    src_SolarGeneratingUnit_js: SolarGeneratingUnit,
    src_Source_js: Source,
    src_StateVariablesVersion_js: StateVariablesVersion,
    src_StaticLoadModelKind_js: StaticLoadModelKind,
    src_StaticVarCompensator_js: StaticVarCompensator,
    src_StationSupply_js: StationSupply,
    src_SteadyStateHypothesisVersion_js: SteadyStateHypothesisVersion,
    src_String_js: String$1,
    src_StringMeasurement_js: StringMeasurement,
    src_StringMeasurementValue_js: StringMeasurementValue,
    src_SubGeographicalRegion_js: SubGeographicalRegion,
    src_SubLoadArea_js: SubLoadArea,
    src_Substation_js: Substation,
    src_Susceptance_js: Susceptance,
    src_SvInjection_js: SvInjection,
    src_SvPowerFlow_js: SvPowerFlow,
    src_SvShuntCompensatorSections_js: SvShuntCompensatorSections,
    src_SvStatus_js: SvStatus,
    src_SvTapStep_js: SvTapStep,
    src_SvVoltage_js: SvVoltage,
    src_Switch_js: Switch,
    src_SwitchSchedule_js: SwitchSchedule,
    src_SynchronousMachine_js: SynchronousMachine,
    src_SynchronousMachineDetailed_js: SynchronousMachineDetailed,
    src_SynchronousMachineDynamics_js: SynchronousMachineDynamics,
    src_SynchronousMachineEquivalentCircuit_js: SynchronousMachineEquivalentCircuit,
    src_SynchronousMachineKind_js: SynchronousMachineKind,
    src_SynchronousMachineModelKind_js: SynchronousMachineModelKind,
    src_SynchronousMachineOperatingMode_js: SynchronousMachineOperatingMode,
    src_SynchronousMachineSimplified_js: SynchronousMachineSimplified,
    src_SynchronousMachineTimeConstantReactance_js: SynchronousMachineTimeConstantReactance,
    src_SynchronousMachineUserDefined_js: SynchronousMachineUserDefined,
    src_TapChanger_js: TapChanger,
    src_TapChangerControl_js: TapChangerControl,
    src_TapChangerTablePoint_js: TapChangerTablePoint,
    src_TapSchedule_js: TapSchedule,
    src_Temperature_js: Temperature,
    src_Terminal_js: Terminal,
    src_TextDiagramObject_js: TextDiagramObject,
    src_ThermalGeneratingUnit_js: ThermalGeneratingUnit,
    src_TieFlow_js: TieFlow,
    src_TopologicalIsland_js: TopologicalIsland,
    src_TopologicalNode_js: TopologicalNode,
    src_TopologyBoundaryVersion_js: TopologyBoundaryVersion,
    src_TopologyVersion_js: TopologyVersion,
    src_TransformerControlMode_js: TransformerControlMode,
    src_TransformerEnd_js: TransformerEnd,
    src_TurbLCFB1_js: TurbLCFB1,
    src_TurbineGovernorDynamics_js: TurbineGovernorDynamics,
    src_TurbineGovernorUserDefined_js: TurbineGovernorUserDefined,
    src_TurbineLoadControllerDynamics_js: TurbineLoadControllerDynamics,
    src_TurbineLoadControllerUserDefined_js: TurbineLoadControllerUserDefined,
    src_UnderexcLim2Simplified_js: UnderexcLim2Simplified,
    src_UnderexcLimIEEE1_js: UnderexcLimIEEE1,
    src_UnderexcLimIEEE2_js: UnderexcLimIEEE2,
    src_UnderexcLimX1_js: UnderexcLimX1,
    src_UnderexcLimX2_js: UnderexcLimX2,
    src_UnderexcitationLimiterDynamics_js: UnderexcitationLimiterDynamics,
    src_UnderexcitationLimiterUserDefined_js: UnderexcitationLimiterUserDefined,
    src_UnitMultiplier_js: UnitMultiplier,
    src_UnitSymbol_js: UnitSymbol,
    src_VAdjIEEE_js: VAdjIEEE,
    src_VCompIEEEType1_js: VCompIEEEType1,
    src_VCompIEEEType2_js: VCompIEEEType2,
    src_Validity_js: Validity,
    src_ValueAliasSet_js: ValueAliasSet,
    src_ValueToAlias_js: ValueToAlias,
    src_VisibilityLayer_js: VisibilityLayer,
    src_Voltage_js: Voltage,
    src_VoltageAdjusterDynamics_js: VoltageAdjusterDynamics,
    src_VoltageAdjusterUserDefined_js: VoltageAdjusterUserDefined,
    src_VoltageCompensatorDynamics_js: VoltageCompensatorDynamics,
    src_VoltageCompensatorUserDefined_js: VoltageCompensatorUserDefined,
    src_VoltageLevel_js: VoltageLevel,
    src_VoltageLimit_js: VoltageLimit,
    src_VoltagePerReactivePower_js: VoltagePerReactivePower,
    src_VolumeFlowRate_js: VolumeFlowRate,
    src_VsCapabilityCurve_js: VsCapabilityCurve,
    src_VsConverter_js: VsConverter,
    src_VsPpccControlKind_js: VsPpccControlKind,
    src_VsQpccControlKind_js: VsQpccControlKind,
    src_WindAeroConstIEC_js: WindAeroConstIEC,
    src_WindAeroLinearIEC_js: WindAeroLinearIEC,
    src_WindContCurrLimIEC_js: WindContCurrLimIEC,
    src_WindContPType3IEC_js: WindContPType3IEC,
    src_WindContPType4aIEC_js: WindContPType4aIEC,
    src_WindContPType4bIEC_js: WindContPType4bIEC,
    src_WindContPitchAngleIEC_js: WindContPitchAngleIEC,
    src_WindContQIEC_js: WindContQIEC,
    src_WindContRotorRIEC_js: WindContRotorRIEC,
    src_WindDynamicsLookupTable_js: WindDynamicsLookupTable,
    src_WindGenTurbineType1IEC_js: WindGenTurbineType1IEC,
    src_WindGenTurbineType2IEC_js: WindGenTurbineType2IEC,
    src_WindGenTurbineType3IEC_js: WindGenTurbineType3IEC,
    src_WindGenTurbineType3aIEC_js: WindGenTurbineType3aIEC,
    src_WindGenTurbineType3bIEC_js: WindGenTurbineType3bIEC,
    src_WindGenType4IEC_js: WindGenType4IEC,
    src_WindGenUnitKind_js: WindGenUnitKind,
    src_WindGeneratingUnit_js: WindGeneratingUnit,
    src_WindLVRTQcontrolModesKind_js: WindLVRTQcontrolModesKind,
    src_WindLookupTableFunctionKind_js: WindLookupTableFunctionKind,
    src_WindMechIEC_js: WindMechIEC,
    src_WindPitchContEmulIEC_js: WindPitchContEmulIEC,
    src_WindPlantDynamics_js: WindPlantDynamics,
    src_WindPlantFreqPcontrolIEC_js: WindPlantFreqPcontrolIEC,
    src_WindPlantIEC_js: WindPlantIEC,
    src_WindPlantReactiveControlIEC_js: WindPlantReactiveControlIEC,
    src_WindPlantUserDefined_js: WindPlantUserDefined,
    src_WindProtectionIEC_js: WindProtectionIEC,
    src_WindQcontrolModesKind_js: WindQcontrolModesKind,
    src_WindTurbineType1or2Dynamics_js: WindTurbineType1or2Dynamics,
    src_WindTurbineType1or2IEC_js: WindTurbineType1or2IEC,
    src_WindTurbineType3or4Dynamics_js: WindTurbineType3or4Dynamics,
    src_WindTurbineType3or4IEC_js: WindTurbineType3or4IEC,
    src_WindTurbineType4aIEC_js: WindTurbineType4aIEC,
    src_WindTurbineType4bIEC_js: WindTurbineType4bIEC,
    src_WindType1or2UserDefined_js: WindType1or2UserDefined,
    src_WindType3or4UserDefined_js: WindType3or4UserDefined,
    src_WindingConnection_js: WindingConnection
  };

  var css = "/*\n *  Copyright Â© 2016-2017, RWTH Aachen University\n *  Authors: Richard Marston\n *  SPDX-License-Identifier: MPL-2.0\n */\n\n/* tag name are just so.\n   id begins with #\n   class begins with . */\n\n/* body contains menu and middle\n   arranged in a column */\nhtml, body {\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    box-sizing: border-box;\n    height: 100%;\n    width: 100%;\n    overflow:hidden;\n    max-height:100%;\n    font-family:Verdana,sans-serif;\n    font-size:15px;\n    margin:0;\n}\n*,*:before,*:after{box-sizing:inherit}\na{\n    -webkit-text-decoration-skip:objects\n}\na:active,a:hover{\n    outline-width:0;\n}\nbutton,span input,select,textarea{\n    border-radius: 7px;\n    font:inherit;\n    min-height:34px;\n    max-height:34px;\n    margin: 0;\n}\nbutton {\n    min-height:34px;\n    margin: 0px;\n    padding: 8px;\n}\nspan input, select, textarea{\n    padding: 0;\n    max-width:150px;\n    min-width:150px;\n    height:28px;\n    -ms-box-sizing:content-box;\n    -moz-box-sizing:content-box;\n    box-sizing:content-box;\n    -webkit-box-sizing:content-box;\n}\nspan input {\n    min-height:32px;\n    max-height:32px;\n    height:32px;\n}\nbutton span {\n    pointer-events: none;\n}\nselect {\n    max-width:150px;\n    min-width:150px;\n    display: inline-block;\n    font: inherit;\n    line-height: 1.5em;\n    padding: 0 3em 0 0;*/\n    margin: 0;\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    background-position:\n      calc(100% - 20px) calc(1em + 2px),\n      calc(100% - 15px) calc(1em + 2px),\n      calc(100% - 3.0em) 0.5em;\n    background-size:\n      5px 5px,\n      5px 5px,\n      1px 1.5em;\n    background-repeat: no-repeat;\n}\nbutton::-moz-focus-inner,\n  [type=button]::-moz-focus-inner,\n  [type=reset]::-moz-focus-inner,\n  [type=submit]::-moz-focus-inner {\n    border-style:none;padding:0;\n}\n#icons {\n  background-color: #AAA;\n}\n.tooltiptext {\n  position: absolute;\n}\n.tooltip .tooltiptext {\n  display: inline-block;\n  visibility: hidden;\n  width: auto;\n  background-color: black;\n  color: #fff;\n  text-align: center;\n  border-radius: 6px;\n  padding: 5px 0;\n  z-index: 1;\n}\n.tooltip:hover .tooltiptext {\n  visibility: visible;\n}\n#left-panel {\n  display: flex;\n  flex-direction: column;\n  width: 20%;\n}\n#multi-menu-panel {\n  height:100%\n}\n.DiagramList {\n  overflow-y: scroll;\n  height:100%\n}\n#menu {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 1;\n}\n#react {\n    width: 20%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 1;\n}\n.grid-panel {\n    pointer-events: all;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-auto-rows: 40px;\n    min-height: 40px;\n    overflow:hidden;\n}\n.new-component-dialog {\n    z-index: 2;\n    width: 100%;\n    height: 100%;\n    position: fixed!important;\n    display: flex;\n}\n.middle-panel {\n    height: 100%;\n    width: 60%;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n}\n.middle-dialog {\n    height: 60%;\n    width: 100%;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    border: thin solid black;\n    border-radius: 5px;\n}\n.dialog-list {\n    flex-grow: 1;\n}\n#cimsvg-panel {\n    width:60%;\n    height:100%;\n    border: grey;\n    border-left: lightgrey solid 3px;\n    border-right: lightgrey solid 3px;\n    display: flex;\n    flex-direction: column;\n}\n#svg {\n    width: 100%;\n    height: 100%;\n    z-index: 1;\n}\n.map {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: 0;\n}\n#map-container {\n    width: inherit;\n    height: 100%;\n    position: absolute;\n    z-index: 0;\n}\n.button {\n    border:none;\n    border-style:none;\n    border-radius:0px;\n    display:inline-block;\n    outline:0;\n    vertical-align:middle;\n    overflow:hidden;\n    text-decoration:none;\n    color:inherit;\n    cursor:pointer;\n    white-space:nowrap;\n    -webkit-touch-callout:none;\n    -webkit-user-select:none;\n    -khtml-user-select:none;\n    -moz-user-select:none;\n    -ms-user-select:none;\n    user-select:none;\n    padding-top: 8px;\n    padding-bottom: 8px;\n}\n.row {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    min-height: 40px;\n}\n.tabs {\n  position: relative;\n}\n.tabs:after {\n  position: absolute;\n  content: \"\";\n  width: 100%;\n  bottom: 0;\n  left: 0;\n  border-bottom: 1px solid #AAA;\n  z-index: 1;\n}\n.tabs:before {\n    z-index: 1;\n}\n.tabs .tab {\n    position: relative;\n    z-index: 0;\n}\n.tabs .tab.selected {\n    z-index: 2;\n    border-bottom-color: #FFF;\n    background-color: #FFF;\n}\n.tab {\n    background-color: #CCC;\n    border: 1px solid #CCC;\n    text-align: center;\n    flex-grow: 1;\n}\n.tabs .tab {\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n}\n/* sidebar is a column of menu items\n   to the right of middle section */\n#sidebar {\n    display: flex;\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    flex-direction: column;\n    flex-grow: 1;\n    flex-wrap: nowrap;\n    order: -1;\n    width: 400px;\n    min-width: 400px;\n    max-width: 400px;\n    overflow-y: auto;\n    position: fixed!important;\n}\n.vertical-menu {\n  width: 80px; /* Set a width if you like */\n}\n.vertical-menu a {\n  background-color: #eee; /* Grey background color */\n  color: black; /* Black text color */\n  display: block; /* Make the links appear below each other */\n  padding: 12px; /* Add some padding */\n  text-decoration: none; /* Remove underline from links */\n}\n#right-panel {\n  width: 20%;\n  overflow-y: scroll;\n}\n#diagram-display {\n    flex: 1;\n    flex-grow: 1;\n    width: auto;\n    height: 100%;\n}\n.floating-panel-table {\n    height: 100%;\n    padding: 0px;\n    bottom: 0px;\n    right: 0px;\n    overflow-y: auto;\n    display: table;\n}\n.floating-menu-list {\n    margin:0px;\n    padding:0px;\n    order: 2;\n    overflow-x:hidden;\n    overflow-y:auto;\n}\n.floating-panel-list {\n    margin: 0px;\n    padding: 0px;\n}\n.floating-panel-item {\n    font-size:12px;\n    display: table-row;\n}\n.floating-panel-name {\n    display: table-cell;\n    margin-top:10px;\n    margin-left:10px;\n    text-align:left;\n    overflow:hidden;\n    font-size:12px;\n}\n.floating-panel-value {\n    display: table-cell;\n    margin-top:3px;\n    margin-bottom:3px;\n    margin-left:10px;\n    margin-right:10px;\n    border thin solid black;\n    overflow:hidden;\n}\n.floating-panel-value input{\n    text-align:center;\n}\n.list-entry {\n    font-size:12px;\n}\n.list-subtitle {\n    min-height: 40px;\n    max-height: 40px;\n    padding: 0px;\n}\n.wide-row {\n    display:flex;\n    flex-direction:row;\n    justify-content:space-between;\n}\n.switch {\n    margin: 0px 8px;\n}\n.wide-button {\n    width:100%;\n}\n.center-button {\n    text-align:center;\n}\n.row-left {\n    order: 0;\n}\n.row-right {\n    order: 2;\n}\n.panel-button {\n    margin:0px;\n    padding-right:8px;\n    padding-left:8px;\n}\n.list-title {\n    min-height: 40px;\n    width: 100%;\n    margin: 0px;\n    padding-left: 8px;\n    border-radius: 8px;\n}\n.dropdown {\n    float: right!important;\n    width: 200px;\n}\n.dropdown-menu {\n    position:fixed!important;\n    height:auto;\n    width:200px;\n    z-index:1;\n    display: none;\n}\n.dropdown-menu a {\n    text-decoration: none;\n    display: block;\n    width:100%;\n    text-align: left;\n    padding:4px 6px;\n    font-size:14px;\n}\nh4 {\n    font-size:16px;\n    text-align: center;\n}\n.line {\n    margin-left: 0px;\n    margin-right: 0px;\n    border-bottom: 1px solid white;\n}\ninput:focus {\n    outline:none;\n}\nform {\n    display: flex;\n    align-items: center;\n}\n.context-menu {\n    display: none;\n    position: absolute;\n    z-index: 10;\n}\n.context-menu-items {\n    box-shadow: 1px 1px 2px #cfcfcf;\n    margin: 0px;\n    border: solid 1px #000000;\n    padding: 0px;\n}\n.context-menu-item {\n    margin: 0px;\n    border: 0px;\n    padding: 3px;\n}\nul {\n    list-style-type: none;\n    padding: 0px;\n    margin: 0px;\n}\n.context-menu-active {\n    display: block;\n}\n#diagram-display {\n    position: fixed!important;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: -1;\n}\n.diagrams-panel {\n    order: 1;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n}\n#components-menu-panel {\n    display: flex;\n    flex-direction: column;\n}\n.components-panel {\n    order: 2;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n}\n.attributes-panel {\n    order: 3;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n}\n.raw-components-panel {\n    order: 4;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n}\n.buttonright {\n    padding-right:8px;\n}\n.buttonleft {\n    padding-left:8px;\n}\n.topleft {\n    position: fixed!important;\n    left: 0;\n    top: 0;\n}\n.bottomleft {\n    position: fixed!important;\n    left: 0;\n    bottom: 0;\n}\n.topright {\n    position: fixed!important;\n    right: 0;\n    top: 0;\n}\n.bottomright {\n    position: fixed!important;\n    right: 0;\n    bottom: 0;\n}\n.leftmargin {\n    margin-left: 30px;\n}\n.rightmargin {\n    margin-right: 30px;\n}\n.fullcolumn {\n    height: calc(100% - 40px);\n    margin-top: 20px;\n    margin-bottom: 20px;\n    display: flex;\n    flex-direction: column;\n}\n.spacer {\n    flex-grow: 1;\n    pointer-events: none;\n}\n.indent {\n    margin-left: 20px;\n}\n.bigindent {\n    margin-left: 40px;\n}\n.invisible {\n    display:none;\n    pointer-events: none;\n}\n.hiddenbutton {\n    visibility: hidden;\n}\n.hiddenmenu {\n    display: none;\n}\n.hiddentab {\n    height: 0;\n    display: none;\n}\n/*\n *  Copyright Â© 2016-2017, RWTH Aachen University\n *  Authors: Richard Marston\n *  SPDX-License-Identifier: MPL-2.0\n */\n\na{\n    background-color:transparent;\n}\nbutton:hover {\n    background-color: rgb(125,125,125);\n}\nbutton,input,select,textarea{\n    border: thin solid black;\n    background: white;\n    color: black;\n}\n.menu-title {\n    background: white;\n}\n.dialog-list {\n    background: white;\n}\n.middle-dialog {\n    background: white;\n}\n.context-menu-item {\n    background-color: #fff;\n}\n.context-menu-item:active,.context-menu-item:hover{\n    background-color: #ccf;\n}\n.floating-panel-list {\n    background: rgba(0, 0, 0, 0.0);\n    border:none;\n}\n.list-title {\n    background: white;\n    color: black;\n}\n.list-subtitle {\n    background: white;\n    color: black;\n}\n.selected {\n    background: lightgrey;\n}\n\n.bar {\n    stroke: #000;\n    stroke-width: 3px;\n}\n.fillwhenstill {\n    fill: inherit;\n    stroke-dasharray: 0;\n    stroke-width: 1px;\n}\n.nodisplay {\n    display: none;\n}\n.nopointer {\n    pointer-events: none;\n}\n.highlighted-node:hover {\n  stroke: #ff0;\n}\nline {\n    stroke: #000;\n    stroke-width: 1px;\n}\n.line {\n    stroke: #000;\n}\n.terminal-connnode {\n    stroke: #000;\n    stroke-width: 1px;\n}\n.terminal-toponode {\n    stroke: #000;\n    stroke-width: 1px;\n}\n.conduct {\n    stroke: #000;\n    stroke-width: 1px;\n}\n.unknown {\n    stroke: #f0f;\n    stroke-width: 1px;\n    height: 20px;\n    width: 20px;\n}\n.acline {\n    stroke: #000;\n    stroke-width: 2px;\n}\n.backing {\n    fill: whitesmoke;\n}\n\n/* Below here are SVG elements that we don't want the user to interact with\n   therefore we disable pointer events */\n\n.svglabel {\n    visibility: hidden;\n    pointer-events: none;\n    font-size: 12px;\n    font-family: \"sans-serif\";\n    text-anchor: right;\n    fill: black;\n    stroke-width: 1px;\n    -webkit-user-select: none;  /* Chrome all / Safari all */\n    -moz-user-select: none;     /* Firefox all */\n    -ms-user-select: none;      /* IE 10+ */\n}\n.svglabel-bg {\n    visibility: hidden;\n    fill: white;\n    stroke: grey;\n    stroke-width: 1px;\n    fill-opacity: 0.85;\n}\n.svglabel-high {\n    visibility: visible;\n}\n.gridLine {\n    stroke: #aaa;\n    stroke-width: 1px;\n    pointer-events: none;\n    stroke-dasharray: 0;\n    -webkit-user-select: none;  /* Chrome all / Safari all */\n    -moz-user-select: none;     /* Firefox all */\n    -ms-user-select: none;      /* IE 10+ */\n}\n.gridLabel {\n    font-size: 5px;\n    font-family: \"sans-serif\";\n    fill: grey;\n    stroke-width: 0px;\n    pointer-events: none;\n    -webkit-user-select: none;  /* Chrome all / Safari all */\n    -moz-user-select: none;     /* Firefox all */\n    -ms-user-select: none;      /* IE 10+ */\n}\n";

  var cimmenu = /*#__PURE__*/function () {
    function cimmenu(leftnode, rightnode) {
      _classCallCheck(this, cimmenu);
      var reactMenu = React.createElement(libcimmenu.Menu);
      this.reactMenu = ReactDOM.render(reactMenu, leftnode);
      this.menuNode = leftnode;
      this.panels = {
        "file-menu-panel": this.menuNode.querySelector("#file-menu-panel"),
        "diagramsPanel": this.menuNode.querySelector("#diagram-menu-panel"),
        "componentsPanel": this.menuNode.querySelector("#components-menu-panel"),
        "attributesPanel": rightnode
      };
      this.diagramId = null;
      this.templateJson = null;
      this.populateFileLinks();
      cimmenu.setCimmenu(this);
      this.cimsvg = false;
      this.contextMenu = new contextmenu(this.menuNode.querySelector("#context-menu"), "context-menu");
      this.addCss(leftnode, css);
    }
    _createClass(cimmenu, [{
      key: "addCss",
      value: function addCss(htmlNode, css) {
        var docu = svg.ownerDocument;
        var pinturaStyleTags = docu.querySelectorAll("style.pintura");
        if (pinturaStyleTags.length < 1) {
          this.style = docu.createElement("style");
          this.style.type = "text/css";
          this.style.classList.add("pintura");
          this.style.setAttribute("title", "cimsvg-style");
          var head = docu.head;
          if (head === undefined) {
            console.error("Failed to get head from document.");
          }
          docu.head.appendChild(this.style);
          if (this.style.styleSheet) {
            this.style.styleSheet.cssText = css;
          } else {
            this.style.appendChild(docu.createTextNode(css));
          }
        }
      }
    }, {
      key: "cimsvgFunction",
      value: function cimsvgFunction(func) {
        try {
          if (this.cimsvg !== undefined) {
            func();
          }
        } catch (e) {
          console.error(e);
        }
      }
    }, {
      key: "setCimsvg",
      value: function setCimsvg(cimsvg) {
        this.cimsvg = cimsvg;
        this.contextMenu.setCimsvg(cimsvg);
        this.reactMenu.setCimsvg(cimsvg);
      }
    }, {
      key: "checkBaseJson",
      value: function checkBaseJson(baseJson) {
        Object.keys(baseJson).forEach(function (component) {
          var shortName = component.substr(4);
          var cgmesObject = cgmes["src_" + shortName + "_js"];
          if (cgmesObject) {
            var read = cgmesObject.read;
            var componentMap = baseJson[component];
            Object.keys(componentMap).forEach(function (componentInstance) {
              read(componentMap[componentInstance]);
            });
          } else {
            common.emptylog("Cannot find [", shortName, "] in class list.");
          }
        });
      }
    }, {
      key: "applyTemplate",
      value: function applyTemplate(data, templateName) {
        if (templateName in templates) {
          var template = templates[templateName];
          return template(data);
        } else {
          return "";
        }
      }
    }, {
      key: "addEventListeners",
      value: function addEventListeners(bodyNode) {
        var _this = this;
        bodyNode.addEventListener("contextmenu", function (mouseEvent) {
          if (mouseEvent.preventDefault !== undefined) {
            mouseEvent.preventDefault();
          }
          if (mouseEvent.stopPropagation !== undefined) {
            mouseEvent.stopPropagation();
          }
        });
        bodyNode.addEventListener("keyup", function (keyEvent) {
          if (keyEvent.keyCode === 27) {
            _this.toggleMenuOff();
          }
        });
      }
    }, {
      key: "processRightClick",
      value: function processRightClick(evt) {
        var svgComponentGroup = evt.target.parentElement.parentElement.parentElement.parentElement;
        var id = svgComponentGroup.id;
        var type = svgComponentGroup.getAttribute("type");
        this.contextMenu.setComponent(type, id);
        var pos = {
          x: evt.clientX,
          y: evt.clientY
        };
        this.contextMenu.positionMenu(pos, "context-menu");
        this.contextMenu.toggleMenuOn("context-menu");
      }
    }, {
      key: "processLeftClick",
      value: function processLeftClick(evt) {
        var svgComponentGroup = evt.target.parentElement.parentElement.parentElement.parentElement;
        if (svgComponentGroup) {
          var id = svgComponentGroup.id;
          var type = svgComponentGroup.getAttribute("type");
          var diagramId = svgComponentGroup.getAttribute("diagram-id");
          if (diagramId && type && id) {
            this.redrawMenu(diagramId, type, id);
          }
        }
        this.contextMenu.toggleMenuOff();
      }
    }, {
      key: "redrawMenu",
      value: function redrawMenu(diagramId, type, id) {
        this.diagramId = diagramId;
        this.populateAttributes(type, id);
      }
    }, {
      key: "getContextMenu",
      value: function getContextMenu() {
        return this.contextMenu;
      }
    }, {
      key: "update",
      value: function update(templateJson) {
        this.templateJson = templateJson;
        this.populateDiagramComponents();
      }
    }, {
      key: "updateButtonInPanel",
      value: function updateButtonInPanel(panelName, buttonId, value) {
        var panel = this.panels[panelName];
        if (panel && !panel.classList.contains("invisible")) {
          var button = panel.querySelector(buttonId);
          if (button) {
            button.innerHTML = value;
          } else {
            console.error("Cannot update unfound button");
          }
        }
      }
    }, {
      key: "populateFileLinks",
      value: function populateFileLinks() {
        templates.handlebars_menu_json;
        this.panels["file-menu-panel"].querySelectorAll("#fileopen").forEach(function (elem) {
          elem.addEventListener("change", cimmenu.readFile, false);
        });
      }
    }, {
      key: "showFileMenu",
      value: function showFileMenu(evt) {
        evt.stopPropagation();
      }
    }, {
      key: "populateDiagramComponents",
      value: function populateDiagramComponents() {
        if (Object.keys(this.templateJson["Diagram"]).length > 0) {
          this.reactMenu.updateDiagramMenuLinks(this.templateJson["Diagram"]);
        }
        if (Object.keys(this.templateJson["CoordinateSystem"]).length > 0) {
          this.reactMenu.updateDiagramMenuLinks(this.templateJson["CoordinateSystem"]);
        }
      }
    }, {
      key: "componentInstanceSelected",
      value: function componentInstanceSelected(htmlNode, typeName, componentId) {
        this.populateAttributes(typeName, componentId);
      }
    }, {
      key: "populateAttributesIdOnly",
      value: function populateAttributesIdOnly(node, cimVersion, id) {
        var _this2 = this;
        this.cimsvgFunction(function () {
          var type = _this2.cimsvg.getObjectTypeUsingId(id);
          if (type !== undefined) {
            cimmenu.populateAttributes(node, type, cimVersion, id);
          } else {
            console.error("Can't establish type for id: " + id);
          }
        });
      }
    }, {
      key: "populateAttributes",
      value: function populateAttributes(type, id) {
        var _this3 = this;
        this.cimsvgFunction(function () {
          _this3.populate(_this3.panels.attributesPanel, type, _this3.cimsvg.getCimVersionFolder(), id);
        });
      }
    }, {
      key: "findPossibleClasses",
      value: function findPossibleClasses(matchingComponents, subClassList) {
        var shortenedTypeName = matchingComponents.requestedType.substring(0, 4) === 'cim:' ? matchingComponents.requestedType.substring(4) : matchingComponents.requestedType;
        var possibleClasses = [shortenedTypeName].concat(subClassList);
        matchingComponents.aggregates = this.getAggregateComponentsList(matchingComponents.requestedType, possibleClasses).aggregates;
        var targetRdfId;
        if (matchingComponents.value && matchingComponents.value["rdf:resource"]) {
          targetRdfId = matchingComponents.value["rdf:resource"].substr(1);
        } else {
          targetRdfId = matchingComponents.value;
        }
        for (var index in matchingComponents.aggregates) {
          if (matchingComponents.aggregates[index].rdfid == targetRdfId) {
            matchingComponents.aggregates[index].selected = 'selected';
          }
        }
        if (matchingComponents.classType == "Terminal") {
          for (var _index in matchingComponents.aggregates) {
            if (matchingComponents.aggregates[_index].attribute == "cim:Terminal.ConductingEquipment") {
              matchingComponents.aggregates[_index].disabled = 'disabled';
            }
          }
        }
        return matchingComponents;
      }
    }, {
      key: "getAggregateComponentMenuCGMES",
      value: function getAggregateComponentMenuCGMES(details) {
        var updateMenu = "";
        var jsObject = 'src_' + details.type.substring(4) + '_js';
        if (jsObject in cgmes) {
          var render = cgmes[jsObject].renderAsAttribute;
          var subClassList = cgmes[jsObject].subClassList();
          var dropdownId = common.generateUUID();
          if (details.type !== undefined) {
            var value = this.cimsvg.getValueOf(details.classType, details.parentId, details.attribute);
            var attributeDetails = {
              attribute: details.attribute,
              dropdownId: dropdownId,
              parentRdfid: details.parentId,
              requestedType: details.type,
              classType: details.classType,
              value: value
            };
            var matchingComponents = this.findPossibleClasses(attributeDetails, subClassList);
            common.emptylog("Rendering attribute: ", matchingComponents);
            updateMenu = render(matchingComponents);
          }
          return updateMenu;
        } else {
          console.error("Cannot find [", jsObject, "] in cgmes render table.");
          return "";
        }
      }
    }, {
      key: "getAggregateComponentMenu",
      value: function getAggregateComponentMenu(classType, parentId, rdfid, type, attribute) {
        var completeAttributeName;
        var tokens = attribute.split(['.']);
        if (tokens.length == 2) {
          if (attribute.substring(0, 4) == "cim:") {
            completeAttributeName = attribute;
          } else {
            completeAttributeName = "cim:" + attribute;
          }
        } else {
          completeAttributeName = classType + '.' + tokens[0];
        }
        if (completeAttributeName === "cim:IdentifiedObject.mRID") {
          completeAttributeName = common.pinturaRdfid();
        }
        var details = {
          classType: classType,
          parentId: parentId,
          rdfid: rdfid,
          type: type,
          attribute: completeAttributeName
        };
        if (this.cimsvg.getCimversion() === "cgmes") {
          return this.getAggregateComponentMenuCGMES(details);
        } else {
          return this.getAggregateComponentMenuCIM16(details);
        }
      }
    }, {
      key: "populate",
      value: function populate(node, type, cimVersion, id) {
        var _this4 = this;
        this.cimsvgFunction(function () {
          var baseJson = _this4.cimsvg.getBaseJson();
          if (id === "No Object" || id === "Missing rdf:resource") {
            return;
          }
          var attributes = common.safeExtract(baseJson, type, id);
          if (attributes === undefined) {
            console.error("Cannot find " + id + " in data to display id of " + type);
          } else {
            var templatePath;
            if (cimVersion === "cgmes") {
              templatePath = "src_" + type.substring(4);
              var renderClass = cgmes[templatePath + "_js"];
              if (renderClass) {
                var data = renderClass.renderAsClass(attributes, _this4);
                cimmenu.populatePanelWithData(node, data, type.substring(4) + " Attributes");
              } else {
                console.error("Couldn't find renderClass: ", templatePath, " in templates.");
              }
            } else {
              templatePath = "generated_attributes_" + cimVersion + "_" + type.substring(4);
              if (templatePath in templates) {
                var template = templates[templatePath];
                var _data = template(attributes);
                cimmenu.populatePanelWithData(node, _data, "Attributes");
              } else {
                console.error("Couldn't find templatePath: ", templatePath, " in templates.");
              }
            }
          }
        });
      }
    }, {
      key: "getAggregateComponentsList",
      value: function getAggregateComponentsList(requestedClass, types) {
        var _this5 = this;
        var aggregateComponents = {
          aggregates: [{
            rdfid: "",
            name: "Select..."
          }]
        };
        this.cimsvgFunction(function () {
          var baseJson = _this5.cimsvg.getBaseJson();
          for (var index in types) {
            var type = types[index];
            if (type.substring(0, 4) !== "cim:") {
              type = "cim:" + type;
            }
            var components = common.safeExtract(baseJson, type);
            if (components !== undefined) {
              for (var component in components) {
                aggregateComponents["aggregates"].push({
                  rdfid: components[component][common.pinturaRdfid()],
                  name: components[component][common.identifiedObjectName()],
                  type: type
                });
              }
            }
          }
        });
        return aggregateComponents;
      }
    }, {
      key: "getSelectFromDropdown",
      value: function getSelectFromDropdown(column, id) {
        return this.panels[column].querySelector("#" + id);
      }
    }], [{
      key: "readFile",
      value: function readFile(e) {
        var files = e.target.files;
        if (files) {
          var cimmenuInstance = currentCimmenu$1();
          cimmenuInstance.cimsvgFunction(function () {
            currentCimsvg().clearAllData();
          });
          cimmenuInstance.cimsvgFunction(function () {
            currentCimsvg().setFileCount(files.length);
          });
          Array.from(files).forEach(function (file) {
            if (!file) {
              return;
            }
            var reader = new FileReader();
            if (file.type == "application/zip") {
              reader.onload = function (e) {
                var contents = e.target.result;
                cimmenuInstance.cimsvgFunction(function () {
                  currentCimsvg().importZip(contents);
                });
              };
              reader.readAsArrayBuffer(file);
            } else if (file.type === "text/xml") {
              reader.onload = function (e) {
                var contents = e.target.result;
                cimmenuInstance.cimsvgFunction(function () {
                  currentCimsvg().loadFile(contents);
                });
              };
              reader.readAsText(file);
            }
          });
        }
      }
    }, {
      key: "populatePanelWithData",
      value: function populatePanelWithData(panelNode, menuItems, titleText) {
        var accordionList = panelNode.querySelectorAll(".floating-menu-list");
        accordionList.forEach(function (accordion) {
          accordion.innerHTML = menuItems;
        });
        var titleList = panelNode.querySelectorAll(".floating-panel-title");
        titleList.forEach(function (title) {
          title.innerHTML = titleText;
        });
      }
    }, {
      key: "getCimmenu",
      value: function getCimmenu() {
        return cimmenu.currentCimmenuClass;
      }
    }, {
      key: "setCimmenu",
      value: function setCimmenu(cimmenuClass) {
        cimmenu.currentCimmenuClass = cimmenuClass;
      }
    }]);
    return cimmenu;
  }();
  cimmenu.currentCimmenuClass = null;
  var currentCimmenu$1 = function currentCimmenu() {
    return cimmenu.getCimmenu();
  };

  exports.Menu = Menu;
  exports.cimmenu = cimmenu;
  exports.currentCimmenu = currentCimmenu$1;

}));
